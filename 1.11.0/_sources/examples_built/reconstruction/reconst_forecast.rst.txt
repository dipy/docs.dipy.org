
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\reconstruction\reconst_forecast.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_reconstruction_reconst_forecast.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_forecast.py:


==============================================================
Crossing invariant fiber response function with FORECAST model
==============================================================

We show how to obtain a voxel specific response function in the form of
axially symmetric tensor and the fODF using the FORECAST model from
:footcite:p:`Anderson2005`, :footcite:p:`Kaden2016a` and
:footcite:p:`Zucchelli2017`.

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 13-25

.. code-block:: Python


    import os.path as op

    import matplotlib.pyplot as plt
    import nibabel as nib
    import numpy as np

    from dipy.core.gradients import gradient_table
    from dipy.data import fetch_hbn, get_sphere
    from dipy.reconst.forecast import ForecastModel
    from dipy.viz import actor, window








.. GENERATED FROM PYTHON SOURCE LINES 26-31

Download and read the data for this tutorial. Our implementation of FORECAST
requires multi-shell `data.fetch_hbn()` provides data that was acquired using
b-values of 1000 and 2000 as part of the Healthy Brain Network study
:footcite:p:`Alexander2017` and was preprocessed and quality controlled in the
HBN-POD2 dataset :footcite:p:`RichieHalford2022`.

.. GENERATED FROM PYTHON SOURCE LINES 31-66

.. code-block:: Python


    data_path = fetch_hbn(["NDARAA948VFH"])[1]
    dwi_path = op.join(
        data_path, "derivatives", "qsiprep", "sub-NDARAA948VFH", "ses-HBNsiteRU", "dwi"
    )

    img = nib.load(
        op.join(
            dwi_path,
            "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.nii.gz",
        )
    )

    gtab = gradient_table(
        op.join(
            dwi_path,
            "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.bval",
        ),
        bvecs=op.join(
            dwi_path,
            "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.bvec",
        ),
    )

    data = np.asarray(img.dataobj)

    mask_img = nib.load(
        op.join(
            dwi_path,
            "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-brain_mask.nii.gz",
        )
    )

    brain_mask = mask_img.get_fdata()








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Let us consider only a single slice for the FORECAST fitting

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: Python


    data_small = data[:, :, 50:51]
    mask_small = brain_mask[:, :, 50:51]








.. GENERATED FROM PYTHON SOURCE LINES 73-80

Instantiate the FORECAST Model.

"sh_order_max" is the spherical harmonics order (l) used for the fODF.

dec_alg is the spherical deconvolution algorithm used for the FORECAST basis
fitting, in this case we used the Constrained Spherical Deconvolution (CSD)
algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: Python


    fm = ForecastModel(gtab, sh_order_max=6, dec_alg="CSD")








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Fit the FORECAST to the data

.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: Python


    f_fit = fm.fit(data_small, mask=mask_small)








.. GENERATED FROM PYTHON SOURCE LINES 89-92

Calculate the crossing invariant tensor indices :footcite:p:`Kaden2016a`: the
parallel diffusivity, the perpendicular diffusivity, the fractional anisotropy
and the mean diffusivity.

.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: Python


    d_par = f_fit.dpar
    d_perp = f_fit.dperp
    fa = f_fit.fractional_anisotropy()
    md = f_fit.mean_diffusivity()








.. GENERATED FROM PYTHON SOURCE LINES 99-100

Show the indices and save them in FORECAST_indices.png.

.. GENERATED FROM PYTHON SOURCE LINES 100-128

.. code-block:: Python


    fig = plt.figure(figsize=(6, 6))
    ax1 = fig.add_subplot(2, 2, 1, title="parallel diffusivity")
    ax1.set_axis_off()
    ind = ax1.imshow(
        d_par[:, :, 0].T, interpolation="nearest", origin="lower", cmap=plt.cm.gray
    )
    plt.colorbar(ind, shrink=0.6)
    ax2 = fig.add_subplot(2, 2, 2, title="perpendicular diffusivity")
    ax2.set_axis_off()
    ind = ax2.imshow(
        d_perp[:, :, 0].T, interpolation="nearest", origin="lower", cmap=plt.cm.gray
    )
    plt.colorbar(ind, shrink=0.6)
    ax3 = fig.add_subplot(2, 2, 3, title="fractional anisotropy")
    ax3.set_axis_off()
    ind = ax3.imshow(
        fa[:, :, 0].T, interpolation="nearest", origin="lower", cmap=plt.cm.gray
    )
    plt.colorbar(ind, shrink=0.6)
    ax4 = fig.add_subplot(2, 2, 4, title="mean diffusivity")
    ax4.set_axis_off()
    ind = ax4.imshow(
        md[:, :, 0].T, interpolation="nearest", origin="lower", cmap=plt.cm.gray
    )
    plt.colorbar(ind, shrink=0.6)
    plt.savefig("FORECAST_indices.png", dpi=300, bbox_inches="tight")




.. image-sg:: /examples_built/reconstruction/images/sphx_glr_reconst_forecast_001.png
   :alt: reconst forecast
   :srcset: /examples_built/reconstruction/images/sphx_glr_reconst_forecast_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-135

.. rst-class:: centered small fst-italic fw-semibold

FORECAST scalar indices.


Load an ODF reconstruction sphere

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: Python


    sphere = get_sphere(name="repulsion724")








.. GENERATED FROM PYTHON SOURCE LINES 139-140

Compute the fODFs.

.. GENERATED FROM PYTHON SOURCE LINES 140-144

.. code-block:: Python


    odf = f_fit.odf(sphere)
    print(f"fODF.shape {odf.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    fODF.shape (108, 129, 1, 724)




.. GENERATED FROM PYTHON SOURCE LINES 145-146

Display a part of the fODFs

.. GENERATED FROM PYTHON SOURCE LINES 146-154

.. code-block:: Python


    odf_actor = actor.odf_slicer(
        odf[30:60, 30:60, :], sphere=sphere, colormap="plasma", scale=0.6
    )
    scene = window.Scene()
    scene.add(odf_actor)
    window.record(scene=scene, out_path="fODFs.png", size=(600, 600), magnification=4)




.. image-sg:: /examples_built/reconstruction/images/sphx_glr_reconst_forecast_002.png
   :alt: reconst forecast
   :srcset: /examples_built/reconstruction/images/sphx_glr_reconst_forecast_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 155-165

.. rst-class:: centered small fst-italic fw-semibold

Fiber Orientation Distribution Functions, in a small ROI of the brain.


References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 167-169

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 25.376 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_forecast.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_forecast.ipynb <reconst_forecast.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_forecast.py <reconst_forecast.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
