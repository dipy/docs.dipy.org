
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\registration\syn_registration_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_registration_syn_registration_3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_registration_syn_registration_3d.py:


==========================================
Symmetric Diffeomorphic Registration in 3D
==========================================
This example explains how to register 3D volumes using the Symmetric
Normalization (SyN) algorithm proposed by :footcite:t:`Avants2008` (also
implemented in the ANTs software :footcite:p:`Avants2009`)

We will register two 3D volumes from the same modality using SyN with the Cross
-Correlation (CC) metric.

.. GENERATED FROM PYTHON SOURCE LINES 12-24

.. code-block:: Python


    import numpy as np

    from dipy.align import read_mapping, write_mapping
    from dipy.align.imaffine import AffineMap
    from dipy.align.imwarp import SymmetricDiffeomorphicRegistration
    from dipy.align.metrics import CCMetric
    from dipy.data import get_fnames
    from dipy.io.image import load_nifti
    from dipy.segment.mask import median_otsu
    from dipy.viz import regtools








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Let's fetch two b0 volumes, the first one will be the b0 from the Stanford
HARDI dataset

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: Python


    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames(name="stanford_hardi")

    stanford_b0, stanford_b0_affine = load_nifti(hardi_fname)
    stanford_b0 = np.squeeze(stanford_b0)[..., 0]








.. GENERATED FROM PYTHON SOURCE LINES 34-35

The second one will be the same b0 we used for the 2D registration tutorial

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: Python


    t1_fname, b0_fname = get_fnames(name="syn_data")
    syn_b0, syn_b0_affine = load_nifti(b0_fname)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

We first remove the skull from the b0's

.. GENERATED FROM PYTHON SOURCE LINES 41-52

.. code-block:: Python


    stanford_b0_masked, stanford_b0_mask = median_otsu(
        stanford_b0, median_radius=4, numpass=4
    )
    syn_b0_masked, syn_b0_mask = median_otsu(syn_b0, median_radius=4, numpass=4)

    static = stanford_b0_masked
    static_affine = stanford_b0_affine
    moving = syn_b0_masked
    moving_affine = syn_b0_affine








.. GENERATED FROM PYTHON SOURCE LINES 53-55

Suppose we have already done a linear registration to roughly align the two
images

.. GENERATED FROM PYTHON SOURCE LINES 55-65

.. code-block:: Python


    pre_align = np.array(
        [
            [1.02783543e00, -4.83019053e-02, -6.07735639e-02, -2.57654118e00],
            [4.34051706e-03, 9.41918267e-01, -2.66525861e-01, 3.23579799e01],
            [5.34288908e-02, 2.90262026e-01, 9.80820307e-01, -1.46216651e01],
            [0.00000000e00, 0.00000000e00, 0.00000000e00, 1.00000000e00],
        ]
    )








.. GENERATED FROM PYTHON SOURCE LINES 66-71

As we did in the 2D example, we would like to visualize (some slices of) the
two volumes by overlapping them over two channels of a color image. To do
that we need them to be sampled on the same grid, so let's first re-sample
the moving image on the static grid. We create an AffineMap to transform the
moving image towards the static image

.. GENERATED FROM PYTHON SOURCE LINES 71-82

.. code-block:: Python


    affine_map = AffineMap(
        pre_align,
        domain_grid_shape=static.shape,
        domain_grid2world=static_affine,
        codomain_grid_shape=moving.shape,
        codomain_grid2world=moving_affine,
    )

    resampled = affine_map.transform(moving)








.. GENERATED FROM PYTHON SOURCE LINES 83-84

plot the overlapped middle slices of the volumes

.. GENERATED FROM PYTHON SOURCE LINES 84-95

.. code-block:: Python


    regtools.overlay_slices(
        static,
        resampled,
        slice_index=None,
        slice_type=1,
        ltitle="Static",
        rtitle="Moving",
        fname="input_3d.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_3d_001.png
   :alt: syn registration 3d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_3d_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 96-104

.. rst-class:: centered small fst-italic fw-semibold

Static image in red on top of the pre-aligned moving image (in green).



We want to find an invertible map that transforms the moving image into the
static image. We will use the Cross-Correlation metric

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: Python


    metric = CCMetric(3)








.. GENERATED FROM PYTHON SOURCE LINES 108-113

Now we define an instance of the registration class. The SyN algorithm uses
a multi-resolution approach by building a Gaussian Pyramid. We instruct the
registration object to perform at most $[n_0, n_1, ..., n_k]$ iterations at
each level of the pyramid. The 0-th level corresponds to the finest
resolution.

.. GENERATED FROM PYTHON SOURCE LINES 113-117

.. code-block:: Python


    level_iters = [10, 10, 5]
    sdr = SymmetricDiffeomorphicRegistration(metric, level_iters=level_iters)








.. GENERATED FROM PYTHON SOURCE LINES 118-122

Execute the optimization, which returns a DiffeomorphicMap object,
that can be used to register images back and forth between the static and
moving domains. We provide the pre-aligning matrix that brings the moving
image closer to the static image

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    mapping = sdr.optimize(
        static,
        moving,
        static_grid2world=static_affine,
        moving_grid2world=moving_affine,
        prealign=pre_align,
    )








.. GENERATED FROM PYTHON SOURCE LINES 132-134

Now let's warp the moving image and see if it gets similar to the static
image

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: Python


    warped_moving = mapping.transform(moving)








.. GENERATED FROM PYTHON SOURCE LINES 138-139

We plot the overlapped middle slices

.. GENERATED FROM PYTHON SOURCE LINES 139-150

.. code-block:: Python


    regtools.overlay_slices(
        static,
        warped_moving,
        slice_index=None,
        slice_type=1,
        ltitle="Static",
        rtitle="Warped moving",
        fname="warped_moving.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_3d_002.png
   :alt: syn registration 3d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_3d_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 151-160

.. rst-class:: centered small fst-italic fw-semibold

Moving image transformed under the (direct) transformation in green on top
of the static image (in red).



And we can also apply the inverse mapping to verify that the warped static
image is similar to the moving image

.. GENERATED FROM PYTHON SOURCE LINES 160-172

.. code-block:: Python


    warped_static = mapping.transform_inverse(static)
    regtools.overlay_slices(
        warped_static,
        moving,
        slice_index=None,
        slice_type=1,
        ltitle="Warped static",
        rtitle="Moving",
        fname="warped_static.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_3d_003.png
   :alt: syn registration 3d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_3d_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 173-186

.. rst-class:: centered small fst-italic fw-semibold

Static image transformed under the (inverse) transformation in red on top of
the moving image (in green). Note that the moving image has a lower
resolution.


If you wish, you can also save the transformation to a file, so that it can
be applied to other images in the future. This can be done with the
`write_mapping` function. The data in the file will be organized with shape
(X, Y, Z, 3, 2), such that the forward mapping in each voxel is in
data[i, j, k, :, 0] and the backward mapping in each voxel is in
data[i, j, k, :, 1]

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: Python


    write_mapping(mapping, "mapping.nii.gz")
    # To read the mapping back, use the `read_mapping` function
    saved_mapping = read_mapping("mapping.nii.gz", hardi_fname, b0_fname)









.. GENERATED FROM PYTHON SOURCE LINES 193-198

References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 200-202

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 41.026 seconds)


.. _sphx_glr_download_examples_built_registration_syn_registration_3d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: syn_registration_3d.ipynb <syn_registration_3d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: syn_registration_3d.py <syn_registration_3d.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
