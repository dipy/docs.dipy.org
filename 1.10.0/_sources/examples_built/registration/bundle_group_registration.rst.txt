
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/registration/bundle_group_registration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_registration_bundle_group_registration.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_registration_bundle_group_registration.py:


=============================
Groupwise Bundle Registration
=============================

This example explains how to coregister a set of bundles to a common space that
is not biased by any specific bundle. This is useful when we want to align all
the bundles but do not have a target reference space defined by an atlas
:footcite:p:`RomeroBascones2022`.

How it works
============

The bundle groupwise registration framework in DIPY relies on streamline linear
registration (SLR) :footcite:p:`Garyfallidis2015` and an iterative process.

In each iteration, bundles are shuffled and matched in pairs. Then, each pair
of bundles are simultaneously moved to a common space in between both.

After all pairs have been aligned, a group distance metric is computed as the
mean pairwise distance between all bundle pairs. With each iteration, bundles
get closer to each other and the group distance decreases.

When the reduction in the group distance reaches a tolerance level the process
ends.

To reduce computational time, by default both registration and distance
computation are performed on streamline centroids (obtained with Quickbundles)
:footcite:p:`Garyfallidis2012a`.

Example
=======

We start by importing and creating the necessary functions:

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: Python


    import logging

    from dipy.align.streamlinear import groupwise_slr
    from dipy.data import read_five_af_bundles
    from dipy.viz.streamline import show_bundles

    logging.basicConfig(level=logging.INFO)








.. GENERATED FROM PYTHON SOURCE LINES 46-50

To run groupwise registration we need to have our input bundles stored in a
list.

Here we load 5 left arcuate fasciculi and store them in a list.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python


    bundles = read_five_af_bundles()








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Let's now visualize our input bundles:

.. GENERATED FROM PYTHON SOURCE LINES 55-68

.. code-block:: Python


    colors = [
        [0.91, 0.26, 0.35],
        [0.99, 0.50, 0.38],
        [0.99, 0.88, 0.57],
        [0.69, 0.85, 0.64],
        [0.51, 0.51, 0.63],
    ]

    show_bundles(
        bundles, interactive=False, colors=colors, save_as="before_group_registration.png"
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_bundle_group_registration_001.png
   :alt: bundle group registration
   :srcset: /examples_built/registration/images/sphx_glr_bundle_group_registration_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-77

.. rst-class:: centered small fst-italic fw-semibold

Bundles before registration.


They are in native space and, therefore, not aligned.

Now running groupwise registration is as simple as:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    bundles_reg, aff, d = groupwise_slr(bundles, verbose=True)








.. GENERATED FROM PYTHON SOURCE LINES 81-83

Finally, we visualize the registered bundles to confirm that they are now in
a common space:

.. GENERATED FROM PYTHON SOURCE LINES 83-91

.. code-block:: Python


    show_bundles(
        bundles_reg,
        interactive=False,
        colors=colors,
        save_as="after_group_registration.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_bundle_group_registration_002.png
   :alt: bundle group registration
   :srcset: /examples_built/registration/images/sphx_glr_bundle_group_registration_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-114

.. rst-class:: centered small fst-italic fw-semibold

Bundles after registration.



Extended capabilities
=====================

In addition to the registered bundles, `groupwise_slr` also returns a list
with the individual transformation matrices as well as the pairwise distances
computed in each iteration.

By changing the input arguments the user can modify the transformation (up to
affine), the number of maximum number of streamlines per bundle, the level of
clustering, or the tolerance of the method.

References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 116-118

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.249 seconds)


.. _sphx_glr_download_examples_built_registration_bundle_group_registration.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: bundle_group_registration.ipynb <bundle_group_registration.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: bundle_group_registration.py <bundle_group_registration.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: bundle_group_registration.zip <bundle_group_registration.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
