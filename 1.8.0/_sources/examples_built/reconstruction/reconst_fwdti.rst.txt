
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\reconstruction\reconst_fwdti.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_reconstruction_reconst_fwdti.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_fwdti.py:


=============================================================================
Using the free water elimination model to remove DTI free water contamination
=============================================================================

As shown previously (see
:ref:`sphx_glr_examples_built_reconstruction_reconst_dti.py`), the diffusion
tensor model is a simple way to characterize diffusion anisotropy. However,
in regions near the ventricles and parenchyma, anisotropy can be
underestimated by partial volume effects of the cerebral spinal fluid (CSF).
This free water contamination can particularly corrupt Diffusion Tensor
Imaging analysis of microstructural changes when different groups of subjects
show different brain morphology (e.g. brain ventricle enlargement associated
with brain tissue atrophy that occurs in several brain pathologies and aging).

A way to remove this free water influences is to expand the DTI model to take
into account an extra compartment representing the contributions of free water
diffusion [Pasternak2009]_. The expression of the expanded DTI model is shown
below:

.. math::

    S(\mathbf{g}, b) = S_0(1-f)e^{-b\mathbf{g}^T \mathbf{D}
    \mathbf{g}}+S_0fe^{-b D_{iso}}

where $\mathbf{g}$ and $b$ are diffusion gradient direction and weighted (more
information see :ref:`sphx_glr_examples_built_reconstruction_reconst_dti.py`),
$S(\mathbf{g}, b)$ is thebdiffusion-weighted signal measured, $S_0$ is the
signal in a measurement with no diffusion weighting, $\mathbf{D}$ is the
diffusion tensor, $f$ the volume fraction of the free water component, and
$D_{iso}$ is the isotropic value of the free water diffusion (normally set to
$3.0    imes 10^{-3} mm^{2}s^{-1}$).

In this example, we show how to process a diffusion weighting dataset using an
adapted version of the free water elimination proposed by [Hoy2014]_.

The full details of Dipy's free water DTI implementation was published in
[Henriques2017]_. Please cite this work if you use this algorithm.

Let's start by importing the relevant modules:

.. GENERATED FROM PYTHON SOURCE LINES 42-52

.. code-block:: Python


    import numpy as np
    import dipy.reconst.fwdti as fwdti
    import dipy.reconst.dti as dti
    import matplotlib.pyplot as plt
    from dipy.data import fetch_hbn
    import os.path as op
    import nibabel as nib
    from dipy.core.gradients import gradient_table








.. GENERATED FROM PYTHON SOURCE LINES 53-56

Without spatial constrains the free water elimination model cannot be solved
in data acquired from one non-zero b-value [Hoy2014]_. Therefore, here we
download a dataset that was acquired with multiple b-values.

.. GENERATED FROM PYTHON SOURCE LINES 56-74

.. code-block:: Python


    data_path = fetch_hbn(["NDARAA948VFH"])[1]
    dwi_path = op.join(
           data_path, "derivatives", "qsiprep", "sub-NDARAA948VFH",
           "ses-HBNsiteRU", "dwi")

    img = nib.load(op.join(
           dwi_path,
           "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.nii.gz"))

    gtab = gradient_table(
           op.join(dwi_path,
    "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.bval"),
           op.join(dwi_path,
    "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.bvec"))

    data = np.asarray(img.dataobj)








.. GENERATED FROM PYTHON SOURCE LINES 75-78

The free water DTI model can take some minutes to process the full data set.
Thus, we use a brain mask that was calculated during pre-processing, to
remove the background of the image and avoid unnecessary calculations.

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: Python


    mask_img = nib.load(
           op.join(dwi_path,
    "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-brain_mask.nii.gz"))








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Moreover, for illustration purposes we process only one slice of the data.

.. GENERATED FROM PYTHON SOURCE LINES 85-91

.. code-block:: Python


    mask = mask_img.get_fdata()

    data_small = data[:, :, 50:51]
    mask_small = mask[:, :, 50:51]








.. GENERATED FROM PYTHON SOURCE LINES 92-94

The free water elimination model fit can then be initialized by instantiating
a FreeWaterTensorModel class object:

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: Python


    fwdtimodel = fwdti.FreeWaterTensorModel(gtab)








.. GENERATED FROM PYTHON SOURCE LINES 98-100

The data can then be fitted using the ``fit`` function of the defined model
object:

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: Python


    fwdtifit = fwdtimodel.fit(data_small, mask=mask_small)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                                                                                                           | 0/5148.0 [00:00<?, ?it/s]      1%|▊                                                                                                                | 35/5148.0 [00:00<00:14, 345.62it/s]      2%|█▊                                                                                                               | 80/5148.0 [00:00<00:12, 404.34it/s]      3%|██▊                                                                                                             | 130/5148.0 [00:00<00:11, 445.85it/s]      3%|███▊                                                                                                            | 175/5148.0 [00:00<00:11, 428.81it/s]      4%|████▋                                                                                                           | 218/5148.0 [00:00<00:11, 427.64it/s]      5%|█████▋                                                                                                          | 261/5148.0 [00:00<00:11, 426.92it/s]      6%|██████▌                                                                                                         | 304/5148.0 [00:00<00:12, 400.91it/s]      7%|███████▋                                                                                                        | 351/5148.0 [00:00<00:11, 420.79it/s]      8%|████████▋                                                                                                       | 397/5148.0 [00:00<00:11, 431.47it/s]      9%|█████████▌                                                                                                      | 441/5148.0 [00:01<00:10, 433.12it/s]      9%|██████████▋                                                                                                     | 489/5148.0 [00:01<00:10, 446.03it/s]     10%|███████████▌                                                                                                    | 534/5148.0 [00:01<00:10, 433.38it/s]     11%|████████████▌                                                                                                   | 578/5148.0 [00:01<00:10, 434.55it/s]     12%|█████████████▌                                                                                                  | 622/5148.0 [00:01<00:10, 412.54it/s]     13%|██████████████▊                                                                                                 | 681/5148.0 [00:01<00:09, 462.10it/s]     14%|████████████████▏                                                                                               | 742/5148.0 [00:01<00:08, 503.92it/s]     15%|█████████████████▎                                                                                              | 793/5148.0 [00:01<00:08, 487.50it/s]     16%|██████████████████▍                                                                                             | 845/5148.0 [00:01<00:08, 495.80it/s]     17%|███████████████████▍                                                                                            | 895/5148.0 [00:01<00:08, 481.86it/s]     18%|████████████████████▌                                                                                           | 947/5148.0 [00:02<00:08, 491.68it/s]     19%|█████████████████████▋                                                                                          | 998/5148.0 [00:02<00:08, 495.71it/s]     20%|██████████████████████▌                                                                                        | 1048/5148.0 [00:02<00:08, 484.49it/s]     22%|███████████████████████▉                                                                                       | 1111/5148.0 [00:02<00:07, 525.33it/s]     23%|█████████████████████████                                                                                      | 1164/5148.0 [00:02<00:07, 522.23it/s]     24%|██████████████████████████▏                                                                                    | 1217/5148.0 [00:02<00:07, 494.20it/s]C:\Users\skoudoro\AppData\Local\Continuum\Anaconda3\envs\py310\lib\site-packages\scipy\optimize\_minpack_py.py:492: RuntimeWarning: Number of calls to function has reached maxfev = 1800.
      warnings.warn(errors[info][0], RuntimeWarning)
     25%|███████████████████████████▎                                                                                   | 1267/5148.0 [00:02<00:10, 376.56it/s]     25%|████████████████████████████▎                                                                                  | 1312/5148.0 [00:02<00:10, 360.83it/s]     26%|█████████████████████████████▏                                                                                 | 1354/5148.0 [00:03<00:10, 374.25it/s]     27%|██████████████████████████████                                                                                 | 1394/5148.0 [00:03<00:09, 379.76it/s]     28%|██████████████████████████████▉                                                                                | 1434/5148.0 [00:03<00:10, 354.28it/s]     29%|███████████████████████████████▊                                                                               | 1476/5148.0 [00:03<00:09, 370.46it/s]     29%|████████████████████████████████▋                                                                              | 1517/5148.0 [00:03<00:09, 380.28it/s]     30%|█████████████████████████████████▌                                                                             | 1557/5148.0 [00:03<00:09, 384.70it/s]     31%|██████████████████████████████████▍                                                                            | 1597/5148.0 [00:03<00:09, 387.95it/s]     32%|███████████████████████████████████▌                                                                           | 1651/5148.0 [00:03<00:08, 429.18it/s]     33%|████████████████████████████████████▌                                                                          | 1695/5148.0 [00:03<00:08, 388.24it/s]     34%|█████████████████████████████████████▌                                                                         | 1744/5148.0 [00:04<00:08, 415.04it/s]     35%|██████████████████████████████████████▌                                                                        | 1787/5148.0 [00:04<00:09, 358.01it/s]     36%|███████████████████████████████████████▋                                                                       | 1841/5148.0 [00:04<00:08, 403.46it/s]     37%|████████████████████████████████████████▊                                                                      | 1890/5148.0 [00:04<00:07, 425.84it/s]     38%|█████████████████████████████████████████▊                                                                     | 1938/5148.0 [00:04<00:07, 439.68it/s]     39%|██████████████████████████████████████████▊                                                                    | 1988/5148.0 [00:04<00:06, 455.82it/s]     40%|███████████████████████████████████████████▉                                                                   | 2035/5148.0 [00:04<00:06, 458.95it/s]     40%|████████████████████████████████████████████▉                                                                  | 2082/5148.0 [00:04<00:06, 461.36it/s]     41%|█████████████████████████████████████████████▉                                                                 | 2129/5148.0 [00:04<00:06, 449.51it/s]     42%|███████████████████████████████████████████████                                                                | 2183/5148.0 [00:05<00:06, 474.54it/s]     43%|████████████████████████████████████████████████▎                                                              | 2238/5148.0 [00:05<00:05, 495.43it/s]     44%|█████████████████████████████████████████████████▎                                                             | 2288/5148.0 [00:05<00:05, 481.44it/s]     45%|██████████████████████████████████████████████████▍                                                            | 2337/5148.0 [00:05<00:05, 469.38it/s]     46%|███████████████████████████████████████████████████▌                                                           | 2393/5148.0 [00:05<00:05, 494.35it/s]     48%|████████████████████████████████████████████████████▉                                                          | 2455/5148.0 [00:05<00:05, 529.22it/s]     49%|██████████████████████████████████████████████████████                                                         | 2509/5148.0 [00:05<00:05, 487.61it/s]     50%|███████████████████████████████████████████████████████▏                                                       | 2559/5148.0 [00:05<00:07, 367.67it/s]     51%|████████████████████████████████████████████████████████▏                                                      | 2604/5148.0 [00:06<00:06, 385.68it/s]     51%|█████████████████████████████████████████████████████████                                                      | 2647/5148.0 [00:06<00:07, 337.65it/s]     52%|██████████████████████████████████████████████████████████▏                                                    | 2696/5148.0 [00:06<00:06, 372.13it/s]     53%|███████████████████████████████████████████████████████████▏                                                   | 2744/5148.0 [00:06<00:06, 397.76it/s]     54%|████████████████████████████████████████████████████████████▏                                                  | 2793/5148.0 [00:06<00:05, 420.96it/s]     55%|█████████████████████████████████████████████████████████████▏                                                 | 2838/5148.0 [00:06<00:05, 416.39it/s]     56%|██████████████████████████████████████████████████████████████▏                                                | 2882/5148.0 [00:06<00:05, 410.47it/s]     57%|███████████████████████████████████████████████████████████████▏                                               | 2932/5148.0 [00:06<00:05, 434.41it/s]     58%|████████████████████████████████████████████████████████████████▎                                              | 2985/5148.0 [00:06<00:04, 460.52it/s]     59%|█████████████████████████████████████████████████████████████████▌                                             | 3041/5148.0 [00:07<00:04, 488.24it/s]     60%|██████████████████████████████████████████████████████████████████▋                                            | 3091/5148.0 [00:07<00:04, 450.92it/s]     61%|███████████████████████████████████████████████████████████████████▉                                           | 3149/5148.0 [00:07<00:04, 485.37it/s]     62%|█████████████████████████████████████████████████████████████████████▎                                         | 3212/5148.0 [00:07<00:03, 524.58it/s]     64%|██████████████████████████████████████████████████████████████████████▊                                        | 3285/5148.0 [00:07<00:03, 581.84it/s]     65%|████████████████████████████████████████████████████████████████████████                                       | 3345/5148.0 [00:07<00:03, 538.34it/s]     66%|█████████████████████████████████████████████████████████████████████████▌                                     | 3412/5148.0 [00:07<00:03, 573.26it/s]     67%|██████████████████████████████████████████████████████████████████████████▊                                    | 3471/5148.0 [00:07<00:03, 547.42it/s]     69%|████████████████████████████████████████████████████████████████████████████                                   | 3527/5148.0 [00:07<00:03, 519.73it/s]     70%|█████████████████████████████████████████████████████████████████████████████▏                                 | 3580/5148.0 [00:08<00:03, 484.53it/s]     71%|██████████████████████████████████████████████████████████████████████████████▎                                | 3630/5148.0 [00:08<00:03, 439.83it/s]     71%|███████████████████████████████████████████████████████████████████████████████▎                               | 3676/5148.0 [00:08<00:03, 444.64it/s]     72%|████████████████████████████████████████████████████████████████████████████████▎                              | 3722/5148.0 [00:08<00:03, 384.56it/s]     74%|█████████████████████████████████████████████████████████████████████████████████▌                             | 3785/5148.0 [00:08<00:03, 414.69it/s]     74%|██████████████████████████████████████████████████████████████████████████████████▌                            | 3828/5148.0 [00:08<00:03, 397.77it/s]     75%|███████████████████████████████████████████████████████████████████████████████████▍                           | 3871/5148.0 [00:08<00:03, 387.76it/s]     76%|████████████████████████████████████████████████████████████████████████████████████▍                          | 3916/5148.0 [00:08<00:03, 402.77it/s]     77%|█████████████████████████████████████████████████████████████████████████████████████▎                         | 3957/5148.0 [00:09<00:03, 371.85it/s]     78%|██████████████████████████████████████████████████████████████████████████████████████▎                        | 4003/5148.0 [00:09<00:02, 393.82it/s]     79%|███████████████████████████████████████████████████████████████████████████████████████▏                       | 4044/5148.0 [00:09<00:02, 388.91it/s]     79%|████████████████████████████████████████████████████████████████████████████████████████▏                      | 4090/5148.0 [00:09<00:02, 407.41it/s]     80%|█████████████████████████████████████████████████████████████████████████████████████████                      | 4132/5148.0 [00:09<00:02, 407.70it/s]     81%|██████████████████████████████████████████████████████████████████████████████████████████                     | 4175/5148.0 [00:09<00:02, 412.88it/s]     82%|███████████████████████████████████████████████████████████████████████████████████████████▎                   | 4234/5148.0 [00:09<00:01, 462.65it/s]     84%|████████████████████████████████████████████████████████████████████████████████████████████▋                  | 4300/5148.0 [00:09<00:01, 518.52it/s]     85%|██████████████████████████████████████████████████████████████████████████████████████████████                 | 4363/5148.0 [00:09<00:01, 549.82it/s]     86%|███████████████████████████████████████████████████████████████████████████████████████████████▎               | 4419/5148.0 [00:09<00:01, 535.22it/s]     87%|████████████████████████████████████████████████████████████████████████████████████████████████▍              | 4473/5148.0 [00:10<00:01, 519.84it/s]     88%|█████████████████████████████████████████████████████████████████████████████████████████████████▌             | 4526/5148.0 [00:10<00:01, 493.07it/s]     89%|██████████████████████████████████████████████████████████████████████████████████████████████████▋            | 4576/5148.0 [00:10<00:01, 493.82it/s]     90%|███████████████████████████████████████████████████████████████████████████████████████████████████▋           | 4626/5148.0 [00:10<00:01, 480.48it/s]     91%|████████████████████████████████████████████████████████████████████████████████████████████████████▊          | 4675/5148.0 [00:10<00:01, 468.65it/s]     92%|█████████████████████████████████████████████████████████████████████████████████████████████████████▊         | 4723/5148.0 [00:10<00:00, 445.83it/s]     93%|██████████████████████████████████████████████████████████████████████████████████████████████████████▊        | 4770/5148.0 [00:10<00:00, 451.79it/s]     94%|███████████████████████████████████████████████████████████████████████████████████████████████████████▊       | 4816/5148.0 [00:10<00:00, 440.67it/s]     94%|████████████████████████████████████████████████████████████████████████████████████████████████████████▉      | 4864/5148.0 [00:10<00:00, 450.66it/s]     95%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▊     | 4910/5148.0 [00:11<00:00, 439.64it/s]     96%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▊    | 4955/5148.0 [00:11<00:00, 431.54it/s]     97%|███████████████████████████████████████████████████████████████████████████████████████████████████████████▊   | 5003/5148.0 [00:11<00:00, 444.25it/s]     98%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▉  | 5055/5148.0 [00:11<00:00, 464.95it/s]     99%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████ | 5104/5148.0 [00:11<00:00, 471.17it/s]    100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5148/5148.0 [00:11<00:00, 444.51it/s]




.. GENERATED FROM PYTHON SOURCE LINES 104-108

This 2-steps procedure will create a FreeWaterTensorFit object which contains
all the diffusion tensor statistics free for free water contamination. Below
we extract the fractional anisotropy (FA) and the mean diffusivity (MD) of
the free water diffusion tensor.

.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: Python


    FA = fwdtifit.fa
    MD = fwdtifit.md








.. GENERATED FROM PYTHON SOURCE LINES 113-115

For comparison we also compute the same standard measures processed by the
standard DTI model

.. GENERATED FROM PYTHON SOURCE LINES 115-123

.. code-block:: Python


    dtimodel = dti.TensorModel(gtab)

    dtifit = dtimodel.fit(data_small, mask=mask_small)

    dti_FA = dtifit.fa
    dti_MD = dtifit.md








.. GENERATED FROM PYTHON SOURCE LINES 124-131

Below the FA values for both free water elimination DTI model and standard
DTI model are plotted in panels A and B, while the respective MD values are
plotted in panels D and E. For a better visualization of the effect of the
free water correction, the differences between these two metrics are shown
in panels C and E. In addition to the standard diffusion statistics, the
estimated volume fraction of the free water contamination is shown on
panel G.

.. GENERATED FROM PYTHON SOURCE LINES 131-169

.. code-block:: Python


    fig1, ax = plt.subplots(2, 4, figsize=(12, 6),
                            subplot_kw={'xticks': [], 'yticks': []})

    fig1.subplots_adjust(hspace=0.3, wspace=0.05)
    ax.flat[0].imshow(FA[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=1)
    ax.flat[0].set_title('A) fwDTI FA')
    ax.flat[1].imshow(dti_FA[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=1)
    ax.flat[1].set_title('B) standard DTI FA')

    FAdiff = abs(FA[:, :, 0] - dti_FA[:, :, 0])
    ax.flat[2].imshow(FAdiff.T, cmap='gray', origin='lower', vmin=0, vmax=1)
    ax.flat[2].set_title('C) FA difference')

    ax.flat[3].axis('off')

    ax.flat[4].imshow(MD[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=2.5e-3)
    ax.flat[4].set_title('D) fwDTI MD')
    ax.flat[5].imshow(dti_MD[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=2.5e-3)
    ax.flat[5].set_title('E) standard DTI MD')

    MDdiff = abs(MD[:, :, 0] - dti_MD[:, :, 0])
    ax.flat[6].imshow(MDdiff.T, origin='lower', cmap='gray', vmin=0, vmax=2.5e-3)
    ax.flat[6].set_title('F) MD difference')

    F = fwdtifit.f

    ax.flat[7].imshow(F[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=1)
    ax.flat[7].set_title('G) free water volume')

    plt.show()
    fig1.savefig('In_vivo_free_water_DTI_and_standard_DTI_measures.png')




.. image-sg:: /examples_built/reconstruction/images/sphx_glr_reconst_fwdti_001.png
   :alt: reconst fwdti
   :srcset: /examples_built/reconstruction/images/sphx_glr_reconst_fwdti_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 170-190

.. rst-class:: centered small fst-italic fw-semibold

In vivo diffusion measures obtain from the free water DTI and standard
DTI. The values of Fractional Anisotropy for the free water DTI model and
standard DTI model and their difference are shown in the upper panels (A-C),
while respective MD values are shown in the lower panels (D-F). In addition
the free water volume fraction estimated from the fwDTI model is shown in
panel G.


From the figure, one can observe that the free water elimination model
produces in general higher values of FA and lower values of MD than the
standard DTI model. These differences in FA and MD estimation are expected
due to the suppression of the free water isotropic diffusion components.
Unexpected high amplitudes of FA are however observed in the periventricular
gray matter. This is a known artefact of regions associated to voxels with
high water volume fraction (i.e. voxels containing basically CSF). We are
able to remove this problematic voxels by excluding all FA values
associated with measured volume fractions above a reasonable threshold
of 0.7:

.. GENERATED FROM PYTHON SOURCE LINES 190-194

.. code-block:: Python


    FA[F > 0.7] = 0
    dti_FA[F > 0.7] = 0








.. GENERATED FROM PYTHON SOURCE LINES 195-197

Above we reproduce the plots of the in vivo FA from the two DTI fits and
where we can see that the inflated FA values were practically removed:

.. GENERATED FROM PYTHON SOURCE LINES 197-216

.. code-block:: Python


    fig1, ax = plt.subplots(1, 3, figsize=(9, 3),
                            subplot_kw={'xticks': [], 'yticks': []})

    fig1.subplots_adjust(hspace=0.3, wspace=0.05)
    ax.flat[0].imshow(FA[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=1)
    ax.flat[0].set_title('A) fwDTI FA')
    ax.flat[1].imshow(dti_FA[:, :, 0].T, origin='lower',
                      cmap='gray', vmin=0, vmax=1)
    ax.flat[1].set_title('B) standard DTI FA')

    FAdiff = abs(FA[:, :, 0] - dti_FA[:, :, 0])
    ax.flat[2].imshow(FAdiff.T, cmap='gray', origin='lower', vmin=0, vmax=1)
    ax.flat[2].set_title('C) FA difference')

    plt.show()
    fig1.savefig('In_vivo_free_water_DTI_and_standard_DTI_corrected.png')




.. image-sg:: /examples_built/reconstruction/images/sphx_glr_reconst_fwdti_002.png
   :alt: reconst fwdti
   :srcset: /examples_built/reconstruction/images/sphx_glr_reconst_fwdti_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 217-240

.. rst-class:: centered small fst-italic fw-semibold

In vivo FA measures obtain from the free water DTI (A) and standard
DTI (B) and their difference (C). Problematic inflated FA values of the
images were removed by dismissing voxels above a volume fraction threshold
of 0.7.


References
----------
.. [Pasternak2009] Pasternak, O., Sochen, N., Gur, Y., Intrator, N., Assaf,
   Y., 2009. Free water elimination and mapping from diffusion MRI. Magn.
   Reson. Med. 62(3): 717-30. doi: 10.1002/mrm.22055.

.. [Hoy2014] Hoy, A.R., Koay, C.G., Kecskemeti, S.R., Alexander, A.L., 2014.
   Optimization of a free water elimination two-compartmental model for
   diffusion tensor imaging. NeuroImage 103, 323-333. doi:
   10.1016/j.neuroimage.2014.09.053

.. [Henriques2017] Henriques, R.N., Rokem, A., Garyfallidis, E., St-Jean, S.,
   Peterson E.T., Correia, M.M., 2017. [Re] Optimization of a free water
   elimination two-compartment model for diffusion tensor imaging.
   ReScience volume 3, issue 1, article number 2

.. GENERATED FROM PYTHON SOURCE LINES 242-244

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.550 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_fwdti.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_fwdti.ipynb <reconst_fwdti.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_fwdti.py <reconst_fwdti.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
