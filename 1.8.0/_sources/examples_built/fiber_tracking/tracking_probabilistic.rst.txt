
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/fiber_tracking/tracking_probabilistic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_probabilistic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_probabilistic.py:


=====================================================
An introduction to the Probabilistic Direction Getter
=====================================================

Probabilistic fiber tracking is a way of reconstructing white matter
connections using diffusion MR imaging. Like deterministic fiber tracking, the
probabilistic approach follows the trajectory of a possible pathway step by
step starting at a seed, however, unlike deterministic tracking, the tracking
direction at each point along the path is chosen at random from a distribution.
The distribution at each point is different and depends on the observed
diffusion data at that point. The distribution of tracking directions at each
point can be represented as a probability mass function (PMF) if the possible
tracking directions are restricted to discrete numbers of well distributed
points on a sphere.

This example is an extension of the
:ref:`sphx_glr_examples_built_quick_start_tracking_introduction_eudx.py`
example. We'll begin by repeating a few steps from that example, loading the
data and fitting a Constrained Spherical Deconvolution (CSD) model.

.. GENERATED FROM PYTHON SOURCE LINES 22-55

.. code-block:: default


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury


    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)

    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/58788 [00:00<?, ?it/s]      1%|          | 706/58788 [00:00<00:08, 7055.48it/s]      3%|▎         | 1621/58788 [00:00<00:06, 8285.47it/s]      4%|▍         | 2589/58788 [00:00<00:06, 8920.82it/s]      6%|▌         | 3517/58788 [00:00<00:06, 9061.73it/s]      8%|▊         | 4489/58788 [00:00<00:05, 9296.67it/s]      9%|▉         | 5461/58788 [00:00<00:05, 9436.75it/s]     11%|█         | 6435/58788 [00:00<00:05, 9535.27it/s]     13%|█▎        | 7413/58788 [00:00<00:05, 9612.56it/s]     14%|█▍        | 8408/58788 [00:00<00:05, 9717.26it/s]     16%|█▌        | 9381/58788 [00:01<00:05, 9719.72it/s]     18%|█▊        | 10354/58788 [00:01<00:04, 9720.15it/s]     19%|█▉        | 11329/58788 [00:01<00:04, 9729.02it/s]     21%|██        | 12330/58788 [00:01<00:04, 9811.11it/s]     23%|██▎       | 13331/58788 [00:01<00:04, 9868.27it/s]     24%|██▍       | 14318/58788 [00:01<00:04, 9839.18it/s]     26%|██▌       | 15302/58788 [00:01<00:04, 9799.41it/s]     28%|██▊       | 16314/58788 [00:01<00:04, 9893.27it/s]     29%|██▉       | 17307/58788 [00:01<00:04, 9902.10it/s]     31%|███       | 18298/58788 [00:01<00:04, 9880.22it/s]     33%|███▎      | 19287/58788 [00:02<00:03, 9881.61it/s]     34%|███▍      | 20276/58788 [00:02<00:03, 9837.96it/s]     36%|███▌      | 21260/58788 [00:02<00:03, 9809.72it/s]     38%|███▊      | 22252/58788 [00:02<00:03, 9839.92it/s]     40%|███▉      | 23237/58788 [00:02<00:03, 9790.86it/s]     41%|████      | 24224/58788 [00:02<00:03, 9812.78it/s]     43%|████▎     | 25220/58788 [00:02<00:03, 9854.44it/s]     45%|████▍     | 26206/58788 [00:02<00:03, 9782.58it/s]     46%|████▌     | 27185/58788 [00:02<00:03, 9718.15it/s]     48%|████▊     | 28157/58788 [00:02<00:03, 9648.87it/s]     50%|████▉     | 29123/58788 [00:03<00:03, 9524.52it/s]     51%|█████     | 30076/58788 [00:03<00:03, 9425.81it/s]     53%|█████▎    | 31024/58788 [00:03<00:02, 9439.38it/s]     54%|█████▍    | 31975/58788 [00:03<00:02, 9456.28it/s]     56%|█████▌    | 32935/58788 [00:03<00:02, 9496.67it/s]     58%|█████▊    | 33897/58788 [00:03<00:02, 9530.13it/s]     59%|█████▉    | 34873/58788 [00:03<00:02, 9593.85it/s]     61%|██████    | 35853/58788 [00:03<00:02, 9653.16it/s]     63%|██████▎   | 36820/58788 [00:03<00:02, 9657.08it/s]     64%|██████▍   | 37805/58788 [00:03<00:02, 9714.68it/s]     66%|██████▌   | 38788/58788 [00:04<00:02, 9746.89it/s]     68%|██████▊   | 39777/58788 [00:04<00:01, 9788.21it/s]     69%|██████▉   | 40770/58788 [00:04<00:01, 9829.70it/s]     71%|███████   | 41763/58788 [00:04<00:01, 9856.79it/s]     73%|███████▎  | 42749/58788 [00:04<00:01, 9805.83it/s]     74%|███████▍  | 43731/58788 [00:04<00:01, 9808.13it/s]     76%|███████▌  | 44712/58788 [00:04<00:01, 9741.73it/s]     78%|███████▊  | 45688/58788 [00:04<00:01, 9746.57it/s]     79%|███████▉  | 46690/58788 [00:04<00:01, 9826.29it/s]     81%|████████  | 47673/58788 [00:04<00:01, 9807.78it/s]     83%|████████▎ | 48654/58788 [00:05<00:01, 9770.90it/s]     84%|████████▍ | 49648/58788 [00:05<00:00, 9818.99it/s]     86%|████████▌ | 50630/58788 [00:05<00:00, 9795.46it/s]     88%|████████▊ | 51610/58788 [00:05<00:00, 9762.94it/s]     89%|████████▉ | 52587/58788 [00:05<00:00, 9705.91it/s]     91%|█████████ | 53563/58788 [00:05<00:00, 9721.75it/s]     93%|█████████▎| 54536/58788 [00:05<00:00, 9707.39it/s]     94%|█████████▍| 55517/58788 [00:05<00:00, 9735.13it/s]     96%|█████████▌| 56491/58788 [00:05<00:00, 9650.93it/s]     98%|█████████▊| 57457/58788 [00:05<00:00, 9547.08it/s]     99%|█████████▉| 58413/58788 [00:06<00:00, 9423.81it/s]    100%|██████████| 58788/58788 [00:06<00:00, 9622.38it/s]




.. GENERATED FROM PYTHON SOURCE LINES 56-57

We use the GFA of the CSA model to build a stopping criterion.

.. GENERATED FROM PYTHON SOURCE LINES 57-65

.. code-block:: default



    from dipy.reconst.shm import CsaOdfModel

    csa_model = CsaOdfModel(gtab, sh_order=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 66-74

The Fiber Orientation Distribution (FOD) of the CSD model estimates the
distribution of small fiber bundles within each voxel. We can use this
distribution for probabilistic fiber tracking. One way to do this is to
represent the FOD using a discrete sphere. This discrete FOD can be used by the
``ProbabilisticDirectionGetter`` as a PMF for sampling tracking directions. We
need to clip the FOD to use it as a PMF because the latter cannot have negative
values. Ideally, the FOD should be strictly positive, but because of noise
and/or model failures sometimes it can have negative values.

.. GENERATED FROM PYTHON SOURCE LINES 74-98

.. code-block:: default



    from dipy.direction import ProbabilisticDirectionGetter
    from dipy.data import small_sphere
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk

    fod = csd_fit.odf(small_sphere)
    pmf = fod.clip(min=0)
    prob_dg = ProbabilisticDirectionGetter.from_pmf(pmf, max_angle=30.,
                                                    sphere=small_sphere)
    streamline_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                         affine, step_size=.5)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_dg_pmf.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_dg_pmf.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)



.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_001.png
   :alt: tracking probabilistic
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. figure:: tractogram_probabilistic_dg_pmf.png
   :align: center

   **Corpus Callosum using probabilistic direction getter from PMF**

.. GENERATED FROM PYTHON SOURCE LINES 105-115

One disadvantage of using a discrete PMF to represent possible tracking
directions is that it tends to take up a lot of memory (RAM). The size of the
PMF, the FOD in this case, must be equal to the number of possible tracking
directions on the hemisphere, and every voxel has a unique PMF. In this case
the data is ``(81, 106, 76)`` and ``small_sphere`` has 181 directions so the
FOD is ``(81, 106, 76, 181)``. One way to avoid sampling the PMF and holding it
in memory is to build the direction getter directly from the spherical harmonic
(SH) representation of the FOD. By using this approach, we can also use a
larger sphere, like ``default_sphere`` which has 362 directions on the
hemisphere, without having to worry about memory limitations.

.. GENERATED FROM PYTHON SOURCE LINES 115-135

.. code-block:: default



    from dipy.data import default_sphere

    prob_dg = ProbabilisticDirectionGetter.from_shcoeff(csd_fit.shm_coeff,
                                                        max_angle=30.,
                                                        sphere=default_sphere)
    streamline_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                         affine, step_size=.5)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_dg_sh.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_dg_sh.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)



.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_002.png
   :alt: tracking probabilistic
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. figure:: tractogram_probabilistic_dg_sh.png
   :align: center

   **Corpus Callosum using probabilistic direction getter from SH**

.. GENERATED FROM PYTHON SOURCE LINES 142-145

Not all model fits have the ``shm_coeff`` attribute because not all models use
this basis to represent the data internally. However we can fit the ODF of any
model to the spherical harmonic basis using the ``peaks_from_model`` function.

.. GENERATED FROM PYTHON SOURCE LINES 145-169

.. code-block:: default



    from dipy.direction import peaks_from_model

    peaks = peaks_from_model(csd_model, data, default_sphere, .5, 25,
                             mask=white_matter, return_sh=True, parallel=True,
                             num_processes=2)
    fod_coeff = peaks.shm_coeff

    prob_dg = ProbabilisticDirectionGetter.from_shcoeff(fod_coeff, max_angle=30.,
                                                        sphere=default_sphere)
    streamline_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                         affine, step_size=.5)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_dg_sh_pfm.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_dg_sh_pfm.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)



.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_003.png
   :alt: tracking probabilistic
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 170-175

.. figure:: tractogram_probabilistic_dg_sh_pfm.png
   :align: center

   **Corpus Callosum using probabilistic direction getter from SH (
   peaks_from_model)**

.. GENERATED FROM PYTHON SOURCE LINES 177-179

.. include:: ../links_names.inc


.. GENERATED FROM PYTHON SOURCE LINES 181-183

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 32.926 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_probabilistic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_probabilistic.py <tracking_probabilistic.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_probabilistic.ipynb <tracking_probabilistic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
