
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/preprocessing/gradients_spheres.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_preprocessing_gradients_spheres.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_preprocessing_gradients_spheres.py:


=====================
Gradients and Spheres
=====================

This example shows how you can create gradient tables and sphere objects using
DIPY_.

Usually, as we saw in :ref:`sphx_glr_examples_built_quick_start_quick_start.py`,
you load your b-values and b-vectors from disk and then you can create your own
gradient table. But this time let's say that you are an MR physicist and you
want to design a new gradient scheme or you are a scientist who wants to
simulate many different gradient schemes.

Now let's assume that you are interested in creating a multi-shell
acquisition with 2-shells, one at b=1000 $s/mm^2$ and one at b=2500 $s/mm^2$.
For both shells let's say that we want a specific number of gradients (64) and
we want to have the points on the sphere evenly distributed.

This is possible using the ``disperse_charges`` which is an implementation of
electrostatic repulsion [Jones1999]_.

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    import numpy as np
    from dipy.core.sphere import disperse_charges, Sphere, HemiSphere








.. GENERATED FROM PYTHON SOURCE LINES 28-30

We can first create some random points on a ``HemiSphere`` using spherical polar
coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default



    n_pts = 64
    theta = np.pi * np.random.rand(n_pts)
    phi = 2 * np.pi * np.random.rand(n_pts)
    hsph_initial = HemiSphere(theta=theta, phi=phi)








.. GENERATED FROM PYTHON SOURCE LINES 38-40

Next, we call ``disperse_charges`` which will iteratively move the points so that
the electrostatic potential energy is minimized.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default



    hsph_updated, potential = disperse_charges(hsph_initial, 5000)








.. GENERATED FROM PYTHON SOURCE LINES 45-47

In ``hsph_updated`` we have the updated ``HemiSphere`` with the points nicely
distributed on the hemisphere. Let's visualize them.

.. GENERATED FROM PYTHON SOURCE LINES 47-67

.. code-block:: default



    from dipy.viz import window, actor

    # Enables/disables interactive visualization
    interactive = False

    scene = window.Scene()
    scene.SetBackground(1, 1, 1)

    scene.add(actor.point(hsph_initial.vertices, window.colors.red,
                          point_radius=0.05))
    scene.add(actor.point(hsph_updated.vertices, window.colors.green,
                          point_radius=0.05))

    print('Saving illustration as initial_vs_updated.png')
    window.record(scene, out_path='initial_vs_updated.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_001.png
   :alt: gradients spheres
   :srcset: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saving illustration as initial_vs_updated.png




.. GENERATED FROM PYTHON SOURCE LINES 68-77

.. figure:: initial_vs_updated.png
   :align: center

   Illustration of electrostatic repulsion of red points which become
   green points.

We can also create a sphere from the hemisphere and show it in the
following way.


.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: default



    sph = Sphere(xyz=np.vstack((hsph_updated.vertices, -hsph_updated.vertices)))

    scene.clear()
    scene.add(actor.point(sph.vertices, window.colors.green, point_radius=0.05))

    print('Saving illustration as full_sphere.png')
    window.record(scene, out_path='full_sphere.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_002.png
   :alt: gradients spheres
   :srcset: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saving illustration as full_sphere.png




.. GENERATED FROM PYTHON SOURCE LINES 90-98

.. figure:: full_sphere.png
   :align: center

   Full sphere.

It is time to create the Gradients. For this purpose we will use the
function ``gradient_table`` and fill it with the ``hsph_updated`` vectors that
we created above.

.. GENERATED FROM PYTHON SOURCE LINES 98-105

.. code-block:: default



    from dipy.core.gradients import gradient_table

    vertices = hsph_updated.vertices
    values = np.ones(vertices.shape[0])








.. GENERATED FROM PYTHON SOURCE LINES 106-109

We need two stacks of ``vertices``, one for every shell, and we need two sets
of b-values, one at 1000 $s/mm^2$, and one at 2500 $s/mm^2$, as we discussed
previously.

.. GENERATED FROM PYTHON SOURCE LINES 109-114

.. code-block:: default



    bvecs = np.vstack((vertices, vertices))
    bvals = np.hstack((1000 * values, 2500 * values))








.. GENERATED FROM PYTHON SOURCE LINES 115-116

We can also add some b0s. Let's add one at the beginning and one at the end.

.. GENERATED FROM PYTHON SOURCE LINES 116-123

.. code-block:: default



    bvecs = np.insert(bvecs, (0, bvecs.shape[0]), np.array([0, 0, 0]), axis=0)
    bvals = np.insert(bvals, (0, bvals.shape[0]), 0)

    print(bvals)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [   0. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.    0.]




.. GENERATED FROM PYTHON SOURCE LINES 124-140

::

    [    0.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.
      1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.
      1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.
      1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.
      1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.
      1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.  1000.
      1000.  1000.  1000.  1000.  1000.  2500.  2500.  2500.  2500.  2500.
      2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.
      2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.
      2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.
      2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.
      2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.
      2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.  2500.     0.]


.. GENERATED FROM PYTHON SOURCE LINES 141-145

.. code-block:: default



    print(bvecs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 3.15648148e-01  3.96653949e-01  8.61992976e-01]
     [-7.92500873e-01  2.96146650e-01  5.33141189e-01]
     [-4.40950862e-01 -5.42065561e-01  7.15351148e-01]
     [-1.81424084e-01 -1.01045073e-01  9.78199977e-01]
     [ 1.89130944e-01  8.49575968e-01  4.92392283e-01]
     [-3.89783100e-01  4.13774682e-01  8.22714803e-01]
     [-2.81423596e-01  1.70696898e-01  9.44279264e-01]
     [-6.42099735e-01 -2.97981663e-01  7.06339054e-01]
     [-5.23235494e-01 -3.45938553e-02  8.51485692e-01]
     [-2.85273506e-01 -8.85712224e-01  3.66241563e-01]
     [ 5.68230772e-01 -8.06019564e-01  1.65669104e-01]
     [ 2.92058858e-01 -5.61326543e-01  7.74347555e-01]
     [-1.11628880e-01  8.53574085e-01  5.08871570e-01]
     [ 7.03390712e-01  3.93681525e-01  5.91824605e-01]
     [-6.24988505e-05 -3.55542284e-01  9.34660195e-01]
     [-5.80632225e-01  7.85819050e-01  2.12966289e-01]
     [-9.32356007e-01  1.22782138e-01  3.40054148e-01]
     [ 9.98992178e-01  3.46941922e-02  2.84770195e-02]
     [-3.43204317e-02  5.48937322e-01  8.35158623e-01]
     [-6.47082419e-01  5.71041827e-01  5.05168859e-01]
     [-7.15488883e-01 -6.55585770e-01  2.41418633e-01]
     [-2.58244550e-02 -6.13618976e-01  7.89179859e-01]
     [ 1.76564778e-02  2.93552695e-01  9.55779820e-01]
     [ 2.77725800e-01 -9.17958100e-01  2.83233661e-01]
     [-2.05255621e-01 -7.51391513e-01  6.27121140e-01]
     [-9.58566010e-01  2.78290675e-01  6.08728633e-02]
     [ 5.06917064e-01  8.52503687e-01  1.27563920e-01]
     [ 5.63024349e-01 -4.79882937e-01  6.72841697e-01]
     [-5.30609142e-01 -7.05050926e-01  4.70486057e-01]
     [-6.09488103e-02 -9.97963095e-01  1.88389091e-02]
     [ 5.31527195e-01 -7.13363567e-01  4.56717925e-01]
     [-9.16209588e-01 -3.76366604e-01  1.37506982e-01]
     [-2.77359884e-01  6.47561074e-01  7.09743721e-01]
     [ 8.31221703e-01 -5.11530800e-01  2.17730845e-01]
     [-8.40161873e-01  4.76965999e-01  2.58130709e-01]
     [-4.27252533e-01  7.63327780e-01  4.84547184e-01]
     [ 8.80683390e-01  2.17978461e-01  4.20573605e-01]
     [ 1.93145071e-01  9.51942054e-01  2.37700037e-01]
     [ 2.87800384e-01 -2.76254055e-01  9.16981263e-01]
     [ 4.77895613e-01  5.97589989e-01  6.43818288e-01]
     [-3.26651926e-01 -3.40283700e-01  8.81762736e-01]
     [ 7.78157655e-01  5.46853663e-01  3.08904088e-01]
     [ 9.49647159e-01 -2.10481889e-01  2.32094051e-01]
     [ 9.37974339e-01  3.13738787e-01  1.47553761e-01]
     [-9.30915122e-01 -1.62291294e-01  3.27198063e-01]
     [-7.59985848e-01  6.49737818e-01  1.61950172e-02]
     [ 3.03151996e-01 -9.52933543e-01  4.06568106e-03]
     [-7.87195476e-01 -5.00176605e-02  6.14671877e-01]
     [-7.67732722e-01 -4.40695880e-01  4.65159767e-01]
     [-2.35699903e-01  9.37876826e-01  2.54622493e-01]
     [-6.14432233e-01  2.59488631e-01  7.45076292e-01]
     [ 5.00599752e-03 -9.23990746e-01  3.82382062e-01]
     [ 3.78176177e-01  4.93635874e-02  9.24416581e-01]
     [-3.91224709e-01 -9.12781330e-01  1.17360433e-01]
     [ 7.48567167e-01  6.62230854e-01  3.31284426e-02]
     [ 1.90664681e-01  6.74729365e-01  7.13012808e-01]
     [ 8.83803293e-01 -8.32727396e-02  4.60388303e-01]
     [ 7.66641835e-01 -4.22643594e-01  4.83355655e-01]
     [ 7.33993474e-01 -1.76825167e-02  6.78926291e-01]
     [ 5.70548142e-01  2.23753076e-01  7.90195785e-01]
     [ 5.38148408e-01  7.43712808e-01  3.96594945e-01]
     [ 1.00768071e-01  1.12452894e-02  9.94846390e-01]
     [ 5.62504123e-01 -2.07032932e-01  8.00453919e-01]
     [ 2.18714655e-01 -7.82819862e-01  5.82543529e-01]
     [ 3.15648148e-01  3.96653949e-01  8.61992976e-01]
     [-7.92500873e-01  2.96146650e-01  5.33141189e-01]
     [-4.40950862e-01 -5.42065561e-01  7.15351148e-01]
     [-1.81424084e-01 -1.01045073e-01  9.78199977e-01]
     [ 1.89130944e-01  8.49575968e-01  4.92392283e-01]
     [-3.89783100e-01  4.13774682e-01  8.22714803e-01]
     [-2.81423596e-01  1.70696898e-01  9.44279264e-01]
     [-6.42099735e-01 -2.97981663e-01  7.06339054e-01]
     [-5.23235494e-01 -3.45938553e-02  8.51485692e-01]
     [-2.85273506e-01 -8.85712224e-01  3.66241563e-01]
     [ 5.68230772e-01 -8.06019564e-01  1.65669104e-01]
     [ 2.92058858e-01 -5.61326543e-01  7.74347555e-01]
     [-1.11628880e-01  8.53574085e-01  5.08871570e-01]
     [ 7.03390712e-01  3.93681525e-01  5.91824605e-01]
     [-6.24988505e-05 -3.55542284e-01  9.34660195e-01]
     [-5.80632225e-01  7.85819050e-01  2.12966289e-01]
     [-9.32356007e-01  1.22782138e-01  3.40054148e-01]
     [ 9.98992178e-01  3.46941922e-02  2.84770195e-02]
     [-3.43204317e-02  5.48937322e-01  8.35158623e-01]
     [-6.47082419e-01  5.71041827e-01  5.05168859e-01]
     [-7.15488883e-01 -6.55585770e-01  2.41418633e-01]
     [-2.58244550e-02 -6.13618976e-01  7.89179859e-01]
     [ 1.76564778e-02  2.93552695e-01  9.55779820e-01]
     [ 2.77725800e-01 -9.17958100e-01  2.83233661e-01]
     [-2.05255621e-01 -7.51391513e-01  6.27121140e-01]
     [-9.58566010e-01  2.78290675e-01  6.08728633e-02]
     [ 5.06917064e-01  8.52503687e-01  1.27563920e-01]
     [ 5.63024349e-01 -4.79882937e-01  6.72841697e-01]
     [-5.30609142e-01 -7.05050926e-01  4.70486057e-01]
     [-6.09488103e-02 -9.97963095e-01  1.88389091e-02]
     [ 5.31527195e-01 -7.13363567e-01  4.56717925e-01]
     [-9.16209588e-01 -3.76366604e-01  1.37506982e-01]
     [-2.77359884e-01  6.47561074e-01  7.09743721e-01]
     [ 8.31221703e-01 -5.11530800e-01  2.17730845e-01]
     [-8.40161873e-01  4.76965999e-01  2.58130709e-01]
     [-4.27252533e-01  7.63327780e-01  4.84547184e-01]
     [ 8.80683390e-01  2.17978461e-01  4.20573605e-01]
     [ 1.93145071e-01  9.51942054e-01  2.37700037e-01]
     [ 2.87800384e-01 -2.76254055e-01  9.16981263e-01]
     [ 4.77895613e-01  5.97589989e-01  6.43818288e-01]
     [-3.26651926e-01 -3.40283700e-01  8.81762736e-01]
     [ 7.78157655e-01  5.46853663e-01  3.08904088e-01]
     [ 9.49647159e-01 -2.10481889e-01  2.32094051e-01]
     [ 9.37974339e-01  3.13738787e-01  1.47553761e-01]
     [-9.30915122e-01 -1.62291294e-01  3.27198063e-01]
     [-7.59985848e-01  6.49737818e-01  1.61950172e-02]
     [ 3.03151996e-01 -9.52933543e-01  4.06568106e-03]
     [-7.87195476e-01 -5.00176605e-02  6.14671877e-01]
     [-7.67732722e-01 -4.40695880e-01  4.65159767e-01]
     [-2.35699903e-01  9.37876826e-01  2.54622493e-01]
     [-6.14432233e-01  2.59488631e-01  7.45076292e-01]
     [ 5.00599752e-03 -9.23990746e-01  3.82382062e-01]
     [ 3.78176177e-01  4.93635874e-02  9.24416581e-01]
     [-3.91224709e-01 -9.12781330e-01  1.17360433e-01]
     [ 7.48567167e-01  6.62230854e-01  3.31284426e-02]
     [ 1.90664681e-01  6.74729365e-01  7.13012808e-01]
     [ 8.83803293e-01 -8.32727396e-02  4.60388303e-01]
     [ 7.66641835e-01 -4.22643594e-01  4.83355655e-01]
     [ 7.33993474e-01 -1.76825167e-02  6.78926291e-01]
     [ 5.70548142e-01  2.23753076e-01  7.90195785e-01]
     [ 5.38148408e-01  7.43712808e-01  3.96594945e-01]
     [ 1.00768071e-01  1.12452894e-02  9.94846390e-01]
     [ 5.62504123e-01 -2.07032932e-01  8.00453919e-01]
     [ 2.18714655e-01 -7.82819862e-01  5.82543529e-01]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 146-168

::

    [[ 0.          0.          0.        ]
     [-0.80451777 -0.16877559  0.56944355]
     [ 0.32822557 -0.94355999  0.04430036]
     [-0.23584135 -0.96241331  0.13468285]
     [-0.39207424 -0.73505312  0.55314981]
     [-0.32539386 -0.16751384  0.93062235]
     [-0.82043195 -0.39411534  0.41420347]
     [ 0.65741493  0.74947875  0.07802061]
     [ 0.88853765  0.45303621  0.07251925]
     [ 0.39638642 -0.15185138  0.90543855]
                     ...
     [ 0.10175269  0.08197111  0.99142681]
     [ 0.50577702 -0.37862345  0.77513476]
     [ 0.42845026  0.40155296  0.80943535]
     [ 0.26939707  0.81103868  0.51927014]
     [-0.48938584 -0.43780086  0.75420946]
     [ 0.          0.          0.        ]]

Both b-values and b-vectors look correct. Let's now create the
``GradientTable``.

.. GENERATED FROM PYTHON SOURCE LINES 169-175

.. code-block:: default



    gtab = gradient_table(bvals, bvecs)

    scene.clear()








.. GENERATED FROM PYTHON SOURCE LINES 176-178

We can also visualize the gradients. Let's color the first shell blue and
the second shell cyan.

.. GENERATED FROM PYTHON SOURCE LINES 178-193

.. code-block:: default



    colors_b1000 = window.colors.blue * np.ones(vertices.shape)
    colors_b2500 = window.colors.cyan * np.ones(vertices.shape)
    colors = np.vstack((colors_b1000, colors_b2500))
    colors = np.insert(colors, (0, colors.shape[0]), np.array([0, 0, 0]), axis=0)
    colors = np.ascontiguousarray(colors)

    scene.add(actor.point(gtab.gradients, colors, point_radius=100))

    print('Saving illustration as gradients.png')
    window.record(scene, out_path='gradients.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_003.png
   :alt: gradients spheres
   :srcset: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saving illustration as gradients.png




.. GENERATED FROM PYTHON SOURCE LINES 194-208

.. figure:: gradients.png
   :align: center

   Diffusion gradients.

References
----------

.. [Jones1999] Jones, DK. et al. Optimal strategies for measuring diffusion in
   anisotropic systems by magnetic resonance imaging, Magnetic Resonance in
   Medicine, vol 42, no 3, 515-525, 1999.

.. include:: ../links_names.inc


.. GENERATED FROM PYTHON SOURCE LINES 210-212

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.630 seconds)


.. _sphx_glr_download_examples_built_preprocessing_gradients_spheres.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: gradients_spheres.py <gradients_spheres.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: gradients_spheres.ipynb <gradients_spheres.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
