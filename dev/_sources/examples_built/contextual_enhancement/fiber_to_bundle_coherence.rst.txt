
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/contextual_enhancement/fiber_to_bundle_coherence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_contextual_enhancement_fiber_to_bundle_coherence.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_contextual_enhancement_fiber_to_bundle_coherence.py:


==================================
Fiber to bundle coherence measures
==================================

This demo presents the fiber to bundle coherence (FBC) quantitative
measure of the alignment of each fiber with the surrounding fiber bundles
[Meesters2016]_. These measures are useful in 'cleaning' the results of
tractography algorithms, since low FBCs indicate which fibers are isolated and
poorly aligned with their neighbors, as shown in the figure below.

.. _fiber_to_bundle_coherence:

.. figure:: /_static/images/examples/fbc_illustration.png
   :scale: 60 %
   :align: center

   On the left this figure illustrates (in 2D) the contribution of two fiber
   points to the kernel density estimator. The kernel density estimator is the
   sum over all such locally aligned kernels. The local fiber to bundle
   coherence, shown on the right, color-coded for each fiber, is obtained by
   evaluating the kernel density estimator along the fibers. One spurious
   fiber is present which is isolated and badly aligned with the other fibers,
   and can be identified by a low LFBC value in the region where it deviates
   from the bundle. Figure adapted from [Portegies2015]_.

Here we implement FBC measures based on kernel density estimation in the
non-flat 5D position-orientation domain. First we compute the kernel density
estimator induced by the full lifted output (defined in the space of positions
and orientations) of the tractography. Then, the Local FBC (LFBC) is the
result of evaluating the estimator along each element of the lifted fiber.
A whole fiber measure, the relative FBC (RFBC), is calculated
by the minimum of the moving average LFBC along the fiber.
Details of the computation of FBC can be found in [Portegies2015]_.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

The FBC measures are evaluated on the Stanford HARDI dataset
(150 orientations, b=2000 $s/mm^2$) which is one of the standard example
datasets in DIPY_.

.. GENERATED FROM PYTHON SOURCE LINES 42-77

.. code-block:: default



    # Enables/disables interactive visualization
    interactive = False

    import numpy as np
    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames
    from dipy.io.image import load_nifti_data, load_nifti
    from dipy.io.gradients import read_bvals_bvecs

    # Fix seed
    np.random.seed(1)

    # Read data
    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')
    t1_fname = get_fnames('stanford_t1')

    data, affine = load_nifti(hardi_fname)
    labels = load_nifti_data(label_fname)
    t1_data = load_nifti_data(t1_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)



    # Select a relevant part of the data (left hemisphere)
    # Coordinates given in x bounds, y bounds, z bounds
    dshape = data.shape[:-1]
    xa, xb, ya, yb, za, zb = [15, 42, 10, 65, 18, 65]
    data_small = data[xa:xb, ya:yb, za:zb]
    selectionmask = np.zeros(dshape, 'bool')
    selectionmask[xa:xb, ya:yb, za:zb] = True








.. GENERATED FROM PYTHON SOURCE LINES 78-83

The data is first fitted to the Constant Solid Angle (CDA) ODF Model. CSA is a
good choice to estimate general fractional anisotropy (GFA), which the stopping
criterion can use to restrict fiber tracking to those areas where the ODF
shows significant restricted diffusion, thus creating a region-of-interest in
which the computations are done.

.. GENERATED FROM PYTHON SOURCE LINES 83-101

.. code-block:: default



    # Perform CSA
    from dipy.reconst.shm import CsaOdfModel
    from dipy.data import default_sphere
    from dipy.direction import peaks_from_model

    csa_model = CsaOdfModel(gtab, sh_order=6)
    csa_peaks = peaks_from_model(csa_model, data, default_sphere,
                                 relative_peak_threshold=.6,
                                 min_separation_angle=45,
                                 mask=selectionmask)

    # Stopping Criterion
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion

    stopping_criterion = ThresholdStoppingCriterion(csa_peaks.gfa, 0.25)








.. GENERATED FROM PYTHON SOURCE LINES 102-107

In order to perform probabilistic fiber tracking we first fit the data to the
Constrained Spherical Deconvolution (CSD) model in DIPY. This model represents
each voxel in the data set as a collection of small white matter fibers with
different orientations. The density of fibers along each orientation is known
as the Fiber Orientation Distribution (FOD), used in the fiber tracking.

.. GENERATED FROM PYTHON SOURCE LINES 107-128

.. code-block:: default



    # Perform CSD on the original data
    from dipy.reconst.csdeconv import auto_response_ssst
    from dipy.reconst.csdeconv import ConstrainedSphericalDeconvModel

    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response)
    csd_fit = csd_model.fit(data_small)
    csd_fit_shm = np.lib.pad(csd_fit.shm_coeff, ((xa, dshape[0]-xb),
                                                 (ya, dshape[1]-yb),
                                                 (za, dshape[2]-zb),
                                                 (0, 0)), 'constant')

    # Probabilistic direction getting for fiber tracking
    from dipy.direction import ProbabilisticDirectionGetter

    prob_dg = ProbabilisticDirectionGetter.from_shcoeff(csd_fit_shm,
                                                        max_angle=30.,
                                                        sphere=default_sphere)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/69795 [00:00<?, ?it/s]      1%|          | 514/69795 [00:00<00:13, 5137.90it/s]      1%|▏         | 1028/69795 [00:00<00:14, 4835.14it/s]      2%|▏         | 1513/69795 [00:00<00:14, 4744.49it/s]      3%|▎         | 1989/69795 [00:00<00:14, 4697.35it/s]      4%|▎         | 2479/69795 [00:00<00:14, 4767.65it/s]      4%|▍         | 2990/69795 [00:00<00:13, 4879.81it/s]      5%|▍         | 3479/69795 [00:00<00:13, 4797.71it/s]      6%|▌         | 3960/69795 [00:00<00:13, 4796.79it/s]      6%|▋         | 4441/69795 [00:00<00:13, 4725.92it/s]      7%|▋         | 4926/69795 [00:01<00:13, 4761.94it/s]      8%|▊         | 5421/69795 [00:01<00:13, 4816.25it/s]      8%|▊         | 5903/69795 [00:01<00:13, 4771.86it/s]      9%|▉         | 6381/69795 [00:01<00:13, 4717.72it/s]     10%|▉         | 6854/69795 [00:01<00:13, 4715.44it/s]     10%|█         | 7327/69795 [00:01<00:13, 4719.18it/s]     11%|█         | 7811/69795 [00:01<00:13, 4751.29it/s]     12%|█▏        | 8304/69795 [00:01<00:12, 4803.04it/s]     13%|█▎        | 8785/69795 [00:01<00:12, 4761.60it/s]     13%|█▎        | 9276/69795 [00:01<00:12, 4803.82it/s]     14%|█▍        | 9766/69795 [00:02<00:12, 4828.48it/s]     15%|█▍        | 10253/69795 [00:02<00:12, 4840.74it/s]     15%|█▌        | 10755/69795 [00:02<00:12, 4892.45it/s]     16%|█▌        | 11245/69795 [00:02<00:12, 4798.81it/s]     17%|█▋        | 11726/69795 [00:02<00:12, 4794.78it/s]     17%|█▋        | 12206/69795 [00:02<00:12, 4782.83it/s]     18%|█▊        | 12685/69795 [00:02<00:11, 4770.10it/s]     19%|█▉        | 13186/69795 [00:02<00:11, 4840.61it/s]     20%|█▉        | 13671/69795 [00:02<00:11, 4826.54it/s]     20%|██        | 14156/69795 [00:02<00:11, 4831.52it/s]     21%|██        | 14641/69795 [00:03<00:11, 4833.16it/s]     22%|██▏       | 15125/69795 [00:03<00:11, 4819.46it/s]     22%|██▏       | 15607/69795 [00:03<00:11, 4788.20it/s]     23%|██▎       | 16086/69795 [00:03<00:11, 4730.37it/s]     24%|██▎       | 16564/69795 [00:03<00:11, 4743.02it/s]     24%|██▍       | 17053/69795 [00:03<00:11, 4785.45it/s]     25%|██▌       | 17540/69795 [00:03<00:10, 4809.24it/s]     26%|██▌       | 18022/69795 [00:03<00:10, 4788.82it/s]     27%|██▋       | 18510/69795 [00:03<00:10, 4813.15it/s]     27%|██▋       | 19001/69795 [00:03<00:10, 4841.38it/s]     28%|██▊       | 19492/69795 [00:04<00:10, 4859.94it/s]     29%|██▊       | 19987/69795 [00:04<00:10, 4886.84it/s]     29%|██▉       | 20476/69795 [00:04<00:10, 4882.00it/s]     30%|███       | 20969/69795 [00:04<00:09, 4892.92it/s]     31%|███       | 21459/69795 [00:04<00:10, 4821.80it/s]     31%|███▏      | 21942/69795 [00:04<00:09, 4811.68it/s]     32%|███▏      | 22439/69795 [00:04<00:09, 4858.37it/s]     33%|███▎      | 22925/69795 [00:04<00:09, 4847.04it/s]     34%|███▎      | 23421/69795 [00:04<00:09, 4880.68it/s]     34%|███▍      | 23910/69795 [00:04<00:09, 4827.92it/s]     35%|███▍      | 24393/69795 [00:05<00:09, 4728.61it/s]     36%|███▌      | 24867/69795 [00:05<00:09, 4690.53it/s]     36%|███▋      | 25337/69795 [00:05<00:09, 4637.91it/s]     37%|███▋      | 25818/69795 [00:05<00:09, 4686.21it/s]     38%|███▊      | 26305/69795 [00:05<00:09, 4737.38it/s]     38%|███▊      | 26780/69795 [00:05<00:09, 4720.96it/s]     39%|███▉      | 27253/69795 [00:05<00:09, 4723.08it/s]     40%|███▉      | 27733/69795 [00:05<00:08, 4744.72it/s]     40%|████      | 28218/69795 [00:05<00:08, 4775.64it/s]     41%|████      | 28709/69795 [00:05<00:08, 4813.93it/s]     42%|████▏     | 29191/69795 [00:06<00:08, 4780.10it/s]     43%|████▎     | 29670/69795 [00:06<00:08, 4722.37it/s]     43%|████▎     | 30162/69795 [00:06<00:08, 4778.38it/s]     44%|████▍     | 30648/69795 [00:06<00:08, 4801.67it/s]     45%|████▍     | 31129/69795 [00:06<00:08, 4801.28it/s]     45%|████▌     | 31610/69795 [00:06<00:08, 4761.37it/s]     46%|████▌     | 32087/69795 [00:06<00:08, 4665.22it/s]     47%|████▋     | 32568/69795 [00:06<00:07, 4707.55it/s]     47%|████▋     | 33072/69795 [00:06<00:07, 4803.76it/s]     48%|████▊     | 33553/69795 [00:07<00:07, 4799.85it/s]     49%|████▉     | 34041/69795 [00:07<00:07, 4821.58it/s]     49%|████▉     | 34524/69795 [00:07<00:07, 4816.12it/s]     50%|█████     | 35023/69795 [00:07<00:07, 4864.98it/s]     51%|█████     | 35536/69795 [00:07<00:06, 4942.34it/s]     52%|█████▏    | 36031/69795 [00:07<00:06, 4886.53it/s]     52%|█████▏    | 36520/69795 [00:07<00:06, 4871.18it/s]     53%|█████▎    | 37008/69795 [00:07<00:06, 4837.95it/s]     54%|█████▎    | 37497/69795 [00:07<00:06, 4852.22it/s]     54%|█████▍    | 37990/69795 [00:07<00:06, 4875.30it/s]     55%|█████▌    | 38478/69795 [00:08<00:06, 4851.33it/s]     56%|█████▌    | 38964/69795 [00:08<00:06, 4832.39it/s]     57%|█████▋    | 39448/69795 [00:08<00:06, 4786.00it/s]     57%|█████▋    | 39927/69795 [00:08<00:06, 4742.68it/s]     58%|█████▊    | 40426/69795 [00:08<00:06, 4815.26it/s]     59%|█████▊    | 40918/69795 [00:08<00:05, 4843.97it/s]     59%|█████▉    | 41403/69795 [00:08<00:05, 4840.08it/s]     60%|██████    | 41896/69795 [00:08<00:05, 4866.65it/s]     61%|██████    | 42383/69795 [00:08<00:05, 4784.54it/s]     61%|██████▏   | 42888/69795 [00:08<00:05, 4861.26it/s]     62%|██████▏   | 43393/69795 [00:09<00:05, 4915.04it/s]     63%|██████▎   | 43900/69795 [00:09<00:05, 4960.46it/s]     64%|██████▎   | 44401/69795 [00:09<00:05, 4973.07it/s]     64%|██████▍   | 44899/69795 [00:09<00:05, 4833.41it/s]     65%|██████▌   | 45401/69795 [00:09<00:04, 4886.47it/s]     66%|██████▌   | 45911/69795 [00:09<00:04, 4946.86it/s]     66%|██████▋   | 46407/69795 [00:09<00:04, 4929.73it/s]     67%|██████▋   | 46907/69795 [00:09<00:04, 4947.49it/s]     68%|██████▊   | 47403/69795 [00:09<00:04, 4845.60it/s]     69%|██████▊   | 47895/69795 [00:09<00:04, 4866.71it/s]     69%|██████▉   | 48401/69795 [00:10<00:04, 4923.59it/s]     70%|███████   | 48909/69795 [00:10<00:04, 4969.14it/s]     71%|███████   | 49407/69795 [00:10<00:04, 4951.75it/s]     71%|███████▏  | 49903/69795 [00:10<00:04, 4869.76it/s]     72%|███████▏  | 50391/69795 [00:10<00:04, 4800.95it/s]     73%|███████▎  | 50882/69795 [00:10<00:03, 4831.66it/s]     74%|███████▎  | 51369/69795 [00:10<00:03, 4841.78it/s]     74%|███████▍  | 51866/69795 [00:10<00:03, 4876.92it/s]     75%|███████▌  | 52354/69795 [00:10<00:03, 4806.31it/s]     76%|███████▌  | 52835/69795 [00:10<00:03, 4766.03it/s]     76%|███████▋  | 53329/69795 [00:11<00:03, 4816.05it/s]     77%|███████▋  | 53823/69795 [00:11<00:03, 4849.54it/s]     78%|███████▊  | 54311/69795 [00:11<00:03, 4857.58it/s]     79%|███████▊  | 54797/69795 [00:11<00:03, 4828.10it/s]     79%|███████▉  | 55280/69795 [00:11<00:03, 4713.25it/s]     80%|███████▉  | 55752/69795 [00:11<00:03, 4680.58it/s]     81%|████████  | 56237/69795 [00:11<00:02, 4727.43it/s]     81%|████████▏ | 56730/69795 [00:11<00:02, 4786.06it/s]     82%|████████▏ | 57209/69795 [00:11<00:02, 4767.99it/s]     83%|████████▎ | 57687/69795 [00:11<00:02, 4686.80it/s]     83%|████████▎ | 58157/69795 [00:12<00:02, 4631.11it/s]     84%|████████▍ | 58641/69795 [00:12<00:02, 4690.65it/s]     85%|████████▍ | 59111/69795 [00:12<00:02, 4681.81it/s]     85%|████████▌ | 59606/69795 [00:12<00:02, 4758.61it/s]     86%|████████▌ | 60088/69795 [00:12<00:02, 4775.24it/s]     87%|████████▋ | 60566/69795 [00:12<00:01, 4650.13it/s]     87%|████████▋ | 61032/69795 [00:12<00:01, 4630.05it/s]     88%|████████▊ | 61507/69795 [00:12<00:01, 4664.54it/s]     89%|████████▉ | 61976/69795 [00:12<00:01, 4671.71it/s]     90%|████████▉ | 62479/69795 [00:13<00:01, 4776.01it/s]     90%|█████████ | 62957/69795 [00:13<00:01, 4737.76it/s]     91%|█████████ | 63432/69795 [00:13<00:01, 4688.17it/s]     92%|█████████▏| 63902/69795 [00:13<00:01, 4670.88it/s]     92%|█████████▏| 64372/69795 [00:13<00:01, 4677.34it/s]     93%|█████████▎| 64874/69795 [00:13<00:01, 4777.49it/s]     94%|█████████▎| 65352/69795 [00:13<00:00, 4749.68it/s]     94%|█████████▍| 65828/69795 [00:13<00:00, 4702.65it/s]     95%|█████████▍| 66302/69795 [00:13<00:00, 4712.27it/s]     96%|█████████▌| 66794/69795 [00:13<00:00, 4773.56it/s]     96%|█████████▋| 67283/69795 [00:14<00:00, 4805.80it/s]     97%|█████████▋| 67769/69795 [00:14<00:00, 4820.26it/s]     98%|█████████▊| 68252/69795 [00:14<00:00, 4675.78it/s]     98%|█████████▊| 68721/69795 [00:14<00:00, 4650.95it/s]     99%|█████████▉| 69204/69795 [00:14<00:00, 4703.04it/s]    100%|█████████▉| 69683/69795 [00:14<00:00, 4726.52it/s]    100%|██████████| 69795/69795 [00:14<00:00, 4792.98it/s]




.. GENERATED FROM PYTHON SOURCE LINES 129-133

The optic radiation is reconstructed by tracking fibers from the calcarine
sulcus (visual cortex V1) to the lateral geniculate nucleus (LGN). We seed
from the calcarine sulcus by selecting a region-of-interest (ROI) cube of
dimensions 3x3x3 voxels.

.. GENERATED FROM PYTHON SOURCE LINES 133-143

.. code-block:: default



    # Set a seed region region for tractography.
    from dipy.tracking import utils

    mask = np.zeros(data.shape[:-1], 'bool')
    rad = 3
    mask[26-rad:26+rad, 29-rad:29+rad, 31-rad:31+rad] = True
    seeds = utils.seeds_from_mask(mask, affine, density=[4, 4, 4])








.. GENERATED FROM PYTHON SOURCE LINES 144-146

Local Tracking is used for probabilistic tractography which takes the
direction getter along with the stopping criterion and seeds as input.

.. GENERATED FROM PYTHON SOURCE LINES 146-158

.. code-block:: default



    # Perform tracking using Local Tracking
    from dipy.tracking.local_tracking import LocalTracking

    streamlines_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                          affine, step_size=.5)

    # Compute streamlines.
    from dipy.tracking.streamline import Streamlines
    streamlines = Streamlines(streamlines_generator)








.. GENERATED FROM PYTHON SOURCE LINES 159-162

In order to select only the fibers that enter into the LGN, another ROI is
created from a cube of size 5x5x5 voxels. The near_roi command is used to find
the fibers that traverse through this ROI.

.. GENERATED FROM PYTHON SOURCE LINES 162-178

.. code-block:: default



    # Set a mask for the lateral geniculate nucleus (LGN)
    mask_lgn = np.zeros(data.shape[:-1], 'bool')
    rad = 5
    mask_lgn[35-rad:35+rad, 42-rad:42+rad, 28-rad:28+rad] = True

    # Select all the fibers that enter the LGN and discard all others
    filtered_fibers2 = utils.near_roi(streamlines, affine, mask_lgn, tol=1.8)

    sfil = []
    for i in range(len(streamlines)):
        if filtered_fibers2[i]:
            sfil.append(streamlines[i])
    streamlines = Streamlines(sfil)








.. GENERATED FROM PYTHON SOURCE LINES 179-187

Inspired by [Rodrigues2010]_, a lookup-table is created, containing rotated
versions of the fiber propagation kernel :math:`P_t` [DuitsAndFranken2011]_
rotated over a discrete set of orientations. See the
:ref:`sphx_glr_examples_built_contextual_enhancement_contextual_enhancement.py`
example for more details regarding the kernel. In order to ensure rotationally
invariant processing, the discrete orientations are required to be equally
distributed over a sphere. By default, a sphere with 100 directions is obtained
from electrostatic repulsion in DIPY.

.. GENERATED FROM PYTHON SOURCE LINES 187-197

.. code-block:: default



    # Compute lookup table
    from dipy.denoise.enhancement_kernel import EnhancementKernel

    D33 = 1.0
    D44 = 0.02
    t = 1
    k = EnhancementKernel(D33, D44, t)








.. GENERATED FROM PYTHON SOURCE LINES 198-200

The FBC measures are now computed, taking the tractography results and the
lookup tables as input.

.. GENERATED FROM PYTHON SOURCE LINES 200-207

.. code-block:: default



    # Apply FBC measures
    from dipy.tracking.fbcmeasures import FBCMeasures

    fbc = FBCMeasures(streamlines, k)








.. GENERATED FROM PYTHON SOURCE LINES 208-213

After calculating the FBC measures, a threshold can be chosen on the relative
FBC (RFBC) in order to remove spurious fibers. Recall that the relative FBC
(RFBC) is calculated by the minimum of the moving average LFBC along the fiber.
In this example we show the results for threshold 0 (i.e. all fibers are
included) and 0.2 (removing the 20 percent most spurious fibers).

.. GENERATED FROM PYTHON SOURCE LINES 213-223

.. code-block:: default



    # Calculate LFBC for original fibers
    fbc_sl_orig, clrs_orig, rfbc_orig = \
      fbc.get_points_rfbc_thresholded(0, emphasis=0.01)

    # Apply a threshold on the RFBC to remove spurious fibers
    fbc_sl_thres, clrs_thres, rfbc_thres = \
      fbc.get_points_rfbc_thresholded(0.125, emphasis=0.01)








.. GENERATED FROM PYTHON SOURCE LINES 224-228

The results of FBC measures are visualized, showing the original fibers
colored by LFBC (see :ref:`optic_radiation_before_cleaning`), and the fibers
after the cleaning procedure via RFBC thresholding (see
:ref:`optic_radiation_after_cleaning`).

.. GENERATED FROM PYTHON SOURCE LINES 228-265

.. code-block:: default



    # Visualize the results
    from dipy.viz import window, actor

    # Create scene
    scene = window.Scene()

    # Original lines colored by LFBC
    lineactor = actor.line(fbc_sl_orig, np.vstack(clrs_orig), linewidth=0.2)
    scene.add(lineactor)

    # Horizontal (axial) slice of T1 data
    vol_actor1 = actor.slicer(t1_data, affine=affine)
    vol_actor1.display(z=20)
    scene.add(vol_actor1)

    # Vertical (sagittal) slice of T1 data
    vol_actor2 = actor.slicer(t1_data, affine=affine)
    vol_actor2.display(x=35)
    scene.add(vol_actor2)

    # Show original fibers
    scene.set_camera(position=(-264, 285, 155),
                     focal_point=(0, -14, 9),
                     view_up=(0, 0, 1))
    window.record(scene, n_frames=1, out_path='OR_before.png', size=(900, 900))
    if interactive:
        window.show(scene)

    # Show thresholded fibers
    scene.rm(lineactor)
    scene.add(actor.line(fbc_sl_thres, np.vstack(clrs_thres), linewidth=0.2))
    window.record(scene, n_frames=1, out_path='OR_after.png', size=(900, 900))
    if interactive:
        window.show(scene)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_001.png
          :alt: fiber to bundle coherence
          :srcset: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_002.png
          :alt: fiber to bundle coherence
          :srcset: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_002.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 266-311

.. _optic_radiation_before_cleaning:

.. figure:: OR_before.png
   :align: center

   The optic radiation obtained through probabilistic tractography colored by
   local fiber to bundle coherence.

.. _optic_radiation_after_cleaning:

.. figure:: OR_after.png
   :align: center

   The tractography result is cleaned (shown in bottom) by removing fibers
   with a relative FBC (RFBC) lower than the threshold :math:`\tau = 0.2`.

Acknowledgments
---------------
The techniques are developed in close collaboration with Pauly Ossenblok of
the Academic Center of Epileptology Kempenhaeghe & Maastricht UMC+.

References
----------

.. [Meesters2016] S. Meesters, G. Sanguinetti, E. Garyfallidis, J. Portegies,
   P. Ossenblok, R. Duits. (2016) Cleaning output of tractography via fiber to
   bundle coherence, a new open source implementation. Human Brain Mapping
   Conference 2016.

.. [Portegies2015] J. Portegies, R. Fick, G. Sanguinetti, S. Meesters,
   G.Girard, and R. Duits. (2015) Improving Fiber Alignment in HARDI by
   Combining Contextual PDE flow with Constrained Spherical Deconvolution. PLoS
   One.

.. [DuitsAndFranken2011] R. Duits and E. Franken (2011) Left-invariant
   diffusions on the space of positions and orientations and their application
   to crossing-preserving smoothing of HARDI images. International Journal of
   Computer Vision, 92:231-264.

.. [Rodrigues2010] P. Rodrigues, R. Duits, B. Romeny, A. Vilanova (2010).
   Accelerated Diffusion Operators for Enhancing DW-MRI. Eurographics Workshop
   on Visual Computing for Biology and Medicine. The Eurographics Association.

.. include:: ../links_names.inc


.. GENERATED FROM PYTHON SOURCE LINES 313-315

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 28.001 seconds)


.. _sphx_glr_download_examples_built_contextual_enhancement_fiber_to_bundle_coherence.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: fiber_to_bundle_coherence.py <fiber_to_bundle_coherence.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: fiber_to_bundle_coherence.ipynb <fiber_to_bundle_coherence.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
