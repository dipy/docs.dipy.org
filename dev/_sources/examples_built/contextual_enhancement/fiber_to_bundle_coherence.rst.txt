
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/contextual_enhancement/fiber_to_bundle_coherence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_contextual_enhancement_fiber_to_bundle_coherence.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_contextual_enhancement_fiber_to_bundle_coherence.py:


==================================
Fiber to bundle coherence measures
==================================

This demo presents the fiber to bundle coherence (FBC) quantitative
measure of the alignment of each fiber with the surrounding fiber bundles
[Meesters2016]_. These measures are useful in 'cleaning' the results of
tractography algorithms, since low FBCs indicate which fibers are isolated and
poorly aligned with their neighbors, as shown in the figure below.

.. _fiber_to_bundle_coherence:

.. figure:: /_static/images/examples/fbc_illustration.png
   :scale: 60 %
   :align: center

   On the left this figure illustrates (in 2D) the contribution of two fiber
   points to the kernel density estimator. The kernel density estimator is the
   sum over all such locally aligned kernels. The local fiber to bundle
   coherence, shown on the right, color-coded for each fiber, is obtained by
   evaluating the kernel density estimator along the fibers. One spurious
   fiber is present which is isolated and badly aligned with the other fibers,
   and can be identified by a low LFBC value in the region where it deviates
   from the bundle. Figure adapted from [Portegies2015]_.

Here we implement FBC measures based on kernel density estimation in the
non-flat 5D position-orientation domain. First we compute the kernel density
estimator induced by the full lifted output (defined in the space of positions
and orientations) of the tractography. Then, the Local FBC (LFBC) is the
result of evaluating the estimator along each element of the lifted fiber.
A whole fiber measure, the relative FBC (RFBC), is calculated
by the minimum of the moving average LFBC along the fiber.
Details of the computation of FBC can be found in [Portegies2015]_.



The FBC measures are evaluated on the Stanford HARDI dataset
(150 orientations, b=2000 $s/mm^2$) which is one of the standard example
datasets in DIPY_.

.. GENERATED FROM PYTHON SOURCE LINES 42-84

.. code-block:: Python

    import numpy as np

    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, default_sphere
    from dipy.denoise.enhancement_kernel import EnhancementKernel
    from dipy.direction import peaks_from_model, ProbabilisticDirectionGetter
    from dipy.io.image import load_nifti_data, load_nifti
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.reconst.shm import CsaOdfModel
    from dipy.reconst.csdeconv import (
      auto_response_ssst, ConstrainedSphericalDeconvModel)
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.fbcmeasures import FBCMeasures
    from dipy.viz import window, actor

    # Enables/disables interactive visualization
    interactive = False
    # Fix seed
    rng = np.random.default_rng(1)

    # Read data
    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')
    t1_fname = get_fnames('stanford_t1')

    data, affine = load_nifti(hardi_fname)
    labels = load_nifti_data(label_fname)
    t1_data = load_nifti_data(t1_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    # Select a relevant part of the data (left hemisphere)
    # Coordinates given in x bounds, y bounds, z bounds
    dshape = data.shape[:-1]
    xa, xb, ya, yb, za, zb = [15, 42, 10, 65, 18, 65]
    data_small = data[xa:xb, ya:yb, za:zb]
    selectionmask = np.zeros(dshape, 'bool')
    selectionmask[xa:xb, ya:yb, za:zb] = True








.. GENERATED FROM PYTHON SOURCE LINES 85-90

The data is first fitted to the Constant Solid Angle (CDA) ODF Model. CSA is
a good choice to estimate general fractional anisotropy (GFA), which the
stopping criterion can use to restrict fiber tracking to those areas where
the ODF shows significant restricted diffusion, thus creating a
region-of-interest in which the computations are done.

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: Python


    # Perform CSA
    csa_model = CsaOdfModel(gtab, sh_order_max=6)
    csa_peaks = peaks_from_model(csa_model, data, default_sphere,
                                 relative_peak_threshold=.6,
                                 min_separation_angle=45,
                                 mask=selectionmask)

    # Stopping Criterion
    stopping_criterion = ThresholdStoppingCriterion(csa_peaks.gfa, 0.25)








.. GENERATED FROM PYTHON SOURCE LINES 102-108

In order to perform probabilistic fiber tracking we first fit the data to the
Constrained Spherical Deconvolution (CSD) model in DIPY. This model
represents each voxel in the data set as a collection of small white matter
fibers with different orientations. The density of fibers along each
orientation is known as the Fiber Orientation Distribution (FOD), used in
the fiber tracking.

.. GENERATED FROM PYTHON SOURCE LINES 108-123

.. code-block:: Python


    # Perform CSD on the original data
    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response)
    csd_fit = csd_model.fit(data_small)
    csd_fit_shm = np.lib.pad(csd_fit.shm_coeff, ((xa, dshape[0]-xb),
                                                 (ya, dshape[1]-yb),
                                                 (za, dshape[2]-zb),
                                                 (0, 0)), 'constant')

    # Probabilistic direction getting for fiber tracking
    prob_dg = ProbabilisticDirectionGetter.from_shcoeff(csd_fit_shm,
                                                        max_angle=30.,
                                                        sphere=default_sphere)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/69795 [00:00<?, ?it/s]      1%|          | 720/69795 [00:00<00:09, 7193.32it/s]      2%|▏         | 1440/69795 [00:00<00:09, 6957.67it/s]      3%|▎         | 2137/69795 [00:00<00:09, 6847.78it/s]      4%|▍         | 2867/69795 [00:00<00:09, 7019.65it/s]      5%|▌         | 3570/69795 [00:00<00:09, 6976.79it/s]      6%|▌         | 4274/69795 [00:00<00:09, 6997.07it/s]      7%|▋         | 4974/69795 [00:00<00:09, 6984.29it/s]      8%|▊         | 5721/69795 [00:00<00:08, 7136.71it/s]      9%|▉         | 6435/69795 [00:00<00:08, 7076.58it/s]     10%|█         | 7143/69795 [00:01<00:08, 7067.75it/s]     11%|█▏        | 7869/69795 [00:01<00:08, 7124.71it/s]     12%|█▏        | 8601/69795 [00:01<00:08, 7180.93it/s]     13%|█▎        | 9329/69795 [00:01<00:08, 7209.29it/s]     14%|█▍        | 10054/69795 [00:01<00:08, 7221.16it/s]     15%|█▌        | 10802/69795 [00:01<00:08, 7297.02it/s]     17%|█▋        | 11532/69795 [00:01<00:08, 7218.31it/s]     18%|█▊        | 12257/69795 [00:01<00:07, 7224.64it/s]     19%|█▊        | 12980/69795 [00:01<00:07, 7199.33it/s]     20%|█▉        | 13701/69795 [00:01<00:07, 7189.00it/s]     21%|██        | 14426/69795 [00:02<00:07, 7207.00it/s]     22%|██▏       | 15147/69795 [00:02<00:07, 7140.38it/s]     23%|██▎       | 15882/69795 [00:02<00:07, 7199.97it/s]     24%|██▍       | 16603/69795 [00:02<00:07, 7198.71it/s]     25%|██▍       | 17340/69795 [00:02<00:07, 7249.12it/s]     26%|██▌       | 18066/69795 [00:02<00:07, 7190.32it/s]     27%|██▋       | 18801/69795 [00:02<00:07, 7235.35it/s]     28%|██▊       | 19548/69795 [00:02<00:06, 7302.78it/s]     29%|██▉       | 20279/69795 [00:02<00:06, 7276.97it/s]     30%|███       | 21029/69795 [00:02<00:06, 7342.37it/s]     31%|███       | 21764/69795 [00:03<00:06, 7312.08it/s]     32%|███▏      | 22504/69795 [00:03<00:06, 7336.50it/s]     33%|███▎      | 23238/69795 [00:03<00:06, 7275.16it/s]     34%|███▍      | 23973/69795 [00:03<00:06, 7297.22it/s]     35%|███▌      | 24703/69795 [00:03<00:06, 7263.60it/s]     36%|███▋      | 25430/69795 [00:03<00:06, 7256.54it/s]     37%|███▋      | 26167/69795 [00:03<00:05, 7289.78it/s]     39%|███▊      | 26897/69795 [00:03<00:05, 7230.67it/s]     40%|███▉      | 27636/69795 [00:03<00:05, 7277.36it/s]     41%|████      | 28364/69795 [00:03<00:05, 7274.18it/s]     42%|████▏     | 29092/69795 [00:04<00:05, 7272.99it/s]     43%|████▎     | 29820/69795 [00:04<00:05, 7226.46it/s]     44%|████▍     | 30578/69795 [00:04<00:05, 7330.11it/s]     45%|████▍     | 31325/69795 [00:04<00:05, 7371.28it/s]     46%|████▌     | 32063/69795 [00:04<00:05, 7286.41it/s]     47%|████▋     | 32827/69795 [00:04<00:05, 7388.52it/s]     48%|████▊     | 33574/69795 [00:04<00:04, 7411.96it/s]     49%|████▉     | 34323/69795 [00:04<00:04, 7433.35it/s]     50%|█████     | 35067/69795 [00:04<00:04, 7421.61it/s]     51%|█████▏    | 35833/69795 [00:04<00:04, 7491.77it/s]     52%|█████▏    | 36583/69795 [00:05<00:04, 7458.83it/s]     53%|█████▎    | 37329/69795 [00:05<00:04, 7396.66it/s]     55%|█████▍    | 38096/69795 [00:05<00:04, 7475.15it/s]     56%|█████▌    | 38844/69795 [00:05<00:04, 7323.20it/s]     57%|█████▋    | 39578/69795 [00:05<00:04, 7154.43it/s]     58%|█████▊    | 40295/69795 [00:05<00:04, 7072.94it/s]     59%|█████▉    | 41009/69795 [00:05<00:04, 7090.09it/s]     60%|█████▉    | 41719/69795 [00:05<00:03, 7058.97it/s]     61%|██████    | 42426/69795 [00:05<00:03, 6943.44it/s]     62%|██████▏   | 43155/69795 [00:05<00:03, 7043.55it/s]     63%|██████▎   | 43895/69795 [00:06<00:03, 7146.77it/s]     64%|██████▍   | 44625/69795 [00:06<00:03, 7188.29it/s]     65%|██████▍   | 45364/69795 [00:06<00:03, 7247.82it/s]     66%|██████▌   | 46136/69795 [00:06<00:03, 7387.32it/s]     67%|██████▋   | 46892/69795 [00:06<00:03, 7436.91it/s]     68%|██████▊   | 47636/69795 [00:06<00:03, 7329.37it/s]     69%|██████▉   | 48406/69795 [00:06<00:02, 7438.26it/s]     70%|███████   | 49168/69795 [00:06<00:02, 7490.42it/s]     72%|███████▏  | 49918/69795 [00:06<00:02, 7367.45it/s]     73%|███████▎  | 50656/69795 [00:06<00:02, 7274.39it/s]     74%|███████▎  | 51404/69795 [00:07<00:02, 7332.92it/s]     75%|███████▍  | 52156/69795 [00:07<00:02, 7387.43it/s]     76%|███████▌  | 52896/69795 [00:07<00:02, 7263.65it/s]     77%|███████▋  | 53640/69795 [00:07<00:02, 7315.10it/s]     78%|███████▊  | 54394/69795 [00:07<00:02, 7378.92it/s]     79%|███████▉  | 55133/69795 [00:07<00:02, 7267.33it/s]     80%|████████  | 55861/69795 [00:07<00:01, 7197.98it/s]     81%|████████  | 56601/69795 [00:07<00:01, 7254.80it/s]     82%|████████▏ | 57338/69795 [00:07<00:01, 7287.78it/s]     83%|████████▎ | 58068/69795 [00:08<00:01, 7082.36it/s]     84%|████████▍ | 58796/69795 [00:08<00:01, 7139.02it/s]     85%|████████▌ | 59538/69795 [00:08<00:01, 7220.22it/s]     86%|████████▋ | 60261/69795 [00:08<00:01, 7210.74it/s]     87%|████████▋ | 60983/69795 [00:08<00:01, 7072.82it/s]     88%|████████▊ | 61696/69795 [00:08<00:01, 7087.09it/s]     89%|████████▉ | 62439/69795 [00:08<00:01, 7186.68it/s]     90%|█████████ | 63159/69795 [00:08<00:00, 7153.30it/s]     92%|█████████▏| 63875/69795 [00:08<00:00, 7113.57it/s]     93%|█████████▎| 64587/69795 [00:08<00:00, 7107.36it/s]     94%|█████████▎| 65322/69795 [00:09<00:00, 7179.44it/s]     95%|█████████▍| 66041/69795 [00:09<00:00, 7065.21it/s]     96%|█████████▌| 66763/69795 [00:09<00:00, 7109.54it/s]     97%|█████████▋| 67489/69795 [00:09<00:00, 7153.23it/s]     98%|█████████▊| 68205/69795 [00:09<00:00, 7021.63it/s]     99%|█████████▊| 68908/69795 [00:09<00:00, 6975.72it/s]    100%|█████████▉| 69630/69795 [00:09<00:00, 7044.61it/s]    100%|██████████| 69795/69795 [00:09<00:00, 7218.55it/s]




.. GENERATED FROM PYTHON SOURCE LINES 124-128

The optic radiation is reconstructed by tracking fibers from the calcarine
sulcus (visual cortex V1) to the lateral geniculate nucleus (LGN). We seed
from the calcarine sulcus by selecting a region-of-interest (ROI) cube of
dimensions 3x3x3 voxels.

.. GENERATED FROM PYTHON SOURCE LINES 128-135

.. code-block:: Python


    # Set a seed region region for tractography.
    mask = np.zeros(data.shape[:-1], 'bool')
    rad = 3
    mask[26-rad:26+rad, 29-rad:29+rad, 31-rad:31+rad] = True
    seeds = utils.seeds_from_mask(mask, affine, density=[4, 4, 4])








.. GENERATED FROM PYTHON SOURCE LINES 136-138

Local Tracking is used for probabilistic tractography which takes the
direction getter along with the stopping criterion and seeds as input.

.. GENERATED FROM PYTHON SOURCE LINES 138-146

.. code-block:: Python


    # Perform tracking using Local Tracking
    streamlines_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                          affine, step_size=.5)

    # Compute streamlines.
    streamlines = Streamlines(streamlines_generator)








.. GENERATED FROM PYTHON SOURCE LINES 147-150

In order to select only the fibers that enter into the LGN, another ROI is
created from a cube of size 5x5x5 voxels. The near_roi command is used to
find the fibers that traverse through this ROI.

.. GENERATED FROM PYTHON SOURCE LINES 150-165

.. code-block:: Python


    # Set a mask for the lateral geniculate nucleus (LGN)
    mask_lgn = np.zeros(data.shape[:-1], 'bool')
    rad = 5
    mask_lgn[35-rad:35+rad, 42-rad:42+rad, 28-rad:28+rad] = True

    # Select all the fibers that enter the LGN and discard all others
    filtered_fibers2 = utils.near_roi(streamlines, affine, mask_lgn, tol=1.8)

    sfil = []
    for i in range(len(streamlines)):
        if filtered_fibers2[i]:
            sfil.append(streamlines[i])
    streamlines = Streamlines(sfil)








.. GENERATED FROM PYTHON SOURCE LINES 166-174

Inspired by [Rodrigues2010]_, a lookup-table is created, containing rotated
versions of the fiber propagation kernel :math:`P_t` [DuitsAndFranken2011]_
rotated over a discrete set of orientations. See the
:ref:`sphx_glr_examples_built_contextual_enhancement_contextual_enhancement.py`
example for more details regarding the kernel. In order to ensure
rotationally invariant processing, the discrete orientations are required
to be equally distributed over a sphere. By default, a sphere with 100
directions is obtained from electrostatic repulsion in DIPY.

.. GENERATED FROM PYTHON SOURCE LINES 174-181

.. code-block:: Python


    # Compute lookup table
    D33 = 1.0
    D44 = 0.02
    t = 1
    k = EnhancementKernel(D33, D44, t)








.. GENERATED FROM PYTHON SOURCE LINES 182-184

The FBC measures are now computed, taking the tractography results and the
lookup tables as input.

.. GENERATED FROM PYTHON SOURCE LINES 184-188

.. code-block:: Python


    # Apply FBC measures
    fbc = FBCMeasures(streamlines, k)








.. GENERATED FROM PYTHON SOURCE LINES 189-194

After calculating the FBC measures, a threshold can be chosen on the relative
FBC (RFBC) in order to remove spurious fibers. Recall that the relative FBC
(RFBC) is calculated by the minimum of the moving average LFBC along the
fiber. In this example we show the results for threshold 0 (i.e. all fibers
are included) and 0.2 (removing the 20 percent most spurious fibers).

.. GENERATED FROM PYTHON SOURCE LINES 194-203

.. code-block:: Python


    # Calculate LFBC for original fibers
    fbc_sl_orig, clrs_orig, rfbc_orig = \
      fbc.get_points_rfbc_thresholded(0, emphasis=0.01)

    # Apply a threshold on the RFBC to remove spurious fibers
    fbc_sl_thres, clrs_thres, rfbc_thres = \
      fbc.get_points_rfbc_thresholded(0.125, emphasis=0.01)








.. GENERATED FROM PYTHON SOURCE LINES 204-208

The results of FBC measures are visualized, showing the original fibers
colored by LFBC (see :ref:`optic_radiation_before_cleaning`), and the fibers
after the cleaning procedure via RFBC thresholding (see
:ref:`optic_radiation_after_cleaning`).

.. GENERATED FROM PYTHON SOURCE LINES 208-241

.. code-block:: Python


    # Create scene
    scene = window.Scene()

    # Original lines colored by LFBC
    lineactor = actor.line(fbc_sl_orig, np.vstack(clrs_orig), linewidth=0.2)
    scene.add(lineactor)

    # Horizontal (axial) slice of T1 data
    vol_actor1 = actor.slicer(t1_data, affine=affine)
    vol_actor1.display(z=20)
    scene.add(vol_actor1)

    # Vertical (sagittal) slice of T1 data
    vol_actor2 = actor.slicer(t1_data, affine=affine)
    vol_actor2.display(x=35)
    scene.add(vol_actor2)

    # Show original fibers
    scene.set_camera(position=(-264, 285, 155),
                     focal_point=(0, -14, 9),
                     view_up=(0, 0, 1))
    window.record(scene, n_frames=1, out_path='OR_before.png', size=(900, 900))
    if interactive:
        window.show(scene)

    # Show thresholded fibers
    scene.rm(lineactor)
    scene.add(actor.line(fbc_sl_thres, np.vstack(clrs_thres), linewidth=0.2))
    window.record(scene, n_frames=1, out_path='OR_after.png', size=(900, 900))
    if interactive:
        window.show(scene)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_001.png
          :alt: fiber to bundle coherence
          :srcset: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_002.png
          :alt: fiber to bundle coherence
          :srcset: /examples_built/contextual_enhancement/images/sphx_glr_fiber_to_bundle_coherence_002.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 242-285

.. _optic_radiation_before_cleaning:

.. rst-class:: centered small fst-italic fw-semibold

The optic radiation obtained through probabilistic tractography colored by
local fiber to bundle coherence.


.. _optic_radiation_after_cleaning:

.. rst-class:: centered small fst-italic fw-semibold

The tractography result is cleaned (shown in bottom) by removing fibers
with a relative FBC (RFBC) lower than the threshold :math:`\tau = 0.2`.


Acknowledgments
---------------
The techniques are developed in close collaboration with Pauly Ossenblok of
the Academic Center of Epileptology Kempenhaeghe & Maastricht UMC+.

References
----------

.. [Meesters2016] S. Meesters, G. Sanguinetti, E. Garyfallidis, J. Portegies,
   P. Ossenblok, R. Duits. (2016) Cleaning output of tractography via fiber
   to bundle coherence, a new open source implementation. Human Brain Mapping
   Conference 2016.

.. [Portegies2015] J. Portegies, R. Fick, G. Sanguinetti, S. Meesters,
   G.Girard, and R. Duits. (2015) Improving Fiber Alignment in HARDI by
   Combining Contextual PDE flow with Constrained Spherical Deconvolution.
   PLoS One.

.. [DuitsAndFranken2011] R. Duits and E. Franken (2011) Left-invariant
   diffusions on the space of positions and orientations and their
   application to crossing-preserving smoothing of HARDI images.
   International Journal of Computer Vision, 92:231-264.

.. [Rodrigues2010] P. Rodrigues, R. Duits, B. Romeny, A. Vilanova (2010).
   Accelerated Diffusion Operators for Enhancing DW-MRI. Eurographics
   Workshop on Visual Computing for Biology and Medicine. The Eurographics
   Association.

.. GENERATED FROM PYTHON SOURCE LINES 287-289

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 3.956 seconds)


.. _sphx_glr_download_examples_built_contextual_enhancement_fiber_to_bundle_coherence.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: fiber_to_bundle_coherence.ipynb <fiber_to_bundle_coherence.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: fiber_to_bundle_coherence.py <fiber_to_bundle_coherence.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
