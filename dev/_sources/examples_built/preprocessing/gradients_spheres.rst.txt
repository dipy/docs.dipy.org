
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/preprocessing/gradients_spheres.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_preprocessing_gradients_spheres.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_preprocessing_gradients_spheres.py:


=====================
Gradients and Spheres
=====================

This example shows how you can create gradient tables and sphere objects using
DIPY_.

Usually, as we saw in
:ref:`sphx_glr_examples_built_quick_start_quick_start.py`,
you load your b-values and b-vectors from disk and then you can create your own
gradient table. But this time let's say that you are an MR physicist and you
want to design a new gradient scheme or you are a scientist who wants to
simulate many different gradient schemes.

Now let's assume that you are interested in creating a multi-shell
acquisition with 2-shells, one at b=1000 $s/mm^2$ and one at b=2500 $s/mm^2$.
For both shells let's say that we want a specific number of gradients (64) and
we want to have the points on the sphere evenly distributed.

This is possible using the ``disperse_charges`` which is an implementation of
electrostatic repulsion [Jones1999]_.

Let's start by importing the necessary modules.

.. GENERATED FROM PYTHON SOURCE LINES 26-32

.. code-block:: Python


    import numpy as np
    from dipy.core.gradients import gradient_table
    from dipy.core.sphere import disperse_charges, Sphere, HemiSphere
    from dipy.viz import window, actor








.. GENERATED FROM PYTHON SOURCE LINES 33-35

We can first create some random points on a ``HemiSphere`` using spherical
polar coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: Python


    rng = np.random.default_rng()
    n_pts = 64
    theta = np.pi * rng.random(n_pts)
    phi = 2 * np.pi * rng.random(n_pts)
    hsph_initial = HemiSphere(theta=theta, phi=phi)








.. GENERATED FROM PYTHON SOURCE LINES 43-45

Next, we call ``disperse_charges`` which will iteratively move the points so
that the electrostatic potential energy is minimized.

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: Python


    hsph_updated, potential = disperse_charges(hsph_initial, 5000)








.. GENERATED FROM PYTHON SOURCE LINES 49-51

In ``hsph_updated`` we have the updated ``HemiSphere`` with the points nicely
distributed on the hemisphere. Let's visualize them.

.. GENERATED FROM PYTHON SOURCE LINES 51-67

.. code-block:: Python


    # Enables/disables interactive visualization
    interactive = False

    scene = window.Scene()
    scene.SetBackground(1, 1, 1)

    scene.add(actor.point(hsph_initial.vertices, window.colors.red,
                          point_radius=0.05))
    scene.add(actor.point(hsph_updated.vertices, window.colors.green,
                          point_radius=0.05))

    window.record(scene, out_path='initial_vs_updated.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_001.png
   :alt: gradients spheres
   :srcset: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-76

.. rst-class:: centered small fst-italic fw-semibold

Illustration of electrostatic repulsion of red points which become
green points.


We can also create a sphere from the hemisphere and show it in the
following way.

.. GENERATED FROM PYTHON SOURCE LINES 76-86

.. code-block:: Python


    sph = Sphere(xyz=np.vstack((hsph_updated.vertices, -hsph_updated.vertices)))

    scene.clear()
    scene.add(actor.point(sph.vertices, window.colors.green, point_radius=0.05))

    window.record(scene, out_path='full_sphere.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_002.png
   :alt: gradients spheres
   :srcset: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-95

.. rst-class:: centered small fst-italic fw-semibold

Full sphere.


It is time to create the Gradients. For this purpose we will use the
function ``gradient_table`` and fill it with the ``hsph_updated`` vectors
that we created above.

.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: Python


    vertices = hsph_updated.vertices
    values = np.ones(vertices.shape[0])








.. GENERATED FROM PYTHON SOURCE LINES 100-103

We need two stacks of ``vertices``, one for every shell, and we need two sets
of b-values, one at 1000 $s/mm^2$, and one at 2500 $s/mm^2$, as we discussed
previously.

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: Python


    bvecs = np.vstack((vertices, vertices))
    bvals = np.hstack((1000 * values, 2500 * values))








.. GENERATED FROM PYTHON SOURCE LINES 108-109

We can also add some b0s. Let's add one at the beginning and one at the end.

.. GENERATED FROM PYTHON SOURCE LINES 109-116

.. code-block:: Python


    bvecs = np.insert(bvecs, (0, bvecs.shape[0]), np.array([0, 0, 0]), axis=0)
    bvals = np.insert(bvals, (0, bvals.shape[0]), 0)

    print(bvals)
    print(bvecs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [   0. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.
     2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500. 2500.    0.]
    [[ 0.          0.          0.        ]
     [-0.08783272  0.98177912  0.16850869]
     [ 0.03740448  0.87483241  0.48297946]
     [-0.89791079  0.23923089  0.36949262]
     [ 0.22711155 -0.87097163  0.43569343]
     [ 0.56628524  0.75916325  0.32092395]
     [-0.46738733 -0.81841708  0.33427918]
     [-0.09162902  0.46050158  0.88291699]
     [-0.96894804  0.23780367  0.06774303]
     [ 0.65702597  0.47121006  0.58845387]
     [ 0.7959843  -0.40180715  0.45272509]
     [ 0.9253439   0.37680154  0.04194357]
     [ 0.73826925  0.67010025  0.07696859]
     [-0.65535183 -0.57539446  0.48932116]
     [ 0.61325699 -0.40559308  0.67779799]
     [-0.17969899 -0.58516957  0.79074955]
     [ 0.29053195  0.89767034  0.33132936]
     [ 0.10361452 -0.98041744  0.16746842]
     [ 0.40860359  0.70184529  0.58348632]
     [ 0.70619299  0.17769631  0.68535792]
     [-0.82873938  0.52465461  0.19475259]
     [ 0.4281236  -0.88186258  0.19755651]
     [-0.46468724  0.64758007  0.60390879]
     [-0.08996694 -0.22244673  0.97078494]
     [ 0.62596861 -0.12170648  0.77029269]
     [ 0.98745577  0.07146304  0.14079821]
     [-0.87440963 -0.05286843  0.48229942]
     [ 0.13367927 -0.71041793  0.6909676 ]
     [-0.59109193  0.7420271   0.31623744]
     [-0.88811684 -0.36666425  0.27713862]
     [-0.98122167 -0.07691173  0.1768859 ]
     [-0.18989432  0.16260065  0.96824644]
     [ 0.19295612  0.97976316  0.05321727]
     [ 0.85290608 -0.07386192  0.51681296]
     [ 0.79913536  0.5048546   0.32635029]
     [-0.48758522 -0.87301946  0.00988288]
     [ 0.94482372 -0.21992002  0.24278246]
     [-0.73342094 -0.64808969  0.20511822]
     [ 0.44060587  0.1195713   0.88970173]
     [-0.49304326  0.15678187  0.85576153]
     [ 0.64972266 -0.68067532  0.3384399 ]
     [-0.36135607 -0.13704818  0.92230125]
     [-0.19964061 -0.94590537  0.25574725]
     [ 0.17618527  0.32798716  0.92810731]
     [ 0.09532396  0.03266755  0.99491013]
     [-0.39671088 -0.68195382  0.61445868]
     [ 0.42905852  0.4342911   0.79202274]
     [ 0.15446048  0.65601483  0.73877365]
     [ 0.66070157 -0.75064724  0.00146865]
     [ 0.35296195 -0.4656937   0.81150924]
     [ 0.31564692 -0.17927187  0.93178786]
     [ 0.45653277 -0.68134142  0.57214657]
     [-0.10944007 -0.84219448  0.52795012]
     [ 0.89054094  0.22089409  0.39767151]
     [-0.15832536  0.7057068   0.69058742]
     [-0.40609821  0.43456329  0.80388991]
     [-0.72310795  0.22209087  0.65405698]
     [ 0.06423677 -0.44945084  0.89099247]
     [-0.28250507  0.86196584  0.42095816]
     [-0.74524479 -0.32147227  0.58417958]
     [-0.71150659  0.48807024  0.50551539]
     [-0.64897936 -0.09855306  0.75439584]
     [ 0.84708949 -0.51505204  0.13099923]
     [-0.38554983  0.91582033  0.11235863]
     [-0.4563249  -0.40280009  0.79342276]
     [-0.08783272  0.98177912  0.16850869]
     [ 0.03740448  0.87483241  0.48297946]
     [-0.89791079  0.23923089  0.36949262]
     [ 0.22711155 -0.87097163  0.43569343]
     [ 0.56628524  0.75916325  0.32092395]
     [-0.46738733 -0.81841708  0.33427918]
     [-0.09162902  0.46050158  0.88291699]
     [-0.96894804  0.23780367  0.06774303]
     [ 0.65702597  0.47121006  0.58845387]
     [ 0.7959843  -0.40180715  0.45272509]
     [ 0.9253439   0.37680154  0.04194357]
     [ 0.73826925  0.67010025  0.07696859]
     [-0.65535183 -0.57539446  0.48932116]
     [ 0.61325699 -0.40559308  0.67779799]
     [-0.17969899 -0.58516957  0.79074955]
     [ 0.29053195  0.89767034  0.33132936]
     [ 0.10361452 -0.98041744  0.16746842]
     [ 0.40860359  0.70184529  0.58348632]
     [ 0.70619299  0.17769631  0.68535792]
     [-0.82873938  0.52465461  0.19475259]
     [ 0.4281236  -0.88186258  0.19755651]
     [-0.46468724  0.64758007  0.60390879]
     [-0.08996694 -0.22244673  0.97078494]
     [ 0.62596861 -0.12170648  0.77029269]
     [ 0.98745577  0.07146304  0.14079821]
     [-0.87440963 -0.05286843  0.48229942]
     [ 0.13367927 -0.71041793  0.6909676 ]
     [-0.59109193  0.7420271   0.31623744]
     [-0.88811684 -0.36666425  0.27713862]
     [-0.98122167 -0.07691173  0.1768859 ]
     [-0.18989432  0.16260065  0.96824644]
     [ 0.19295612  0.97976316  0.05321727]
     [ 0.85290608 -0.07386192  0.51681296]
     [ 0.79913536  0.5048546   0.32635029]
     [-0.48758522 -0.87301946  0.00988288]
     [ 0.94482372 -0.21992002  0.24278246]
     [-0.73342094 -0.64808969  0.20511822]
     [ 0.44060587  0.1195713   0.88970173]
     [-0.49304326  0.15678187  0.85576153]
     [ 0.64972266 -0.68067532  0.3384399 ]
     [-0.36135607 -0.13704818  0.92230125]
     [-0.19964061 -0.94590537  0.25574725]
     [ 0.17618527  0.32798716  0.92810731]
     [ 0.09532396  0.03266755  0.99491013]
     [-0.39671088 -0.68195382  0.61445868]
     [ 0.42905852  0.4342911   0.79202274]
     [ 0.15446048  0.65601483  0.73877365]
     [ 0.66070157 -0.75064724  0.00146865]
     [ 0.35296195 -0.4656937   0.81150924]
     [ 0.31564692 -0.17927187  0.93178786]
     [ 0.45653277 -0.68134142  0.57214657]
     [-0.10944007 -0.84219448  0.52795012]
     [ 0.89054094  0.22089409  0.39767151]
     [-0.15832536  0.7057068   0.69058742]
     [-0.40609821  0.43456329  0.80388991]
     [-0.72310795  0.22209087  0.65405698]
     [ 0.06423677 -0.44945084  0.89099247]
     [-0.28250507  0.86196584  0.42095816]
     [-0.74524479 -0.32147227  0.58417958]
     [-0.71150659  0.48807024  0.50551539]
     [-0.64897936 -0.09855306  0.75439584]
     [ 0.84708949 -0.51505204  0.13099923]
     [-0.38554983  0.91582033  0.11235863]
     [-0.4563249  -0.40280009  0.79342276]
     [ 0.          0.          0.        ]]




.. GENERATED FROM PYTHON SOURCE LINES 117-119

Both b-values and b-vectors look correct. Let's now create the
``GradientTable``.

.. GENERATED FROM PYTHON SOURCE LINES 119-124

.. code-block:: Python


    gtab = gradient_table(bvals, bvecs)

    scene.clear()








.. GENERATED FROM PYTHON SOURCE LINES 125-127

We can also visualize the gradients. Let's color the first shell blue and
the second shell cyan.

.. GENERATED FROM PYTHON SOURCE LINES 127-140

.. code-block:: Python


    colors_b1000 = window.colors.blue * np.ones(vertices.shape)
    colors_b2500 = window.colors.cyan * np.ones(vertices.shape)
    colors = np.vstack((colors_b1000, colors_b2500))
    colors = np.insert(colors, (0, colors.shape[0]), np.array([0, 0, 0]), axis=0)
    colors = np.ascontiguousarray(colors)

    scene.add(actor.point(gtab.gradients, colors, point_radius=100))

    window.record(scene, out_path='gradients.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_003.png
   :alt: gradients spheres
   :srcset: /examples_built/preprocessing/images/sphx_glr_gradients_spheres_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 141-152

.. rst-class:: centered small fst-italic fw-semibold

Diffusion gradients.


References
----------

.. [Jones1999] Jones, DK. et al. Optimal strategies for measuring diffusion
   in anisotropic systems by magnetic resonance imaging, Magnetic Resonance
   in Medicine, vol 42, no 3, 515-525, 1999.

.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.444 seconds)


.. _sphx_glr_download_examples_built_preprocessing_gradients_spheres.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: gradients_spheres.ipynb <gradients_spheres.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: gradients_spheres.py <gradients_spheres.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
