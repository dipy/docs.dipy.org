
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/visualization/viz_roi_contour.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_visualization_viz_roi_contour.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_visualization_viz_roi_contour.py:


======================================================
Visualization of ROI Surface Rendered with Streamlines
======================================================

Here is a simple tutorial following the probabilistic CSA Tracking Example in
which we generate a dataset of streamlines from a corpus callosum ROI, and
then display them with the seed ROI rendered in 3D with 50% transparency.

Let's start by importing the relevant modules.

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: Python


    from dipy.core.gradients import gradient_table
    from dipy.reconst.shm import CsaOdfModel
    from dipy.data import default_sphere, get_fnames
    from dipy.direction import peaks_from_model
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.viz import actor, window, colormap as cmap








.. GENERATED FROM PYTHON SOURCE LINES 26-29

First, we need to generate some streamlines. For a more complete
description of these steps, please refer to the CSA Probabilistic Tracking
Tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 29-58

.. code-block:: Python


    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    white_matter = (labels == 1) | (labels == 2)

    csa_model = CsaOdfModel(gtab, sh_order_max=6)
    csa_peaks = peaks_from_model(csa_model, data, default_sphere,
                                 relative_peak_threshold=.8,
                                 min_separation_angle=45,
                                 mask=white_matter)

    stopping_criterion = ThresholdStoppingCriterion(csa_peaks.gfa, .25)

    seed_mask = labels == 2
    seeds = utils.seeds_from_mask(seed_mask, affine, density=[1, 1, 1])

    # Initialization of LocalTracking. The computation happens in the next step.
    streamlines = LocalTracking(csa_peaks, stopping_criterion, seeds, affine,
                                step_size=2)

    # Compute streamlines and store as a list.
    streamlines = Streamlines(streamlines)








.. GENERATED FROM PYTHON SOURCE LINES 59-60

We will create a streamline actor from the streamlines.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    streamlines_actor = actor.line(streamlines, cmap.line_colors(streamlines))








.. GENERATED FROM PYTHON SOURCE LINES 64-68

Next, we create a surface actor from the corpus callosum seed ROI. We
provide the ROI data, the affine, the color in [R,G,B], and the opacity as
a decimal between zero and one. Here, we set the color as blue/green with
50% opacity.

.. GENERATED FROM PYTHON SOURCE LINES 68-75

.. code-block:: Python


    surface_opacity = 0.5
    surface_color = [0, 1, 1]

    seedroi_actor = actor.contour_from_roi(seed_mask, affine,
                                           surface_color, surface_opacity)








.. GENERATED FROM PYTHON SOURCE LINES 76-78

Next, we initialize a ''Scene'' object and add both actors
to the rendering.

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: Python


    scene = window.Scene()
    scene.add(streamlines_actor)
    scene.add(seedroi_actor)








.. GENERATED FROM PYTHON SOURCE LINES 84-86

If you uncomment the following line, the rendering will pop up in an
interactive window.

.. GENERATED FROM PYTHON SOURCE LINES 86-93

.. code-block:: Python


    interactive = False
    if interactive:
        window.show(scene)

    window.record(scene, out_path='contour_from_roi_tutorial.png', size=(1200, 900))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_roi_contour_001.png
   :alt: viz roi contour
   :srcset: /examples_built/visualization/images/sphx_glr_viz_roi_contour_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-98

.. rst-class:: centered small fst-italic fw-semibold

A top view of corpus callosum streamlines with the blue transparent
seed ROI in the center.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.786 seconds)


.. _sphx_glr_download_examples_built_visualization_viz_roi_contour.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: viz_roi_contour.ipynb <viz_roi_contour.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: viz_roi_contour.py <viz_roi_contour.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
