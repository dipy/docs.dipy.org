
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\visualization\viz_bundles.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_visualization_viz_bundles.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_visualization_viz_bundles.py:


========================================
Visualize bundles and metrics on bundles
========================================

First, let's download some available datasets. Here we are using a dataset
which provides metrics and bundles.

.. GENERATED FROM PYTHON SOURCE LINES 9-19

.. code-block:: Python


    import numpy as np
    from dipy.viz import window, actor
    from dipy.data import fetch_bundles_2_subjects, read_bundles_2_subjects
    from dipy.tracking.streamline import transform_streamlines, length

    fetch_bundles_2_subjects()
    dix = read_bundles_2_subjects(subj_id='subj_1', metrics=['fa'],
                                  bundles=['cg.left', 'cst.right'])








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Store fractional anisotropy.

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python


    fa = dix['fa']








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Store grid to world transformation matrix.

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: Python


    affine = dix['affine']








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Store the cingulum bundle. A bundle is a list of streamlines.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: Python


    bundle = dix['cg.left']








.. GENERATED FROM PYTHON SOURCE LINES 35-38

It happened that this bundle is in world coordinates and therefore we need
to transform it into native image coordinates so that it is in the same
coordinate space as the ``fa`` image.

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: Python


    bundle_native = transform_streamlines(bundle, np.linalg.inv(affine))








.. GENERATED FROM PYTHON SOURCE LINES 42-46

Show every streamline with an orientation color
===============================================

This is the default option when you are using ``line`` or ``streamtube``.

.. GENERATED FROM PYTHON SOURCE LINES 46-61

.. code-block:: Python


    scene = window.Scene()

    stream_actor = actor.line(bundle_native)

    scene.set_camera(position=(-176.42, 118.52, 128.20),
                     focal_point=(113.30, 128.31, 76.56),
                     view_up=(0.18, 0.00, 0.98))

    scene.add(stream_actor)

    # Uncomment the line below to show to display the window
    # window.show(scene, size=(600, 600), reset_camera=False)
    window.record(scene, out_path='bundle1.png', size=(600, 600))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_bundles_001.png
   :alt: viz bundles
   :srcset: /examples_built/visualization/images/sphx_glr_viz_bundles_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. rst-class:: centered small fst-italic fw-semibold

One orientation color for every streamline.


You may wonder how we knew how to set the camera. This is very easy. You just
need to run ``window.show`` once to see how you want to see the object and
then close the window and call the ``camera_info`` method which prints the
position, focal point and view up vectors of the camera.

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: Python


    scene.camera_info()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    # Active Camera
       Position (-237.76, 115.97, 138.55)
       Focal Point (112.80, 127.81, 76.06)
       View Up (0.18, 0.00, 0.98)




.. GENERATED FROM PYTHON SOURCE LINES 75-79

Show every point with a value from a volume with default colormap
=================================================================

Here we will need to input the ``fa`` map in ``streamtube`` or ``line``.

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: Python


    scene.clear()
    stream_actor2 = actor.line(bundle_native, fa, linewidth=0.1)








.. GENERATED FROM PYTHON SOURCE LINES 84-85

We can also show the scalar bar.

.. GENERATED FROM PYTHON SOURCE LINES 85-94

.. code-block:: Python


    bar = actor.scalar_bar()

    scene.add(stream_actor2)
    scene.add(bar)

    # window.show(scene, size=(600, 600), reset_camera=False)
    window.record(scene, out_path='bundle2.png', size=(600, 600))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_bundles_002.png
   :alt: viz bundles
   :srcset: /examples_built/visualization/images/sphx_glr_viz_bundles_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-104

.. rst-class:: centered small fst-italic fw-semibold

Every point with a color from FA.


Show every point with a value from a volume with your colormap
==============================================================

Here we will need to input the ``fa`` map in ``streamtube``

.. GENERATED FROM PYTHON SOURCE LINES 104-123

.. code-block:: Python


    scene.clear()

    hue = (0.0, 0.0)  # red only
    saturation = (0.0, 1.0)  # white to red

    lut_cmap = actor.colormap_lookup_table(hue_range=hue,
                                           saturation_range=saturation)

    stream_actor3 = actor.line(bundle_native, fa, linewidth=0.1,
                               lookup_colormap=lut_cmap)
    bar2 = actor.scalar_bar(lut_cmap)

    scene.add(stream_actor3)
    scene.add(bar2)

    # window.show(scene, size=(600, 600), reset_camera=False)
    window.record(scene, out_path='bundle3.png', size=(600, 600))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_bundles_003.png
   :alt: viz bundles
   :srcset: /examples_built/visualization/images/sphx_glr_viz_bundles_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-134

.. rst-class:: centered small fst-italic fw-semibold

Every point with a color from FA using a non default colormap.


Show every bundle with a specific color
========================================

You can have a bundle with a specific color. In this example, we are choosing
orange.

.. GENERATED FROM PYTHON SOURCE LINES 134-143

.. code-block:: Python


    scene.clear()
    stream_actor4 = actor.line(bundle_native, (1., 0.5, 0), linewidth=0.1)

    scene.add(stream_actor4)

    # window.show(scene, size=(600, 600), reset_camera=False)
    window.record(scene, out_path='bundle4.png', size=(600, 600))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_bundles_004.png
   :alt: viz bundles
   :srcset: /examples_built/visualization/images/sphx_glr_viz_bundles_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-154

.. rst-class:: centered small fst-italic fw-semibold

Entire bundle with a specific color.


Show every streamline of a bundle with a different color
========================================================

Let's make a colormap where every streamline of the bundle is colored by
its length.

.. GENERATED FROM PYTHON SOURCE LINES 154-178

.. code-block:: Python


    scene.clear()

    lengths = length(bundle_native)

    hue = (0.5, 0.5)  # blue only
    saturation = (0.0, 1.0)  # black to white

    lut_cmap = actor.colormap_lookup_table(
        scale_range=(lengths.min(), lengths.max()),
        hue_range=hue,
        saturation_range=saturation)

    stream_actor5 = actor.line(bundle_native, lengths, linewidth=0.1,
                               lookup_colormap=lut_cmap)

    scene.add(stream_actor5)
    bar3 = actor.scalar_bar(lut_cmap)

    scene.add(bar3)

    # window.show(scene, size=(600, 600), reset_camera=False)
    window.record(scene, out_path='bundle5.png', size=(600, 600))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_bundles_005.png
   :alt: viz bundles
   :srcset: /examples_built/visualization/images/sphx_glr_viz_bundles_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 179-190

.. rst-class:: centered small fst-italic fw-semibold

Color every streamline by the length of the streamline


Show every point of every streamline with a different color
============================================================

In this case in which we want to have a color per point and per streamline,
we can create a list of the colors to correspond to the list of streamlines
(bundles). Here in ``colors`` we will insert some random RGB colors.

.. GENERATED FROM PYTHON SOURCE LINES 190-205

.. code-block:: Python


    scene.clear()

    rng = np.random.default_rng()

    colors = [rng.random(streamline.shape) for streamline in bundle_native]

    stream_actor6 = actor.line(bundle_native, np.asarray(colors, dtype=object),
                               linewidth=0.2)

    scene.add(stream_actor6)

    # window.show(scene, size=(600, 600), reset_camera=False)
    window.record(scene, out_path='bundle6.png', size=(600, 600))




.. image-sg:: /examples_built/visualization/images/sphx_glr_viz_bundles_006.png
   :alt: viz bundles
   :srcset: /examples_built/visualization/images/sphx_glr_viz_bundles_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 206-213

.. rst-class:: centered small fst-italic fw-semibold

Random colors per point per streamline.


In summary, we showed that there are many useful ways for visualizing maps
on bundles.

.. GENERATED FROM PYTHON SOURCE LINES 215-217

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.162 seconds)


.. _sphx_glr_download_examples_built_visualization_viz_bundles.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: viz_bundles.ipynb <viz_bundles.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: viz_bundles.py <viz_bundles.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
