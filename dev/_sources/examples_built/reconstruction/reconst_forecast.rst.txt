
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/reconstruction/reconst_forecast.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_reconstruction_reconst_forecast.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_forecast.py:


==============================================================
Crossing invariant fiber response function with FORECAST model
==============================================================

We show how to obtain a voxel specific response function in the form of
axially symmetric tensor and the fODF using the FORECAST model from
[Anderson2005]_ , [Kaden2016]_ and [Zucchelli2017]_.

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 12-22

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    from dipy.reconst.forecast import ForecastModel
    from dipy.viz import actor, window
    from dipy.data import fetch_hbn, get_sphere
    import nibabel as nib
    import os.path as op
    from dipy.core.gradients import gradient_table


.. GENERATED FROM PYTHON SOURCE LINES 23-28

Download and read the data for this tutorial. Our implementation of FORECAST
requires multi-shell `data.fetch_hbn()` provides data that was acquired using
b-values of 1000 and 2000 as part of the Healthy Brain Network study
[Alexander2017]_ and was preprocessed and quality controlled in the HBN-POD2
dataset [RichieHalford2022]_.

.. GENERATED FROM PYTHON SOURCE LINES 28-53

.. code-block:: default



    data_path = fetch_hbn(["NDARAA948VFH"])[1]
    dwi_path = op.join(
           data_path, "derivatives", "qsiprep", "sub-NDARAA948VFH",
           "ses-HBNsiteRU", "dwi")

    img = nib.load(op.join(
           dwi_path,
           "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.nii.gz"))

    gtab = gradient_table(
           op.join(dwi_path,
    "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.bval"),
           op.join(dwi_path,
    "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-preproc_dwi.bvec"))

    data = np.asarray(img.dataobj)

    mask_img = nib.load(
           op.join(dwi_path,
    "sub-NDARAA948VFH_ses-HBNsiteRU_acq-64dir_space-T1w_desc-brain_mask.nii.gz"))

    brain_mask = mask_img.get_fdata()


.. GENERATED FROM PYTHON SOURCE LINES 54-55

Let us consider only a single slice for the FORECAST fitting

.. GENERATED FROM PYTHON SOURCE LINES 55-60

.. code-block:: default



    data_small = data[:, :, 50:51]
    mask_small = brain_mask[:, :, 50:51]


.. GENERATED FROM PYTHON SOURCE LINES 61-68

Instantiate the FORECAST Model.

"sh_order" is the spherical harmonics order used for the fODF.

dec_alg is the spherical deconvolution algorithm used for the FORECAST basis
fitting, in this case we used the Constrained Spherical Deconvolution (CSD)
algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default



    fm = ForecastModel(gtab, sh_order=6, dec_alg='CSD')


.. GENERATED FROM PYTHON SOURCE LINES 73-74

Fit the FORECAST to the data

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default



    f_fit = fm.fit(data_small, mask_small)


.. GENERATED FROM PYTHON SOURCE LINES 79-82

Calculate the crossing invariant tensor indices [Kaden2016]_ : the parallel
diffusivity, the perpendicular diffusivity, the fractional anisotropy and the
mean diffusivity.

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default



    d_par = f_fit.dpar
    d_perp = f_fit.dperp
    fa = f_fit.fractional_anisotropy()
    md = f_fit.mean_diffusivity()


.. GENERATED FROM PYTHON SOURCE LINES 90-91

Show the indices and save them in FORECAST_indices.png.

.. GENERATED FROM PYTHON SOURCE LINES 91-116

.. code-block:: default



    fig = plt.figure(figsize=(6, 6))
    ax1 = fig.add_subplot(2, 2, 1, title='parallel diffusivity')
    ax1.set_axis_off()
    ind = ax1.imshow(d_par[:, :, 0].T, interpolation='nearest',
                     origin='lower', cmap=plt.cm.gray)
    plt.colorbar(ind, shrink=0.6)
    ax2 = fig.add_subplot(2, 2, 2, title='perpendicular diffusivity')
    ax2.set_axis_off()
    ind = ax2.imshow(d_perp[:, :, 0].T, interpolation='nearest',
                     origin='lower', cmap=plt.cm.gray)
    plt.colorbar(ind, shrink=0.6)
    ax3 = fig.add_subplot(2, 2, 3, title='fractional anisotropy')
    ax3.set_axis_off()
    ind = ax3.imshow(fa[:, :, 0].T, interpolation='nearest',
                     origin='lower', cmap=plt.cm.gray)
    plt.colorbar(ind, shrink=0.6)
    ax4 = fig.add_subplot(2, 2, 4, title='mean diffusivity')
    ax4.set_axis_off()
    ind = ax4.imshow(md[:, :, 0].T, interpolation='nearest',
                     origin='lower', cmap=plt.cm.gray)
    plt.colorbar(ind, shrink=0.6)
    plt.savefig('FORECAST_indices.png', dpi=300, bbox_inches='tight')


.. GENERATED FROM PYTHON SOURCE LINES 117-122

.. figure:: FORECAST_indices.png
   :align: center

   **FORECAST scalar indices**.


.. GENERATED FROM PYTHON SOURCE LINES 125-126

Load an ODF reconstruction sphere

.. GENERATED FROM PYTHON SOURCE LINES 126-130

.. code-block:: default



    sphere = get_sphere('repulsion724')


.. GENERATED FROM PYTHON SOURCE LINES 131-132

Compute the fODFs.

.. GENERATED FROM PYTHON SOURCE LINES 132-137

.. code-block:: default



    odf = f_fit.odf(sphere)
    print('fODF.shape (%d, %d, %d, %d)' % odf.shape)


.. GENERATED FROM PYTHON SOURCE LINES 138-139

Display a part of the fODFs

.. GENERATED FROM PYTHON SOURCE LINES 139-147

.. code-block:: default



    odf_actor = actor.odf_slicer(odf[30:60, 30:60, :], sphere=sphere,
                                 colormap='plasma', scale=0.6)
    scene = window.Scene()
    scene.add(odf_actor)
    window.record(scene, out_path='fODFs.png', size=(600, 600), magnification=4)


.. GENERATED FROM PYTHON SOURCE LINES 148-179

.. figure:: fODFs.png
   :align: center

   **Fiber Orientation Distribution Functions, in a small ROI of the brain**.

References
----------

.. [Anderson2005] Anderson A. W., "Measurement of Fiber Orientation
       Distributions Using High Angular Resolution Diffusion Imaging", Magnetic
       Resonance in Medicine, 2005.

.. [Kaden2016] Kaden E. et al., "Quantitative Mapping of the Per-Axon Diffusion
       Coefficients in Brain White Matter", Magnetic Resonance in Medicine,
       2016.

.. [Zucchelli2017] Zucchelli E. et al., "A generalized SMT-based framework for
       Diffusion MRI microstructural model estimation", MICCAI Workshop on
       Computational DIFFUSION MRI (CDMRI), 2017.

.. [Alexander2017] Alexander LM, Escalera J, Ai L, et al. An open resource for
       transdiagnostic research in pediatric mental health and learning
       disorders. Sci Data. 2017;4:170181.

.. [RichieHalford2022] Richie-Halford A, Cieslak M, Ai L, et al. An
       analysis-ready and quality controlled resource for pediatric brain
       white-matter research. Scientific Data. 2022;9(1):1-27.


.. include:: ../links_names.inc


.. GENERATED FROM PYTHON SOURCE LINES 181-183

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_forecast.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_forecast.py <reconst_forecast.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_forecast.ipynb <reconst_forecast.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
