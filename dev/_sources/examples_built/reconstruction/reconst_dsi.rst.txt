
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/reconstruction/reconst_dsi.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_reconstruction_reconst_dsi.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_dsi.py:


===========================================
Reconstruct with Diffusion Spectrum Imaging
===========================================

We show how to apply Diffusion Spectrum Imaging [Wedeen08]_ to
diffusion MRI datasets of Cartesian keyhole diffusion gradients.

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 11-23

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt

    from dipy.core.gradients import gradient_table
    from dipy.core.ndindex import ndindex
    from dipy.data import get_fnames, get_sphere
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti
    from dipy.reconst.dsi import DiffusionSpectrumModel
    from dipy.reconst.odf import gfa








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Download and get the data filenames for this tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python


    fraw, fbval, fbvec = get_fnames('taiwan_ntu_dsi')








.. GENERATED FROM PYTHON SOURCE LINES 29-34

img contains a nibabel Nifti1Image object (data) and gtab contains a
GradientTable object (gradient information e.g. b-values). For example to
read the b-values it is possible to write print(gtab.bvals).

Load the raw diffusion data and the affine.

.. GENERATED FROM PYTHON SOURCE LINES 34-42

.. code-block:: Python


    data, affine, voxel_size = load_nifti(fraw, return_voxsize=True)
    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)
    bvecs[1:] = (bvecs[1:] /
                     np.sqrt(np.sum(bvecs[1:] * bvecs[1:], axis=1))[:, None])
    gtab = gradient_table(bvals, bvecs)
    print('data.shape (%d, %d, %d, %d)' % data.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data.shape (96, 96, 60, 203)




.. GENERATED FROM PYTHON SOURCE LINES 43-46

This dataset has anisotropic voxel sizes, therefore reslicing is necessary.

Instantiate the Model and apply it to the data.

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: Python


    dsmodel = DiffusionSpectrumModel(gtab)








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Let's just use one slice only from the data.

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: Python


    dataslice = data[:, :, data.shape[2] // 2]

    dsfit = dsmodel.fit(dataslice)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/9216 [00:00<?, ?it/s]    100%|██████████| 9216/9216 [00:00<00:00, 1394671.15it/s]




.. GENERATED FROM PYTHON SOURCE LINES 57-58

Load an odf reconstruction sphere

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: Python


    sphere = get_sphere('repulsion724')








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Calculate the ODFs with this specific sphere

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python


    ODF = dsfit.odf(sphere)

    print('ODF.shape (%d, %d, %d)' % ODF.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/skoudoro/devel/dipy-release/dipy/reconst/dsi.py:173: RuntimeWarning: invalid value encountered in divide
      Pr /= Pr.sum()
    ODF.shape (96, 96, 724)




.. GENERATED FROM PYTHON SOURCE LINES 69-71

In a similar fashion it is possible to calculate the PDFs of all voxels
in one call with the following way

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: Python


    PDF = dsfit.pdf()

    print('PDF.shape (%d, %d, %d, %d, %d)' % PDF.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PDF.shape (96, 96, 17, 17, 17)




.. GENERATED FROM PYTHON SOURCE LINES 77-83

We see that even for a single slice this PDF array is close to 345 MBytes
so we really have to be careful with memory usage when use this function
with a full dataset.

The simple solution is to generate/analyze the ODFs/PDFs by iterating
through each voxel and not store them in memory if that is not necessary.

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: Python


    for index in ndindex(dataslice.shape[:2]):
        pdf = dsmodel.fit(dataslice[index]).pdf()








.. GENERATED FROM PYTHON SOURCE LINES 88-96

If you really want to save the PDFs of a full dataset on the disc we
recommend using memory maps (``numpy.memmap``) but still have in mind that
even if you do that for example for a dataset of volume size
``(96, 96, 60)`` you will need about 2.5 GBytes which can take less space
when reasonable spheres (with < 1000 vertices) are used.

Let's now calculate a map of Generalized Fractional Anisotropy (GFA)
[Tuch04]_ using the DSI ODFs.

.. GENERATED FROM PYTHON SOURCE LINES 96-104

.. code-block:: Python


    GFA = gfa(ODF)

    fig_hist, ax = plt.subplots(1)
    ax.set_axis_off()
    plt.imshow(GFA.T)
    plt.savefig('dsi_gfa.png', bbox_inches='tight')




.. image-sg:: /examples_built/reconstruction/images/sphx_glr_reconst_dsi_001.png
   :alt: reconst dsi
   :srcset: /examples_built/reconstruction/images/sphx_glr_reconst_dsi_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-116

.. rst-class:: centered small fst-italic fw-semibold

See also :ref:`sphx_glr_examples_built_reconstruction_reconst_dsi_metrics.py`
for calculating different types of DSI maps.


.. [Wedeen08] Wedeen et al., Diffusion spectrum magnetic resonance imaging
              (DSI) tractography of crossing fibers, Neuroimage, vol 41, no
              4, 1267-1277, 2008.

.. [Tuch04] Tuch, D.S, Q-ball imaging, MRM, vol 52, no 6, 1358-1372, 2004.

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.098 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_dsi.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_dsi.ipynb <reconst_dsi.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_dsi.py <reconst_dsi.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
