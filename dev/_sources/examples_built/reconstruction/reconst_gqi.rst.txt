
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\reconstruction\reconst_gqi.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_reconstruction_reconst_gqi.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_gqi.py:


===============================================
Reconstruct with Generalized Q-Sampling Imaging
===============================================

We show how to apply Generalized Q-Sampling Imaging :footcite:p:`Yeh2010`
to diffusion MRI datasets. You can think of GQI as an analytical version of
DSI orientation distribution function (ODF) (Garyfallidis, PhD thesis, 2012).

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 12-22

.. code-block:: Python


    import numpy as np

    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, get_sphere
    from dipy.direction import peaks_from_model
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti
    from dipy.reconst.gqi import GeneralizedQSamplingModel








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Download and get the data filenames for this tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: Python


    fraw, fbval, fbvec = get_fnames(name="taiwan_ntu_dsi")








.. GENERATED FROM PYTHON SOURCE LINES 28-35

img contains a nibabel Nifti1Image object (data) and gtab contains a
``GradientTable`` object (gradient information e.g. b-values). For example
to read the b-values it is possible to write::

   print(gtab.bvals)

Load the raw diffusion data and the affine.

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: Python


    data, affine, voxel_size = load_nifti(fraw, return_voxsize=True)
    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)
    bvecs[1:] = bvecs[1:] / np.sqrt(np.sum(bvecs[1:] * bvecs[1:], axis=1))[:, None]
    gtab = gradient_table(bvals, bvecs=bvecs)
    print(f"data.shape {data.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data.shape (96, 96, 60, 203)




.. GENERATED FROM PYTHON SOURCE LINES 43-46

This dataset has anisotropic voxel sizes, therefore reslicing is necessary.

Instantiate the model and apply it to the data.

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: Python


    gqmodel = GeneralizedQSamplingModel(gtab, sampling_length=3)








.. GENERATED FROM PYTHON SOURCE LINES 50-53

The parameter ``sampling_length`` is used here to

Lets just use one slice only from the data.

.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: Python


    dataslice = data[:, :, data.shape[2] // 2]

    mask = dataslice[..., 0] > 50

    gqfit = gqmodel.fit(dataslice, mask=mask)








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Load an ODF reconstruction sphere

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: Python


    sphere = get_sphere(name="repulsion724")








.. GENERATED FROM PYTHON SOURCE LINES 66-67

Calculate the ODFs with this specific sphere

.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: Python


    ODF = gqfit.odf(sphere)

    print(f"ODF.shape {ODF.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ODF.shape (96, 96, 724)




.. GENERATED FROM PYTHON SOURCE LINES 73-75

Using ``peaks_from_model`` we can find the main peaks of the ODFs and other
properties.

.. GENERATED FROM PYTHON SOURCE LINES 75-89

.. code-block:: Python


    gqpeaks = peaks_from_model(
        model=gqmodel,
        data=dataslice,
        sphere=sphere,
        relative_peak_threshold=0.5,
        min_separation_angle=25,
        mask=mask,
        return_odf=False,
        normalize_peaks=True,
    )

    gqpeak_values = gqpeaks.peak_values








.. GENERATED FROM PYTHON SOURCE LINES 90-91

``gqpeak_indices`` show which sphere points have the maximum values.

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python


    gqpeak_indices = gqpeaks.peak_indices








.. GENERATED FROM PYTHON SOURCE LINES 95-96

It is also possible to calculate GFA.

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: Python


    GFA = gqpeaks.gfa

    print(f"GFA.shape {GFA.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    GFA.shape (96, 96)




.. GENERATED FROM PYTHON SOURCE LINES 102-104

With parameter ``return_odf=True`` we can obtain the ODF using
``gqpeaks.ODF``

.. GENERATED FROM PYTHON SOURCE LINES 104-116

.. code-block:: Python


    gqpeaks = peaks_from_model(
        model=gqmodel,
        data=dataslice,
        sphere=sphere,
        relative_peak_threshold=0.5,
        min_separation_angle=25,
        mask=mask,
        return_odf=True,
        normalize_peaks=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 117-119

This ODF will be of course identical to the ODF calculated above as long as
the same data and mask are used.

.. GENERATED FROM PYTHON SOURCE LINES 119-122

.. code-block:: Python


    print(np.sum(gqpeaks.odf != ODF) == 0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True




.. GENERATED FROM PYTHON SOURCE LINES 123-132

The advantage of using ``peaks_from_model`` is that it calculates the ODF
only once and saves it or deletes if it is not necessary to keep.


References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 134-136

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.188 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_gqi.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_gqi.ipynb <reconst_gqi.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_gqi.py <reconst_gqi.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
