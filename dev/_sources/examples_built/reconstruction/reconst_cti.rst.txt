
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/reconstruction/reconst_cti.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_reconstruction_reconst_cti.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_cti.py:


========================================================================
Reconstruction of the diffusion signal with the correlation tensor model
========================================================================

Correlation Tensor MRI (CTI) is a method that uses double diffusion
encoding data to resolve sources of kurtosis. It is similar to the Q-space
Trajectory Imaging method
(see :ref:`sphx_glr_examples_built_reconstruction_reconst_qti.py`)
[NetoHe2020]_. However, in addition to the kurtosis sources associated with
diffusion variance across compartments (``K_aniso`` and ``K_iso``, which
are related to microscopic anisotropy and the variance of the mean
diffusivities of compartments, respectively), CTI also measures K_micro.
This quantifies non-Gaussian diffusion effects that deviate from the multiple
Gaussian component tissue representation, such as restricted diffusion,
exchange, and structural disorder in compartments like cross-sectional
variance [NovelloL2022]_ [AlvesR2022]_.

Although the CorrelationTensorModel and the DiffusionKurtosisTensorFit may
share some similarities, they have significantly different representations for
the diffusion-weighted signal. This difference leads to the necessity for a
unique ``design matrix`` specifically for CTI.
The CorrelationTensorModel expresses the diffusion-weighted signal as:

.. math::

    \begin{align}
    \log E_{\Delta}(q_1, q_2) &= \left(q_{1i}q_{1j}
    + q_{2i}q_{2j}\right) \Delta D_{ij} \
    &+ q_{1i}q_{2j}Q_{ij} \
    &+ \frac{1}{6} \left( q_{1i}q_{1j}q_{1k}q_{1l}
    + q_{2i}q_{2j}q_{2k}q_{2l} \right) \
    &\quad \times \Delta^2 D^2 W_{ijkl} \
    &+ \frac{1}{4} q_{1i}q_{1j}q_{2k}q_{2l}Z_{ijkl} \
    &+ \frac{1}{6} \left( q_{1i}q_{1j}q_{1k}q_{2l}
    + q_{2i}q_{2j}q_{2k}q_{1l} \right) S_{ijkl} \
    &+ O(q^6)
    \end{align}

where: $\Delta D_{ij}$ refers to the elements of the total diffusion
tensor (DT) and $W_{ijkl}$ are the elements of the total kurtosis tensor
(KT) and $D$ is the mean diffusivity and $Q_{ij}$ are the elements of a 2nd
order correlation tensor Q.
$Z_{ijkl}$ and $S_{ijkl}$ are the elements of the 4th order displacement
correlation tensors Z and S, respectively.

However it differentiates from the DiffusionKurtosis Model by calculating the
different sources of kurtosis.

In the following example we show how to fit the correlation tensor model on a
real life dataset and how to estimate correlation tensor based statistics.

First, we'll import all relevant modules.

.. GENERATED FROM PYTHON SOURCE LINES 55-64

.. code-block:: Python


    import matplotlib.pyplot as plt

    import dipy.reconst.cti as cti
    from dipy.io import read_bvals_bvecs
    from dipy.core.gradients import gradient_table
    from dipy.io.image import load_nifti
    from dipy.data import get_fnames








.. GENERATED FROM PYTHON SOURCE LINES 65-76

For CTI analysis, data must be acquired using double diffusion encoding,
taking into account different pairs of b-values and gradient directions
between the two diffusion epochs, as discussed by Henriques et al. in Magn
Reson Med 2021 [NetoHe2021]._
To run CTI we need to have separate b-value and b-vector files for each DDE
diffusion epoch. In this tutorial, a sample DDE dataset and respective
b-value and b-vector files for the two epochs are fetched. If you want to
process your own DDE data compatible with CTI, you will have to change the
below lines of code to add the paths of your data.
The users should also ensure that the data is formatted correctly for the
CTI analysis they are performing.

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: Python


    fdata, fbvals1, fbvecs1, fbvals2, fbvecs2, fmask = get_fnames('cti_rat1')
    data, affine = load_nifti(fdata)
    bvals1, bvecs1 = read_bvals_bvecs(fbvals1, fbvecs1)
    bvals2, bvecs2 = read_bvals_bvecs(fbvals2, fbvecs2)








.. GENERATED FROM PYTHON SOURCE LINES 83-91

In this example, the function load_nifti is used to load the CTI data saved
in filefdata and returns the data as a nibabel Nifti1Image object along with
the affine transformation. The b-values and b-vectors for two different
gradient tables are loaded from ``bvals1.bval`` and ``bvec1.bvec``, and
``bvals2.bval`` and ``bvec2.bvec``, respectively, using the
``read_bvals_bvecs`` function. For CTI reconstruction in DIPY, we need to
define the b-values and b-vectors for each diffusion epoch in separate
gradient tables, as done in the above line of code.

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: Python


    gtab1 = gradient_table(bvals1, bvecs1)
    gtab2 = gradient_table(bvals2, bvecs2)








.. GENERATED FROM PYTHON SOURCE LINES 96-99

Before fitting the data, we perform some data pre-processing. We first
compute a brain mask to avoid unnecessary calculations on the background
of the image.

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: Python


    mask, mask_affine = load_nifti(fmask)








.. GENERATED FROM PYTHON SOURCE LINES 103-107

Now that we've loaded the data and generated the two gradient tables we can
go forward with CTI fitting. For this, the CTI model is first defined for
GradientTable objects gtab1 and gtab2 by instantiating the
CorrelationTensorModel object in the following way:

.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: Python


    ctimodel = cti.CorrelationTensorModel(gtab1, gtab2)








.. GENERATED FROM PYTHON SOURCE LINES 111-113

To fit the data using the defined model object, we call the fit function of
this object.

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: Python


    ctifit = ctimodel.fit(data, mask=mask)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/7516.0 [00:00<?, ?it/s]      0%|          | 36/7516.0 [00:00<00:20, 358.28it/s]      1%|          | 73/7516.0 [00:00<00:20, 356.45it/s]      1%|▏         | 109/7516.0 [00:00<00:31, 237.29it/s]      2%|▏         | 143/7516.0 [00:00<00:27, 267.83it/s]      2%|▏         | 173/7516.0 [00:00<00:26, 276.01it/s]      3%|▎         | 203/7516.0 [00:00<00:30, 243.47it/s]      3%|▎         | 232/7516.0 [00:00<00:28, 254.86it/s]      3%|▎         | 259/7516.0 [00:00<00:28, 256.57it/s]      4%|▍         | 286/7516.0 [00:01<00:29, 248.16it/s]      4%|▍         | 317/7516.0 [00:01<00:27, 262.20it/s]      5%|▍         | 351/7516.0 [00:01<00:25, 282.37it/s]      5%|▌         | 386/7516.0 [00:01<00:23, 299.22it/s]      6%|▌         | 424/7516.0 [00:01<00:22, 321.25it/s]      6%|▌         | 460/7516.0 [00:01<00:21, 323.69it/s]      7%|▋         | 499/7516.0 [00:01<00:20, 342.43it/s]      7%|▋         | 534/7516.0 [00:01<00:21, 325.92it/s]      8%|▊         | 569/7516.0 [00:01<00:20, 331.84it/s]      8%|▊         | 603/7516.0 [00:02<00:21, 317.52it/s]      9%|▊         | 639/7516.0 [00:02<00:20, 328.31it/s]      9%|▉         | 673/7516.0 [00:02<00:20, 327.27it/s]      9%|▉         | 706/7516.0 [00:02<00:26, 255.11it/s]     10%|▉         | 734/7516.0 [00:02<00:26, 260.24it/s]     10%|█         | 762/7516.0 [00:02<00:26, 253.18it/s]     10%|█         | 789/7516.0 [00:02<00:28, 237.49it/s]     11%|█         | 814/7516.0 [00:02<00:28, 236.96it/s]     11%|█         | 839/7516.0 [00:03<00:29, 229.03it/s]     11%|█▏        | 863/7516.0 [00:03<00:29, 223.71it/s]     12%|█▏        | 889/7516.0 [00:03<00:28, 232.72it/s]     12%|█▏        | 913/7516.0 [00:03<00:28, 234.52it/s]     12%|█▏        | 937/7516.0 [00:03<00:29, 223.53it/s]     13%|█▎        | 963/7516.0 [00:03<00:28, 233.20it/s]     13%|█▎        | 987/7516.0 [00:03<00:27, 233.86it/s]     13%|█▎        | 1011/7516.0 [00:03<00:28, 231.84it/s]     14%|█▍        | 1035/7516.0 [00:03<00:27, 233.81it/s]     14%|█▍        | 1059/7516.0 [00:04<00:28, 223.22it/s]     14%|█▍        | 1082/7516.0 [00:04<00:39, 161.03it/s]     15%|█▍        | 1104/7516.0 [00:04<00:37, 169.19it/s]     15%|█▍        | 1123/7516.0 [00:04<00:45, 139.58it/s]     15%|█▌        | 1148/7516.0 [00:04<00:39, 162.22it/s]     16%|█▌        | 1175/7516.0 [00:04<00:33, 187.24it/s]     16%|█▌        | 1200/7516.0 [00:04<00:31, 202.54it/s]     16%|█▋        | 1223/7516.0 [00:04<00:32, 196.06it/s]     17%|█▋        | 1247/7516.0 [00:05<00:30, 207.26it/s]     17%|█▋        | 1269/7516.0 [00:05<00:29, 208.33it/s]     17%|█▋        | 1298/7516.0 [00:05<00:27, 230.24it/s]     18%|█▊        | 1326/7516.0 [00:05<00:26, 230.71it/s]     18%|█▊        | 1350/7516.0 [00:05<00:27, 225.08it/s]     18%|█▊        | 1376/7516.0 [00:05<00:26, 234.47it/s]     19%|█▊        | 1400/7516.0 [00:05<00:26, 232.10it/s]     19%|█▉        | 1424/7516.0 [00:05<00:26, 228.31it/s]     19%|█▉        | 1447/7516.0 [00:05<00:27, 224.55it/s]     20%|█▉        | 1477/7516.0 [00:06<00:24, 245.07it/s]     20%|█▉        | 1502/7516.0 [00:06<00:24, 245.43it/s]     20%|██        | 1527/7516.0 [00:06<00:24, 243.90it/s]     21%|██        | 1553/7516.0 [00:06<00:24, 247.44it/s]     21%|██        | 1578/7516.0 [00:06<00:35, 168.43it/s]     21%|██▏       | 1605/7516.0 [00:06<00:31, 190.35it/s]     22%|██▏       | 1631/7516.0 [00:06<00:29, 202.45it/s]     22%|██▏       | 1654/7516.0 [00:06<00:29, 200.71it/s]     22%|██▏       | 1678/7516.0 [00:07<00:27, 210.31it/s]     23%|██▎       | 1707/7516.0 [00:07<00:25, 230.99it/s]     23%|██▎       | 1732/7516.0 [00:07<00:26, 219.30it/s]     23%|██▎       | 1757/7516.0 [00:07<00:25, 226.96it/s]     24%|██▎       | 1781/7516.0 [00:07<00:26, 219.43it/s]     24%|██▍       | 1804/7516.0 [00:07<00:26, 215.47it/s]     24%|██▍       | 1831/7516.0 [00:07<00:24, 228.91it/s]     25%|██▍       | 1858/7516.0 [00:07<00:23, 236.66it/s]     25%|██▌       | 1882/7516.0 [00:07<00:24, 228.03it/s]     25%|██▌       | 1906/7516.0 [00:08<00:26, 215.15it/s]     26%|██▌       | 1929/7516.0 [00:08<00:25, 217.26it/s]     26%|██▌       | 1955/7516.0 [00:08<00:24, 228.70it/s]     26%|██▋       | 1979/7516.0 [00:08<00:24, 226.32it/s]     27%|██▋       | 2002/7516.0 [00:08<00:25, 215.84it/s]     27%|██▋       | 2030/7516.0 [00:08<00:23, 233.10it/s]     27%|██▋       | 2054/7516.0 [00:08<00:31, 175.95it/s]     28%|██▊       | 2074/7516.0 [00:08<00:30, 178.19it/s]     28%|██▊       | 2104/7516.0 [00:09<00:26, 207.97it/s]     28%|██▊       | 2130/7516.0 [00:09<00:24, 220.51it/s]     29%|██▉       | 2161/7516.0 [00:09<00:21, 244.09it/s]     29%|██▉       | 2188/7516.0 [00:09<00:21, 250.90it/s]     30%|██▉       | 2219/7516.0 [00:09<00:19, 267.32it/s]     30%|██▉       | 2247/7516.0 [00:09<00:27, 188.59it/s]     30%|███       | 2270/7516.0 [00:09<00:27, 193.04it/s]     31%|███       | 2293/7516.0 [00:09<00:31, 164.40it/s]     31%|███       | 2320/7516.0 [00:10<00:27, 186.06it/s]     31%|███       | 2342/7516.0 [00:10<00:28, 181.65it/s]     31%|███▏      | 2364/7516.0 [00:10<00:27, 190.00it/s]     32%|███▏      | 2385/7516.0 [00:10<00:26, 190.10it/s]     32%|███▏      | 2406/7516.0 [00:10<00:26, 193.10it/s]     32%|███▏      | 2428/7516.0 [00:10<00:25, 199.32it/s]     33%|███▎      | 2450/7516.0 [00:10<00:31, 158.78it/s]     33%|███▎      | 2468/7516.0 [00:10<00:31, 161.08it/s]     33%|███▎      | 2488/7516.0 [00:11<00:29, 170.28it/s]     34%|███▎      | 2518/7516.0 [00:11<00:25, 197.49it/s]     34%|███▍      | 2541/7516.0 [00:11<00:24, 205.65it/s]     34%|███▍      | 2564/7516.0 [00:11<00:23, 209.51it/s]     34%|███▍      | 2587/7516.0 [00:11<00:22, 214.52it/s]     35%|███▍      | 2609/7516.0 [00:11<00:23, 212.50it/s]     35%|███▌      | 2637/7516.0 [00:11<00:21, 230.66it/s]     35%|███▌      | 2664/7516.0 [00:11<00:20, 237.95it/s]     36%|███▌      | 2691/7516.0 [00:11<00:19, 246.64it/s]     36%|███▌      | 2716/7516.0 [00:11<00:19, 243.03it/s]     36%|███▋      | 2741/7516.0 [00:12<00:20, 235.14it/s]     37%|███▋      | 2765/7516.0 [00:12<00:21, 225.69it/s]     37%|███▋      | 2795/7516.0 [00:12<00:19, 245.25it/s]     38%|███▊      | 2820/7516.0 [00:12<00:21, 223.42it/s]     38%|███▊      | 2846/7516.0 [00:12<00:20, 231.93it/s]     38%|███▊      | 2870/7516.0 [00:12<00:20, 231.61it/s]     39%|███▊      | 2897/7516.0 [00:12<00:19, 236.94it/s]     39%|███▉      | 2921/7516.0 [00:12<00:25, 181.31it/s]     39%|███▉      | 2947/7516.0 [00:13<00:22, 199.63it/s]     40%|███▉      | 2975/7516.0 [00:13<00:20, 218.90it/s]     40%|███▉      | 2999/7516.0 [00:13<00:21, 209.02it/s]     40%|████      | 3024/7516.0 [00:13<00:20, 216.39it/s]     41%|████      | 3048/7516.0 [00:13<00:20, 221.38it/s]     41%|████      | 3071/7516.0 [00:13<00:20, 212.10it/s]     41%|████      | 3094/7516.0 [00:13<00:20, 215.77it/s]     42%|████▏     | 3121/7516.0 [00:13<00:19, 230.00it/s]     42%|████▏     | 3145/7516.0 [00:13<00:20, 211.90it/s]     42%|████▏     | 3167/7516.0 [00:14<00:20, 214.04it/s]     42%|████▏     | 3193/7516.0 [00:14<00:19, 226.18it/s]     43%|████▎     | 3216/7516.0 [00:14<00:19, 216.83it/s]     43%|████▎     | 3238/7516.0 [00:14<00:21, 201.12it/s]     43%|████▎     | 3259/7516.0 [00:14<00:21, 197.11it/s]     44%|████▎     | 3286/7516.0 [00:14<00:19, 215.74it/s]     44%|████▍     | 3308/7516.0 [00:14<00:21, 198.12it/s]     44%|████▍     | 3329/7516.0 [00:15<00:28, 149.33it/s]     45%|████▍     | 3353/7516.0 [00:15<00:24, 169.25it/s]     45%|████▍     | 3373/7516.0 [00:15<00:25, 165.25it/s]     45%|████▌     | 3391/7516.0 [00:15<00:26, 156.14it/s]     45%|████▌     | 3413/7516.0 [00:15<00:24, 167.26it/s]     46%|████▌     | 3435/7516.0 [00:15<00:22, 180.42it/s]     46%|████▌     | 3466/7516.0 [00:15<00:18, 214.63it/s]     46%|████▋     | 3491/7516.0 [00:15<00:18, 223.58it/s]     47%|████▋     | 3525/7516.0 [00:15<00:15, 256.02it/s]     47%|████▋     | 3552/7516.0 [00:16<00:17, 231.45it/s]     48%|████▊     | 3582/7516.0 [00:16<00:15, 249.44it/s]     48%|████▊     | 3610/7516.0 [00:16<00:15, 257.28it/s]     48%|████▊     | 3637/7516.0 [00:16<00:16, 233.55it/s]     49%|████▊     | 3664/7516.0 [00:16<00:16, 238.22it/s]     49%|████▉     | 3696/7516.0 [00:16<00:14, 255.85it/s]     50%|████▉     | 3723/7516.0 [00:16<00:15, 243.54it/s]     50%|████▉     | 3753/7516.0 [00:16<00:14, 254.31it/s]     50%|█████     | 3784/7516.0 [00:16<00:13, 268.99it/s]     51%|█████     | 3812/7516.0 [00:17<00:17, 211.45it/s]     51%|█████     | 3846/7516.0 [00:17<00:15, 241.40it/s]     52%|█████▏    | 3873/7516.0 [00:17<00:14, 248.25it/s]     52%|█████▏    | 3902/7516.0 [00:17<00:19, 182.12it/s]     52%|█████▏    | 3924/7516.0 [00:17<00:25, 141.04it/s]     53%|█████▎    | 3947/7516.0 [00:17<00:22, 157.19it/s]     53%|█████▎    | 3977/7516.0 [00:18<00:18, 186.51it/s]     53%|█████▎    | 4008/7516.0 [00:18<00:16, 206.52it/s]     54%|█████▎    | 4034/7516.0 [00:18<00:16, 216.87it/s]     54%|█████▍    | 4064/7516.0 [00:18<00:14, 237.80it/s]     54%|█████▍    | 4090/7516.0 [00:18<00:14, 242.47it/s]     55%|█████▍    | 4116/7516.0 [00:18<00:13, 246.86it/s]     55%|█████▌    | 4148/7516.0 [00:18<00:12, 266.89it/s]     56%|█████▌    | 4176/7516.0 [00:18<00:13, 253.08it/s]     56%|█████▌    | 4203/7516.0 [00:18<00:13, 238.16it/s]     56%|█████▋    | 4232/7516.0 [00:19<00:13, 251.37it/s]     57%|█████▋    | 4258/7516.0 [00:19<00:14, 221.00it/s]     57%|█████▋    | 4282/7516.0 [00:19<00:14, 221.89it/s]     57%|█████▋    | 4320/7516.0 [00:19<00:12, 263.10it/s]     58%|█████▊    | 4348/7516.0 [00:19<00:12, 259.38it/s]     58%|█████▊    | 4379/7516.0 [00:19<00:11, 268.42it/s]     59%|█████▊    | 4407/7516.0 [00:19<00:11, 262.72it/s]     59%|█████▉    | 4434/7516.0 [00:19<00:11, 259.11it/s]     59%|█████▉    | 4461/7516.0 [00:19<00:11, 260.94it/s]     60%|█████▉    | 4489/7516.0 [00:20<00:11, 260.11it/s]     60%|██████    | 4516/7516.0 [00:20<00:11, 252.02it/s]     60%|██████    | 4543/7516.0 [00:20<00:12, 247.08it/s]     61%|██████    | 4568/7516.0 [00:20<00:17, 168.07it/s]     61%|██████    | 4595/7516.0 [00:20<00:15, 189.35it/s]     61%|██████▏   | 4618/7516.0 [00:20<00:16, 172.82it/s]     62%|██████▏   | 4639/7516.0 [00:20<00:16, 174.87it/s]     62%|██████▏   | 4662/7516.0 [00:21<00:15, 184.95it/s]     62%|██████▏   | 4682/7516.0 [00:21<00:15, 186.89it/s]     63%|██████▎   | 4702/7516.0 [00:21<00:17, 158.80it/s]     63%|██████▎   | 4720/7516.0 [00:21<00:17, 163.59it/s]     63%|██████▎   | 4747/7516.0 [00:21<00:14, 189.35it/s]     64%|██████▎   | 4773/7516.0 [00:21<00:13, 207.20it/s]     64%|██████▍   | 4799/7516.0 [00:21<00:12, 221.42it/s]     64%|██████▍   | 4831/7516.0 [00:21<00:11, 244.08it/s]     65%|██████▍   | 4857/7516.0 [00:21<00:10, 244.40it/s]     65%|██████▍   | 4884/7516.0 [00:22<00:10, 250.20it/s]     65%|██████▌   | 4911/7516.0 [00:22<00:10, 252.14it/s]     66%|██████▌   | 4937/7516.0 [00:22<00:10, 242.92it/s]     66%|██████▌   | 4962/7516.0 [00:22<00:10, 244.26it/s]     66%|██████▋   | 4987/7516.0 [00:22<00:10, 233.66it/s]     67%|██████▋   | 5016/7516.0 [00:22<00:10, 248.76it/s]     67%|██████▋   | 5042/7516.0 [00:22<00:10, 235.98it/s]     67%|██████▋   | 5069/7516.0 [00:22<00:09, 245.27it/s]     68%|██████▊   | 5096/7516.0 [00:22<00:09, 249.49it/s]     68%|██████▊   | 5123/7516.0 [00:22<00:09, 253.03it/s]     69%|██████▊   | 5156/7516.0 [00:23<00:08, 271.73it/s]     69%|██████▉   | 5185/7516.0 [00:23<00:08, 271.76it/s]     69%|██████▉   | 5213/7516.0 [00:23<00:11, 192.61it/s]     70%|██████▉   | 5242/7516.0 [00:23<00:10, 214.45it/s]     70%|███████   | 5268/7516.0 [00:23<00:10, 224.66it/s]     70%|███████   | 5294/7516.0 [00:23<00:09, 226.84it/s]     71%|███████   | 5319/7516.0 [00:23<00:09, 225.03it/s]     71%|███████   | 5343/7516.0 [00:24<00:10, 215.91it/s]     71%|███████▏  | 5366/7516.0 [00:24<00:10, 213.22it/s]     72%|███████▏  | 5389/7516.0 [00:24<00:09, 216.53it/s]     72%|███████▏  | 5412/7516.0 [00:24<00:09, 215.53it/s]     72%|███████▏  | 5434/7516.0 [00:24<00:10, 199.36it/s]     73%|███████▎  | 5456/7516.0 [00:24<00:10, 198.39it/s]     73%|███████▎  | 5487/7516.0 [00:24<00:08, 228.21it/s]     73%|███████▎  | 5513/7516.0 [00:24<00:08, 228.69it/s]     74%|███████▍  | 5545/7516.0 [00:24<00:07, 253.05it/s]     74%|███████▍  | 5571/7516.0 [00:25<00:08, 241.82it/s]     75%|███████▍  | 5601/7516.0 [00:25<00:07, 257.84it/s]     75%|███████▍  | 5635/7516.0 [00:25<00:06, 279.25it/s]     75%|███████▌  | 5668/7516.0 [00:25<00:06, 287.00it/s]     76%|███████▌  | 5697/7516.0 [00:25<00:07, 233.65it/s]     76%|███████▋  | 5735/7516.0 [00:25<00:06, 269.63it/s]     77%|███████▋  | 5764/7516.0 [00:25<00:08, 218.00it/s]     77%|███████▋  | 5791/7516.0 [00:25<00:07, 227.96it/s]     77%|███████▋  | 5817/7516.0 [00:26<00:07, 212.46it/s]     78%|███████▊  | 5840/7516.0 [00:26<00:08, 205.54it/s]     78%|███████▊  | 5871/7516.0 [00:26<00:07, 229.57it/s]     78%|███████▊  | 5900/7516.0 [00:26<00:06, 242.49it/s]     79%|███████▉  | 5932/7516.0 [00:26<00:06, 261.41it/s]     79%|███████▉  | 5967/7516.0 [00:26<00:05, 285.69it/s]     80%|███████▉  | 6002/7516.0 [00:26<00:05, 299.76it/s]     80%|████████  | 6033/7516.0 [00:26<00:04, 302.66it/s]     81%|████████  | 6064/7516.0 [00:26<00:04, 299.85it/s]     81%|████████  | 6095/7516.0 [00:27<00:05, 266.72it/s]     81%|████████▏ | 6123/7516.0 [00:27<00:05, 262.71it/s]     82%|████████▏ | 6150/7516.0 [00:27<00:05, 252.76it/s]     82%|████████▏ | 6176/7516.0 [00:27<00:05, 250.43it/s]     83%|████████▎ | 6202/7516.0 [00:27<00:06, 195.96it/s]     83%|████████▎ | 6234/7516.0 [00:27<00:05, 224.69it/s]     83%|████████▎ | 6266/7516.0 [00:27<00:05, 248.28it/s]     84%|████████▍ | 6297/7516.0 [00:27<00:04, 264.08it/s]     84%|████████▍ | 6326/7516.0 [00:28<00:05, 232.93it/s]     85%|████████▍ | 6357/7516.0 [00:28<00:04, 252.24it/s]     85%|████████▍ | 6385/7516.0 [00:28<00:04, 257.96it/s]     85%|████████▌ | 6421/7516.0 [00:28<00:03, 284.89it/s]     86%|████████▌ | 6451/7516.0 [00:28<00:03, 268.16it/s]     86%|████████▌ | 6479/7516.0 [00:28<00:04, 237.82it/s]     87%|████████▋ | 6505/7516.0 [00:28<00:04, 239.06it/s]     87%|████████▋ | 6530/7516.0 [00:28<00:04, 231.84it/s]     87%|████████▋ | 6554/7516.0 [00:28<00:04, 224.75it/s]     88%|████████▊ | 6578/7516.0 [00:29<00:04, 227.82it/s]     88%|████████▊ | 6602/7516.0 [00:29<00:04, 227.08it/s]     88%|████████▊ | 6627/7516.0 [00:29<00:03, 229.38it/s]     88%|████████▊ | 6651/7516.0 [00:29<00:03, 225.35it/s]     89%|████████▉ | 6674/7516.0 [00:29<00:04, 178.54it/s]     89%|████████▉ | 6697/7516.0 [00:29<00:04, 190.65it/s]     89%|████████▉ | 6723/7516.0 [00:29<00:03, 206.66it/s]     90%|████████▉ | 6746/7516.0 [00:29<00:03, 212.55it/s]     90%|█████████ | 6769/7516.0 [00:29<00:03, 214.88it/s]     90%|█████████ | 6794/7516.0 [00:30<00:03, 219.03it/s]     91%|█████████ | 6819/7516.0 [00:30<00:03, 224.97it/s]     91%|█████████ | 6844/7516.0 [00:30<00:02, 231.97it/s]     91%|█████████▏| 6872/7516.0 [00:30<00:02, 237.46it/s]     92%|█████████▏| 6899/7516.0 [00:30<00:02, 245.99it/s]     92%|█████████▏| 6924/7516.0 [00:30<00:02, 239.39it/s]     92%|█████████▏| 6951/7516.0 [00:30<00:02, 239.65it/s]     93%|█████████▎| 6976/7516.0 [00:30<00:02, 239.15it/s]     93%|█████████▎| 7000/7516.0 [00:30<00:02, 216.64it/s]     93%|█████████▎| 7023/7516.0 [00:31<00:02, 165.82it/s]     94%|█████████▍| 7052/7516.0 [00:31<00:02, 193.01it/s]     94%|█████████▍| 7082/7516.0 [00:31<00:01, 218.84it/s]     95%|█████████▍| 7107/7516.0 [00:31<00:02, 163.10it/s]     95%|█████████▌| 7141/7516.0 [00:31<00:01, 199.64it/s]     95%|█████████▌| 7174/7516.0 [00:31<00:01, 229.48it/s]     96%|█████████▌| 7201/7516.0 [00:31<00:01, 237.53it/s]     96%|█████████▌| 7234/7516.0 [00:32<00:01, 260.66it/s]     97%|█████████▋| 7271/7516.0 [00:32<00:00, 289.99it/s]     97%|█████████▋| 7306/7516.0 [00:32<00:00, 305.37it/s]     98%|█████████▊| 7342/7516.0 [00:32<00:00, 320.10it/s]     98%|█████████▊| 7376/7516.0 [00:32<00:00, 315.42it/s]     99%|█████████▊| 7409/7516.0 [00:32<00:00, 312.89it/s]     99%|█████████▉| 7441/7516.0 [00:32<00:00, 314.47it/s]     99%|█████████▉| 7473/7516.0 [00:32<00:00, 312.06it/s]    100%|█████████▉| 7505/7516.0 [00:32<00:00, 289.96it/s]    100%|██████████| 7516/7516.0 [00:32<00:00, 228.02it/s]




.. GENERATED FROM PYTHON SOURCE LINES 117-128

The fit method for the CTI model produces a CorrelationTensorFit object,
which contains the attributes of both the DKI and DTI models. Given that CTI
is a built upon DKI, which itself extends the DTI model, the
CorrelationTensorFit instance captures a comprehensive set of parameters and
attributes from these underlying models.

For instance, the CTI model inherently estimates all DTI and DKI statistics,
such as mean, axial, and radial diffusivities (MD, AD, RD) as well as the
mean, axial, and radial kurtosis (MK, AK, RK).
To better illustrate the extraction of main DTI/DKI parameters using the CTI
model, consider the following lines of code:

.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. code-block:: Python


    AD = ctifit.ad
    MD = ctifit.md
    RD = ctifit.rd
    MK = ctifit.mk()
    AK = ctifit.ak()
    RK = ctifit.rk()








.. GENERATED FROM PYTHON SOURCE LINES 137-141

However, in addition to these metrics, CTI also provides unique sources of
information, not available in DTI and DKI. Below we draw a feature map of the
3 different sources of kurtosis which can exclusively be calculated from the
CTI model.

.. GENERATED FROM PYTHON SOURCE LINES 141-164

.. code-block:: Python


    kiso_map = ctifit.K_iso
    kaniso_map = ctifit.K_aniso
    kmicro_map = ctifit.K_micro

    slice_idx = 0
    fig, axarr = plt.subplots(1, 3, figsize=(15, 5))

    axarr[0].imshow(kiso_map[:, :, slice_idx], cmap='gray',
                    origin='lower', vmin=0, vmax=1)
    axarr[0].set_title('Kiso Map')

    axarr[1].imshow(kaniso_map[:, :, slice_idx], cmap='gray',
                    origin='lower', vmin=0, vmax=1)
    axarr[1].set_title('Kaniso Map')

    axarr[2].imshow(kmicro_map[:, :, slice_idx], cmap='gray',
                    origin='lower', vmin=0, vmax=1)
    axarr[2].set_title('Kmicro Map')

    plt.tight_layout()
    plt.show()








.. GENERATED FROM PYTHON SOURCE LINES 165-182

References
----------
.. [NetoHe2020] Henriques, R.N., Jespersen, S.N., Shemesh, N., 2020.
    Correlation tensor magnetic resonance imaging. Neuroimage 211.
    doi: 10.1016/j.neuroimage.2020.116605
.. [NovelloL2022] Novello, L., Henriques, R.N., Ianus, A., Feiweier, T.,
    Shemesh, N., Jovicich, J. 2022.
    In vivo Correlation Tensor MRI reveals microscopic kurtosis in the human
    brain on a clinical 3T scanner. Neuroimage 254: 119137
    doi: 10.1016/j.neuroimage.2022.119137
.. [AlvesR2022] Alves, R., Henriques, R.N., Kerkelä, L., Chavarrías C.,
Jespersen, S.N., Shemesh, N.
    2022. Correlation Tensor MRI deciphers underlying kurtosis sources in
    stroke, Neuroimage 247: 118833. doi: 10.1016/j.neuroimage.2021.118833
.. [NetHe2021] Henriques, R.N., Jespersen, S.N., Shemesh, N., 2021.
Evidence for microscopic kurtosis in neural tissue revealed by correlation
tensor MRI. Magn. Reson. Med. 1-20. doi: 10.1002/mrm.28938

.. GENERATED FROM PYTHON SOURCE LINES 184-186

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 50.735 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_cti.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_cti.ipynb <reconst_cti.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_cti.py <reconst_cti.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
