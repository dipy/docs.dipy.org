
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/reconstruction/reconst_shore.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_reconstruction_reconst_shore.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_reconstruction_reconst_shore.py:


==================================================================
Continuous and analytical diffusion signal modelling with 3D-SHORE
==================================================================

We show how to model the diffusion signal as a linear combination
of continuous functions from the SHORE basis :footcite:p:`Merlet2013`,
:footcite:p:`Ozarslan2008`, :footcite:p:`Ozarslan2009`. We also compute the
analytical Orientation Distribution Function (ODF).

First import the necessary modules:

.. GENERATED FROM PYTHON SOURCE LINES 13-21

.. code-block:: Python


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, get_sphere
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti
    from dipy.reconst.shore import ShoreModel
    from dipy.viz import actor, window








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Download and read the data for this tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 23-41

.. code-block:: Python


    # ``fetch_isbi2013_2shell()`` provides data from the `ISBI HARDI contest 2013
    # <http://hardi.epfl.ch/static/events/2013_ISBI/>`_ acquired for two shells at
    # b-values 1500 $s/mm^2$ and 2500 $s/mm^2$.

    # The six parameters of these two functions define the ROI where to reconstruct
    # the data. They respectively correspond to ``(xmin,xmax,ymin,ymax,zmin,zmax)``
    # with x, y, z and the three axis defining the spatial positions of the voxels.

    fraw, fbval, fbvec = get_fnames(name="isbi2013_2shell")

    data, affine = load_nifti(fraw)
    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)
    gtab = gradient_table(bvals, bvecs=bvecs)
    data_small = data[10:40, 22, 10:40]

    print(f"data.shape {data.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data.shape (50, 50, 50, 64)




.. GENERATED FROM PYTHON SOURCE LINES 42-59

``data`` contains the voxel data and ``gtab`` contains a ``GradientTable``
object (gradient information e.g. b-values). For example, to show the
b-values it is possible to write::

    print(gtab.bvals)

Instantiate the SHORE Model.

``radial_order`` is the radial order of the SHORE basis.

``zeta`` is the scale factor of the SHORE basis.

``lambdaN`` and ``lambdaL`` are the radial and angular regularization
constants, respectively.

For details regarding these four parameters see :footcite:p:`Cheng2011` and
:footcite:p:`Merlet2013`.

.. GENERATED FROM PYTHON SOURCE LINES 59-68

.. code-block:: Python


    radial_order = 6
    zeta = 700
    lambdaN = 1e-8
    lambdaL = 1e-8
    asm = ShoreModel(
        gtab, radial_order=radial_order, zeta=zeta, lambdaN=lambdaN, lambdaL=lambdaL
    )








.. GENERATED FROM PYTHON SOURCE LINES 69-70

Fit the SHORE model to the data

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python


    asmfit = asm.fit(data_small)








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Load an odf reconstruction sphere

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: Python


    sphere = get_sphere(name="repulsion724")








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Compute the ODFs

.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: Python


    odf = asmfit.odf(sphere)
    print(f"odf.shape {odf.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    odf.shape (30, 30, 724)




.. GENERATED FROM PYTHON SOURCE LINES 85-86

Display the ODFs

.. GENERATED FROM PYTHON SOURCE LINES 86-99

.. code-block:: Python


    # Enables/disables interactive visualization
    interactive = False

    scene = window.Scene()
    sfu = actor.odf_slicer(odf[:, None, :], sphere=sphere, colormap="plasma", scale=0.5)
    sfu.RotateX(-90)
    sfu.display(y=0)
    scene.add(sfu)
    window.record(scene=scene, out_path="odfs.png", size=(600, 600))
    if interactive:
        window.show(scene)




.. image-sg:: /examples_built/reconstruction/images/sphx_glr_reconst_shore_001.png
   :alt: reconst shore
   :srcset: /examples_built/reconstruction/images/sphx_glr_reconst_shore_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-110

.. rst-class:: centered small fst-italic fw-semibold

Orientation distribution functions.


References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.016 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_shore.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reconst_shore.ipynb <reconst_shore.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reconst_shore.py <reconst_shore.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: reconst_shore.zip <reconst_shore.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
