
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\registration\bundlewarp_registration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_registration_bundlewarp_registration.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_registration_bundlewarp_registration.py:


============================================
Nonrigid Bundle Registration with BundleWarp
============================================

This example explains how you can nonlinearly register two bundles from two
different subjects directly in the space of streamlines
:footcite:p:`Chandio2023`, :footcite:p:`Chandio2020b`.

To show the concept, we will use two pre-saved uncinate fasciculus bundles. The
algorithm used here is called BundleWarp, streamline-based nonlinear
registration of white matter tracts :footcite:p:`Chandio2023`.

.. GENERATED FROM PYTHON SOURCE LINES 15-34

.. code-block:: Python


    from os.path import join as pjoin
    from time import time

    from dipy.align.streamwarp import (
        bundlewarp,
        bundlewarp_shape_analysis,
        bundlewarp_vector_filed,
    )
    from dipy.data import fetch_bundle_warp_dataset
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import load_trk, save_tractogram
    from dipy.tracking.streamline import (
        Streamlines,
        set_number_of_points,
        unlist_streamlines,
    )
    from dipy.viz.streamline import viz_displacement_mag, viz_two_bundles, viz_vector_field








.. GENERATED FROM PYTHON SOURCE LINES 35-38

Let's download and load two uncinate fasciculus bundles in the left
hemisphere of the brain (UF_L) available here:
https://figshare.com/articles/dataset/Test_Bundles_for_DIPY/22557733

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: Python


    bundle_warp_files = fetch_bundle_warp_dataset()
    s_UF_L_path = pjoin(bundle_warp_files[1], "s_UF_L.trk")
    m_UF_L_path = pjoin(bundle_warp_files[1], "m_UF_L.trk")

    uf_subj1 = load_trk(s_UF_L_path, reference="same", bbox_valid_check=False).streamlines
    uf_subj2 = load_trk(m_UF_L_path, reference="same", bbox_valid_check=False).streamlines








.. GENERATED FROM PYTHON SOURCE LINES 47-49

Let's resample the streamlines so that they both have the same number of
points per streamline. Here we will use 20 points.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python


    static = Streamlines(set_number_of_points(uf_subj1, nb_points=20))
    moving = Streamlines(set_number_of_points(uf_subj2, nb_points=20))








.. GENERATED FROM PYTHON SOURCE LINES 54-60

We call ``uf_subj2`` a moving bundle as it will be nonlinearly aligned with
``uf_subj1`` (static) bundle. Here is how this is done.


Let's visualize static bundle in red and moving in green before
registration.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    viz_two_bundles(static, moving, fname="static_and_moving.png")




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_001.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 64-71

BundleWarp method provides a unique ability to either partially or fully
deform a moving bundle by the use of a single regularization parameter alpha.
alpha controls the trade-off between regularizing the deformation and having
points match very closely. The lower the value of alpha, the more closely
the bundles would match.

Let's partially deform bundle by setting alpha=0.5.

.. GENERATED FROM PYTHON SOURCE LINES 71-80

.. code-block:: Python


    start = time()
    deformed_bundle, moving_aligned, distances, match_pairs, warp_map = bundlewarp(
        static, moving, alpha=0.5, beta=20, max_iter=15
    )
    end = time()

    print("time taken by BundleWarp registration in seconds = ", end - start)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    time taken by BundleWarp registration in seconds =  5.768532037734985




.. GENERATED FROM PYTHON SOURCE LINES 81-84

Let's visualize static bundle in red and moved (warped) in green. Note: You
can set interactive=True in visualization functions throughout this tutorial
if you prefer to get interactive visualization window.

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: Python


    viz_two_bundles(static, deformed_bundle, fname="static_and_partially_deformed.png")




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_002.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-91

Let's visualize linearly moved bundle in blue and nonlinearly moved bundle in
green to see BundleWarp registration improvement over linear SLR
registration.

.. GENERATED FROM PYTHON SOURCE LINES 91-99

.. code-block:: Python


    viz_two_bundles(
        moving_aligned,
        deformed_bundle,
        fname="linearly_and_nonlinearly_moved.png",
        c1=(0, 0, 1),
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_003.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-103

Now, let's visualize deformation vector field generated by BundleWarp.
This shows us visually where and how much and in what directions deformations
were added by BundleWarp.

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: Python


    offsets, directions, colors = bundlewarp_vector_filed(moving_aligned, deformed_bundle)

    points_aligned, _ = unlist_streamlines(moving_aligned)








.. GENERATED FROM PYTHON SOURCE LINES 109-110

Visualizing just the vector field.

.. GENERATED FROM PYTHON SOURCE LINES 110-114

.. code-block:: Python


    fname = "partially_vectorfield.png"
    viz_vector_field(points_aligned, directions, colors, offsets, fname)




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_004.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 115-117

Let's visualize vector field over linearly moved bundle. This will show how
much deformations were introduced after linear registration.

.. GENERATED FROM PYTHON SOURCE LINES 117-123

.. code-block:: Python


    fname = "partially_vectorfield_over_linearly_moved.png"
    viz_vector_field(
        points_aligned, directions, colors, offsets, fname, bundle=moving_aligned
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_005.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-127

We can also visualize the magnitude of deformations in mm mapped over
affinely moved bundle. It shows which streamlines were deformed the most
after affine registration.

.. GENERATED FROM PYTHON SOURCE LINES 127-131

.. code-block:: Python


    fname = "partially_deformation_magnitude_over_linearly_moved.png"
    viz_displacement_mag(moving_aligned, offsets, fname, interactive=False)




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_006.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 132-133

Saving partially warped bundle.

.. GENERATED FROM PYTHON SOURCE LINES 133-138

.. code-block:: Python


    new_tractogram = StatefulTractogram(deformed_bundle, m_UF_L_path, Space.RASMM)
    save_tractogram(new_tractogram, "partially_deformed_bundle.trk", bbox_valid_check=False)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 139-143

Let's fully deform the moving bundle by setting alpha <= 0.01

We will use MDF distances computed and returned by previous run of BundleWarp
method. This will save computation time.

.. GENERATED FROM PYTHON SOURCE LINES 143-152

.. code-block:: Python


    start = time()
    deformed_bundle2, moving_aligned, distances, match_pairs, warp_map = bundlewarp(
        static, moving, dist=distances, alpha=0.001, beta=20
    )
    end = time()

    print("time taken by BundleWarp registration in seconds = ", end - start)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\skoudoro\AppData\Local\Continuum\Anaconda3\envs\py310\lib\site-packages\dipy\testing\decorators.py:192: UserWarning: Using alpha<=0.01 will result in extreme deformations
      return func(*args, **kwargs)
    using pre-computed distances
    time taken by BundleWarp registration in seconds =  4.92172646522522




.. GENERATED FROM PYTHON SOURCE LINES 153-154

Let's visualize static bundle in red and moved (completely warped) in green.

.. GENERATED FROM PYTHON SOURCE LINES 154-157

.. code-block:: Python


    viz_two_bundles(static, deformed_bundle2, fname="static_and_fully_deformed.png")




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_007.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-161

Now, let's visualize the deformation vector field generated by BundleWarp.
This shows us visually where and how much and in what directions deformations
were added by BundleWarp to perfectly warp moving bundle to look like static.

.. GENERATED FROM PYTHON SOURCE LINES 161-166

.. code-block:: Python


    offsets, directions, colors = bundlewarp_vector_filed(moving_aligned, deformed_bundle2)

    points_aligned, _ = unlist_streamlines(moving_aligned)








.. GENERATED FROM PYTHON SOURCE LINES 167-168

Visualizing just the vector field.

.. GENERATED FROM PYTHON SOURCE LINES 168-172

.. code-block:: Python


    fname = "fully_vectorfield.png"
    viz_vector_field(points_aligned, directions, colors, offsets, fname)




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_008.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 173-176

Let's visualize vector field over linearly moved bundle. This will show how
much deformations were introduced after linear registration by fully
deforming the moving bundle.

.. GENERATED FROM PYTHON SOURCE LINES 176-182

.. code-block:: Python


    fname = "fully_vectorfield_over_linearly_moved.png"
    viz_vector_field(
        points_aligned, directions, colors, offsets, fname, bundle=moving_aligned
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_009.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 183-186

Let's visualize the magnitude of deformations in mm mapped over affinely
moved bundle. It shows which streamlines were deformed the most after affine
registration.

.. GENERATED FROM PYTHON SOURCE LINES 186-190

.. code-block:: Python


    fname = "fully_deformation_magnitude_over_linearly_moved.png"
    viz_displacement_mag(moving_aligned, offsets, fname, interactive=False)




.. image-sg:: /examples_built/registration/images/sphx_glr_bundlewarp_registration_010.png
   :alt: bundlewarp registration
   :srcset: /examples_built/registration/images/sphx_glr_bundlewarp_registration_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 191-197

We can also perform bundle shape difference analysis using the displacement
field generated by fully warping the moving bundle to look exactly like
static bundle. Here, we plot bundle shape profile using BUAN. Bundle shape
profile shows the average magnitude of deformations along the length of the
bundle. Segments where we observe higher deformations are the areas where
two bundles differ the most in shape.

.. GENERATED FROM PYTHON SOURCE LINES 197-202

.. code-block:: Python


    _, _ = bundlewarp_shape_analysis(
        moving_aligned, deformed_bundle, no_disks=10, plotting=False
    )








.. GENERATED FROM PYTHON SOURCE LINES 203-204

Saving fully warped bundle.

.. GENERATED FROM PYTHON SOURCE LINES 204-208

.. code-block:: Python


    new_tractogram = StatefulTractogram(deformed_bundle2, m_UF_L_path, Space.RASMM)
    save_tractogram(new_tractogram, "fully_deformed_bundle.trk", bbox_valid_check=False)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 209-213

References
----------

.. footbibliography::

.. GENERATED FROM PYTHON SOURCE LINES 215-217

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.863 seconds)


.. _sphx_glr_download_examples_built_registration_bundlewarp_registration.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: bundlewarp_registration.ipynb <bundlewarp_registration.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: bundlewarp_registration.py <bundlewarp_registration.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
