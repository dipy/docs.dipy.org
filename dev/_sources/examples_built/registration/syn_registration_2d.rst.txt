
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\registration\syn_registration_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_registration_syn_registration_2d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_registration_syn_registration_2d.py:


==========================================
Symmetric Diffeomorphic Registration in 2D
==========================================
This example explains how to register 2D images using the Symmetric
Normalization (SyN) algorithm proposed by :footcite:t:`Avants2008` (also
implemented in the ANTs software :footcite:p:`Avants2009`)

We will perform the classic Circle-To-C experiment for diffeomorphic
registration

.. GENERATED FROM PYTHON SOURCE LINES 12-29

.. code-block:: Python


    import numpy as np

    import dipy.align.imwarp as imwarp
    from dipy.align.imwarp import SymmetricDiffeomorphicRegistration
    from dipy.align.metrics import CCMetric, SSDMetric
    from dipy.data import get_fnames
    from dipy.io.image import load_nifti_data
    from dipy.segment.mask import median_otsu
    from dipy.viz import regtools

    fname_moving = get_fnames(name="reg_o")
    fname_static = get_fnames(name="reg_c")

    moving = np.load(fname_moving)
    static = np.load(fname_static)








.. GENERATED FROM PYTHON SOURCE LINES 30-33

To visually check the overlap of the static image with the transformed moving
image, we can plot them on top of each other with different channels to see
where the differences are located

.. GENERATED FROM PYTHON SOURCE LINES 33-43

.. code-block:: Python


    regtools.overlay_images(
        static,
        moving,
        title0="Static",
        title_mid="Overlay",
        title1="Moving",
        fname="input_images.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_001.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 44-56

.. rst-class:: centered small fst-italic fw-semibold

Input images.



We want to find an invertible map that transforms the moving image (circle)
into the static image (the C letter).

The first decision we need to make is what similarity metric is appropriate
for our problem. In this example we are using two binary images, so the Sum
of Squared Differences (SSD) is a good choice.

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: Python


    dim = static.ndim
    metric = SSDMetric(dim)








.. GENERATED FROM PYTHON SOURCE LINES 61-66

Now we define an instance of the registration class. The SyN algorithm uses
a multi-resolution approach by building a Gaussian Pyramid. We instruct the
registration instance to perform at most $[n_0, n_1, ..., n_k]$ iterations
at each level of the pyramid. The 0-th level corresponds to the finest
resolution.

.. GENERATED FROM PYTHON SOURCE LINES 66-71

.. code-block:: Python


    level_iters = [200, 100, 50, 25]

    sdr = SymmetricDiffeomorphicRegistration(metric, level_iters=level_iters, inv_iter=50)








.. GENERATED FROM PYTHON SOURCE LINES 72-75

Now we execute the optimization, which returns a DiffeomorphicMap object,
that can be used to register images back and forth between the static and
moving domains

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: Python


    mapping = sdr.optimize(static, moving)








.. GENERATED FROM PYTHON SOURCE LINES 79-81

It is a good idea to visualize the resulting deformation map to make sure
the result is reasonable (at least, visually)

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: Python


    regtools.plot_2d_diffeomorphic_map(mapping, delta=10, fname="diffeomorphic_map.png")




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_002.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[  0.     ,   0.     ,   0.     , ...,   0.     ,   0.     ,
              0.     ],
           [  0.     , 127.     , 127.     , ...,   0.     , 127.     ,
            127.     ],
           [  0.     , 127.     , 126.99999, ...,   0.     , 127.     ,
            127.     ],
           ...,
           [  0.     ,   0.     ,   0.     , ...,   0.     ,   0.     ,
              0.     ],
           [  0.     , 127.     , 127.     , ...,   0.     , 127.     ,
            127.     ],
           [  0.     , 127.     , 127.     , ...,   0.     , 127.     ,
            127.     ]], dtype=float32), array([[  0.     ,   0.     ,   0.     , ...,   0.     ,   0.     ,
              0.     ],
           [  0.     , 126.88535, 126.92105, ...,   0.     , 127.     ,
            127.     ],
           [  0.     , 126.85171, 127.     , ...,   0.     , 127.     ,
            127.     ],
           ...,
           [  0.     ,   0.     ,   0.     , ...,   0.     ,   0.     ,
              0.     ],
           [  0.     , 127.     , 127.     , ...,   0.     , 127.     ,
            127.     ],
           [  0.     , 127.     , 127.     , ...,   0.     , 127.     ,
            127.     ]], dtype=float32))



.. GENERATED FROM PYTHON SOURCE LINES 85-93

.. rst-class:: centered small fst-italic fw-semibold

Deformed lattice under the resulting diffeomorphic map.



Now let's warp the moving image and see if it gets similar to the static
image

.. GENERATED FROM PYTHON SOURCE LINES 93-104

.. code-block:: Python


    warped_moving = mapping.transform(moving, interpolation="linear")
    regtools.overlay_images(
        static,
        warped_moving,
        title0="Static",
        title_mid="Overlay",
        title1="Warped moving",
        fname="direct_warp_result.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_003.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 105-114

.. rst-class:: centered small fst-italic fw-semibold

Moving image transformed under the (direct) transformation in green on top
of the static image (in red).



And we can also apply the inverse mapping to verify that the warped static
image is similar to the moving image

.. GENERATED FROM PYTHON SOURCE LINES 114-125

.. code-block:: Python


    warped_static = mapping.transform_inverse(static, interpolation="linear")
    regtools.overlay_images(
        warped_static,
        moving,
        title0="Warped static",
        title_mid="Overlay",
        title1="Moving",
        fname="inverse_warp_result.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_004.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 126-138

.. rst-class:: centered small fst-italic fw-semibold

Static image transformed under the (inverse) transformation in red on top
of the moving image (in green).



Now let's register a couple of slices from a b0 image using the Cross
Correlation metric. Also, let's inspect the evolution of the registration.
To do this we will define a function that will be called by the registration
object at each stage of the optimization process. We will draw the current
warped images after finishing each resolution.

.. GENERATED FROM PYTHON SOURCE LINES 138-158

.. code-block:: Python



    def callback_CC(sdr, status):
        # Status indicates at which stage of the optimization we currently are
        # For now, we will only react at the end of each resolution of the scale
        # space
        if status == imwarp.RegistrationStages.SCALE_END:
            # get the current images from the metric
            wmoving = sdr.metric.moving_image
            wstatic = sdr.metric.static_image
            # draw the images on top of each other with different colors
            regtools.overlay_images(
                wmoving,
                wstatic,
                title0="Warped moving",
                title_mid="Overlay",
                title1="Warped static",
            )









.. GENERATED FROM PYTHON SOURCE LINES 159-160

Now we are ready to configure and run the registration. First load the data

.. GENERATED FROM PYTHON SOURCE LINES 160-164

.. code-block:: Python


    t1_name, b0_name = get_fnames(name="syn_data")
    data = load_nifti_data(b0_name)








.. GENERATED FROM PYTHON SOURCE LINES 165-166

We first remove the skull from the b0 volume

.. GENERATED FROM PYTHON SOURCE LINES 166-169

.. code-block:: Python


    b0_mask, mask = median_otsu(data, median_radius=4, numpass=4)








.. GENERATED FROM PYTHON SOURCE LINES 170-171

And select two slices to try the 2D registration

.. GENERATED FROM PYTHON SOURCE LINES 171-175

.. code-block:: Python


    static = b0_mask[:, :, 40]
    moving = b0_mask[:, :, 38]








.. GENERATED FROM PYTHON SOURCE LINES 176-181

After loading the data, we instantiate the Cross-Correlation metric. The
metric receives three parameters: the dimension of the input images, the
standard deviation of the Gaussian Kernel to be used to regularize the
gradient and the radius of the window to be used for evaluating the local
normalized cross correlation.

.. GENERATED FROM PYTHON SOURCE LINES 181-186

.. code-block:: Python


    sigma_diff = 3.0
    radius = 4
    metric = CCMetric(2, sigma_diff=sigma_diff, radius=radius)








.. GENERATED FROM PYTHON SOURCE LINES 187-188

Let's use a scale space of 3 levels

.. GENERATED FROM PYTHON SOURCE LINES 188-193

.. code-block:: Python


    level_iters = [100, 50, 25]
    sdr = SymmetricDiffeomorphicRegistration(metric, level_iters=level_iters)
    sdr.callback = callback_CC








.. GENERATED FROM PYTHON SOURCE LINES 194-195

And execute the optimization

.. GENERATED FROM PYTHON SOURCE LINES 195-200

.. code-block:: Python


    mapping = sdr.optimize(static, moving)

    warped = mapping.transform(moving)








.. GENERATED FROM PYTHON SOURCE LINES 201-203

We can see the effect of the warping by switching between the images before
and after registration

.. GENERATED FROM PYTHON SOURCE LINES 203-213

.. code-block:: Python


    regtools.overlay_images(
        static,
        moving,
        title0="Static",
        title_mid="Overlay",
        title1="Moving",
        fname="t1_slices_input.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_005.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 214-217

.. rst-class:: centered small fst-italic fw-semibold

Input images.

.. GENERATED FROM PYTHON SOURCE LINES 217-227

.. code-block:: Python


    regtools.overlay_images(
        static,
        warped,
        title0="Static",
        title_mid="Overlay",
        title1="Warped moving",
        fname="t1_slices_res.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_006.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 228-236

.. rst-class:: centered small fst-italic fw-semibold

Moving image transformed under the (direct) transformation in green on top
of the static image (in red).



And we can apply the inverse warping too

.. GENERATED FROM PYTHON SOURCE LINES 236-247

.. code-block:: Python


    inv_warped = mapping.transform_inverse(static)
    regtools.overlay_images(
        inv_warped,
        moving,
        title0="Warped static",
        title_mid="Overlay",
        title1="moving",
        fname="t1_slices_res2.png",
    )




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_007.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 248-256

.. rst-class:: centered small fst-italic fw-semibold

Static image transformed under the (inverse) transformation in red on top
of the moving image (in green).



Finally, let's see the deformation

.. GENERATED FROM PYTHON SOURCE LINES 256-259

.. code-block:: Python


    regtools.plot_2d_diffeomorphic_map(mapping, delta=5, fname="diffeomorphic_map_b0s.png")




.. image-sg:: /examples_built/registration/images/sphx_glr_syn_registration_2d_008.png
   :alt: syn registration 2d
   :srcset: /examples_built/registration/images/sphx_glr_syn_registration_2d_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[  0.     ,   0.     ,   0.     , ...,   0.     ,   0.     ,
              0.     ],
           [  0.     , 126.99999, 127.00001, ..., 127.     ,   0.     ,
            127.     ],
           [  0.     , 127.     , 127.     , ..., 127.     ,   0.     ,
            127.     ],
           ...,
           [  0.     , 127.     , 127.     , ..., 127.     ,   0.     ,
            127.     ],
           [  0.     ,   0.     ,   0.     , ...,   0.     ,   0.     ,
              0.     ],
           [  0.     , 127.     , 127.     , ..., 127.     ,   0.     ,
            127.     ]], dtype=float32), array([[  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,
              0.      ],
           [  0.      , 126.99708 , 126.999725, ..., 127.      ,   0.      ,
            127.      ],
           [  0.      , 126.99444 , 127.      , ..., 127.      ,   0.      ,
            127.      ],
           ...,
           [  0.      , 127.      , 127.      , ..., 127.      ,   0.      ,
            127.      ],
           [  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,
              0.      ],
           [  0.      , 127.      , 127.      , ..., 127.      ,   0.      ,
            127.      ]], dtype=float32))



.. GENERATED FROM PYTHON SOURCE LINES 260-270

.. rst-class:: centered small fst-italic fw-semibold

Deformed lattice under the resulting diffeomorphic map.


References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 272-274

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 28.485 seconds)


.. _sphx_glr_download_examples_built_registration_syn_registration_2d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: syn_registration_2d.ipynb <syn_registration_2d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: syn_registration_2d.py <syn_registration_2d.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
