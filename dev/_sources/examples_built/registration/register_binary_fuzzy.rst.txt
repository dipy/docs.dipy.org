
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/registration/register_binary_fuzzy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_registration_register_binary_fuzzy.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_registration_register_binary_fuzzy.py:


=======================================================
Diffeomorphic Registration with binary and fuzzy images
=======================================================

This example demonstrates registration of a binary and a fuzzy image.
This could be seen as aligning a fuzzy (sensed) image to a binary
(e.g., template) image.

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    from skimage import draw, filters

    from dipy.align.imwarp import SymmetricDiffeomorphicRegistration
    from dipy.align.metrics import SSDMetric
    from dipy.viz import regtools








.. GENERATED FROM PYTHON SOURCE LINES 20-23

Let's generate a sample template image as the combination of three ellipses.
We will generate the fuzzy (sensed) version of the image by smoothing
the reference image.

.. GENERATED FROM PYTHON SOURCE LINES 23-38

.. code-block:: Python



    def draw_ellipse(img, center, axis):
        rr, cc = draw.ellipse(center[0], center[1], axis[0], axis[1], shape=img.shape)
        img[rr, cc] = 1
        return img


    img_ref = np.zeros((64, 64))
    img_ref = draw_ellipse(img_ref, (25, 15), (10, 5))
    img_ref = draw_ellipse(img_ref, (20, 45), (15, 10))
    img_ref = draw_ellipse(img_ref, (50, 40), (7, 15))

    img_in = filters.gaussian(img_ref, sigma=3)








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Let's define a small visualization function.

.. GENERATED FROM PYTHON SOURCE LINES 40-57

.. code-block:: Python



    def show_images(img_ref, img_warp, fig_name):
        fig, axarr = plt.subplots(ncols=2, figsize=(12, 5))
        axarr[0].set_title("warped image & reference contour")
        axarr[0].imshow(img_warp)
        axarr[0].contour(img_ref, colors="r")
        ssd = np.sum((img_warp - img_ref) ** 2)
        axarr[1].set_title(f"difference, SSD={ssd:.02f}")
        im = axarr[1].imshow(img_warp - img_ref)
        plt.colorbar(im)
        fig.tight_layout()
        fig.savefig(fig_name + ".png")


    show_images(img_ref, img_in, "input")




.. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_001.png
   :alt: register binary fuzzy
   :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 58-68

.. rst-class:: centered small fst-italic fw-semibold

Input images before alignment.



Let's use the general Registration function with some naive parameters,
such as set `step_length` as 1 assuming maximal step 1 pixel and a
reasonably small number of iterations since the deformation with already
aligned images should be minimal.

.. GENERATED FROM PYTHON SOURCE LINES 68-78

.. code-block:: Python


    sdr = SymmetricDiffeomorphicRegistration(
        metric=SSDMetric(img_ref.ndim),
        step_length=1.0,
        level_iters=[50, 100],
        inv_iter=50,
        ss_sigma_factor=0.1,
        opt_tol=1.0e-3,
    )








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Perform the registration with equal images.

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: Python


    mapping = sdr.optimize(img_ref.astype(float), img_ref.astype(float))
    img_warp = mapping.transform(img_ref, interpolation="linear")
    show_images(img_ref, img_warp, "output-0")
    regtools.plot_2d_diffeomorphic_map(mapping, delta=5, fname="map-0.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_002.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_003.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_003.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[  0.,   0.,   0., ...,   0.,   0.,   0.],
           [  0., 127., 127., ..., 127., 127., 127.],
           [  0., 127., 127., ..., 127., 127., 127.],
           ...,
           [  0., 127., 127., ..., 127., 127., 127.],
           [  0., 127., 127., ..., 127., 127., 127.],
           [  0., 127., 127., ..., 127., 127., 127.]], dtype=float32), array([[  0.,   0.,   0., ...,   0.,   0.,   0.],
           [  0., 127., 127., ..., 127., 127., 127.],
           [  0., 127., 127., ..., 127., 127., 127.],
           ...,
           [  0., 127., 127., ..., 127., 127., 127.],
           [  0., 127., 127., ..., 127., 127., 127.],
           [  0., 127., 127., ..., 127., 127., 127.]], dtype=float32))



.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. rst-class:: centered small fst-italic fw-semibold

Registration results for default parameters and equal images.



Perform the registration with binary and fuzzy images.

.. GENERATED FROM PYTHON SOURCE LINES 94-100

.. code-block:: Python


    mapping = sdr.optimize(img_ref.astype(float), img_in.astype(float))
    img_warp = mapping.transform(img_in, interpolation="linear")
    show_images(img_ref, img_warp, "output-1")
    regtools.plot_2d_diffeomorphic_map(mapping, delta=5, fname="map-1.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_004.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_004.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_005.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_005.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,
              0.      ],
           [  0.      ,  90.25679 ,  82.0045  , ..., 110.842926, 118.748566,
            127.      ],
           [  0.      , 100.90447 , 127.      , ..., 127.      , 127.      ,
            127.      ],
           ...,
           [  0.      , 113.901726, 127.      , ...,  75.54517 , 120.67299 ,
            127.      ],
           [  0.      , 127.      , 127.      , ..., 127.      , 127.      ,
            127.      ],
           [  0.      , 127.      , 127.      , ..., 127.      , 127.      ,
            127.      ]], dtype=float32), array([[  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,
              0.      ],
           [  0.      , 127.00001 , 127.      , ..., 127.      ,  84.74348 ,
            127.      ],
           [  0.      , 127.      , 126.99999 , ...,  39.307434, 113.24896 ,
            127.      ],
           ...,
           [  0.      , 124.19529 , 121.33288 , ..., 102.8345  , 127.      ,
            127.      ],
           [  0.      , 127.      , 127.      , ..., 126.99999 , 113.077385,
            127.      ],
           [  0.      , 127.      , 127.      , ..., 127.      , 127.      ,
            127.      ]], dtype=float32))



.. GENERATED FROM PYTHON SOURCE LINES 101-110

.. rst-class:: centered small fst-italic fw-semibold

Registration results for a naive parameter configuration.



Note, we are still using a multi-scale approach which makes `step_length`
in the upper level multiplicatively larger.
What happens if we set `step_length` to a rather small value?

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python


    sdr.step_length = 0.1








.. GENERATED FROM PYTHON SOURCE LINES 114-115

Perform the registration and examine the output.

.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python


    mapping = sdr.optimize(img_ref.astype(float), img_in.astype(float))
    img_warp = mapping.transform(img_in, interpolation="linear")
    show_images(img_ref, img_warp, "output-2")
    regtools.plot_2d_diffeomorphic_map(mapping, delta=5, fname="map-2.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_006.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_006.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_007.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_007.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/skoudoro/devel/dipy/dipy/viz/regtools.py:314: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
      plt.figure()

    (array([[  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,
              0.      ],
           [  0.      , 107.26481 , 107.818726, ...,  94.22971 , 106.94557 ,
            127.      ],
           [  0.      , 111.12815 , 127.      , ..., 127.      , 127.      ,
            127.      ],
           ...,
           [  0.      , 122.529335, 127.      , ..., 127.      , 127.      ,
            127.      ],
           [  0.      , 126.99735 , 127.      , ..., 127.      , 126.99999 ,
            127.      ],
           [  0.      , 127.      , 127.      , ..., 127.      , 127.      ,
            127.      ]], dtype=float32), array([[  0.       ,   0.       ,   0.       , ...,   0.       ,
              0.       ,   0.       ],
           [  0.       , 127.       , 127.       , ...,  38.591007 ,
            126.99999  , 127.       ],
           [  0.       , 127.       , 127.       , ...,  34.394188 ,
            127.       , 127.       ],
           ...,
           [  0.       , 124.35901  , 122.08593  , ...,   3.9184685,
             70.04836  , 127.       ],
           [  0.       , 127.       , 127.       , ...,  65.81175  ,
            127.       , 127.       ],
           [  0.       , 127.       , 127.       , ..., 127.       ,
            127.       , 127.       ]], dtype=float32))



.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. rst-class:: centered small fst-italic fw-semibold

Registration results for decreased step size.



An alternative scenario is to use just a single-scale level.
Even though the warped image may look fine, the estimated deformations show
that it is off the mark.

.. GENERATED FROM PYTHON SOURCE LINES 131-141

.. code-block:: Python


    sdr = SymmetricDiffeomorphicRegistration(
        metric=SSDMetric(img_ref.ndim),
        step_length=1.0,
        level_iters=[100],
        inv_iter=50,
        ss_sigma_factor=0.1,
        opt_tol=1.0e-3,
    )








.. GENERATED FROM PYTHON SOURCE LINES 142-143

Perform the registration.

.. GENERATED FROM PYTHON SOURCE LINES 143-149

.. code-block:: Python


    mapping = sdr.optimize(img_ref.astype(float), img_in.astype(float))
    img_warp = mapping.transform(img_in, interpolation="linear")
    show_images(img_ref, img_warp, "output-3")
    regtools.plot_2d_diffeomorphic_map(mapping, delta=5, fname="map-3.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_008.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_008.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_009.png
          :alt: register binary fuzzy
          :srcset: /examples_built/registration/images/sphx_glr_register_binary_fuzzy_009.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,
              0.      ],
           [  0.      , 113.812126, 112.30992 , ...,  67.23495 ,  93.087524,
            127.      ],
           [  0.      , 115.750916, 127.      , ..., 127.      , 127.      ,
            127.      ],
           ...,
           [  0.      , 126.96909 , 127.      , ..., 127.      , 123.27975 ,
            127.      ],
           [  0.      , 126.97683 , 127.00001 , ..., 127.      , 127.      ,
            127.      ],
           [  0.      , 127.      , 127.      , ..., 127.      , 127.      ,
            127.      ]], dtype=float32), array([[  0.       ,   0.       ,   0.       , ...,   0.       ,
              0.       ,   0.       ],
           [  0.       , 127.       , 127.       , ..., 127.       ,
             68.370316 , 127.       ],
           [  0.       , 127.       , 127.00001  , ...,  89.27986  ,
             94.97414  , 127.       ],
           ...,
           [  0.       , 126.99135  , 126.97298  , ..., 127.00001  ,
             34.990112 , 127.       ],
           [  0.       , 127.       , 127.       , ..., 100.59303  ,
              1.7804474, 127.       ],
           [  0.       , 127.       , 127.       , ..., 127.       ,
            127.       , 127.       ]], dtype=float32))



.. GENERATED FROM PYTHON SOURCE LINES 150-153

.. rst-class:: centered small fst-italic fw-semibold

Registration results for single level.

.. GENERATED FROM PYTHON SOURCE LINES 155-157

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.566 seconds)


.. _sphx_glr_download_examples_built_registration_register_binary_fuzzy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: register_binary_fuzzy.ipynb <register_binary_fuzzy.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: register_binary_fuzzy.py <register_binary_fuzzy.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: register_binary_fuzzy.zip <register_binary_fuzzy.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
