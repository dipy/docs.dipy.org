
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\fiber_tracking\tracking_bootstrap_peaks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:


====================================================
Bootstrap and Closest Peak Direction Getters Example
====================================================

This example shows how choices in direction-getter impact fiber
tracking results by demonstrating the bootstrap direction getter (a type of
probabilistic tracking, as described in :footcite:p:`Berman2008` and the closest
peak direction getter (a type of deterministic tracking)
:footcite:p:`Amirbekian2016`.

This example is an extension of the
:ref:`sphx_glr_examples_built_quick_start_tracking_introduction_eudx.py`
example. Let's start by loading the necessary modules for executing this
tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 17-48

.. code-block:: Python


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, small_sphere
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk
    from dipy.reconst.csdeconv import ConstrainedSphericalDeconvModel, auto_response_ssst
    from dipy.reconst.shm import CsaOdfModel
    from dipy.tracking import utils
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.tracker import bootstrap_tracking, closestpeak_tracking
    from dipy.viz import actor, colormap, has_fury, window

    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames(name="stanford_hardi")
    label_fname = get_fnames(name="stanford_labels")

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs=bvecs)


    seed_mask = labels == 2
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Next, we fit the CSD model.

.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: Python


    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order_max=6)
    csd_fit = csd_model.fit(data, mask=white_matter)








.. GENERATED FROM PYTHON SOURCE LINES 56-58

we use the CSA fit to calculate GFA, which will serve as our stopping
criterion.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: Python


    csa_model = CsaOdfModel(gtab, sh_order_max=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, 0.25)








.. GENERATED FROM PYTHON SOURCE LINES 64-69

Next, we need to set up our two direction getters


Example #1: Bootstrap direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 69-90

.. code-block:: Python

    boot_streamline_generator = bootstrap_tracking(
        seeds,
        stopping_criterion,
        affine,
        step_size=0.5,
        data=data,
        model=csd_model,
        max_angle=30.0,
        sphere=small_sphere,
    )
    streamlines = Streamlines(boot_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_bootstrap_dg.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colors=colormap.line_colors(streamlines)))
        window.record(scene=scene, out_path="tractogram_bootstrap_dg.png", size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-104

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum Bootstrap Probabilistic Direction Getter


We have created a bootstrapped probabilistic set of streamlines. If you
repeat the fiber tracking (keeping all inputs the same) you will NOT get
exactly the same set of streamlines.



Example #2: Closest peak direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 104-128

.. code-block:: Python


    pmf = csd_fit.odf(small_sphere).clip(min=0)
    peak_streamline_generator = closestpeak_tracking(
        seeds,
        stopping_criterion,
        affine,
        step_size=0.5,
        sf=pmf,
        max_angle=30.0,
        sphere=small_sphere,
    )
    streamlines = Streamlines(peak_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "closest_peak_dg_CSD.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colors=colormap.line_colors(streamlines)))
        window.record(
            scene=scene, out_path="tractogram_closest_peak_dg.png", size=(800, 800)
        )
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-146

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum Closest Peak Deterministic Direction Getter


We have created a set of streamlines using the closest peak direction getter,
which is a type of deterministic tracking. If you repeat the fiber tracking
(keeping all inputs the same) you will get exactly the same set of
streamlines.



References
----------

.. footbibliography::


.. GENERATED FROM PYTHON SOURCE LINES 148-150

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 9.262 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_bootstrap_peaks.ipynb <tracking_bootstrap_peaks.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_bootstrap_peaks.py <tracking_bootstrap_peaks.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
