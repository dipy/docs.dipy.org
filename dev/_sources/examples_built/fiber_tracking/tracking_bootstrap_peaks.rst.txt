
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\fiber_tracking\tracking_bootstrap_peaks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:


====================================================
Bootstrap and Closest Peak Direction Getters Example
====================================================

This example shows how choices in direction-getter impact fiber
tracking results by demonstrating the bootstrap direction getter (a type of
probabilistic tracking, as described in Berman et al. (2008) [Berman2008]_ a
nd the closest peak direction getter (a type of deterministic tracking).
(Amirbekian, PhD thesis, 2016)

This example is an extension of the
:ref:`sphx_glr_examples_built_quick_start_tracking_introduction_eudx.py`
example. Let's start by loading the necessary modules for executing this
tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 17-50

.. code-block:: Python


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, small_sphere
    from dipy.direction import BootDirectionGetter, ClosestPeakDirectionGetter
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.reconst.shm import CsaOdfModel
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury

    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)


    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Next, we fit the CSD model.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Python


    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                                                                                                                                  | 0/58788 [00:00<?, ?it/s]      1%|█▎                                                                                                                                    | 586/58788 [00:00<00:10, 5810.69it/s]      2%|███                                                                                                                                  | 1375/58788 [00:00<00:08, 7015.83it/s]      4%|████▉                                                                                                                                | 2184/58788 [00:00<00:07, 7493.06it/s]      5%|██████▊                                                                                                                              | 3023/58788 [00:00<00:07, 7833.58it/s]      7%|████████▊                                                                                                                            | 3888/58788 [00:00<00:06, 8103.14it/s]      8%|██████████▋                                                                                                                          | 4699/58788 [00:00<00:06, 8097.83it/s]      9%|████████████▍                                                                                                                        | 5509/58788 [00:00<00:06, 8064.41it/s]     11%|██████████████▍                                                                                                                      | 6371/58788 [00:00<00:06, 8215.90it/s]     12%|████████████████▍                                                                                                                    | 7246/58788 [00:00<00:06, 8371.85it/s]     14%|██████████████████▎                                                                                                                  | 8117/58788 [00:01<00:05, 8465.13it/s]     15%|████████████████████▎                                                                                                                | 8974/58788 [00:01<00:05, 8480.29it/s]     17%|██████████████████████▎                                                                                                              | 9840/58788 [00:01<00:05, 8522.93it/s]     18%|████████████████████████                                                                                                            | 10705/58788 [00:01<00:05, 8551.39it/s]     20%|█████████████████████████▉                                                                                                          | 11561/58788 [00:01<00:05, 8521.42it/s]     21%|███████████████████████████▉                                                                                                        | 12424/58788 [00:01<00:05, 8542.19it/s]     23%|█████████████████████████████▊                                                                                                      | 13301/58788 [00:01<00:05, 8600.51it/s]     24%|███████████████████████████████▊                                                                                                    | 14162/58788 [00:01<00:05, 8199.10it/s]     25%|█████████████████████████████████▋                                                                                                  | 14986/58788 [00:01<00:05, 8175.73it/s]     27%|███████████████████████████████████▍                                                                                                | 15807/58788 [00:01<00:05, 8104.93it/s]     28%|█████████████████████████████████████▎                                                                                              | 16627/58788 [00:02<00:05, 8123.70it/s]     30%|███████████████████████████████████████▏                                                                                            | 17464/58788 [00:02<00:05, 8189.82it/s]     31%|█████████████████████████████████████████                                                                                           | 18285/58788 [00:02<00:04, 8187.84it/s]     33%|██████████████████████████████████████████▉                                                                                         | 19133/58788 [00:02<00:04, 8264.53it/s]     34%|████████████████████████████████████████████▊                                                                                       | 19961/58788 [00:02<00:04, 8235.03it/s]     35%|██████████████████████████████████████████████▋                                                                                     | 20786/58788 [00:02<00:04, 8230.27it/s]     37%|████████████████████████████████████████████████▌                                                                                   | 21610/58788 [00:02<00:04, 8144.88it/s]     38%|██████████████████████████████████████████████████▎                                                                                 | 22425/58788 [00:02<00:04, 7948.45it/s]     39%|████████████████████████████████████████████████████▏                                                                               | 23221/58788 [00:02<00:04, 7874.40it/s]     41%|██████████████████████████████████████████████████████                                                                              | 24053/58788 [00:02<00:04, 7997.85it/s]     42%|███████████████████████████████████████████████████████▊                                                                            | 24863/58788 [00:03<00:04, 8018.46it/s]     44%|█████████████████████████████████████████████████████████▋                                                                          | 25682/58788 [00:03<00:04, 8059.35it/s]     45%|███████████████████████████████████████████████████████████▍                                                                        | 26491/58788 [00:03<00:04, 8058.78it/s]     46%|█████████████████████████████████████████████████████████████▎                                                                      | 27298/58788 [00:03<00:03, 7901.69it/s]     48%|███████████████████████████████████████████████████████████████                                                                     | 28089/58788 [00:03<00:03, 7849.52it/s]     49%|████████████████████████████████████████████████████████████████▉                                                                   | 28916/58788 [00:03<00:03, 7965.31it/s]     51%|██████████████████████████████████████████████████████████████████▋                                                                 | 29714/58788 [00:03<00:03, 7918.27it/s]     52%|████████████████████████████████████████████████████████████████████▌                                                               | 30534/58788 [00:03<00:03, 7993.29it/s]     53%|██████████████████████████████████████████████████████████████████████▍                                                             | 31358/58788 [00:03<00:03, 8045.84it/s]     55%|████████████████████████████████████████████████████████████████████████▎                                                           | 32194/58788 [00:03<00:03, 8130.52it/s]     56%|██████████████████████████████████████████████████████████████████████████▏                                                         | 33036/58788 [00:04<00:03, 8205.96it/s]     58%|████████████████████████████████████████████████████████████████████████████                                                        | 33882/58788 [00:04<00:03, 8271.50it/s]     59%|█████████████████████████████████████████████████████████████████████████████▉                                                      | 34732/58788 [00:04<00:02, 8329.28it/s]     61%|███████████████████████████████████████████████████████████████████████████████▉                                                    | 35576/58788 [00:04<00:02, 8352.40it/s]     62%|█████████████████████████████████████████████████████████████████████████████████▊                                                  | 36425/58788 [00:04<00:02, 8383.59it/s]     63%|███████████████████████████████████████████████████████████████████████████████████▋                                                | 37284/58788 [00:04<00:02, 8435.97it/s]     65%|█████████████████████████████████████████████████████████████████████████████████████▋                                              | 38150/58788 [00:04<00:02, 8494.70it/s]     66%|███████████████████████████████████████████████████████████████████████████████████████▌                                            | 39018/58788 [00:04<00:02, 8537.87it/s]     68%|█████████████████████████████████████████████████████████████████████████████████████████▌                                          | 39878/58788 [00:04<00:02, 8535.42it/s]     69%|███████████████████████████████████████████████████████████████████████████████████████████▍                                        | 40745/58788 [00:04<00:02, 8564.96it/s]     71%|█████████████████████████████████████████████████████████████████████████████████████████████▍                                      | 41602/58788 [00:05<00:02, 8528.53it/s]     72%|███████████████████████████████████████████████████████████████████████████████████████████████▎                                    | 42464/58788 [00:05<00:01, 8536.58it/s]     74%|█████████████████████████████████████████████████████████████████████████████████████████████████▎                                  | 43318/58788 [00:05<00:01, 8524.71it/s]     75%|███████████████████████████████████████████████████████████████████████████████████████████████████▏                                | 44171/58788 [00:05<00:01, 8490.96it/s]     77%|█████████████████████████████████████████████████████████████████████████████████████████████████████▏                              | 45046/58788 [00:05<00:01, 8557.45it/s]     78%|███████████████████████████████████████████████████████████████████████████████████████████████████████                             | 45902/58788 [00:05<00:01, 8496.71it/s]     80%|█████████████████████████████████████████████████████████████████████████████████████████████████████████                           | 46780/58788 [00:05<00:01, 8569.77it/s]     81%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▉                         | 47642/58788 [00:05<00:01, 8573.64it/s]     83%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                       | 48505/58788 [00:05<00:01, 8567.43it/s]     84%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                     | 49384/58788 [00:05<00:01, 8623.23it/s]     85%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                   | 50247/58788 [00:06<00:01, 8526.28it/s]     87%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                 | 51100/58788 [00:06<00:00, 8493.65it/s]     88%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋               | 51953/58788 [00:06<00:00, 8495.72it/s]     90%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌             | 52803/58788 [00:06<00:00, 8484.92it/s]     91%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍           | 53652/58788 [00:06<00:00, 8440.70it/s]     93%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎         | 54498/58788 [00:06<00:00, 8435.10it/s]     94%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎       | 55342/58788 [00:06<00:00, 8298.12it/s]     96%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏     | 56176/58788 [00:06<00:00, 8301.30it/s]     97%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████    | 57007/58788 [00:06<00:00, 8220.63it/s]     98%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊  | 57830/58788 [00:06<00:00, 8162.86it/s]    100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋| 58647/58788 [00:07<00:00, 7985.65it/s]    100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 58788/58788 [00:07<00:00, 8225.52it/s]




.. GENERATED FROM PYTHON SOURCE LINES 58-60

we use the CSA fit to calculate GFA, which will serve as our stopping
criterion.

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: Python


    csa_model = CsaOdfModel(gtab, sh_order=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 66-71

Next, we need to set up our two direction getters


Example #1: Bootstrap direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 71-88

.. code-block:: Python


    boot_dg_csd = BootDirectionGetter.from_data(data, csd_model, max_angle=30.,
                                                sphere=small_sphere)
    boot_streamline_generator = LocalTracking(boot_dg_csd, stopping_criterion,
                                              seeds, affine, step_size=.5)
    streamlines = Streamlines(boot_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_bootstrap_dg.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_bootstrap_dg.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-102

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum Bootstrap Probabilistic Direction Getter


We have created a bootstrapped probabilistic set of streamlines. If you
repeat the fiber tracking (keeping all inputs the same) you will NOT get
exactly the same set of streamlines.



Example #2: Closest peak direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 102-120

.. code-block:: Python


    pmf = csd_fit.odf(small_sphere).clip(min=0)
    peak_dg = ClosestPeakDirectionGetter.from_pmf(pmf, max_angle=30.,
                                                  sphere=small_sphere)
    peak_streamline_generator = LocalTracking(peak_dg, stopping_criterion, seeds,
                                              affine, step_size=.5)
    streamlines = Streamlines(peak_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "closest_peak_dg_CSD.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_closest_peak_dg.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-137

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum Closest Peak Deterministic Direction Getter


We have created a set of streamlines using the closest peak direction getter,
which is a type of deterministic tracking. If you repeat the fiber tracking
(keeping all inputs the same) you will get exactly the same set of
streamlines.



References
----------
.. [Berman2008] Berman, J. et al., Probabilistic streamline q-ball
tractography using the residual bootstrap, NeuroImage, vol 39, no 1, 2008

.. GENERATED FROM PYTHON SOURCE LINES 139-141

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 42.803 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_bootstrap_peaks.ipynb <tracking_bootstrap_peaks.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_bootstrap_peaks.py <tracking_bootstrap_peaks.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
