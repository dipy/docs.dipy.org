
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/fiber_tracking/tracking_bootstrap_peaks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:


====================================================
Bootstrap and Closest Peak Direction Getters Example
====================================================

This example shows how choices in direction-getter impact fiber
tracking results by demonstrating the bootstrap direction getter (a type of
probabilistic tracking, as described in Berman et al. (2008) [Berman2008]_ a
nd the closest peak direction getter (a type of deterministic tracking).
(Amirbekian, PhD thesis, 2016)

This example is an extension of the
:ref:`sphx_glr_examples_built_quick_start_tracking_introduction_eudx.py`
example. Let's start by loading the necessary modules for executing this
tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 17-50

.. code-block:: Python


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, small_sphere
    from dipy.direction import BootDirectionGetter, ClosestPeakDirectionGetter
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.reconst.shm import CsaOdfModel
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury

    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)


    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Next, we fit the CSD model.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Python


    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order_max=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/58788 [00:00<?, ?it/s]      2%|▏         | 1289/58788 [00:00<00:04, 12883.19it/s]      5%|▍         | 2850/58788 [00:00<00:03, 14485.64it/s]      8%|▊         | 4462/58788 [00:00<00:03, 15228.96it/s]     10%|█         | 6151/58788 [00:00<00:03, 15884.51it/s]     13%|█▎        | 7799/58788 [00:00<00:03, 16098.46it/s]     16%|█▌        | 9467/58788 [00:00<00:03, 16293.27it/s]     19%|█▉        | 11097/58788 [00:00<00:02, 16254.78it/s]     22%|██▏       | 12744/58788 [00:00<00:02, 16322.13it/s]     24%|██▍       | 14377/58788 [00:00<00:02, 16252.94it/s]     27%|██▋       | 16003/58788 [00:01<00:02, 16224.08it/s]     30%|███       | 17656/58788 [00:01<00:02, 16315.68it/s]     33%|███▎      | 19306/58788 [00:01<00:02, 16370.21it/s]     36%|███▌      | 20960/58788 [00:01<00:02, 16419.79it/s]     38%|███▊      | 22625/58788 [00:01<00:02, 16488.38it/s]     41%|████▏     | 24292/58788 [00:01<00:02, 16541.11it/s]     44%|████▍     | 25965/58788 [00:01<00:01, 16595.31it/s]     47%|████▋     | 27636/58788 [00:01<00:01, 16626.57it/s]     50%|████▉     | 29299/58788 [00:01<00:01, 16473.51it/s]     53%|█████▎    | 30947/58788 [00:01<00:01, 16405.61it/s]     55%|█████▌    | 32594/58788 [00:02<00:01, 16423.42it/s]     58%|█████▊    | 34288/58788 [00:02<00:01, 16576.04it/s]     61%|██████    | 35986/58788 [00:02<00:01, 16693.76it/s]     64%|██████▍   | 37693/58788 [00:02<00:01, 16803.72it/s]     67%|██████▋   | 39414/58788 [00:02<00:01, 16924.00it/s]     70%|██████▉   | 41118/58788 [00:02<00:01, 16956.56it/s]     73%|███████▎  | 42814/58788 [00:02<00:00, 16846.51it/s]     76%|███████▌  | 44502/58788 [00:02<00:00, 16855.85it/s]     79%|███████▊  | 46220/58788 [00:02<00:00, 16951.26it/s]     82%|████████▏ | 47948/58788 [00:02<00:00, 17047.82it/s]     84%|████████▍ | 49653/58788 [00:03<00:00, 17018.66it/s]     87%|████████▋ | 51366/58788 [00:03<00:00, 17049.64it/s]     90%|█████████ | 53072/58788 [00:03<00:00, 16948.05it/s]     93%|█████████▎| 54767/58788 [00:03<00:00, 16833.49it/s]     96%|█████████▌| 56451/58788 [00:03<00:00, 16731.09it/s]     99%|█████████▉| 58125/58788 [00:03<00:00, 16550.94it/s]    100%|██████████| 58788/58788 [00:03<00:00, 16437.26it/s]




.. GENERATED FROM PYTHON SOURCE LINES 58-60

we use the CSA fit to calculate GFA, which will serve as our stopping
criterion.

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: Python


    csa_model = CsaOdfModel(gtab, sh_order_max=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 66-71

Next, we need to set up our two direction getters


Example #1: Bootstrap direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 71-88

.. code-block:: Python


    boot_dg_csd = BootDirectionGetter.from_data(data, csd_model, max_angle=30.,
                                                sphere=small_sphere)
    boot_streamline_generator = LocalTracking(boot_dg_csd, stopping_criterion,
                                              seeds, affine, step_size=.5)
    streamlines = Streamlines(boot_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_bootstrap_dg.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_bootstrap_dg.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-102

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum Bootstrap Probabilistic Direction Getter


We have created a bootstrapped probabilistic set of streamlines. If you
repeat the fiber tracking (keeping all inputs the same) you will NOT get
exactly the same set of streamlines.



Example #2: Closest peak direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 102-120

.. code-block:: Python


    pmf = csd_fit.odf(small_sphere).clip(min=0)
    peak_dg = ClosestPeakDirectionGetter.from_pmf(pmf, max_angle=30.,
                                                  sphere=small_sphere)
    peak_streamline_generator = LocalTracking(peak_dg, stopping_criterion, seeds,
                                              affine, step_size=.5)
    streamlines = Streamlines(peak_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "closest_peak_dg_CSD.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_closest_peak_dg.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-137

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum Closest Peak Deterministic Direction Getter


We have created a set of streamlines using the closest peak direction getter,
which is a type of deterministic tracking. If you repeat the fiber tracking
(keeping all inputs the same) you will get exactly the same set of
streamlines.



References
----------
.. [Berman2008] Berman, J. et al., Probabilistic streamline q-ball
tractography using the residual bootstrap, NeuroImage, vol 39, no 1, 2008

.. GENERATED FROM PYTHON SOURCE LINES 139-141

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.978 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_bootstrap_peaks.ipynb <tracking_bootstrap_peaks.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_bootstrap_peaks.py <tracking_bootstrap_peaks.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
