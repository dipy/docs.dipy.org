
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/fiber_tracking/tracking_bootstrap_peaks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:


====================================================
Bootstrap and Closest Peak Direction Getters Example
====================================================

This example shows how choices in direction-getter impact fiber
tracking results by demonstrating the bootstrap direction getter (a type of
probabilistic tracking, as described in Berman et al. (2008) [Berman2008]_ a
nd the closest peak direction getter (a type of deterministic tracking).
(Amirbekian, PhD thesis, 2016)

This example is an extension of the
:ref:`sphx_glr_examples_built_quick_start_tracking_introduction_eudx.py`
example. Let's start by loading the necessary modules for executing this
tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 17-50

.. code-block:: default


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, small_sphere
    from dipy.direction import BootDirectionGetter, ClosestPeakDirectionGetter
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.reconst.shm import CsaOdfModel
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury

    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)


    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Next, we fit the CSD model.

.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default



    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/58788 [00:00<?, ?it/s]      1%|          | 694/58788 [00:00<00:08, 6937.49it/s]      3%|▎         | 1599/58788 [00:00<00:06, 8177.17it/s]      4%|▍         | 2548/58788 [00:00<00:06, 8772.94it/s]      6%|▌         | 3463/58788 [00:00<00:06, 8919.97it/s]      8%|▊         | 4414/58788 [00:00<00:05, 9128.45it/s]      9%|▉         | 5369/58788 [00:00<00:05, 9270.50it/s]     11%|█         | 6341/58788 [00:00<00:05, 9416.43it/s]     12%|█▏        | 7305/58788 [00:00<00:05, 9486.08it/s]     14%|█▍        | 8274/58788 [00:00<00:05, 9547.27it/s]     16%|█▌        | 9229/58788 [00:01<00:05, 9539.14it/s]     17%|█▋        | 10183/58788 [00:01<00:05, 9492.46it/s]     19%|█▉        | 11133/58788 [00:01<00:05, 9441.97it/s]     21%|██        | 12107/58788 [00:01<00:04, 9530.80it/s]     22%|██▏       | 13071/58788 [00:01<00:04, 9562.02it/s]     24%|██▍       | 14028/58788 [00:01<00:04, 9548.30it/s]     26%|██▌       | 15016/58788 [00:01<00:04, 9644.46it/s]     27%|██▋       | 15982/58788 [00:01<00:04, 9648.85it/s]     29%|██▉       | 16947/58788 [00:01<00:04, 9627.00it/s]     31%|███       | 17940/58788 [00:01<00:04, 9714.99it/s]     32%|███▏      | 18912/58788 [00:02<00:04, 9663.23it/s]     34%|███▍      | 19879/58788 [00:02<00:04, 9627.69it/s]     35%|███▌      | 20846/58788 [00:02<00:03, 9639.90it/s]     37%|███▋      | 21814/58788 [00:02<00:03, 9650.06it/s]     39%|███▊      | 22780/58788 [00:02<00:03, 9629.86it/s]     40%|████      | 23761/58788 [00:02<00:03, 9681.81it/s]     42%|████▏     | 24730/58788 [00:02<00:03, 9680.32it/s]     44%|████▎     | 25699/58788 [00:02<00:03, 9633.79it/s]     45%|████▌     | 26663/58788 [00:02<00:03, 9583.44it/s]     47%|████▋     | 27622/58788 [00:02<00:03, 9584.68it/s]     49%|████▊     | 28581/58788 [00:03<00:03, 9475.22it/s]     50%|█████     | 29529/58788 [00:03<00:03, 9386.01it/s]     52%|█████▏    | 30468/58788 [00:03<00:03, 9359.06it/s]     53%|█████▎    | 31405/58788 [00:03<00:02, 9324.13it/s]     55%|█████▌    | 32359/58788 [00:03<00:02, 9387.13it/s]     57%|█████▋    | 33319/58788 [00:03<00:02, 9447.94it/s]     58%|█████▊    | 34281/58788 [00:03<00:02, 9496.33it/s]     60%|█████▉    | 35231/58788 [00:03<00:02, 9493.56it/s]     62%|██████▏   | 36201/58788 [00:03<00:02, 9554.88it/s]     63%|██████▎   | 37160/58788 [00:03<00:02, 9565.17it/s]     65%|██████▍   | 38135/58788 [00:04<00:02, 9618.45it/s]     67%|██████▋   | 39117/58788 [00:04<00:02, 9677.12it/s]     68%|██████▊   | 40099/58788 [00:04<00:01, 9717.84it/s]     70%|██████▉   | 41080/58788 [00:04<00:01, 9743.71it/s]     72%|███████▏  | 42069/58788 [00:04<00:01, 9785.37it/s]     73%|███████▎  | 43048/58788 [00:04<00:01, 9738.55it/s]     75%|███████▍  | 44028/58788 [00:04<00:01, 9755.99it/s]     77%|███████▋  | 45004/58788 [00:04<00:01, 9744.45it/s]     78%|███████▊  | 45979/58788 [00:04<00:01, 9682.74it/s]     80%|███████▉  | 46956/58788 [00:04<00:01, 9706.14it/s]     82%|████████▏ | 47942/58788 [00:05<00:01, 9751.65it/s]     83%|████████▎ | 48918/58788 [00:05<00:01, 9738.31it/s]     85%|████████▍ | 49892/58788 [00:05<00:00, 9738.43it/s]     87%|████████▋ | 50875/58788 [00:05<00:00, 9765.05it/s]     88%|████████▊ | 51852/58788 [00:05<00:00, 9688.45it/s]     90%|████████▉ | 52821/58788 [00:05<00:00, 9669.93it/s]     91%|█████████▏| 53789/58788 [00:05<00:00, 9639.16it/s]     93%|█████████▎| 54755/58788 [00:05<00:00, 9644.89it/s]     95%|█████████▍| 55720/58788 [00:05<00:00, 9574.41it/s]     96%|█████████▋| 56678/58788 [00:05<00:00, 9489.45it/s]     98%|█████████▊| 57628/58788 [00:06<00:00, 9412.71it/s]    100%|█████████▉| 58570/58788 [00:06<00:00, 9238.66it/s]    100%|██████████| 58788/58788 [00:06<00:00, 9494.33it/s]




.. GENERATED FROM PYTHON SOURCE LINES 59-61

we use the CSA fit to calculate GFA, which will serve as our stopping
criterion.

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default



    csa_model = CsaOdfModel(gtab, sh_order=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Next, we need to set up our two direction getters

.. GENERATED FROM PYTHON SOURCE LINES 72-74

Example #1: Bootstrap direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 74-93

.. code-block:: default




    boot_dg_csd = BootDirectionGetter.from_data(data, csd_model, max_angle=30.,
                                                sphere=small_sphere)
    boot_streamline_generator = LocalTracking(boot_dg_csd, stopping_criterion,
                                              seeds, affine, step_size=.5)
    streamlines = Streamlines(boot_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_bootstrap_dg.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_bootstrap_dg.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-102

.. figure:: tractogram_bootstrap_dg.png
   :align: center

   **Corpus Callosum Bootstrap Probabilistic Direction Getter**

We have created a bootstrapped probabilistic set of streamlines. If you repeat
the fiber tracking (keeping all inputs the same) you will NOT get exactly the
same set of streamlines.

.. GENERATED FROM PYTHON SOURCE LINES 105-107

Example #2: Closest peak direction getter with CSD Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 107-127

.. code-block:: default




    pmf = csd_fit.odf(small_sphere).clip(min=0)
    peak_dg = ClosestPeakDirectionGetter.from_pmf(pmf, max_angle=30.,
                                                  sphere=small_sphere)
    peak_streamline_generator = LocalTracking(peak_dg, stopping_criterion, seeds,
                                              affine, step_size=.5)
    streamlines = Streamlines(peak_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "closest_peak_dg_CSD.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_closest_peak_dg.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :alt: tracking bootstrap peaks
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_bootstrap_peaks_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. figure:: tractogram_closest_peak_dg.png
   :align: center

   **Corpus Callosum Closest Peak Deterministic Direction Getter**

We have created a set of streamlines using the closest peak direction getter,
which is a type of deterministic tracking. If you repeat the fiber tracking
(keeping all inputs the same) you will get exactly the same set of streamlines.

.. GENERATED FROM PYTHON SOURCE LINES 140-147

References
----------
.. [Berman2008] Berman, J. et al., Probabilistic streamline q-ball
tractography using the residual bootstrap, NeuroImage, vol 39, no 1, 2008

.. include:: ../links_names.inc


.. GENERATED FROM PYTHON SOURCE LINES 149-151

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.039 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_bootstrap_peaks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_bootstrap_peaks.py <tracking_bootstrap_peaks.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_bootstrap_peaks.ipynb <tracking_bootstrap_peaks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
