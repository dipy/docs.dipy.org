
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/fiber_tracking/tracking_pft.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_pft.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_pft.py:


===============================
Particle Filtering Tractography
===============================
Particle Filtering Tractography (PFT) [Girard2014]_ uses tissue partial
volume estimation (PVE) to reconstruct trajectories connecting the gray matter,
and not incorrectly stopping in the white matter or in the corticospinal fluid.
It relies on a stopping criterion that identifies the tissue where the
streamline stopped. If the streamline correctly stopped in the gray matter, the
trajectory is kept. If the streamline incorrectly stopped in the white matter
or in the corticospinal fluid, PFT uses anatomical information to find an
alternative streamline segment to extend the trajectory. When this segment is
found, the tractography continues until the streamline correctly stops in the
gray matter.

PFT finds an alternative streamline segment whenever the stopping criterion
returns a position classified as 'INVALIDPOINT'.

This example is an extension of
:ref:`sphx_glr_examples_built_fiber_tracking_tracking_probabilistic.py` and
:ref:`sphx_glr_examples_built_fiber_tracking_tracking_stopping_criterion.py`
examples. We begin by loading the data, fitting a Constrained Spherical
Deconvolution (CSD) reconstruction model, creating the probabilistic direction
getter and defining the seeds.

.. GENERATED FROM PYTHON SOURCE LINES 26-76

.. code-block:: Python


    from dipy.tracking.stopping_criterion import CmcStoppingCriterion
    import numpy as np

    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, default_sphere
    from dipy.direction import ProbabilisticDirectionGetter
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.tracking.local_tracking import (LocalTracking,
                                              ParticleFilteringTracking)
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking import utils
    from dipy.viz import window, actor, colormap, has_fury

    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')
    f_pve_csf, f_pve_gm, f_pve_wm = get_fnames('stanford_pve_maps')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    pve_csf_data = load_nifti_data(f_pve_csf)
    pve_gm_data = load_nifti_data(f_pve_gm)
    pve_wm_data, _, voxel_size = load_nifti(f_pve_wm, return_voxsize=True)

    shape = labels.shape

    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response)
    csd_fit = csd_model.fit(data, mask=pve_wm_data)

    dg = ProbabilisticDirectionGetter.from_shcoeff(csd_fit.shm_coeff,
                                                   max_angle=20.,
                                                   sphere=default_sphere,
                                                   sh_to_pmf=True)

    seed_mask = (labels == 2)
    seed_mask[pve_wm_data < 0.5] = 0
    seeds = utils.seeds_from_mask(seed_mask, affine, density=2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/77848.12 [00:00<?, ?it/s]      1%|          | 554/77848.12 [00:00<00:13, 5532.64it/s]      1%|▏         | 1155/77848.12 [00:00<00:13, 5808.02it/s]      2%|▏         | 1808/77848.12 [00:00<00:12, 6136.31it/s]      3%|▎         | 2487/77848.12 [00:00<00:11, 6391.58it/s]      4%|▍         | 3171/77848.12 [00:00<00:11, 6550.42it/s]      5%|▍         | 3862/77848.12 [00:00<00:11, 6669.17it/s]      6%|▌         | 4529/77848.12 [00:00<00:11, 6661.39it/s]      7%|▋         | 5262/77848.12 [00:00<00:10, 6873.84it/s]      8%|▊         | 5951/77848.12 [00:00<00:10, 6878.56it/s]      9%|▊         | 6639/77848.12 [00:01<00:10, 6865.94it/s]      9%|▉         | 7382/77848.12 [00:01<00:10, 7037.86it/s]     10%|█         | 8097/77848.12 [00:01<00:09, 7070.79it/s]     11%|█▏        | 8834/77848.12 [00:01<00:09, 7146.89it/s]     12%|█▏        | 9571/77848.12 [00:01<00:09, 7212.93it/s]     13%|█▎        | 10293/77848.12 [00:01<00:09, 7203.80it/s]     14%|█▍        | 11044/77848.12 [00:01<00:09, 7294.04it/s]     15%|█▌        | 11774/77848.12 [00:01<00:09, 7252.57it/s]     16%|█▌        | 12541/77848.12 [00:01<00:08, 7373.81it/s]     17%|█▋        | 13279/77848.12 [00:01<00:08, 7335.27it/s]     18%|█▊        | 14055/77848.12 [00:02<00:08, 7459.60it/s]     19%|█▉        | 14802/77848.12 [00:02<00:08, 7449.47it/s]     20%|█▉        | 15548/77848.12 [00:02<00:08, 7402.40it/s]     21%|██        | 16289/77848.12 [00:02<00:08, 7387.34it/s]     22%|██▏       | 17028/77848.12 [00:02<00:08, 7326.60it/s]     23%|██▎       | 17766/77848.12 [00:02<00:08, 7340.34it/s]     24%|██▍       | 18501/77848.12 [00:02<00:08, 7296.98it/s]     25%|██▍       | 19275/77848.12 [00:02<00:07, 7427.31it/s]     26%|██▌       | 20031/77848.12 [00:02<00:07, 7463.99it/s]     27%|██▋       | 20778/77848.12 [00:02<00:07, 7459.82it/s]     28%|██▊       | 21531/77848.12 [00:03<00:07, 7480.52it/s]     29%|██▊       | 22280/77848.12 [00:03<00:07, 7438.63it/s]     30%|██▉       | 23042/77848.12 [00:03<00:07, 7491.96it/s]     31%|███       | 23792/77848.12 [00:03<00:07, 7483.41it/s]     32%|███▏      | 24541/77848.12 [00:03<00:07, 7468.80it/s]     33%|███▎      | 25314/77848.12 [00:03<00:06, 7546.32it/s]     33%|███▎      | 26069/77848.12 [00:03<00:06, 7431.30it/s]     35%|███▍      | 26862/77848.12 [00:03<00:06, 7575.87it/s]     35%|███▌      | 27621/77848.12 [00:03<00:06, 7505.84it/s]     36%|███▋      | 28373/77848.12 [00:03<00:06, 7462.79it/s]     37%|███▋      | 29139/77848.12 [00:04<00:06, 7521.06it/s]     38%|███▊      | 29892/77848.12 [00:04<00:06, 7484.34it/s]     39%|███▉      | 30641/77848.12 [00:04<00:06, 7412.81it/s]     40%|████      | 31400/77848.12 [00:04<00:06, 7462.72it/s]     41%|████▏     | 32168/77848.12 [00:04<00:06, 7525.32it/s]     42%|████▏     | 32922/77848.12 [00:04<00:05, 7529.62it/s]     43%|████▎     | 33697/77848.12 [00:04<00:05, 7593.81it/s]     44%|████▍     | 34459/77848.12 [00:04<00:05, 7600.43it/s]     45%|████▌     | 35224/77848.12 [00:04<00:05, 7613.39it/s]     46%|████▌     | 35986/77848.12 [00:04<00:05, 7601.67it/s]     47%|████▋     | 36747/77848.12 [00:05<00:05, 7542.31it/s]     48%|████▊     | 37502/77848.12 [00:05<00:05, 7492.72it/s]     49%|████▉     | 38253/77848.12 [00:05<00:05, 7496.12it/s]     50%|█████     | 39010/77848.12 [00:05<00:05, 7515.32it/s]     51%|█████     | 39762/77848.12 [00:05<00:05, 7502.28it/s]     52%|█████▏    | 40513/77848.12 [00:05<00:05, 7454.64it/s]     53%|█████▎    | 41259/77848.12 [00:05<00:04, 7350.08it/s]     54%|█████▍    | 41995/77848.12 [00:05<00:04, 7270.04it/s]     55%|█████▍    | 42725/77848.12 [00:05<00:04, 7276.12it/s]     56%|█████▌    | 43453/77848.12 [00:05<00:04, 7245.39it/s]     57%|█████▋    | 44178/77848.12 [00:06<00:04, 7190.56it/s]     58%|█████▊    | 44898/77848.12 [00:06<00:04, 7168.00it/s]     59%|█████▊    | 45615/77848.12 [00:06<00:04, 7145.06it/s]     60%|█████▉    | 46330/77848.12 [00:06<00:04, 7038.30it/s]     60%|██████    | 47057/77848.12 [00:06<00:04, 7105.49it/s]     61%|██████▏   | 47797/77848.12 [00:06<00:04, 7192.35it/s]     62%|██████▏   | 48517/77848.12 [00:06<00:04, 7132.57it/s]     63%|██████▎   | 49264/77848.12 [00:06<00:03, 7232.09it/s]     64%|██████▍   | 49988/77848.12 [00:06<00:03, 7178.43it/s]     65%|██████▌   | 50724/77848.12 [00:06<00:03, 7230.45it/s]     66%|██████▌   | 51448/77848.12 [00:07<00:03, 7194.91it/s]     67%|██████▋   | 52183/77848.12 [00:07<00:03, 7239.96it/s]     68%|██████▊   | 52908/77848.12 [00:07<00:03, 7212.59it/s]     69%|██████▉   | 53685/77848.12 [00:07<00:03, 7377.84it/s]     70%|██████▉   | 54424/77848.12 [00:07<00:03, 7348.69it/s]     71%|███████   | 55160/77848.12 [00:07<00:03, 7339.81it/s]     72%|███████▏  | 55931/77848.12 [00:07<00:02, 7449.71it/s]     73%|███████▎  | 56677/77848.12 [00:07<00:02, 7439.03it/s]     74%|███████▍  | 57428/77848.12 [00:07<00:02, 7456.24it/s]     75%|███████▍  | 58194/77848.12 [00:07<00:02, 7515.68it/s]     76%|███████▌  | 58946/77848.12 [00:08<00:02, 7509.42it/s]     77%|███████▋  | 59697/77848.12 [00:08<00:02, 7463.85it/s]     78%|███████▊  | 60486/77848.12 [00:08<00:02, 7587.88it/s]     79%|███████▊  | 61245/77848.12 [00:08<00:02, 7491.96it/s]     80%|███████▉  | 61995/77848.12 [00:08<00:02, 7437.08it/s]     81%|████████  | 62801/77848.12 [00:08<00:01, 7620.40it/s]     82%|████████▏ | 63565/77848.12 [00:08<00:01, 7623.78it/s]     83%|████████▎ | 64328/77848.12 [00:08<00:01, 7551.80it/s]     84%|████████▎ | 65140/77848.12 [00:08<00:01, 7718.61it/s]     85%|████████▍ | 65913/77848.12 [00:08<00:01, 7714.75it/s]     86%|████████▌ | 66685/77848.12 [00:09<00:01, 7618.41it/s]     87%|████████▋ | 67492/77848.12 [00:09<00:01, 7747.26it/s]     88%|████████▊ | 68268/77848.12 [00:09<00:01, 7615.64it/s]     89%|████████▊ | 69031/77848.12 [00:09<00:01, 7566.36it/s]     90%|████████▉ | 69830/77848.12 [00:09<00:01, 7685.32it/s]     91%|█████████ | 70600/77848.12 [00:09<00:00, 7633.28it/s]     92%|█████████▏| 71364/77848.12 [00:09<00:00, 7543.46it/s]     93%|█████████▎| 72142/77848.12 [00:09<00:00, 7612.69it/s]     94%|█████████▎| 72904/77848.12 [00:09<00:00, 7593.05it/s]     95%|█████████▍| 73664/77848.12 [00:10<00:00, 7591.64it/s]     96%|█████████▌| 74424/77848.12 [00:10<00:00, 7589.23it/s]     97%|█████████▋| 75184/77848.12 [00:10<00:00, 7494.00it/s]     98%|█████████▊| 75991/77848.12 [00:10<00:00, 7663.66it/s]     99%|█████████▊| 76758/77848.12 [00:10<00:00, 7580.31it/s]    100%|█████████▉| 77529/77848.12 [00:10<00:00, 7614.22it/s]    78291it [00:10, 7598.55it/s]                                  79052it [00:10, 7541.29it/s]    79886it [00:10, 7776.23it/s]    80665it [00:10, 7755.87it/s]    81441it [00:11, 7657.17it/s]    82212it [00:11, 7668.96it/s]    82980it [00:11, 7571.34it/s]    83773it [00:11, 7676.18it/s]    84542it [00:11, 7620.17it/s]    85305it [00:11, 7615.19it/s]    86067it [00:11, 7529.27it/s]    86835it [00:11, 7570.37it/s]    87593it [00:11, 7454.84it/s]    88369it [00:11, 7542.70it/s]    89124it [00:12, 7393.13it/s]    89865it [00:12, 7361.47it/s]    90604it [00:12, 7369.38it/s]    91342it [00:12, 7298.35it/s]    92073it [00:12, 7149.18it/s]    92789it [00:12, 7133.15it/s]    93503it [00:12, 7015.69it/s]    94206it [00:12, 6888.93it/s]    94896it [00:12, 6806.47it/s]    95578it [00:12, 6736.75it/s]    96252it [00:13, 6614.15it/s]    96914it [00:13, 6495.12it/s]    96989it [00:13, 7335.68it/s]




.. GENERATED FROM PYTHON SOURCE LINES 77-87

CMC/ACT Stopping Criterion
==========================
Continuous map criterion (CMC) [Girard2014]_ and Anatomically-constrained
tractography (ACT) [Smith2012]_ both uses PVEs information from
anatomical images to determine when the tractography stops.
Both stopping criterion use a trilinear interpolation
at the tracking position. CMC stopping criterion uses a probability derived
from the PVE maps to determine if the streamline reaches a 'valid' or
'invalid' region. ACT uses a fixed threshold on the PVE maps. Both stopping
criterion can be used in conjunction with PFT. In this example, we used CMC.

.. GENERATED FROM PYTHON SOURCE LINES 87-97

.. code-block:: Python


    voxel_size = np.average(voxel_size[1:4])
    step_size = 0.2

    cmc_criterion = CmcStoppingCriterion.from_pve(pve_wm_data,
                                                  pve_gm_data,
                                                  pve_csf_data,
                                                  step_size=step_size,
                                                  average_voxel_size=voxel_size)








.. GENERATED FROM PYTHON SOURCE LINES 98-115

Particle Filtering Tractography
===============================
`pft_back_tracking_dist` is the distance in mm to backtrack when the
tractography incorrectly stops in the WM or CSF. `pft_front_tracking_dist`
is the distance in mm to track after the stopping event using PFT.

The `particle_count` parameter is the number of samples used in the particle
filtering algorithm.

`min_wm_pve_before_stopping` controls when the tracking can stop in the GM.
The tractography must reaches a position where WM_pve >=
`min_wm_pve_before_stopping` before stopping in the GM. As long as the
condition is not reached and WM_pve > 0, the tractography will continue.
It is particularlyusefull to set this parameter > 0.5 when seeding
tractography at the WM-GM interface or in the sub-cortical GM. It allows
streamlines to exit the seeding voxels until they reach the deep white
matter where WM_pve > `min_wm_pve_before_stopping`.

.. GENERATED FROM PYTHON SOURCE LINES 115-140

.. code-block:: Python


    pft_streamline_gen = ParticleFilteringTracking(dg,
                                                   cmc_criterion,
                                                   seeds,
                                                   affine,
                                                   max_cross=1,
                                                   step_size=step_size,
                                                   maxlen=1000,
                                                   pft_back_tracking_dist=2,
                                                   pft_front_tracking_dist=1,
                                                   particle_count=15,
                                                   return_all=False,
                                                   min_wm_pve_before_stopping=1)
    streamlines = Streamlines(pft_streamline_gen)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_pft.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_pft.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_pft_001.png
   :alt: tracking pft
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_pft_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 141-144

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum using particle filtering tractography

.. GENERATED FROM PYTHON SOURCE LINES 144-166

.. code-block:: Python


    # Local Probabilistic Tractography
    prob_streamline_generator = LocalTracking(dg,
                                              cmc_criterion,
                                              seeds,
                                              affine,
                                              max_cross=1,
                                              step_size=step_size,
                                              maxlen=1000,
                                              return_all=False)
    streamlines = Streamlines(prob_streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_cmc.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_cmc.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_pft_002.png
   :alt: tracking pft
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_pft_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 167-183

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum using probabilistic tractography



References
----------
.. [Girard2014] Girard, G., Whittingstall, K., Deriche, R., & Descoteaux, M.
    Towards quantitative connectivity analysis: reducing tractography biases.
    NeuroImage, 98, 266-278, 2014.

.. [Smith2012] Smith, R. E., Tournier, J.-D., Calamante, F., & Connelly, A.
    Anatomically-constrained tractography: Improved diffusion MRI
    streamlines tractography through effective use of anatomical
    information. NeuroImage, 63(3), 1924-1938, 2012.

.. GENERATED FROM PYTHON SOURCE LINES 185-187

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.231 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_pft.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_pft.ipynb <tracking_pft.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_pft.py <tracking_pft.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
