
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\fiber_tracking\tracking_probabilistic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_probabilistic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_probabilistic.py:


=====================================================
An introduction to the Probabilistic Direction Getter
=====================================================

Probabilistic fiber tracking is a way of reconstructing white matter
connections using diffusion MR imaging. Like deterministic fiber tracking, the
probabilistic approach follows the trajectory of a possible pathway step by
step starting at a seed, however, unlike deterministic tracking, the tracking
direction at each point along the path is chosen at random from a distribution.
The distribution at each point is different and depends on the observed
diffusion data at that point. The distribution of tracking directions at each
point can be represented as a probability mass function (PMF) if the possible
tracking directions are restricted to discrete numbers of well distributed
points on a sphere.

This example is an extension of the
:ref:`sphx_glr_examples_built_quick_start_tracking_introduction_eudx.py`
example. We'll begin by repeating a few steps from that example, loading the
data and fitting a Constrained Spherical Deconvolution (CSD) model.

.. GENERATED FROM PYTHON SOURCE LINES 22-58

.. code-block:: Python


    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames, small_sphere, default_sphere
    from dipy.direction import ProbabilisticDirectionGetter, peaks_from_model
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.io.streamline import save_trk
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.reconst.shm import CsaOdfModel
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury

    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)

    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                                                                                                                                  | 0/58788 [00:00<?, ?it/s]      1%|█▎                                                                                                                                    | 600/58788 [00:00<00:09, 5966.93it/s]      2%|███▏                                                                                                                                 | 1388/58788 [00:00<00:08, 7078.32it/s]      4%|████▉                                                                                                                                | 2200/58788 [00:00<00:07, 7533.68it/s]      5%|██████▊                                                                                                                              | 3026/58788 [00:00<00:07, 7803.58it/s]      7%|████████▋                                                                                                                            | 3858/58788 [00:00<00:06, 7974.77it/s]      8%|██████████▌                                                                                                                          | 4679/58788 [00:00<00:06, 8040.64it/s]      9%|████████████▍                                                                                                                        | 5518/58788 [00:00<00:06, 8145.34it/s]     11%|██████████████▍                                                                                                                      | 6372/58788 [00:00<00:06, 8259.09it/s]     12%|████████████████▎                                                                                                                    | 7234/58788 [00:00<00:06, 8359.02it/s]     14%|██████████████████▎                                                                                                                  | 8091/58788 [00:01<00:06, 8414.43it/s]     15%|████████████████████▏                                                                                                                | 8944/58788 [00:01<00:05, 8442.85it/s]     17%|██████████████████████▏                                                                                                              | 9801/58788 [00:01<00:05, 8467.45it/s]     18%|███████████████████████▉                                                                                                            | 10666/58788 [00:01<00:05, 8507.90it/s]     20%|█████████████████████████▊                                                                                                          | 11517/58788 [00:01<00:05, 8472.85it/s]     21%|███████████████████████████▊                                                                                                        | 12382/58788 [00:01<00:05, 8516.04it/s]     23%|█████████████████████████████▊                                                                                                      | 13256/58788 [00:01<00:05, 8572.29it/s]     24%|███████████████████████████████▋                                                                                                    | 14122/58788 [00:01<00:05, 8574.91it/s]     26%|█████████████████████████████████▋                                                                                                  | 14994/58788 [00:01<00:05, 8610.57it/s]     27%|███████████████████████████████████▌                                                                                                | 15856/58788 [00:01<00:05, 8474.59it/s]     28%|█████████████████████████████████████▌                                                                                              | 16704/58788 [00:02<00:04, 8465.53it/s]     30%|███████████████████████████████████████▍                                                                                            | 17559/58788 [00:02<00:04, 8481.96it/s]     31%|█████████████████████████████████████████▎                                                                                          | 18415/58788 [00:02<00:04, 8494.51it/s]     33%|███████████████████████████████████████████▎                                                                                        | 19279/58788 [00:02<00:04, 8528.31it/s]     34%|█████████████████████████████████████████████▏                                                                                      | 20135/58788 [00:02<00:04, 8528.86it/s]     36%|███████████████████████████████████████████████▏                                                                                    | 20990/58788 [00:02<00:04, 8517.92it/s]     37%|█████████████████████████████████████████████████                                                                                   | 21847/58788 [00:02<00:04, 8522.01it/s]     39%|██████████████████████████████████████████████████▉                                                                                 | 22700/58788 [00:02<00:04, 8514.10it/s]     40%|████████████████████████████████████████████████████▉                                                                               | 23563/58788 [00:02<00:04, 8538.10it/s]     42%|██████████████████████████████████████████████████████▊                                                                             | 24417/58788 [00:02<00:04, 8431.35it/s]     43%|████████████████████████████████████████████████████████▋                                                                           | 25261/58788 [00:03<00:04, 8087.95it/s]     44%|██████████████████████████████████████████████████████████▌                                                                         | 26073/58788 [00:03<00:04, 7868.23it/s]     46%|████████████████████████████████████████████████████████████▎                                                                       | 26863/58788 [00:03<00:04, 7845.88it/s]     47%|██████████████████████████████████████████████████████████████                                                                      | 27650/58788 [00:03<00:03, 7799.71it/s]     48%|███████████████████████████████████████████████████████████████▉                                                                    | 28475/58788 [00:03<00:03, 7918.18it/s]     50%|█████████████████████████████████████████████████████████████████▋                                                                  | 29279/58788 [00:03<00:03, 7944.75it/s]     51%|███████████████████████████████████████████████████████████████████▌                                                                | 30088/58788 [00:03<00:03, 7976.29it/s]     53%|█████████████████████████████████████████████████████████████████████▍                                                              | 30910/58788 [00:03<00:03, 8036.35it/s]     54%|███████████████████████████████████████████████████████████████████████▏                                                            | 31732/58788 [00:03<00:03, 8080.94it/s]     55%|█████████████████████████████████████████████████████████████████████████                                                           | 32541/58788 [00:03<00:03, 8077.55it/s]     57%|██████████████████████████████████████████████████████████████████████████▉                                                         | 33370/58788 [00:04<00:03, 8129.36it/s]     58%|████████████████████████████████████████████████████████████████████████████▊                                                       | 34213/58788 [00:04<00:02, 8209.39it/s]     60%|██████████████████████████████████████████████████████████████████████████████▋                                                     | 35045/58788 [00:04<00:02, 8231.50it/s]     61%|████████████████████████████████████████████████████████████████████████████████▌                                                   | 35902/58788 [00:04<00:02, 8322.16it/s]     63%|██████████████████████████████████████████████████████████████████████████████████▌                                                 | 36752/58788 [00:04<00:02, 8366.71it/s]     64%|████████████████████████████████████████████████████████████████████████████████████▍                                               | 37620/58788 [00:04<00:02, 8449.50it/s]     65%|██████████████████████████████████████████████████████████████████████████████████████▍                                             | 38494/58788 [00:04<00:02, 8520.94it/s]     67%|████████████████████████████████████████████████████████████████████████████████████████▍                                           | 39373/58788 [00:04<00:02, 8589.97it/s]     68%|██████████████████████████████████████████████████████████████████████████████████████████▎                                         | 40233/58788 [00:04<00:02, 8531.31it/s]     70%|████████████████████████████████████████████████████████████████████████████████████████████▎                                       | 41087/58788 [00:04<00:02, 8526.49it/s]     71%|██████████████████████████████████████████████████████████████████████████████████████████████▏                                     | 41961/58788 [00:05<00:01, 8580.72it/s]     73%|████████████████████████████████████████████████████████████████████████████████████████████████▏                                   | 42820/58788 [00:05<00:01, 8543.37it/s]     74%|██████████████████████████████████████████████████████████████████████████████████████████████████                                  | 43675/58788 [00:05<00:01, 8533.50it/s]     76%|███████████████████████████████████████████████████████████████████████████████████████████████████▉                                | 44529/58788 [00:05<00:01, 8499.17it/s]     77%|█████████████████████████████████████████████████████████████████████████████████████████████████████▉                              | 45396/58788 [00:05<00:01, 8537.96it/s]     79%|███████████████████████████████████████████████████████████████████████████████████████████████████████▊                            | 46253/58788 [00:05<00:01, 8541.14it/s]     80%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▊                          | 47108/58788 [00:05<00:01, 8532.90it/s]     82%|███████████████████████████████████████████████████████████████████████████████████████████████████████████▋                        | 47976/58788 [00:05<00:01, 8565.73it/s]     83%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                      | 48833/58788 [00:05<00:01, 8530.43it/s]     85%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                    | 49687/58788 [00:05<00:01, 8471.07it/s]     86%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                  | 50564/58788 [00:06<00:00, 8536.31it/s]     87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                | 51418/58788 [00:06<00:00, 8502.25it/s]     89%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎              | 52269/58788 [00:06<00:00, 8490.94it/s]     90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎            | 53121/58788 [00:06<00:00, 8487.16it/s]     92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏          | 53972/58788 [00:06<00:00, 8481.19it/s]     93%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████         | 54821/58788 [00:06<00:00, 8450.94it/s]     95%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉       | 55667/58788 [00:06<00:00, 8417.56it/s]     96%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉     | 56509/58788 [00:06<00:00, 8382.40it/s]     98%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊   | 57348/58788 [00:06<00:00, 8335.69it/s]     99%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋ | 58182/58788 [00:06<00:00, 8062.55it/s]    100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 58788/58788 [00:07<00:00, 8289.03it/s]




.. GENERATED FROM PYTHON SOURCE LINES 59-60

We use the GFA of the CSA model to build a stopping criterion.

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: Python


    csa_model = CsaOdfModel(gtab, sh_order=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 66-75

The Fiber Orientation Distribution (FOD) of the CSD model estimates the
distribution of small fiber bundles within each voxel. We can use this
distribution for probabilistic fiber tracking. One way to do this is to
represent the FOD using a discrete sphere. This discrete FOD can be used by
the ``ProbabilisticDirectionGetter`` as a PMF for sampling tracking
directions. We need to clip the FOD to use it as a PMF because the latter
cannot have negative values. Ideally, the FOD should be strictly positive,
but because of noise and/or model failures sometimes it can have negative
values.

.. GENERATED FROM PYTHON SOURCE LINES 75-94

.. code-block:: Python


    fod = csd_fit.odf(small_sphere)
    pmf = fod.clip(min=0)
    prob_dg = ProbabilisticDirectionGetter.from_pmf(pmf, max_angle=30.,
                                                    sphere=small_sphere)
    streamline_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                         affine, step_size=.5)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_dg_pmf.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_dg_pmf.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_001.png
   :alt: tracking probabilistic
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum using probabilistic direction getter from PMF



One disadvantage of using a discrete PMF to represent possible tracking
directions is that it tends to take up a lot of memory (RAM). The size of the
PMF, the FOD in this case, must be equal to the number of possible tracking
directions on the hemisphere, and every voxel has a unique PMF. In this case
the data is ``(81, 106, 76)`` and ``small_sphere`` has 181 directions so the
FOD is ``(81, 106, 76, 181)``. One way to avoid sampling the PMF and holding
it in memory is to build the direction getter directly from the spherical
harmonic (SH) representation of the FOD. By using this approach, we can also
use a larger sphere, like ``default_sphere`` which has 362 directions on the
hemisphere, without having to worry about memory limitations.

.. GENERATED FROM PYTHON SOURCE LINES 111-130

.. code-block:: Python


    prob_dg = ProbabilisticDirectionGetter.from_shcoeff(csd_fit.shm_coeff,
                                                        max_angle=30.,
                                                        sphere=default_sphere,
                                                        sh_to_pmf=True)
    streamline_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                         affine, step_size=.5)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_dg_sh.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_dg_sh.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_002.png
   :alt: tracking probabilistic
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-141

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum using probabilistic direction getter from SH



Not all model fits have the ``shm_coeff`` attribute because not all models
use this basis to represent the data internally. However we can fit the ODF
of any model to the spherical harmonic basis using the ``peaks_from_model``
function.

.. GENERATED FROM PYTHON SOURCE LINES 141-164

.. code-block:: Python


    peaks = peaks_from_model(csd_model, data, default_sphere, .5, 25,
                             mask=white_matter, return_sh=True, parallel=True,
                             num_processes=2)
    fod_coeff = peaks.shm_coeff

    prob_dg = ProbabilisticDirectionGetter.from_shcoeff(fod_coeff, max_angle=30.,
                                                        sphere=default_sphere,
                                                        sh_to_pmf=True)
    streamline_generator = LocalTracking(prob_dg, stopping_criterion, seeds,
                                         affine, step_size=.5)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_probabilistic_dg_sh_pfm.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_probabilistic_dg_sh_pfm.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_003.png
   :alt: tracking probabilistic
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_probabilistic_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 165-169

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum using probabilistic direction getter from SH
(peaks_from_model)

.. GENERATED FROM PYTHON SOURCE LINES 171-173

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 52.889 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_probabilistic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_probabilistic.ipynb <tracking_probabilistic.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_probabilistic.py <tracking_probabilistic.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
