
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/fiber_tracking/tracking_ptt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_ptt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_ptt.py:


===============================
Parallel Transport Tractography
===============================
Parallel Transport Tractography (PTT) [Aydogan2021]_

.. GENERATED FROM PYTHON SOURCE LINES 10-50

.. code-block:: default


    from dipy.direction import peaks_from_model
    from dipy.data import default_sphere
    from dipy.io.streamline import save_trk
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.data import get_sphere
    from dipy.direction import PTTDirectionGetter
    from dipy.reconst.shm import CsaOdfModel
    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury


    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)

    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/58788 [00:00<?, ?it/s]      1%|          | 718/58788 [00:00<00:08, 7177.13it/s]      3%|▎         | 1633/58788 [00:00<00:06, 8333.83it/s]      4%|▍         | 2609/58788 [00:00<00:06, 8982.50it/s]      6%|▌         | 3529/58788 [00:00<00:06, 9067.90it/s]      8%|▊         | 4511/58788 [00:00<00:05, 9336.36it/s]      9%|▉         | 5503/58788 [00:00<00:05, 9531.59it/s]     11%|█         | 6496/58788 [00:00<00:05, 9658.78it/s]     13%|█▎        | 7484/58788 [00:00<00:05, 9729.16it/s]     14%|█▍        | 8477/58788 [00:00<00:05, 9791.37it/s]     16%|█▌        | 9471/58788 [00:01<00:05, 9835.03it/s]     18%|█▊        | 10463/58788 [00:01<00:04, 9860.40it/s]     19%|█▉        | 11454/58788 [00:01<00:04, 9874.55it/s]     21%|██        | 12444/58788 [00:01<00:04, 9882.19it/s]     23%|██▎       | 13455/58788 [00:01<00:04, 9950.64it/s]     25%|██▍       | 14451/58788 [00:01<00:04, 9895.66it/s]     26%|██▋       | 15441/58788 [00:01<00:04, 9850.50it/s]     28%|██▊       | 16470/58788 [00:01<00:04, 9980.56it/s]     30%|██▉       | 17471/58788 [00:01<00:04, 9987.49it/s]     31%|███▏      | 18470/58788 [00:01<00:04, 9988.09it/s]     33%|███▎      | 19469/58788 [00:02<00:03, 9937.73it/s]     35%|███▍      | 20463/58788 [00:02<00:03, 9853.02it/s]     36%|███▋      | 21449/58788 [00:02<00:03, 9790.93it/s]     38%|███▊      | 22451/58788 [00:02<00:03, 9856.97it/s]     40%|███▉      | 23437/58788 [00:02<00:03, 9821.47it/s]     42%|████▏     | 24434/58788 [00:02<00:03, 9863.32it/s]     43%|████▎     | 25421/58788 [00:02<00:03, 9848.13it/s]     45%|████▍     | 26406/58788 [00:02<00:03, 9844.11it/s]     47%|████▋     | 27391/58788 [00:02<00:03, 9764.76it/s]     48%|████▊     | 28368/58788 [00:02<00:03, 9673.47it/s]     50%|████▉     | 29336/58788 [00:03<00:03, 9521.06it/s]     52%|█████▏    | 30289/58788 [00:03<00:02, 9511.53it/s]     53%|█████▎    | 31241/58788 [00:03<00:02, 9499.89it/s]     55%|█████▍    | 32211/58788 [00:03<00:02, 9556.02it/s]     56%|█████▋    | 33176/58788 [00:03<00:02, 9582.26it/s]     58%|█████▊    | 34156/58788 [00:03<00:02, 9647.19it/s]     60%|█████▉    | 35121/58788 [00:03<00:02, 9626.78it/s]     61%|██████▏   | 36107/58788 [00:03<00:02, 9694.38it/s]     63%|██████▎   | 37077/58788 [00:03<00:02, 9695.13it/s]     65%|██████▍   | 38086/58788 [00:03<00:02, 9812.84it/s]     67%|██████▋   | 39103/58788 [00:04<00:01, 9917.76it/s]     68%|██████▊   | 40117/58788 [00:04<00:01, 9982.96it/s]     70%|██████▉   | 41116/58788 [00:04<00:01, 9979.48it/s]     72%|███████▏  | 42119/58788 [00:04<00:01, 9994.20it/s]     73%|███████▎  | 43119/58788 [00:04<00:01, 9964.58it/s]     75%|███████▌  | 44116/58788 [00:04<00:01, 9915.14it/s]     77%|███████▋  | 45124/58788 [00:04<00:01, 9963.92it/s]     78%|███████▊  | 46122/58788 [00:04<00:01, 9966.31it/s]     80%|████████  | 47127/58788 [00:04<00:01, 9990.58it/s]     82%|████████▏ | 48142/58788 [00:04<00:01, 10037.74it/s]     84%|████████▎ | 49146/58788 [00:05<00:00, 10006.94it/s]     85%|████████▌ | 50147/58788 [00:05<00:00, 9972.30it/s]      87%|████████▋ | 51145/58788 [00:05<00:00, 9925.21it/s]     89%|████████▊ | 52138/58788 [00:05<00:00, 9880.89it/s]     90%|█████████ | 53127/58788 [00:05<00:00, 9847.14it/s]     92%|█████████▏| 54114/58788 [00:05<00:00, 9851.27it/s]     94%|█████████▎| 55100/58788 [00:05<00:00, 9807.78it/s]     95%|█████████▌| 56082/58788 [00:05<00:00, 9811.07it/s]     97%|█████████▋| 57064/58788 [00:05<00:00, 9677.22it/s]     99%|█████████▊| 58033/58788 [00:05<00:00, 9564.43it/s]    100%|██████████| 58788/58788 [00:06<00:00, 9718.70it/s]




.. GENERATED FROM PYTHON SOURCE LINES 51-52

We use the GFA of the CSA model to build a stopping criterion.

.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default



    csa_model = CsaOdfModel(gtab, sh_order=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Prepare the PTT direction getter using the fiber ODF (FOD) obtain with CSD.
Start the local tractography using PTT direction getter.

.. GENERATED FROM PYTHON SOURCE LINES 61-86

.. code-block:: default



    sphere = get_sphere(name='repulsion724')
    fod = csd_fit.odf(sphere)
    pmf = fod.clip(min=0)
    ptt_dg = PTTDirectionGetter.from_pmf(pmf, max_angle=15, probe_length=0.5,
                                         sphere=sphere)

    # Parallel Transport Tractography
    streamline_generator = LocalTracking(direction_getter=ptt_dg,
                                         stopping_criterion=stopping_criterion,
                                         seeds=seeds,
                                         affine=affine,
                                         step_size=0.2)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_ptt_dg_pmf.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_ptt_dg_pmf.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)



.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_ptt_001.png
   :alt: tracking ptt
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_ptt_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. figure:: tractogram_ptt_dg_pmf.png
   :align: center

   **Corpus Callosum using ptt direction getter from PMF**

.. GENERATED FROM PYTHON SOURCE LINES 94-101

References
----------
.. [Aydogan2021] Aydogan DB, Shi Y. Parallel Transport Tractography. IEEE Trans
    Med Imaging. 2021 Feb;40(2):635-647. doi: 10.1109/TMI.2020.3034038.
    Epub 2021 Feb 2. PMID: 33104507; PMCID: PMC7931442.

.. include:: ../links_names.inc

.. GENERATED FROM PYTHON SOURCE LINES 103-105

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 31.659 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_ptt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_ptt.py <tracking_ptt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_ptt.ipynb <tracking_ptt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
