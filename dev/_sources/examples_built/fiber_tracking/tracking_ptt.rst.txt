
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built/fiber_tracking/tracking_ptt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_fiber_tracking_tracking_ptt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_fiber_tracking_tracking_ptt.py:


===============================
Parallel Transport Tractography
===============================
Parallel Transport Tractography (PTT) [Aydogan2021]_

Let's start by importing the necessary modules.

.. GENERATED FROM PYTHON SOURCE LINES 9-47

.. code-block:: Python


    from dipy.io.streamline import save_trk
    from dipy.io.stateful_tractogram import Space, StatefulTractogram
    from dipy.data import get_sphere
    from dipy.direction import PTTDirectionGetter
    from dipy.reconst.shm import CsaOdfModel
    from dipy.core.gradients import gradient_table
    from dipy.data import get_fnames
    from dipy.io.gradients import read_bvals_bvecs
    from dipy.io.image import load_nifti, load_nifti_data
    from dipy.reconst.csdeconv import (ConstrainedSphericalDeconvModel,
                                       auto_response_ssst)
    from dipy.tracking import utils
    from dipy.tracking.local_tracking import LocalTracking
    from dipy.tracking.streamline import Streamlines
    from dipy.tracking.stopping_criterion import ThresholdStoppingCriterion
    from dipy.viz import window, actor, colormap, has_fury


    # Enables/disables interactive visualization
    interactive = False

    hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
    label_fname = get_fnames('stanford_labels')

    data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
    labels = load_nifti_data(label_fname)
    bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
    gtab = gradient_table(bvals, bvecs)

    seed_mask = (labels == 2)
    white_matter = (labels == 1) | (labels == 2)
    seeds = utils.seeds_from_mask(seed_mask, affine, density=1)

    response, ratio = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
    csd_model = ConstrainedSphericalDeconvModel(gtab, response, sh_order_max=6)
    csd_fit = csd_model.fit(data, mask=white_matter)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/58788 [00:00<?, ?it/s]      2%|▏         | 1268/58788 [00:00<00:04, 12676.69it/s]      5%|▍         | 2823/58788 [00:00<00:03, 14357.48it/s]      8%|▊         | 4428/58788 [00:00<00:03, 15128.91it/s]     10%|█         | 6126/58788 [00:00<00:03, 15858.43it/s]     13%|█▎        | 7802/58788 [00:00<00:03, 16183.11it/s]     16%|█▌        | 9509/58788 [00:00<00:02, 16483.25it/s]     19%|█▉        | 11193/58788 [00:00<00:02, 16597.80it/s]     22%|██▏       | 12917/58788 [00:00<00:02, 16802.09it/s]     25%|██▍       | 14618/58788 [00:00<00:02, 16866.61it/s]     28%|██▊       | 16311/58788 [00:01<00:02, 16885.46it/s]     31%|███       | 18011/58788 [00:01<00:02, 16919.79it/s]     34%|███▎      | 19703/58788 [00:01<00:02, 16875.50it/s]     36%|███▋      | 21406/58788 [00:01<00:02, 16920.69it/s]     39%|███▉      | 23115/58788 [00:01<00:02, 16966.59it/s]     42%|████▏     | 24812/58788 [00:01<00:02, 16843.43it/s]     45%|████▌     | 26497/58788 [00:01<00:01, 16835.17it/s]     48%|████▊     | 28181/58788 [00:01<00:01, 16710.32it/s]     51%|█████     | 29853/58788 [00:01<00:01, 16558.10it/s]     54%|█████▎    | 31510/58788 [00:01<00:01, 16498.05it/s]     56%|█████▋    | 33189/58788 [00:02<00:01, 16583.23it/s]     59%|█████▉    | 34872/58788 [00:02<00:01, 16652.60it/s]     62%|██████▏   | 36544/58788 [00:02<00:01, 16672.40it/s]     65%|██████▌   | 38254/58788 [00:02<00:01, 16796.63it/s]     68%|██████▊   | 39977/58788 [00:02<00:01, 16923.90it/s]     71%|███████   | 41701/58788 [00:02<00:01, 17016.95it/s]     74%|███████▍  | 43432/58788 [00:02<00:00, 17104.17it/s]     77%|███████▋  | 45143/58788 [00:02<00:00, 16940.22it/s]     80%|███████▉  | 46838/58788 [00:02<00:00, 16713.07it/s]     83%|████████▎ | 48511/58788 [00:02<00:00, 16558.39it/s]     85%|████████▌ | 50168/58788 [00:03<00:00, 16543.48it/s]     88%|████████▊ | 51831/58788 [00:03<00:00, 16569.10it/s]     91%|█████████ | 53489/58788 [00:03<00:00, 16500.07it/s]     94%|█████████▍| 55140/58788 [00:03<00:00, 16496.71it/s]     97%|█████████▋| 56790/58788 [00:03<00:00, 16436.29it/s]     99%|█████████▉| 58434/58788 [00:03<00:00, 16057.12it/s]    100%|██████████| 58788/58788 [00:03<00:00, 16471.92it/s]




.. GENERATED FROM PYTHON SOURCE LINES 48-49

We use the GFA of the CSA model to build a stopping criterion.

.. GENERATED FROM PYTHON SOURCE LINES 49-54

.. code-block:: Python


    csa_model = CsaOdfModel(gtab, sh_order_max=6)
    gfa = csa_model.fit(data, mask=white_matter).gfa
    stopping_criterion = ThresholdStoppingCriterion(gfa, .25)








.. GENERATED FROM PYTHON SOURCE LINES 55-57

Prepare the PTT direction getter using the fiber ODF (FOD) obtain with CSD.
Start the local tractography using PTT direction getter.

.. GENERATED FROM PYTHON SOURCE LINES 57-82

.. code-block:: Python


    sphere = get_sphere(name='repulsion724')
    fod = csd_fit.odf(sphere)
    pmf = fod.clip(min=0)
    ptt_dg = PTTDirectionGetter.from_pmf(pmf, max_angle=15, probe_length=0.5,
                                         sphere=sphere)

    # Parallel Transport Tractography
    streamline_generator = LocalTracking(direction_getter=ptt_dg,
                                         stopping_criterion=stopping_criterion,
                                         seeds=seeds,
                                         affine=affine,
                                         step_size=0.2)
    streamlines = Streamlines(streamline_generator)
    sft = StatefulTractogram(streamlines, hardi_img, Space.RASMM)
    save_trk(sft, "tractogram_ptt_dg_pmf.trk")

    if has_fury:
        scene = window.Scene()
        scene.add(actor.line(streamlines, colormap.line_colors(streamlines)))
        window.record(scene, out_path='tractogram_ptt_dg_pmf.png',
                      size=(800, 800))
        if interactive:
            window.show(scene)




.. image-sg:: /examples_built/fiber_tracking/images/sphx_glr_tracking_ptt_001.png
   :alt: tracking ptt
   :srcset: /examples_built/fiber_tracking/images/sphx_glr_tracking_ptt_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-94

.. rst-class:: centered small fst-italic fw-semibold

Corpus Callosum using ptt direction getter from PMF



References
----------
.. [Aydogan2021] Aydogan DB, Shi Y. Parallel Transport Tractography. IEEE
    Trans Med Imaging. 2021 Feb;40(2):635-647. doi: 10.1109/TMI.2020.3034038.
    Epub 2021 Feb 2. PMID: 33104507; PMCID: PMC7931442.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.155 seconds)


.. _sphx_glr_download_examples_built_fiber_tracking_tracking_ptt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracking_ptt.ipynb <tracking_ptt.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracking_ptt.py <tracking_ptt.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
