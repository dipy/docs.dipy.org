
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_built\quick_start\quick_start.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_built_quick_start_quick_start.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_built_quick_start_quick_start.py:


=========================
Getting started with DIPY
=========================

In diffusion MRI (dMRI) usually we use three types of files, a Nifti file with
the diffusion weighted data, and two text files one with b-values and
one with the b-vectors.

In DIPY_ we provide tools to load and process these files and we also provide
access to publicly available datasets for those who haven't acquired yet
their own datasets.

Let's start with some necessary imports.

.. GENERATED FROM PYTHON SOURCE LINES 16-26

.. code-block:: Python


    from os.path import expanduser, join

    import matplotlib.pyplot as plt

    from dipy.core.gradients import gradient_table
    from dipy.data import fetch_sherbrooke_3shell
    from dipy.io import read_bvals_bvecs
    from dipy.io.image import load_nifti, save_nifti








.. GENERATED FROM PYTHON SOURCE LINES 27-28

With the following commands we can download a dMRI dataset

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: Python


    fetch_sherbrooke_3shell()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ({'HARDI193.nii.gz': ('https://digital.lib.washington.edu/researchworks/bitstream/handle/1773/38475/HARDI193.nii.gz', '0b735e8f16695a37bfbd66aab136eb66'), 'HARDI193.bval': ('https://digital.lib.washington.edu/researchworks/bitstream/handle/1773/38475/HARDI193.bval', 'e9b9bb56252503ea49d31fb30a0ac637'), 'HARDI193.bvec': ('https://digital.lib.washington.edu/researchworks/bitstream/handle/1773/38475/HARDI193.bvec', '0c83f7e8b917cd677ad58a078658ebb7')}, 'C:\\Users\\skoudoro\\.dipy\\sherbrooke_3shell')



.. GENERATED FROM PYTHON SOURCE LINES 32-34

By default these datasets will go in the ``.dipy`` folder inside your home
directory. Here is how you can access them.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: Python


    home = expanduser('~')








.. GENERATED FROM PYTHON SOURCE LINES 38-39

``dname`` holds the directory name where the 3 files are in.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: Python


    dname = join(home, '.dipy', 'sherbrooke_3shell')








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Here, we show the complete filenames of the 3 files

.. GENERATED FROM PYTHON SOURCE LINES 44-57

.. code-block:: Python


    fdwi = join(dname, 'HARDI193.nii.gz')

    print(fdwi)

    fbval = join(dname, 'HARDI193.bval')

    print(fbval)

    fbvec = join(dname, 'HARDI193.bvec')

    print(fbvec)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\skoudoro\.dipy\sherbrooke_3shell\HARDI193.nii.gz
    C:\Users\skoudoro\.dipy\sherbrooke_3shell\HARDI193.bval
    C:\Users\skoudoro\.dipy\sherbrooke_3shell\HARDI193.bvec




.. GENERATED FROM PYTHON SOURCE LINES 58-63

Now, that we have their filenames we can start checking what these look like.

Let's start first by loading the dMRI datasets. For this purpose, we
use a python library called nibabel_ which enables us to read and write
neuroimaging-specific file formats.

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: Python


    data, affine, img = load_nifti(fdwi, return_img=True)








.. GENERATED FROM PYTHON SOURCE LINES 67-72

``data`` is a 4D array where the first 3 dimensions are the i, j, k voxel
coordinates and the last dimension is the number of non-weighted (S0s) and
diffusion-weighted volumes.

We can very easily check the size of ``data`` in the following way:

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: Python


    print(data.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (128, 128, 60, 193)




.. GENERATED FROM PYTHON SOURCE LINES 76-77

We can also check the dimensions of each voxel in the following way:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    print(img.header.get_zooms()[:3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (2.0, 2.0, 2.0)




.. GENERATED FROM PYTHON SOURCE LINES 81-83

We can quickly visualize the results using matplotlib_. For example,
let's show here the middle axial slices of volume 0 and volume 10.

.. GENERATED FROM PYTHON SOURCE LINES 83-93

.. code-block:: Python


    axial_middle = data.shape[2] // 2
    plt.figure('Showing the datasets')
    plt.subplot(1, 2, 1).set_axis_off()
    plt.imshow(data[:, :, axial_middle, 0].T, cmap='gray', origin='lower')
    plt.subplot(1, 2, 2).set_axis_off()
    plt.imshow(data[:, :, axial_middle, 10].T, cmap='gray', origin='lower')
    plt.show()
    plt.savefig('data.png', bbox_inches='tight')




.. image-sg:: /examples_built/quick_start/images/sphx_glr_quick_start_001.png
   :alt: quick start
   :srcset: /examples_built/quick_start/images/sphx_glr_quick_start_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-103

.. rst-class:: centered small fst-italic fw-semibold

Showing the middle axial slice without (left) and with (right) diffusion
weighting.



The next step is to load the b-values and b-vectors from the disk using
the function ``read_bvals_bvecs``.

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: Python


    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)








.. GENERATED FROM PYTHON SOURCE LINES 107-110

In DIPY, we use an object called ``GradientTable`` which holds all the
acquisition specific parameters, e.g. b-values, b-vectors, timings and
others. To create this object you can use the function ``gradient_table``.

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python


    gtab = gradient_table(bvals, bvecs)








.. GENERATED FROM PYTHON SOURCE LINES 114-116

Finally, you can use ``gtab`` (the GradientTable object) to show some
information about the acquisition parameters

.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: Python


    print(gtab.info)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    B-values shape (193,)
             min 0.000000
             max 3500.000000
    B-vectors shape (193, 3)
              min -0.964050
              max 0.999992

    None




.. GENERATED FROM PYTHON SOURCE LINES 120-121

You can also see the b-values using:

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: Python


    print(gtab.bvals)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [   0. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000. 1000.
     1000. 1000. 1000. 1000. 1000. 2000. 2000. 2000. 2000. 2000. 2000. 2000.
     2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000.
     2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000.
     2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000.
     2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000.
     2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 2000. 3500. 3500. 3500.
     3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500.
     3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500.
     3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500.
     3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500.
     3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500. 3500.
     3500.]




.. GENERATED FROM PYTHON SOURCE LINES 125-126

Or, for example the 10 first b-vectors using:

.. GENERATED FROM PYTHON SOURCE LINES 126-129

.. code-block:: Python


    print(gtab.bvecs[:10, :])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0.          0.          0.        ]
     [ 0.999979   -0.00504001 -0.00402795]
     [ 0.          0.999992   -0.00398794]
     [-0.0257055   0.653861   -0.756178  ]
     [ 0.589518   -0.769236   -0.246462  ]
     [-0.235785   -0.529095   -0.815147  ]
     [-0.893578   -0.263559   -0.363394  ]
     [ 0.79784     0.133726   -0.587851  ]
     [ 0.232937    0.931884   -0.278087  ]
     [ 0.93672     0.144139   -0.31903   ]]




.. GENERATED FROM PYTHON SOURCE LINES 130-132

``gtab``  can be used to tell what part of the data is the S0 volumes
(volumes which correspond to b-values of 0).

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: Python


    S0s = data[:, :, :, gtab.b0s_mask]








.. GENERATED FROM PYTHON SOURCE LINES 136-137

Here, we had only 1 S0 as we can verify by looking at the dimensions of S0s

.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: Python


    print(S0s.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (128, 128, 60, 1)




.. GENERATED FROM PYTHON SOURCE LINES 141-142

Just, for fun let's save this in a new Nifti file.

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: Python


    save_nifti('HARDI193_S0.nii.gz', S0s, affine)








.. GENERATED FROM PYTHON SOURCE LINES 146-149

Now, that we learned how to load dMRI datasets we can start the analysis.
See example :ref:`sphx_glr_examples_built_reconstruction_reconst_dti.py` to
learn how to create FA maps.

.. GENERATED FROM PYTHON SOURCE LINES 151-153

.. include:: ../../links_names.inc



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.123 seconds)


.. _sphx_glr_download_examples_built_quick_start_quick_start.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: quick_start.ipynb <quick_start.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: quick_start.py <quick_start.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
