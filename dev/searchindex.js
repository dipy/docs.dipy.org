Search.setIndex({"docnames": ["api_changes", "auto_examples/contextual_enhancement/contextual_enhancement", "auto_examples/contextual_enhancement/fiber_to_bundle_coherence", "auto_examples/contextual_enhancement/index", "auto_examples/fiber_tracking/index", "auto_examples/fiber_tracking/linear_fascicle_evaluation", "auto_examples/fiber_tracking/surface_seed", "auto_examples/fiber_tracking/tracking_bootstrap_peaks", "auto_examples/fiber_tracking/tracking_deterministic", "auto_examples/fiber_tracking/tracking_introduction_eudx_1", "auto_examples/fiber_tracking/tracking_pft", "auto_examples/fiber_tracking/tracking_probabilistic", "auto_examples/fiber_tracking/tracking_ptt", "auto_examples/fiber_tracking/tracking_rumba", "auto_examples/fiber_tracking/tracking_sfm", "auto_examples/fiber_tracking/tracking_stopping_criterion", "auto_examples/file_formats/index", "auto_examples/file_formats/streamline_formats", "auto_examples/index", "auto_examples/multiprocessing/index", "auto_examples/multiprocessing/reconst_csa_parallel", "auto_examples/multiprocessing/reconst_csd_parallel", "auto_examples/preprocessing/brain_extraction_dwi", "auto_examples/preprocessing/denoise_ascm", "auto_examples/preprocessing/denoise_gibbs", "auto_examples/preprocessing/denoise_localpca", "auto_examples/preprocessing/denoise_mppca", "auto_examples/preprocessing/denoise_nlmeans", "auto_examples/preprocessing/denoise_patch2self", "auto_examples/preprocessing/gradients_spheres", "auto_examples/preprocessing/index", "auto_examples/preprocessing/motion_correction", "auto_examples/preprocessing/piesno", "auto_examples/preprocessing/reslice_datasets", "auto_examples/preprocessing/snr_in_cc", "auto_examples/quick_start/index", "auto_examples/quick_start/quick_start", "auto_examples/quick_start/tracking_introduction_eudx", "auto_examples/reconstruction/index", "auto_examples/reconstruction/kfold_xval", "auto_examples/reconstruction/reconst_csa", "auto_examples/reconstruction/reconst_csd", "auto_examples/reconstruction/reconst_dki", "auto_examples/reconstruction/reconst_dki_micro", "auto_examples/reconstruction/reconst_dsi", "auto_examples/reconstruction/reconst_dsi_metrics", "auto_examples/reconstruction/reconst_dsid", "auto_examples/reconstruction/reconst_dti", "auto_examples/reconstruction/reconst_forecast", "auto_examples/reconstruction/reconst_fwdti", "auto_examples/reconstruction/reconst_gqi", "auto_examples/reconstruction/reconst_ivim", "auto_examples/reconstruction/reconst_mapmri", "auto_examples/reconstruction/reconst_mcsd", "auto_examples/reconstruction/reconst_msdki", "auto_examples/reconstruction/reconst_qtdmri", "auto_examples/reconstruction/reconst_qti", "auto_examples/reconstruction/reconst_qtiplus", "auto_examples/reconstruction/reconst_rumba", "auto_examples/reconstruction/reconst_sfm", "auto_examples/reconstruction/reconst_sh", "auto_examples/reconstruction/reconst_shore", "auto_examples/reconstruction/reconst_shore_metrics", "auto_examples/reconstruction/restore_dti", "auto_examples/registration/affine_registration_3d", "auto_examples/registration/affine_registration_masks", "auto_examples/registration/bundle_group_registration", "auto_examples/registration/bundle_registration", "auto_examples/registration/bundlewarp_registration", "auto_examples/registration/index", "auto_examples/registration/register_binary_fuzzy", "auto_examples/registration/streamline_registration", "auto_examples/registration/syn_registration_2d", "auto_examples/registration/syn_registration_3d", "auto_examples/segmentation/brain_extraction_dwi_1", "auto_examples/segmentation/bundle_extraction", "auto_examples/segmentation/fast_streamline_search", "auto_examples/segmentation/index", "auto_examples/segmentation/segment_clustering_features", "auto_examples/segmentation/segment_clustering_metrics", "auto_examples/segmentation/segment_extending_clustering_framework", "auto_examples/segmentation/segment_quickbundles", "auto_examples/segmentation/tissue_classification", "auto_examples/simulations/index", "auto_examples/simulations/reconst_dsid_1", "auto_examples/simulations/simulate_dki", "auto_examples/simulations/simulate_multi_tensor", "auto_examples/streamline_analysis/afq_tract_profiles", "auto_examples/streamline_analysis/bundle_assignment_maps", "auto_examples/streamline_analysis/bundle_shape_similarity", "auto_examples/streamline_analysis/cluster_confidence", "auto_examples/streamline_analysis/index", "auto_examples/streamline_analysis/path_length_map", "auto_examples/streamline_analysis/streamline_length", "auto_examples/streamline_analysis/streamline_tools", "auto_examples/visualization/index", "auto_examples/visualization/viz_advanced", "auto_examples/visualization/viz_bundles", "auto_examples/visualization/viz_roi_contour", "auto_examples/visualization/viz_slice", "auto_examples/workflows/combined_workflow_creation", "auto_examples/workflows/index", "auto_examples/workflows/workflow_creation", "cite", "data", "dataset_list", "dependencies", "devel/coding_style_guideline", "devel/commit_codes", "devel/gitwash/configure_git", "devel/gitwash/development_workflow", "devel/gitwash/dot2_dot3", "devel/gitwash/following_latest", "devel/gitwash/forking_hell", "devel/gitwash/git_development", "devel/gitwash/git_install", "devel/gitwash/git_intro", "devel/gitwash/git_resources", "devel/gitwash/index", "devel/gitwash/maintainer_workflow", "devel/gitwash/patching", "devel/gitwash/set_up_fork", "devel/index", "devel/intro", "devel/make_release", "devel/python3", "developers", "documentation", "examples_built/contextual_enhancement/contextual_enhancement", "examples_built/contextual_enhancement/fiber_to_bundle_coherence", "examples_built/contextual_enhancement/index", "examples_built/fiber_tracking/index", "examples_built/fiber_tracking/linear_fascicle_evaluation", "examples_built/fiber_tracking/surface_seed", "examples_built/fiber_tracking/tracking_bootstrap_peaks", "examples_built/fiber_tracking/tracking_deterministic", "examples_built/fiber_tracking/tracking_introduction_eudx_1", "examples_built/fiber_tracking/tracking_pft", "examples_built/fiber_tracking/tracking_probabilistic", "examples_built/fiber_tracking/tracking_ptt", "examples_built/fiber_tracking/tracking_rumba", "examples_built/fiber_tracking/tracking_sfm", "examples_built/fiber_tracking/tracking_stopping_criterion", "examples_built/file_formats/index", "examples_built/file_formats/streamline_formats", "examples_built/multiprocessing/index", "examples_built/multiprocessing/reconst_csa_parallel", "examples_built/multiprocessing/reconst_csd_parallel", "examples_built/preprocessing/brain_extraction_dwi", "examples_built/preprocessing/denoise_ascm", "examples_built/preprocessing/denoise_gibbs", "examples_built/preprocessing/denoise_localpca", "examples_built/preprocessing/denoise_mppca", "examples_built/preprocessing/denoise_nlmeans", "examples_built/preprocessing/denoise_patch2self", "examples_built/preprocessing/gradients_spheres", "examples_built/preprocessing/index", "examples_built/preprocessing/motion_correction", "examples_built/preprocessing/piesno", "examples_built/preprocessing/reslice_datasets", "examples_built/preprocessing/snr_in_cc", "examples_built/quick_start/index", "examples_built/quick_start/quick_start", "examples_built/quick_start/tracking_introduction_eudx", "examples_built/reconstruction/index", "examples_built/reconstruction/kfold_xval", "examples_built/reconstruction/reconst_csa", "examples_built/reconstruction/reconst_csd", "examples_built/reconstruction/reconst_dki", "examples_built/reconstruction/reconst_dki_micro", "examples_built/reconstruction/reconst_dsi", "examples_built/reconstruction/reconst_dsi_metrics", "examples_built/reconstruction/reconst_dsid", "examples_built/reconstruction/reconst_dti", "examples_built/reconstruction/reconst_forecast", "examples_built/reconstruction/reconst_fwdti", "examples_built/reconstruction/reconst_gqi", "examples_built/reconstruction/reconst_ivim", "examples_built/reconstruction/reconst_mapmri", "examples_built/reconstruction/reconst_mcsd", "examples_built/reconstruction/reconst_msdki", "examples_built/reconstruction/reconst_qtdmri", "examples_built/reconstruction/reconst_qti", "examples_built/reconstruction/reconst_qtiplus", "examples_built/reconstruction/reconst_rumba", "examples_built/reconstruction/reconst_sfm", "examples_built/reconstruction/reconst_sh", "examples_built/reconstruction/reconst_shore", "examples_built/reconstruction/reconst_shore_metrics", "examples_built/reconstruction/restore_dti", "examples_built/registration/affine_registration_3d", "examples_built/registration/affine_registration_masks", "examples_built/registration/bundle_group_registration", "examples_built/registration/bundle_registration", "examples_built/registration/bundlewarp_registration", "examples_built/registration/index", "examples_built/registration/register_binary_fuzzy", "examples_built/registration/streamline_registration", "examples_built/registration/syn_registration_2d", "examples_built/registration/syn_registration_3d", "examples_built/segmentation/brain_extraction_dwi_1", "examples_built/segmentation/bundle_extraction", "examples_built/segmentation/fast_streamline_search", "examples_built/segmentation/index", "examples_built/segmentation/segment_clustering_features", "examples_built/segmentation/segment_clustering_metrics", "examples_built/segmentation/segment_extending_clustering_framework", "examples_built/segmentation/segment_quickbundles", "examples_built/segmentation/tissue_classification", "examples_built/simulations/index", "examples_built/simulations/reconst_dsid_1", "examples_built/simulations/simulate_dki", "examples_built/simulations/simulate_multi_tensor", "examples_built/streamline_analysis/afq_tract_profiles", "examples_built/streamline_analysis/bundle_assignment_maps", "examples_built/streamline_analysis/bundle_shape_similarity", "examples_built/streamline_analysis/cluster_confidence", "examples_built/streamline_analysis/index", "examples_built/streamline_analysis/path_length_map", "examples_built/streamline_analysis/streamline_length", "examples_built/streamline_analysis/streamline_tools", "examples_built/visualization/index", "examples_built/visualization/viz_advanced", "examples_built/visualization/viz_bundles", "examples_built/visualization/viz_roi_contour", "examples_built/visualization/viz_slice", "examples_built/workflows/combined_workflow_creation", "examples_built/workflows/index", "examples_built/workflows/workflow_creation", "faq", "gimbal_lock", "glossary", "index", "installation", "interfaces/basic_flow", "interfaces/buan_flow", "interfaces/bundle_segmentation_flow", "interfaces/bundlewarp_registration_flow", "interfaces/data_fetch", "interfaces/denoise_flow", "interfaces/gibbs_unringing_flow", "interfaces/index", "interfaces/motion_flow", "interfaces/reconstruction_flow", "interfaces/registration_flow", "interfaces/tracking_flow", "introduction", "mission", "note_about_examples", "old_highlights", "old_news", "posts/2023/2023_05_19_vara_week0", "posts/2023/2023_05_29_Shilpi_Week_0_1", "posts/2023/2023_05_29_vara_week1", "posts/2023/2023_06_05_Shilpi_week2", "posts/2023/2023_06_05_vara_week2", "posts/2023/2023_06_12_vara_week3", "posts/2023/2023_06_13_Shipi_week3", "posts/2023/2023_06_19_Shilpi_week4", "posts/2023/2023_06_19_vara_week4", "posts/2023/2023_06_26_vara_week5", "posts/2023/2023_07_06_shilpi_week5", "posts/2023/2023_07_06_shilpi_week6", "posts/2023/2023_07_10_vara_week6_and_week7", "posts/2023/2023_07_12_Shilpi_week7", "posts/2023/2023_07_24_vara_week_8_9", "posts/2023/2023_07_27_Shilpi_week_8_9", "posts/2023/2023_07_31_Shilpi_week10", "posts/2023/2023_08_07_vara_week_10_11", "posts/2023/2023_08_08_Shilpi_week11", "posts/2023/2023_08_15_Shilpi_week12", "posts/2023/2023_08_21_vara_week_12_13", "posts/2023/2023_08_22_Shilpi_Week13", "reconstruction_models_list", "reference/dipy", "reference/dipy.align", "reference/dipy.boots", "reference/dipy.core", "reference/dipy.data", "reference/dipy.denoise", "reference/dipy.direction", "reference/dipy.io", "reference/dipy.nn", "reference/dipy.reconst", "reference/dipy.segment", "reference/dipy.sims", "reference/dipy.stats", "reference/dipy.tracking", "reference/dipy.viz", "reference/dipy.workflows", "reference/index", "reference_cmd/dipy_align_affine", "reference_cmd/dipy_align_syn", "reference_cmd/dipy_apply_transform", "reference_cmd/dipy_buan_lmm", "reference_cmd/dipy_buan_profiles", "reference_cmd/dipy_bundlewarp", "reference_cmd/dipy_correct_motion", "reference_cmd/dipy_denoise_lpca", "reference_cmd/dipy_denoise_mppca", "reference_cmd/dipy_denoise_nlmeans", "reference_cmd/dipy_denoise_patch2self", "reference_cmd/dipy_evac_plus", "reference_cmd/dipy_fetch", "reference_cmd/dipy_fit_csa", "reference_cmd/dipy_fit_csd", "reference_cmd/dipy_fit_dki", "reference_cmd/dipy_fit_dti", "reference_cmd/dipy_fit_ivim", "reference_cmd/dipy_fit_mapmri", "reference_cmd/dipy_gibbs_ringing", "reference_cmd/dipy_horizon", "reference_cmd/dipy_info", "reference_cmd/dipy_labelsbundles", "reference_cmd/dipy_mask", "reference_cmd/dipy_median_otsu", "reference_cmd/dipy_recobundles", "reference_cmd/dipy_reslice", "reference_cmd/dipy_slr", "reference_cmd/dipy_snr_in_cc", "reference_cmd/dipy_split", "reference_cmd/dipy_track", "reference_cmd/dipy_track_pft", "reference_cmd/index", "release_notes/release0.10", "release_notes/release0.11", "release_notes/release0.12", "release_notes/release0.13", "release_notes/release0.14", "release_notes/release0.15", "release_notes/release0.16", "release_notes/release0.6", "release_notes/release0.7", "release_notes/release0.8", "release_notes/release0.9", "release_notes/release1.0", "release_notes/release1.1", "release_notes/release1.2", "release_notes/release1.3", "release_notes/release1.4", "release_notes/release1.4.1", "release_notes/release1.5", "release_notes/release1.6", "release_notes/release1.7", "stateoftheart", "subscribe", "theory/b_and_q", "theory/bmatrix", "theory/gqi", "theory/index", "theory/sh_basis", "theory/spherical"], "filenames": ["api_changes.rst", "auto_examples/contextual_enhancement/contextual_enhancement.rst", "auto_examples/contextual_enhancement/fiber_to_bundle_coherence.rst", "auto_examples/contextual_enhancement/index.rst", "auto_examples/fiber_tracking/index.rst", "auto_examples/fiber_tracking/linear_fascicle_evaluation.rst", "auto_examples/fiber_tracking/surface_seed.rst", "auto_examples/fiber_tracking/tracking_bootstrap_peaks.rst", "auto_examples/fiber_tracking/tracking_deterministic.rst", "auto_examples/fiber_tracking/tracking_introduction_eudx_1.rst", "auto_examples/fiber_tracking/tracking_pft.rst", "auto_examples/fiber_tracking/tracking_probabilistic.rst", "auto_examples/fiber_tracking/tracking_ptt.rst", "auto_examples/fiber_tracking/tracking_rumba.rst", "auto_examples/fiber_tracking/tracking_sfm.rst", "auto_examples/fiber_tracking/tracking_stopping_criterion.rst", "auto_examples/file_formats/index.rst", "auto_examples/file_formats/streamline_formats.rst", "auto_examples/index.rst", "auto_examples/multiprocessing/index.rst", "auto_examples/multiprocessing/reconst_csa_parallel.rst", "auto_examples/multiprocessing/reconst_csd_parallel.rst", "auto_examples/preprocessing/brain_extraction_dwi.rst", "auto_examples/preprocessing/denoise_ascm.rst", "auto_examples/preprocessing/denoise_gibbs.rst", "auto_examples/preprocessing/denoise_localpca.rst", "auto_examples/preprocessing/denoise_mppca.rst", "auto_examples/preprocessing/denoise_nlmeans.rst", "auto_examples/preprocessing/denoise_patch2self.rst", "auto_examples/preprocessing/gradients_spheres.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/motion_correction.rst", "auto_examples/preprocessing/piesno.rst", "auto_examples/preprocessing/reslice_datasets.rst", "auto_examples/preprocessing/snr_in_cc.rst", "auto_examples/quick_start/index.rst", "auto_examples/quick_start/quick_start.rst", "auto_examples/quick_start/tracking_introduction_eudx.rst", "auto_examples/reconstruction/index.rst", "auto_examples/reconstruction/kfold_xval.rst", "auto_examples/reconstruction/reconst_csa.rst", "auto_examples/reconstruction/reconst_csd.rst", "auto_examples/reconstruction/reconst_dki.rst", "auto_examples/reconstruction/reconst_dki_micro.rst", "auto_examples/reconstruction/reconst_dsi.rst", "auto_examples/reconstruction/reconst_dsi_metrics.rst", "auto_examples/reconstruction/reconst_dsid.rst", "auto_examples/reconstruction/reconst_dti.rst", "auto_examples/reconstruction/reconst_forecast.rst", "auto_examples/reconstruction/reconst_fwdti.rst", "auto_examples/reconstruction/reconst_gqi.rst", "auto_examples/reconstruction/reconst_ivim.rst", "auto_examples/reconstruction/reconst_mapmri.rst", "auto_examples/reconstruction/reconst_mcsd.rst", "auto_examples/reconstruction/reconst_msdki.rst", "auto_examples/reconstruction/reconst_qtdmri.rst", "auto_examples/reconstruction/reconst_qti.rst", "auto_examples/reconstruction/reconst_qtiplus.rst", "auto_examples/reconstruction/reconst_rumba.rst", "auto_examples/reconstruction/reconst_sfm.rst", "auto_examples/reconstruction/reconst_sh.rst", "auto_examples/reconstruction/reconst_shore.rst", "auto_examples/reconstruction/reconst_shore_metrics.rst", "auto_examples/reconstruction/restore_dti.rst", "auto_examples/registration/affine_registration_3d.rst", "auto_examples/registration/affine_registration_masks.rst", "auto_examples/registration/bundle_group_registration.rst", "auto_examples/registration/bundle_registration.rst", "auto_examples/registration/bundlewarp_registration.rst", "auto_examples/registration/index.rst", "auto_examples/registration/register_binary_fuzzy.rst", "auto_examples/registration/streamline_registration.rst", "auto_examples/registration/syn_registration_2d.rst", "auto_examples/registration/syn_registration_3d.rst", "auto_examples/segmentation/brain_extraction_dwi_1.rst", "auto_examples/segmentation/bundle_extraction.rst", "auto_examples/segmentation/fast_streamline_search.rst", "auto_examples/segmentation/index.rst", "auto_examples/segmentation/segment_clustering_features.rst", "auto_examples/segmentation/segment_clustering_metrics.rst", "auto_examples/segmentation/segment_extending_clustering_framework.rst", "auto_examples/segmentation/segment_quickbundles.rst", "auto_examples/segmentation/tissue_classification.rst", "auto_examples/simulations/index.rst", "auto_examples/simulations/reconst_dsid_1.rst", "auto_examples/simulations/simulate_dki.rst", "auto_examples/simulations/simulate_multi_tensor.rst", "auto_examples/streamline_analysis/afq_tract_profiles.rst", "auto_examples/streamline_analysis/bundle_assignment_maps.rst", "auto_examples/streamline_analysis/bundle_shape_similarity.rst", "auto_examples/streamline_analysis/cluster_confidence.rst", "auto_examples/streamline_analysis/index.rst", "auto_examples/streamline_analysis/path_length_map.rst", "auto_examples/streamline_analysis/streamline_length.rst", "auto_examples/streamline_analysis/streamline_tools.rst", "auto_examples/visualization/index.rst", "auto_examples/visualization/viz_advanced.rst", "auto_examples/visualization/viz_bundles.rst", "auto_examples/visualization/viz_roi_contour.rst", "auto_examples/visualization/viz_slice.rst", "auto_examples/workflows/combined_workflow_creation.rst", "auto_examples/workflows/index.rst", "auto_examples/workflows/workflow_creation.rst", "cite.rst", "data.rst", "dataset_list.rst", "dependencies.rst", "devel/coding_style_guideline.rst", "devel/commit_codes.rst", "devel/gitwash/configure_git.rst", "devel/gitwash/development_workflow.rst", "devel/gitwash/dot2_dot3.rst", "devel/gitwash/following_latest.rst", "devel/gitwash/forking_hell.rst", "devel/gitwash/git_development.rst", "devel/gitwash/git_install.rst", "devel/gitwash/git_intro.rst", "devel/gitwash/git_resources.rst", "devel/gitwash/index.rst", "devel/gitwash/maintainer_workflow.rst", "devel/gitwash/patching.rst", "devel/gitwash/set_up_fork.rst", "devel/index.rst", "devel/intro.rst", "devel/make_release.rst", "devel/python3.rst", "developers.rst", "documentation.rst", "examples_built/contextual_enhancement/contextual_enhancement.rst", "examples_built/contextual_enhancement/fiber_to_bundle_coherence.rst", "examples_built/contextual_enhancement/index.rst", "examples_built/fiber_tracking/index.rst", "examples_built/fiber_tracking/linear_fascicle_evaluation.rst", "examples_built/fiber_tracking/surface_seed.rst", "examples_built/fiber_tracking/tracking_bootstrap_peaks.rst", "examples_built/fiber_tracking/tracking_deterministic.rst", "examples_built/fiber_tracking/tracking_introduction_eudx_1.rst", "examples_built/fiber_tracking/tracking_pft.rst", "examples_built/fiber_tracking/tracking_probabilistic.rst", "examples_built/fiber_tracking/tracking_ptt.rst", "examples_built/fiber_tracking/tracking_rumba.rst", "examples_built/fiber_tracking/tracking_sfm.rst", "examples_built/fiber_tracking/tracking_stopping_criterion.rst", "examples_built/file_formats/index.rst", "examples_built/file_formats/streamline_formats.rst", "examples_built/multiprocessing/index.rst", "examples_built/multiprocessing/reconst_csa_parallel.rst", "examples_built/multiprocessing/reconst_csd_parallel.rst", "examples_built/preprocessing/brain_extraction_dwi.rst", "examples_built/preprocessing/denoise_ascm.rst", "examples_built/preprocessing/denoise_gibbs.rst", "examples_built/preprocessing/denoise_localpca.rst", "examples_built/preprocessing/denoise_mppca.rst", "examples_built/preprocessing/denoise_nlmeans.rst", "examples_built/preprocessing/denoise_patch2self.rst", "examples_built/preprocessing/gradients_spheres.rst", "examples_built/preprocessing/index.rst", "examples_built/preprocessing/motion_correction.rst", "examples_built/preprocessing/piesno.rst", "examples_built/preprocessing/reslice_datasets.rst", "examples_built/preprocessing/snr_in_cc.rst", "examples_built/quick_start/index.rst", "examples_built/quick_start/quick_start.rst", "examples_built/quick_start/tracking_introduction_eudx.rst", "examples_built/reconstruction/index.rst", "examples_built/reconstruction/kfold_xval.rst", "examples_built/reconstruction/reconst_csa.rst", "examples_built/reconstruction/reconst_csd.rst", "examples_built/reconstruction/reconst_dki.rst", "examples_built/reconstruction/reconst_dki_micro.rst", "examples_built/reconstruction/reconst_dsi.rst", "examples_built/reconstruction/reconst_dsi_metrics.rst", "examples_built/reconstruction/reconst_dsid.rst", "examples_built/reconstruction/reconst_dti.rst", "examples_built/reconstruction/reconst_forecast.rst", "examples_built/reconstruction/reconst_fwdti.rst", "examples_built/reconstruction/reconst_gqi.rst", "examples_built/reconstruction/reconst_ivim.rst", "examples_built/reconstruction/reconst_mapmri.rst", "examples_built/reconstruction/reconst_mcsd.rst", "examples_built/reconstruction/reconst_msdki.rst", "examples_built/reconstruction/reconst_qtdmri.rst", "examples_built/reconstruction/reconst_qti.rst", "examples_built/reconstruction/reconst_qtiplus.rst", "examples_built/reconstruction/reconst_rumba.rst", "examples_built/reconstruction/reconst_sfm.rst", "examples_built/reconstruction/reconst_sh.rst", "examples_built/reconstruction/reconst_shore.rst", "examples_built/reconstruction/reconst_shore_metrics.rst", "examples_built/reconstruction/restore_dti.rst", "examples_built/registration/affine_registration_3d.rst", "examples_built/registration/affine_registration_masks.rst", "examples_built/registration/bundle_group_registration.rst", "examples_built/registration/bundle_registration.rst", "examples_built/registration/bundlewarp_registration.rst", "examples_built/registration/index.rst", "examples_built/registration/register_binary_fuzzy.rst", "examples_built/registration/streamline_registration.rst", "examples_built/registration/syn_registration_2d.rst", "examples_built/registration/syn_registration_3d.rst", "examples_built/segmentation/brain_extraction_dwi_1.rst", "examples_built/segmentation/bundle_extraction.rst", "examples_built/segmentation/fast_streamline_search.rst", "examples_built/segmentation/index.rst", "examples_built/segmentation/segment_clustering_features.rst", "examples_built/segmentation/segment_clustering_metrics.rst", "examples_built/segmentation/segment_extending_clustering_framework.rst", "examples_built/segmentation/segment_quickbundles.rst", "examples_built/segmentation/tissue_classification.rst", "examples_built/simulations/index.rst", "examples_built/simulations/reconst_dsid_1.rst", "examples_built/simulations/simulate_dki.rst", "examples_built/simulations/simulate_multi_tensor.rst", "examples_built/streamline_analysis/afq_tract_profiles.rst", "examples_built/streamline_analysis/bundle_assignment_maps.rst", "examples_built/streamline_analysis/bundle_shape_similarity.rst", "examples_built/streamline_analysis/cluster_confidence.rst", "examples_built/streamline_analysis/index.rst", "examples_built/streamline_analysis/path_length_map.rst", "examples_built/streamline_analysis/streamline_length.rst", "examples_built/streamline_analysis/streamline_tools.rst", "examples_built/visualization/index.rst", "examples_built/visualization/viz_advanced.rst", "examples_built/visualization/viz_bundles.rst", "examples_built/visualization/viz_roi_contour.rst", "examples_built/visualization/viz_slice.rst", "examples_built/workflows/combined_workflow_creation.rst", "examples_built/workflows/index.rst", "examples_built/workflows/workflow_creation.rst", "faq.rst", "gimbal_lock.rst", "glossary.rst", "index.rst", "installation.rst", "interfaces/basic_flow.rst", "interfaces/buan_flow.rst", "interfaces/bundle_segmentation_flow.rst", "interfaces/bundlewarp_registration_flow.rst", "interfaces/data_fetch.rst", "interfaces/denoise_flow.rst", "interfaces/gibbs_unringing_flow.rst", "interfaces/index.rst", "interfaces/motion_flow.rst", "interfaces/reconstruction_flow.rst", "interfaces/registration_flow.rst", "interfaces/tracking_flow.rst", "introduction.rst", "mission.rst", "note_about_examples.rst", "old_highlights.rst", "old_news.rst", "posts/2023/2023_05_19_vara_week0.rst", "posts/2023/2023_05_29_Shilpi_Week_0_1.rst", "posts/2023/2023_05_29_vara_week1.rst", "posts/2023/2023_06_05_Shilpi_week2.rst", "posts/2023/2023_06_05_vara_week2.rst", "posts/2023/2023_06_12_vara_week3.rst", "posts/2023/2023_06_13_Shipi_week3.rst", "posts/2023/2023_06_19_Shilpi_week4.rst", "posts/2023/2023_06_19_vara_week4.rst", "posts/2023/2023_06_26_vara_week5.rst", "posts/2023/2023_07_06_shilpi_week5.rst", "posts/2023/2023_07_06_shilpi_week6.rst", "posts/2023/2023_07_10_vara_week6_and_week7.rst", "posts/2023/2023_07_12_Shilpi_week7.rst", "posts/2023/2023_07_24_vara_week_8_9.rst", "posts/2023/2023_07_27_Shilpi_week_8_9.rst", "posts/2023/2023_07_31_Shilpi_week10.rst", "posts/2023/2023_08_07_vara_week_10_11.rst", "posts/2023/2023_08_08_Shilpi_week11.rst", "posts/2023/2023_08_15_Shilpi_week12.rst", "posts/2023/2023_08_21_vara_week_12_13.rst", "posts/2023/2023_08_22_Shilpi_Week13.rst", "reconstruction_models_list.rst", "reference/dipy.rst", "reference/dipy.align.rst", "reference/dipy.boots.rst", "reference/dipy.core.rst", "reference/dipy.data.rst", "reference/dipy.denoise.rst", "reference/dipy.direction.rst", "reference/dipy.io.rst", "reference/dipy.nn.rst", "reference/dipy.reconst.rst", "reference/dipy.segment.rst", "reference/dipy.sims.rst", "reference/dipy.stats.rst", "reference/dipy.tracking.rst", "reference/dipy.viz.rst", "reference/dipy.workflows.rst", "reference/index.rst", "reference_cmd/dipy_align_affine.rst", "reference_cmd/dipy_align_syn.rst", "reference_cmd/dipy_apply_transform.rst", "reference_cmd/dipy_buan_lmm.rst", "reference_cmd/dipy_buan_profiles.rst", "reference_cmd/dipy_bundlewarp.rst", "reference_cmd/dipy_correct_motion.rst", "reference_cmd/dipy_denoise_lpca.rst", "reference_cmd/dipy_denoise_mppca.rst", "reference_cmd/dipy_denoise_nlmeans.rst", "reference_cmd/dipy_denoise_patch2self.rst", "reference_cmd/dipy_evac_plus.rst", "reference_cmd/dipy_fetch.rst", "reference_cmd/dipy_fit_csa.rst", "reference_cmd/dipy_fit_csd.rst", "reference_cmd/dipy_fit_dki.rst", "reference_cmd/dipy_fit_dti.rst", "reference_cmd/dipy_fit_ivim.rst", "reference_cmd/dipy_fit_mapmri.rst", "reference_cmd/dipy_gibbs_ringing.rst", "reference_cmd/dipy_horizon.rst", "reference_cmd/dipy_info.rst", "reference_cmd/dipy_labelsbundles.rst", "reference_cmd/dipy_mask.rst", "reference_cmd/dipy_median_otsu.rst", "reference_cmd/dipy_recobundles.rst", "reference_cmd/dipy_reslice.rst", "reference_cmd/dipy_slr.rst", "reference_cmd/dipy_snr_in_cc.rst", "reference_cmd/dipy_split.rst", "reference_cmd/dipy_track.rst", "reference_cmd/dipy_track_pft.rst", "reference_cmd/index.rst", "release_notes/release0.10.rst", "release_notes/release0.11.rst", "release_notes/release0.12.rst", "release_notes/release0.13.rst", "release_notes/release0.14.rst", "release_notes/release0.15.rst", "release_notes/release0.16.rst", "release_notes/release0.6.rst", "release_notes/release0.7.rst", "release_notes/release0.8.rst", "release_notes/release0.9.rst", "release_notes/release1.0.rst", "release_notes/release1.1.rst", "release_notes/release1.2.rst", "release_notes/release1.3.rst", "release_notes/release1.4.rst", "release_notes/release1.4.1.rst", "release_notes/release1.5.rst", "release_notes/release1.6.rst", "release_notes/release1.7.rst", "stateoftheart.rst", "subscribe.rst", "theory/b_and_q.rst", "theory/bmatrix.rst", "theory/gqi.rst", "theory/index.rst", "theory/sh_basis.rst", "theory/spherical.rst"], "titles": ["API changes", "Crossing-preserving contextual enhancement", "Fiber to bundle coherence measures", "Contextual Enhancement", "Fiber Tracking", "Linear fascicle evaluation (LiFE)", "Surface seeding for tractography", "Bootstrap and Closest Peak Direction Getters Example", "An introduction to the Deterministic Maximum Direction Getter", "Introduction to Basic Tracking", "Particle Filtering Tractography", "An introduction to the Probabilistic Direction Getter", "Parallel Transport Tractography", "Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)", "Tracking with the Sparse Fascicle Model", "Using Various Stopping Criterion for Tractography", "File Formats", "Read/Write streamline files", "Examples", "Multiprocessing", "Parallel reconstruction using Q-Ball", "Parallel reconstruction using CSD", "Brain segmentation with median_otsu", "Denoise images using Adaptive Soft Coefficient Matching (ASCM)", "Suppress Gibbs oscillations", "Denoise images using Local PCA via empirical thresholds", "Denoise images using the Marcenko-Pastur PCA algorithm", "Denoise images using Non-Local Means (NLMEANS)", "Patch2Self: Self-Supervised Denoising via Statistical Independence", "Gradients and Spheres", "Preprocessing", "Between-volumes Motion Correction on DWI datasets", "Noise estimation using PIESNO", "Reslice diffusion datasets", "SNR estimation for Diffusion-Weighted Images", "Quick Start", "Getting started with DIPY", "Introduction to Basic Tracking", "Reconstruction", "K-fold cross-validation for model comparison", "Reconstruct with Constant Solid Angle (Q-Ball)", "Reconstruction with Constrained Spherical Deconvolution", "Reconstruction of the diffusion signal with the kurtosis tensor model", "Reconstruction of the diffusion signal with the WMTI model", "Reconstruct with Diffusion Spectrum Imaging", "Calculate DSI-based scalar maps", "DSI Deconvolution vs DSI", "Reconstruction of the diffusion signal with the Tensor model", "Crossing invariant fiber response function with FORECAST model", "Using the free water elimination model to remove DTI free water contamination", "Reconstruct with Generalized Q-Sampling Imaging", "Intravoxel incoherent motion", "Continuous and analytical diffusion signal modelling with MAP-MRI", "Reconstruction with Multi-Shell Multi-Tissue CSD", "Mean signal diffusion kurtosis imaging (MSDKI)", "Estimating diffusion time dependent q-space indices using qt-dMRI", "Reconstruct with Q-space Trajectory Imaging (QTI)", "Applying positivity constraints to Q-space Trajectory Imaging (QTI+)", "Reconstruction with Robust and Unbiased Model-BAsed Spherical Deconvolution", "Reconstruction with the Sparse Fascicle Model", "Signal Reconstruction Using Spherical Harmonics", "Continuous and analytical diffusion signal modelling with 3D-SHORE", "Calculate SHORE scalar maps", "Using the RESTORE algorithm for robust tensor fitting", "Affine Registration in 3D", "Affine Registration with Masks", "Groupwise Bundle Registration", "Direct Bundle Registration", "Nonrigid Bundle Registration with BundleWarp", "Registration", "Diffeomorphic Registration with binary and fuzzy images", "Applying image-based deformations to streamlines", "Symmetric Diffeomorphic Registration in 2D", "Symmetric Diffeomorphic Registration in 3D", "Brain segmentation with median_otsu", "Automatic Fiber Bundle Extraction with RecoBundles", "Fast Streamline Search", "Segmentation", "Tractography Clustering - Available Features", "Tractography Clustering - Available Metrics", "Enhancing QuickBundles with different metrics and features", "Tractography Clustering with QuickBundles", "Tissue Classification of a T1-weighted Structural Image", "Simulation", "DSI Deconvolution vs DSI", "DKI MultiTensor Simulation", "MultiTensor Simulation", "Extracting AFQ tract profiles from segmented bundles", "BUAN Bundle Assignment Maps Creation", "BUAN Bundle Shape Similarity Score", "Calculation of Outliers with Cluster Confidence Index", "Streamlines Analysis and Connectivity", "Calculate Path Length Map", "Streamline length and size reduction", "Connectivity Matrices, ROI Intersections and Density Maps", "Visualization", "Advanced interactive visualization", "Visualize bundles and metrics on bundles", "Visualization of ROI Surface Rendered with Streamlines", "Simple volume slicing", "Creating a new combined workflow", "Workflows", "Creating a new workflow.", "Publications", "Data", "&lt;no title&gt;", "Dependencies", "DIPY Coding Style Guideline", "Commit message codes", "Configure git", "Development workflow", "Two and three dots in difference specs", "Following the latest source", "Making your own copy (fork) of DIPY", "Git for development", "Install git", "Introduction", "git resources", "Working with DIPY source code", "Maintainer workflow", "Making a patch", "Set up your fork", "DIPY development", "Introduction", "A guide to making a DIPY release", "Keeping code compatible with Pythons 2 and 3", "Developers", "Documentation", "Crossing-preserving contextual enhancement", "Fiber to bundle coherence measures", "Contextual Enhancement", "Fiber Tracking", "Linear fascicle evaluation (LiFE)", "Surface seeding for tractography", "Bootstrap and Closest Peak Direction Getters Example", "An introduction to the Deterministic Maximum Direction Getter", "Introduction to Basic Tracking", "Particle Filtering Tractography", "An introduction to the Probabilistic Direction Getter", "Parallel Transport Tractography", "Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)", "Tracking with the Sparse Fascicle Model", "Using Various Stopping Criterion for Tractography", "File Formats", "Read/Write streamline files", "Multiprocessing", "Parallel reconstruction using Q-Ball", "Parallel reconstruction using CSD", "Brain segmentation with median_otsu", "Denoise images using Adaptive Soft Coefficient Matching (ASCM)", "Suppress Gibbs oscillations", "Denoise images using Local PCA via empirical thresholds", "Denoise images using the Marcenko-Pastur PCA algorithm", "Denoise images using Non-Local Means (NLMEANS)", "Patch2Self: Self-Supervised Denoising via Statistical Independence", "Gradients and Spheres", "Preprocessing", "Between-volumes Motion Correction on DWI datasets", "Noise estimation using PIESNO", "Reslice diffusion datasets", "SNR estimation for Diffusion-Weighted Images", "Quick Start", "Getting started with DIPY", "Introduction to Basic Tracking", "Reconstruction", "K-fold cross-validation for model comparison", "Reconstruct with Constant Solid Angle (Q-Ball)", "Reconstruction with Constrained Spherical Deconvolution", "Reconstruction of the diffusion signal with the kurtosis tensor model", "Reconstruction of the diffusion signal with the WMTI model", "Reconstruct with Diffusion Spectrum Imaging", "Calculate DSI-based scalar maps", "DSI Deconvolution vs DSI", "Reconstruction of the diffusion signal with the Tensor model", "Crossing invariant fiber response function with FORECAST model", "Using the free water elimination model to remove DTI free water contamination", "Reconstruct with Generalized Q-Sampling Imaging", "Intravoxel incoherent motion", "Continuous and analytical diffusion signal modelling with MAP-MRI", "Reconstruction with Multi-Shell Multi-Tissue CSD", "Mean signal diffusion kurtosis imaging (MSDKI)", "Estimating diffusion time dependent q-space indices using qt-dMRI", "Reconstruct with Q-space Trajectory Imaging (QTI)", "Applying positivity constraints to Q-space Trajectory Imaging (QTI+)", "Reconstruction with Robust and Unbiased Model-BAsed Spherical Deconvolution", "Reconstruction with the Sparse Fascicle Model", "Signal Reconstruction Using Spherical Harmonics", "Continuous and analytical diffusion signal modelling with 3D-SHORE", "Calculate SHORE scalar maps", "Using the RESTORE algorithm for robust tensor fitting", "Affine Registration in 3D", "Affine Registration with Masks", "Groupwise Bundle Registration", "Direct Bundle Registration", "Nonrigid Bundle Registration with BundleWarp", "Registration", "Diffeomorphic Registration with binary and fuzzy images", "Applying image-based deformations to streamlines", "Symmetric Diffeomorphic Registration in 2D", "Symmetric Diffeomorphic Registration in 3D", "Brain segmentation with median_otsu", "Automatic Fiber Bundle Extraction with RecoBundles", "Fast Streamline Search", "Segmentation", "Tractography Clustering - Available Features", "Tractography Clustering - Available Metrics", "Enhancing QuickBundles with different metrics and features", "Tractography Clustering with QuickBundles", "Tissue Classification of a T1-weighted Structural Image", "Simulation", "DSI Deconvolution vs DSI", "DKI MultiTensor Simulation", "MultiTensor Simulation", "Extracting AFQ tract profiles from segmented bundles", "BUAN Bundle Assignment Maps Creation", "BUAN Bundle Shape Similarity Score", "Calculation of Outliers with Cluster Confidence Index", "Streamlines Analysis and Connectivity", "Calculate Path Length Map", "Streamline length and size reduction", "Connectivity Matrices, ROI Intersections and Density Maps", "Visualization", "Advanced interactive visualization", "Visualize bundles and metrics on bundles", "Visualization of ROI Surface Rendered with Streamlines", "Simple volume slicing", "Creating a new combined workflow", "Workflows", "Creating a new workflow.", "Frequently Asked Questions", "Gimbal lock", "Glossary", "Diffusion Imaging In Python", "Installation", "Introduction to command line interfaces", "BUndle ANalytics (BUAN) framework", "White Matter Bundle Segmentation with RecoBundles", "Nonrigid White Matter Bundle Registration with BundleWarp", "Downloading DIPY datasets", "Denoising", "Gibbs Unringing", "DIPY Workflows Interfaces", "Between-Volumes Motion Correction", "Reconstruction", "Registration", "Tracking", "What is DIPY?", "Mission statement", "A note about the examples", "Older Highlights", "Past Announcements", "Journey of GSOC application &amp; acceptance : Week 0", "Community Bonding and Week 1 Insights", "Community bonding and Project kickstart : Week 1", "Signal Creation &amp; Paper Research: Week2 Discoveries", "Deep Dive into VQ-VAE : Week 2", "VQ-VAE results and study on Diffusion models : Week 3", "CTI Simulation and QTI tutorial : Week 3", "Re-Engineering Simulation Codes with the QTI Model and Design Matrix", "Diffusion research continues: Week 4", "Carbonate Account Setup, Experiment, Debug and Repeat: Week 5", "Design Matrix Implementation and Coding with PEP8: Week 5", "Creating signal_predict Method: Testing Signal Generation", "Diffusion Model results on pre-trained VQVAE latents of NFBS MRI Dataset: Week 6 &amp; Week 7", "Modifying Test Signal Generation", "VQVAE MONAI models &amp; checkerboard artifacts: Week 8 &amp; Week 9", "Generating Fit Functions : Week 8 &amp; 9", "Adding Tests : Week 10", "Carbonate issues, GPU availability, Tensorflow errors: Week 10 &amp; Week 11", "Making the Tests Work : Week 11", "Week12: Making Test Functions Work", "Finalized experiments using both datasets: Week 12 &amp; Week13", "Writing Tests &amp; Making Documentation: Week 13", "&lt;no title&gt;", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dipy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">denoise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">direction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sims</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stats</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">viz</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows</span></code>", "API Reference", "dipy_align_affine", "dipy_align_syn", "dipy_apply_transform", "dipy_buan_lmm", "dipy_buan_profiles", "dipy_bundlewarp", "dipy_correct_motion", "dipy_denoise_lpca", "dipy_denoise_mppca", "dipy_denoise_nlmeans", "dipy_denoise_patch2self", "dipy_evac_plus", "dipy_fetch", "dipy_fit_csa", "dipy_fit_csd", "dipy_fit_dki", "dipy_fit_dti", "dipy_fit_ivim", "dipy_fit_mapmri", "dipy_gibbs_ringing", "dipy_horizon", "dipy_info", "dipy_labelsbundles", "dipy_mask", "dipy_median_otsu", "dipy_recobundles", "dipy_reslice", "dipy_slr", "dipy_snr_in_cc", "dipy_split", "dipy_track", "dipy_track_pft", "Command Line Utilities Reference", "Release notes for DIPY version 0.10", "Release notes for DIPY version 0.11", "Release notes for DIPY version 0.12", "Release notes for DIPY version 0.13", "Release notes for DIPY version 0.14", "Release notes for DIPY version 0.15", "Release notes for DIPY version 0.16", "Release notes for DIPY version 0.6", "Release notes for DIPY version 0.7", "Release notes for DIPY version 0.8", "Release notes for DIPY version 0.9", "Release notes for DIPY version 1.0", "Release notes for DIPY version 1.1", "Release notes for DIPY version 1.2", "Release notes for DIPY version 1.3", "Release notes for DIPY version 1.4", "Release notes for DIPY version 1.4.1", "Release notes for DIPY version 1.5", "Release notes for DIPY version 1.6", "Release notes for DIPY version 1.7", "A quick overview of features", "Subscribe", "DIY Stuff about b and q", "The B matrix and Siemens DICOM", "Generalised Q-Sampling Imaging", "Theory and concepts", "Spherical Harmonic bases", "Spherical coordinates"], "terms": {"here": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 109, 110, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 230, 232, 233, 236, 237, 243, 248, 249, 252, 255, 257, 258, 260, 271, 275, 277, 281, 283, 284, 285, 287, 334, 342, 344, 347, 348, 351], "we": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 106, 107, 110, 113, 120, 121, 123, 124, 126, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 249, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351], "provid": [0, 5, 8, 9, 13, 14, 17, 26, 28, 36, 37, 41, 42, 43, 48, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 67, 68, 71, 73, 75, 78, 79, 80, 81, 90, 92, 96, 97, 98, 107, 132, 135, 136, 140, 141, 144, 152, 154, 162, 163, 167, 168, 169, 174, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 197, 199, 201, 204, 205, 206, 207, 216, 218, 222, 223, 224, 234, 235, 237, 243, 245, 248, 259, 262, 269, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 309, 311, 312, 321, 324, 331, 332, 333, 335, 338, 342, 344, 351], "inform": [0, 9, 10, 15, 17, 22, 23, 25, 26, 28, 36, 37, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 71, 74, 78, 79, 80, 81, 85, 87, 93, 104, 105, 107, 110, 115, 136, 137, 142, 144, 148, 149, 151, 152, 154, 162, 163, 166, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 197, 200, 204, 205, 206, 207, 211, 213, 219, 229, 233, 234, 235, 236, 237, 239, 242, 244, 245, 249, 252, 253, 257, 260, 263, 268, 269, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 289, 291, 292, 301, 312, 331, 335, 338, 344, 351], "about": [0, 5, 11, 13, 18, 20, 21, 26, 36, 41, 42, 43, 44, 47, 51, 52, 53, 54, 55, 56, 57, 58, 64, 71, 78, 79, 80, 81, 85, 92, 100, 102, 104, 107, 110, 120, 132, 138, 140, 146, 147, 152, 162, 167, 168, 169, 170, 173, 177, 178, 179, 180, 181, 182, 183, 184, 190, 197, 204, 205, 206, 207, 211, 218, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 251, 253, 254, 255, 266, 275, 277, 278, 281, 282, 283, 286, 289, 312, 324, 328, 329, 333, 335, 337, 341], "function": [0, 1, 5, 9, 11, 13, 14, 17, 18, 20, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 75, 76, 78, 79, 80, 85, 86, 93, 94, 96, 99, 107, 108, 122, 128, 132, 136, 138, 140, 141, 144, 146, 147, 150, 152, 153, 155, 157, 158, 162, 163, 164, 166, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 201, 202, 204, 205, 206, 211, 212, 219, 220, 222, 225, 229, 232, 233, 234, 243, 245, 248, 249, 252, 253, 258, 260, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 305, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 350, 351], "class": [0, 5, 17, 47, 49, 53, 63, 64, 72, 73, 76, 80, 82, 96, 100, 102, 107, 132, 144, 173, 175, 179, 189, 190, 198, 199, 202, 206, 208, 222, 226, 228, 258, 261, 266, 267, 269, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 324, 331, 332, 333], "have": [0, 5, 7, 9, 11, 14, 17, 18, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 47, 50, 51, 52, 53, 54, 56, 58, 59, 60, 63, 64, 66, 67, 68, 71, 73, 78, 79, 80, 81, 82, 85, 87, 90, 92, 93, 94, 96, 97, 99, 100, 102, 110, 112, 113, 115, 117, 119, 120, 121, 123, 124, 125, 132, 134, 136, 138, 141, 144, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 173, 176, 177, 178, 179, 180, 182, 184, 185, 186, 189, 190, 192, 193, 194, 197, 199, 204, 205, 206, 207, 208, 211, 213, 216, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 233, 235, 236, 237, 251, 252, 258, 260, 262, 263, 264, 265, 267, 270, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 296, 309, 311, 316, 318, 324, 328, 331, 333, 334, 335, 338, 339, 346, 347, 350], "been": [0, 5, 25, 26, 39, 42, 47, 51, 52, 66, 67, 71, 81, 82, 107, 110, 119, 125, 132, 151, 152, 165, 168, 173, 177, 178, 192, 193, 197, 207, 208, 243, 252, 255, 256, 265, 266, 267, 268, 271, 275, 277, 281, 283, 284, 287, 350], "remov": [0, 2, 5, 14, 17, 18, 22, 24, 25, 26, 38, 40, 43, 47, 54, 58, 71, 72, 73, 74, 81, 90, 110, 125, 129, 132, 141, 144, 148, 150, 151, 152, 164, 166, 169, 173, 180, 184, 197, 198, 199, 200, 207, 216, 233, 240, 249, 256, 267, 270, 275, 277, 279, 281, 283, 284, 287, 289, 310, 318, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343], "renam": [0, 120, 234, 325, 326, 331, 332, 333, 335, 337], "ar": [0, 1, 2, 5, 8, 9, 11, 14, 15, 17, 18, 21, 24, 25, 26, 28, 29, 32, 34, 36, 37, 39, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 76, 78, 79, 80, 82, 85, 86, 87, 89, 90, 93, 94, 96, 97, 99, 100, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 128, 129, 132, 135, 136, 138, 141, 142, 144, 147, 150, 151, 152, 154, 155, 158, 160, 162, 163, 165, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 202, 204, 205, 206, 208, 211, 212, 213, 215, 216, 219, 220, 222, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 245, 246, 248, 249, 250, 252, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 270, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 297, 298, 307, 309, 312, 315, 316, 317, 318, 321, 324, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351], "deprec": [0, 107, 249, 277, 281, 283, 287, 324, 326, 328, 329, 330, 331, 335, 336, 337, 338, 340, 341, 342], "recommend": [0, 17, 18, 24, 31, 41, 42, 44, 52, 55, 57, 58, 75, 76, 96, 99, 107, 144, 150, 157, 167, 168, 170, 178, 181, 183, 184, 201, 202, 222, 225, 229, 233, 239, 240, 242, 273, 275, 277, 282, 283, 287, 289, 293, 306, 307, 330, 344], "dure": [0, 5, 31, 49, 52, 57, 63, 65, 71, 109, 110, 132, 157, 175, 178, 183, 189, 191, 197, 232, 242, 243, 244, 251, 252, 256, 275, 277, 282, 283, 289, 304, 305, 324, 329, 337], "differ": [0, 1, 2, 5, 11, 14, 17, 18, 22, 23, 24, 26, 27, 28, 29, 32, 33, 39, 41, 42, 44, 49, 51, 52, 53, 54, 55, 56, 59, 60, 63, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 81, 82, 85, 87, 93, 96, 99, 116, 125, 128, 129, 132, 138, 141, 144, 148, 149, 150, 152, 153, 154, 155, 158, 159, 165, 167, 168, 170, 175, 177, 178, 179, 180, 181, 182, 185, 186, 189, 191, 193, 194, 196, 197, 198, 200, 201, 203, 204, 207, 208, 211, 213, 219, 222, 225, 229, 230, 233, 235, 237, 240, 244, 245, 249, 252, 254, 255, 258, 261, 263, 265, 266, 267, 269, 270, 271, 275, 277, 278, 279, 282, 283, 284, 287, 288, 289, 292, 311, 312, 324, 328, 329, 332, 333, 335, 337, 338, 342, 344, 346, 347, 350, 351], "releas": [0, 122, 127, 232, 249, 250, 275, 283, 344], "circl": [0, 72, 198, 277, 287], "denois": [0, 1, 2, 18, 24, 30, 32, 42, 53, 54, 63, 100, 104, 105, 127, 128, 129, 150, 156, 158, 168, 179, 180, 189, 226, 232, 233, 241, 249, 256, 259, 260, 274, 278, 290, 298, 299, 300, 301, 310, 326, 333, 335, 338, 339, 341, 342, 343], "localpca": [0, 26, 53, 152, 179, 290, 298, 327, 335, 338], "genpca": [0, 290], "can": [0, 1, 2, 5, 8, 9, 10, 11, 13, 14, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 99, 100, 102, 104, 106, 107, 109, 110, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 132, 135, 136, 137, 138, 140, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 252, 256, 257, 258, 260, 263, 264, 265, 267, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 298, 301, 305, 306, 307, 311, 312, 316, 325, 329, 333, 335, 338, 341, 342, 344, 345, 346, 347, 350, 351], "us": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 22, 24, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 115, 117, 121, 123, 124, 125, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 148, 150, 154, 155, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 183, 184, 185, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 268, 270, 273, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351], "fewer": [0, 75, 201], "imag": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 24, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 58, 59, 61, 62, 63, 64, 65, 68, 69, 72, 73, 74, 77, 84, 85, 87, 90, 92, 93, 94, 96, 97, 98, 99, 103, 104, 105, 107, 124, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 150, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 184, 185, 187, 188, 189, 190, 191, 194, 195, 198, 199, 200, 203, 210, 211, 213, 216, 218, 219, 220, 222, 223, 224, 225, 229, 231, 234, 239, 240, 241, 242, 245, 247, 249, 252, 253, 255, 256, 259, 263, 265, 267, 272, 273, 275, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 304, 306, 307, 308, 311, 312, 314, 315, 321, 322, 325, 326, 329, 330, 333, 335, 337, 341, 344, 346, 350], "than": [0, 2, 15, 23, 26, 28, 31, 41, 42, 43, 47, 49, 51, 52, 54, 55, 57, 59, 64, 65, 75, 78, 85, 90, 92, 93, 94, 99, 107, 119, 120, 121, 124, 126, 129, 142, 149, 152, 154, 157, 167, 168, 169, 173, 175, 177, 178, 180, 181, 183, 185, 190, 191, 201, 204, 211, 216, 218, 219, 220, 225, 230, 231, 233, 243, 249, 250, 251, 253, 255, 257, 260, 264, 265, 266, 268, 275, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 298, 311, 316, 318, 324, 325, 328, 331, 337, 341, 342], "patch": [0, 23, 25, 28, 118, 119, 122, 149, 151, 154, 239, 279, 289, 298, 299, 300, 301, 328, 335, 337, 340, 342], "voxel": [0, 1, 2, 5, 8, 9, 10, 11, 14, 15, 17, 18, 21, 22, 24, 25, 26, 28, 32, 33, 34, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 71, 74, 84, 85, 86, 92, 93, 94, 96, 99, 104, 105, 128, 129, 132, 135, 136, 138, 141, 142, 144, 147, 148, 150, 151, 152, 154, 158, 159, 160, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 197, 200, 210, 211, 212, 218, 219, 220, 222, 225, 229, 234, 239, 243, 244, 245, 267, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 298, 299, 301, 305, 308, 315, 317, 321, 322, 324, 325, 326, 331, 333, 334, 335, 337, 338, 344], "pca_noise_estim": [0, 25, 151, 343], "ha": [0, 1, 5, 8, 9, 11, 15, 21, 25, 26, 28, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 47, 50, 51, 52, 54, 56, 57, 58, 64, 67, 71, 73, 78, 80, 81, 82, 93, 94, 99, 107, 110, 117, 119, 124, 125, 128, 132, 135, 136, 138, 142, 147, 151, 152, 154, 157, 158, 160, 163, 165, 166, 167, 168, 169, 170, 173, 176, 177, 178, 180, 182, 183, 184, 190, 193, 197, 199, 204, 206, 207, 208, 219, 220, 225, 229, 230, 231, 233, 235, 243, 245, 251, 255, 256, 257, 261, 263, 265, 266, 267, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 321, 324, 326, 329, 331, 333, 337, 343, 346, 350, 351], "new": [0, 1, 2, 5, 17, 18, 28, 29, 31, 33, 36, 41, 55, 58, 65, 67, 80, 99, 101, 107, 108, 112, 114, 119, 120, 121, 123, 124, 126, 128, 129, 132, 144, 154, 155, 157, 159, 162, 167, 181, 184, 191, 193, 206, 225, 227, 232, 233, 249, 250, 252, 256, 262, 264, 268, 269, 275, 277, 278, 279, 282, 283, 284, 285, 287, 289, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 350], "argument": [0, 5, 51, 58, 66, 94, 100, 102, 132, 177, 184, 192, 220, 226, 228, 236, 237, 238, 239, 240, 242, 243, 244, 245, 269, 275, 277, 281, 282, 283, 286, 288, 289, 323, 329, 331, 335, 337, 339, 340, 342], "images_as_sampl": 0, "gener": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 107, 110, 113, 116, 120, 123, 124, 125, 126, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 240, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 267, 271, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 304, 305, 309, 311, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "furi": [0, 6, 9, 37, 58, 71, 96, 133, 136, 163, 184, 197, 222, 229, 233, 249, 329, 335, 336, 337, 341], "minimum": [0, 2, 18, 55, 67, 75, 80, 129, 181, 193, 201, 206, 249, 273, 275, 277, 280, 282, 283, 284, 287, 289, 322, 329, 333, 336], "version": [0, 1, 2, 8, 23, 24, 25, 26, 27, 28, 49, 50, 70, 71, 85, 94, 104, 105, 106, 110, 124, 125, 128, 129, 135, 149, 150, 151, 152, 153, 154, 175, 176, 196, 197, 211, 220, 229, 234, 245, 249, 250, 252, 268, 274, 275, 277, 278, 281, 283, 285, 287, 290, 344, 350], "i": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351], "distutil": [0, 124, 337, 341], "drop": [0, 252, 325, 326, 330, 335, 341], "io": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 87, 88, 90, 92, 94, 98, 99, 104, 105, 110, 125, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 190, 191, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 216, 218, 220, 224, 225, 229, 232, 249, 274, 275, 278, 284, 285, 290, 324, 326, 328, 330, 331, 335, 336, 341, 342], "bvectxt": [0, 249, 290, 341, 342], "modul": [0, 5, 7, 20, 21, 22, 23, 24, 25, 26, 28, 32, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 74, 75, 76, 78, 79, 80, 81, 85, 88, 89, 94, 96, 106, 107, 122, 132, 134, 146, 147, 148, 149, 150, 151, 152, 154, 158, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 200, 201, 202, 204, 205, 206, 207, 211, 214, 215, 220, 222, 229, 233, 249, 254, 261, 266, 268, 274, 290, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 346, 348, 350], "The": [0, 1, 2, 5, 8, 9, 10, 11, 13, 14, 15, 17, 20, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 80, 82, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 100, 102, 103, 104, 107, 109, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 132, 135, 136, 138, 140, 141, 142, 144, 146, 148, 149, 150, 151, 152, 154, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 206, 208, 211, 212, 213, 216, 218, 219, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 245, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 267, 270, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 298, 299, 301, 306, 308, 311, 312, 313, 316, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348, 349, 350], "default": [0, 1, 2, 9, 13, 14, 20, 22, 27, 28, 33, 36, 37, 45, 47, 51, 57, 58, 59, 63, 64, 66, 70, 74, 75, 76, 78, 79, 82, 92, 96, 99, 100, 102, 110, 113, 120, 125, 128, 129, 136, 140, 141, 146, 148, 153, 154, 159, 162, 163, 171, 173, 177, 183, 184, 185, 189, 190, 192, 196, 200, 201, 202, 204, 205, 208, 218, 222, 225, 226, 228, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 260, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 328, 329, 331, 332, 333, 335, 338, 339, 340, 341, 342, 343, 350], "option": [0, 9, 20, 24, 26, 28, 37, 40, 42, 51, 52, 53, 58, 64, 67, 97, 100, 102, 106, 110, 119, 120, 136, 146, 150, 152, 154, 163, 166, 168, 177, 178, 179, 184, 190, 193, 223, 226, 228, 233, 234, 238, 239, 240, 242, 243, 244, 245, 252, 259, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 323, 324, 325, 326, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343], "command": [0, 2, 24, 36, 99, 100, 102, 109, 110, 112, 117, 120, 124, 127, 129, 150, 162, 225, 226, 228, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 260, 278, 289, 305, 315, 326, 331, 332, 333, 335, 337, 341], "line": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 26, 31, 33, 34, 37, 54, 55, 57, 67, 75, 76, 88, 90, 92, 94, 96, 97, 98, 99, 100, 102, 107, 109, 110, 112, 119, 120, 124, 125, 127, 129, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 152, 157, 159, 160, 163, 180, 181, 183, 193, 201, 202, 214, 216, 218, 220, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 241, 243, 245, 249, 254, 257, 270, 271, 275, 282, 283, 287, 288, 289, 305, 315, 324, 325, 326, 328, 329, 332, 333, 334, 335, 336, 337, 341, 351], "patch2self": [0, 18, 30, 156, 249, 289, 290, 301, 339, 340, 341, 342], "ridg": [0, 28, 154, 279, 283, 289, 301, 341], "ol": [0, 28, 154, 279, 283, 289, 301, 306, 307, 341], "track": [0, 2, 5, 6, 7, 8, 10, 11, 12, 15, 17, 35, 47, 59, 67, 68, 71, 78, 79, 80, 87, 90, 92, 93, 94, 96, 97, 98, 103, 107, 109, 119, 127, 129, 132, 133, 134, 135, 137, 138, 139, 142, 144, 161, 173, 185, 193, 194, 197, 204, 205, 206, 213, 216, 218, 219, 220, 222, 223, 224, 234, 241, 249, 252, 274, 275, 277, 278, 281, 283, 284, 286, 290, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "pmf": [0, 7, 11, 12, 13, 134, 138, 139, 140, 245, 326, 329, 341], "parent": [0, 252, 277, 289, 290], "pmfgen": 0, "mandatori": [0, 100, 102, 226, 228, 275], "paramet": [0, 8, 10, 15, 17, 21, 22, 23, 24, 25, 26, 28, 36, 39, 42, 43, 45, 47, 50, 51, 52, 53, 54, 56, 57, 59, 61, 63, 67, 68, 70, 72, 74, 75, 82, 85, 100, 102, 107, 135, 142, 144, 147, 148, 149, 150, 151, 152, 154, 162, 165, 168, 169, 171, 173, 176, 177, 178, 179, 180, 182, 183, 185, 187, 189, 193, 194, 196, 198, 200, 201, 208, 211, 226, 228, 229, 237, 239, 243, 244, 245, 249, 257, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 291, 292, 300, 301, 307, 308, 311, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 339, 341, 342, 343, 346], "sphere": [0, 1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 18, 20, 21, 30, 40, 41, 44, 46, 47, 48, 50, 52, 53, 54, 55, 58, 59, 60, 61, 63, 84, 86, 94, 128, 129, 134, 135, 137, 138, 139, 140, 141, 142, 146, 147, 156, 166, 167, 170, 172, 173, 174, 176, 178, 179, 180, 181, 184, 185, 186, 187, 189, 210, 212, 220, 245, 273, 274, 278, 280, 282, 283, 285, 287, 288, 289, 290, 324, 326, 329, 331, 333, 335, 336, 350, 351], "vertic": [0, 2, 6, 14, 29, 41, 44, 46, 54, 58, 59, 60, 84, 86, 129, 133, 141, 155, 167, 170, 172, 180, 184, 185, 186, 210, 212, 277, 278, 280, 283, 285, 287, 288, 290, 329, 351], "correspond": [0, 1, 17, 24, 26, 28, 34, 36, 39, 45, 51, 53, 54, 55, 56, 57, 58, 61, 62, 72, 73, 78, 85, 87, 93, 97, 103, 107, 128, 144, 150, 152, 154, 160, 162, 165, 171, 177, 179, 180, 181, 182, 183, 184, 187, 188, 198, 199, 204, 211, 213, 219, 223, 229, 233, 245, 271, 275, 277, 279, 280, 282, 283, 287, 288, 289, 291, 296, 310, 344], "spheric": [0, 1, 2, 4, 8, 10, 11, 15, 18, 20, 21, 26, 29, 38, 39, 40, 43, 48, 53, 54, 57, 59, 86, 107, 127, 128, 129, 131, 135, 137, 138, 142, 146, 147, 152, 155, 164, 165, 166, 169, 174, 179, 180, 183, 185, 212, 232, 241, 249, 250, 273, 274, 277, 278, 280, 282, 288, 289, 290, 304, 305, 324, 329, 331, 332, 333, 335, 337, 349], "distribut": [0, 1, 2, 5, 8, 9, 11, 14, 18, 20, 26, 28, 29, 32, 37, 39, 40, 41, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 82, 94, 128, 129, 132, 135, 136, 138, 141, 146, 152, 154, 155, 158, 163, 165, 166, 167, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 208, 220, 233, 234, 239, 243, 245, 248, 253, 255, 256, 260, 264, 265, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 298, 299, 301, 305, 321, 322, 333, 336, 348, 350], "valu": [0, 2, 5, 8, 9, 11, 15, 17, 18, 20, 24, 25, 26, 28, 29, 31, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 75, 82, 85, 86, 87, 89, 90, 92, 94, 96, 104, 105, 129, 132, 135, 136, 138, 142, 144, 146, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 201, 208, 211, 212, 213, 215, 216, 218, 220, 222, 229, 231, 232, 234, 235, 237, 239, 240, 242, 243, 245, 249, 257, 260, 264, 266, 267, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 296, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 346, 347, 350], "get_pmf_valu": 0, "point": [0, 1, 2, 5, 9, 11, 13, 14, 18, 24, 29, 37, 39, 42, 50, 52, 53, 54, 55, 59, 60, 67, 68, 78, 79, 80, 81, 86, 93, 107, 110, 120, 121, 124, 128, 129, 132, 136, 138, 140, 141, 150, 155, 163, 165, 168, 176, 178, 179, 180, 181, 185, 186, 193, 194, 204, 205, 206, 207, 212, 219, 229, 230, 231, 237, 244, 245, 249, 255, 269, 270, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 296, 309, 310, 317, 318, 321, 322, 324, 326, 329, 330, 331, 335, 336, 337, 338, 340, 341, 342, 348, 351], "xyz": [0, 29, 60, 155, 186, 277, 278, 281, 283, 287, 337], "which": [0, 1, 2, 5, 7, 8, 9, 11, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 80, 81, 84, 85, 86, 87, 92, 93, 94, 96, 97, 98, 99, 107, 108, 109, 110, 124, 128, 129, 132, 134, 135, 136, 138, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 206, 207, 210, 211, 212, 213, 218, 219, 220, 222, 223, 224, 225, 229, 232, 233, 234, 236, 239, 240, 243, 244, 245, 248, 249, 251, 252, 254, 260, 261, 262, 263, 264, 266, 267, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 298, 299, 311, 328, 335, 338, 344, 347, 350], "return": [0, 8, 10, 20, 22, 25, 26, 40, 41, 42, 45, 47, 52, 53, 55, 58, 59, 62, 65, 66, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 86, 87, 93, 94, 96, 100, 120, 125, 135, 137, 146, 148, 151, 152, 166, 167, 168, 171, 173, 178, 179, 181, 184, 185, 188, 191, 192, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 212, 213, 219, 220, 222, 226, 243, 245, 264, 299, 325, 326, 329, 332, 334, 336, 341, 343], "locat": [0, 32, 47, 63, 65, 72, 87, 100, 102, 107, 158, 173, 189, 191, 198, 213, 226, 228, 235, 239, 243, 244, 275, 277, 278, 287], "orient": [0, 1, 2, 6, 8, 9, 11, 20, 34, 37, 40, 41, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 61, 64, 67, 71, 78, 79, 87, 94, 128, 129, 133, 135, 136, 138, 146, 160, 163, 166, 167, 173, 174, 176, 178, 179, 180, 181, 182, 184, 185, 187, 190, 193, 197, 204, 205, 213, 220, 229, 234, 243, 245, 249, 260, 275, 277, 278, 280, 281, 282, 283, 285, 286, 287, 289, 305, 328, 329, 335, 350], "segment": [0, 1, 9, 10, 14, 20, 21, 24, 26, 30, 34, 37, 39, 40, 42, 43, 47, 53, 54, 58, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 88, 89, 91, 93, 100, 107, 127, 128, 136, 137, 141, 146, 147, 150, 152, 156, 160, 163, 165, 166, 168, 169, 173, 179, 180, 184, 193, 194, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 214, 215, 217, 219, 226, 235, 241, 245, 249, 274, 275, 283, 285, 287, 290, 311, 315, 321, 322, 326, 331, 332, 335, 337, 340, 341, 342, 343], "from": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 102, 104, 105, 107, 109, 111, 112, 115, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 224, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 243, 245, 248, 249, 250, 251, 252, 255, 256, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 298, 301, 305, 306, 307, 311, 315, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 350, 351], "metric": [0, 18, 24, 43, 47, 49, 54, 57, 58, 64, 65, 66, 67, 70, 71, 72, 73, 77, 78, 81, 87, 89, 90, 95, 103, 150, 169, 173, 175, 180, 183, 184, 190, 191, 192, 193, 196, 197, 198, 199, 203, 204, 207, 213, 215, 216, 221, 243, 244, 245, 249, 260, 274, 278, 280, 281, 282, 283, 286, 289, 290, 291, 292, 294, 306, 307, 308, 309, 318, 321, 322, 324, 326, 329, 330, 331, 332, 335, 338, 340, 341, 342], "import": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 108, 122, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 254, 255, 256, 262, 264, 266, 267, 272, 275, 277, 278, 280, 281, 283, 284, 285, 288, 290, 324, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 340, 341, 342, 343, 346], "resamplefeatur": [0, 78, 87, 204, 213, 284], "wa": [0, 5, 17, 23, 24, 26, 27, 32, 34, 40, 42, 43, 48, 49, 51, 52, 53, 54, 57, 58, 59, 63, 64, 67, 85, 92, 94, 100, 110, 111, 124, 125, 126, 132, 144, 149, 150, 152, 153, 158, 160, 166, 168, 169, 174, 175, 177, 178, 179, 180, 183, 184, 185, 189, 190, 193, 211, 218, 220, 226, 230, 234, 243, 249, 250, 251, 252, 254, 257, 258, 260, 261, 263, 264, 265, 266, 268, 269, 270, 272, 275, 277, 278, 279, 281, 282, 283, 284, 288, 289, 331, 332, 333, 334, 335], "replac": [0, 17, 31, 33, 63, 92, 109, 125, 144, 157, 159, 189, 218, 232, 239, 249, 255, 268, 275, 279, 283, 284, 287, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 340], "featurespe": [0, 78, 79, 80, 87, 204, 205, 206, 213, 284, 326], "name": [0, 12, 36, 47, 53, 64, 82, 94, 100, 102, 104, 105, 107, 110, 113, 119, 120, 121, 123, 124, 139, 162, 173, 179, 190, 208, 220, 226, 228, 230, 233, 235, 236, 237, 238, 239, 243, 244, 249, 271, 275, 277, 278, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 317, 319, 320, 321, 322, 324, 326, 327, 329, 330, 333, 335, 336, 337, 338, 340, 346], "number": [0, 6, 10, 11, 17, 20, 21, 22, 24, 26, 28, 29, 31, 32, 36, 39, 41, 42, 47, 49, 51, 53, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 70, 74, 78, 79, 80, 81, 82, 92, 93, 94, 103, 124, 133, 138, 144, 146, 147, 148, 150, 152, 154, 155, 157, 158, 162, 165, 167, 168, 173, 175, 177, 179, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 196, 200, 204, 205, 206, 207, 208, 218, 219, 220, 231, 234, 240, 244, 245, 252, 260, 263, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 295, 296, 303, 304, 305, 310, 311, 312, 315, 317, 318, 320, 321, 322, 324, 326, 329, 330, 333, 334, 335, 338, 340, 341, 342, 344, 348], "core": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 25, 26, 29, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 71, 74, 84, 85, 86, 90, 92, 94, 98, 106, 109, 115, 126, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 197, 200, 210, 211, 212, 216, 218, 220, 224, 232, 240, 249, 274, 275, 278, 279, 280, 281, 283, 285, 286, 287, 289, 290, 304, 305, 310, 317, 324, 326, 328, 331, 332, 333, 335, 336, 337, 340, 343], "thread": [0, 275, 279, 282, 283, 284, 289, 318, 324, 325, 329, 330, 340, 342], "standard": [0, 2, 18, 23, 27, 32, 34, 42, 43, 46, 49, 53, 54, 55, 60, 63, 72, 75, 84, 87, 99, 104, 105, 106, 107, 129, 149, 153, 158, 160, 168, 169, 172, 175, 179, 180, 181, 186, 189, 198, 201, 210, 213, 225, 233, 239, 249, 261, 262, 264, 266, 273, 275, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289, 292, 298, 299, 307, 324, 329, 333, 335, 340, 342, 344, 346, 351], "num_thread": [0, 275, 279, 284, 289, 318, 339, 340], "openmp": [0, 249, 275, 279, 284, 289, 318, 324, 326, 327], "parallel": [0, 4, 11, 14, 18, 19, 32, 41, 48, 52, 55, 58, 99, 131, 138, 141, 145, 158, 167, 174, 178, 181, 184, 225, 232, 243, 267, 275, 277, 279, 280, 283, 284, 285, 289, 304, 305, 309, 318, 325, 326, 329, 333, 335, 338, 341, 342, 343], "num_process": [0, 11, 14, 20, 21, 24, 41, 58, 138, 141, 146, 147, 150, 167, 184, 240, 275, 279, 280, 283, 289, 304, 305, 310, 317], "multiprocess": [0, 20, 21, 146, 147, 249, 280, 283, 289, 304, 305, 325, 326, 329, 333, 334, 340], "packag": [0, 9, 37, 52, 60, 63, 107, 124, 136, 163, 178, 186, 189, 246, 275, 277, 278, 281, 282, 283, 284, 287, 289, 324, 328, 330, 332, 333, 335, 338, 340, 346, 347], "logic": [0, 64, 190, 282, 283, 287, 324, 331], "when": [0, 9, 10, 15, 17, 37, 42, 44, 49, 52, 57, 58, 63, 66, 67, 71, 78, 79, 80, 85, 87, 93, 94, 97, 100, 102, 103, 107, 108, 109, 110, 111, 120, 124, 125, 136, 137, 142, 144, 163, 168, 170, 175, 178, 183, 184, 189, 192, 193, 197, 204, 205, 206, 211, 213, 219, 220, 223, 226, 228, 229, 230, 233, 245, 252, 255, 260, 267, 269, 270, 275, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 292, 324, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 346, 350], "If": [0, 5, 7, 9, 10, 17, 20, 21, 28, 37, 41, 44, 51, 53, 55, 57, 58, 59, 63, 64, 71, 75, 78, 79, 90, 92, 93, 96, 98, 99, 103, 104, 107, 110, 113, 119, 120, 123, 124, 125, 126, 132, 134, 136, 137, 144, 146, 147, 154, 163, 167, 170, 177, 179, 181, 183, 184, 185, 189, 190, 197, 201, 204, 205, 216, 218, 219, 222, 224, 225, 229, 233, 235, 236, 237, 244, 245, 246, 248, 254, 256, 257, 260, 267, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 296, 298, 299, 300, 301, 304, 305, 307, 310, 311, 315, 317, 318, 321, 322, 324, 345, 346, 347, 351], "none": [0, 5, 9, 14, 20, 21, 23, 25, 26, 28, 37, 40, 41, 44, 45, 46, 47, 50, 54, 58, 60, 61, 62, 63, 64, 65, 67, 71, 73, 84, 85, 86, 89, 99, 132, 136, 141, 146, 147, 149, 151, 152, 154, 163, 166, 167, 170, 171, 172, 173, 176, 180, 184, 186, 187, 188, 189, 190, 191, 193, 197, 199, 210, 211, 212, 215, 225, 263, 268, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 298, 305, 316, 318, 332, 333, 339, 340], "omp_num_thread": [0, 275, 279, 284, 289, 318], "environ": [0, 232, 233, 260, 275, 279, 284, 289, 318, 326], "variabl": [0, 5, 18, 26, 47, 51, 59, 65, 71, 96, 132, 152, 173, 177, 185, 191, 197, 222, 233, 249, 258, 269, 270, 273, 275, 277, 279, 282, 283, 284, 287, 289, 318, 324, 326, 329, 332, 333, 334, 337, 339, 340, 343], "set": [0, 1, 2, 5, 6, 7, 9, 10, 13, 14, 15, 20, 21, 22, 23, 25, 26, 28, 29, 32, 33, 34, 37, 39, 42, 49, 51, 52, 53, 55, 57, 58, 59, 60, 64, 65, 66, 67, 68, 70, 71, 74, 75, 78, 80, 81, 82, 86, 87, 89, 90, 92, 93, 94, 96, 97, 98, 99, 104, 105, 107, 109, 110, 114, 118, 119, 120, 124, 128, 129, 132, 133, 134, 136, 140, 141, 142, 146, 147, 148, 149, 151, 152, 154, 155, 158, 159, 160, 163, 165, 168, 175, 177, 178, 179, 181, 183, 184, 185, 186, 190, 191, 192, 193, 194, 196, 197, 200, 201, 204, 206, 207, 208, 212, 213, 215, 216, 218, 219, 220, 222, 223, 224, 225, 230, 233, 237, 239, 240, 244, 245, 249, 252, 256, 260, 268, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 296, 298, 301, 309, 318, 324, 325, 326, 328, 329, 330, 333, 337, 338, 341, 342, 343, 346, 347], "all": [0, 2, 5, 7, 9, 11, 14, 15, 17, 18, 24, 26, 28, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 67, 71, 75, 76, 78, 79, 85, 87, 89, 93, 94, 96, 99, 100, 102, 104, 107, 108, 109, 110, 120, 121, 124, 129, 132, 134, 136, 138, 141, 142, 144, 150, 152, 154, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 173, 175, 177, 178, 179, 180, 181, 183, 184, 189, 190, 191, 192, 193, 197, 201, 202, 204, 205, 211, 213, 215, 219, 220, 222, 225, 226, 228, 230, 235, 238, 240, 242, 248, 249, 252, 254, 255, 256, 257, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 303, 316, 318, 326, 328, 331, 335, 336, 337, 340], "avail": [0, 15, 18, 21, 32, 36, 38, 42, 53, 54, 55, 57, 64, 68, 77, 80, 82, 94, 96, 97, 100, 102, 104, 115, 142, 147, 158, 162, 164, 168, 179, 180, 181, 183, 190, 194, 203, 206, 208, 220, 222, 223, 226, 228, 229, 232, 234, 238, 239, 240, 243, 244, 245, 248, 249, 250, 251, 275, 277, 278, 279, 282, 283, 284, 289, 292, 303, 318, 324, 326, 331, 333, 342, 346, 347, 350], "maximum": [0, 4, 15, 18, 50, 55, 58, 60, 66, 76, 80, 131, 142, 176, 181, 184, 186, 192, 202, 206, 240, 245, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 296, 321, 322, 328, 329, 333, 341, 350], "num_cpu_cor": 0, "select": [0, 1, 2, 5, 14, 24, 26, 39, 43, 51, 52, 53, 54, 55, 57, 59, 72, 75, 89, 110, 128, 129, 132, 141, 150, 152, 165, 169, 177, 178, 179, 180, 181, 183, 185, 198, 201, 215, 245, 252, 275, 282, 283, 284, 287, 289, 292, 293, 321, 324, 344, 350], "an": [0, 1, 4, 5, 6, 7, 9, 10, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 76, 78, 79, 80, 82, 84, 85, 86, 87, 90, 92, 94, 96, 98, 99, 100, 102, 107, 109, 110, 117, 120, 124, 125, 126, 128, 131, 132, 133, 134, 136, 137, 140, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 216, 218, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 255, 256, 259, 260, 261, 265, 266, 268, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 301, 304, 305, 306, 307, 309, 310, 311, 317, 318, 324, 325, 328, 329, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 346, 347, 350], "error": [0, 5, 17, 20, 21, 39, 45, 47, 62, 124, 125, 132, 144, 146, 147, 165, 171, 173, 188, 233, 260, 270, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 289, 292, 304, 305, 310, 317, 318, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "rais": [0, 125, 268, 275, 279, 280, 281, 282, 283, 284, 289, 304, 305, 310, 317, 318, 324, 326, 327, 328, 329, 331, 333], "same": [0, 5, 7, 8, 9, 17, 21, 28, 32, 33, 37, 41, 43, 47, 49, 50, 51, 52, 54, 55, 58, 63, 64, 65, 67, 68, 71, 73, 75, 76, 78, 79, 80, 81, 87, 88, 89, 92, 93, 97, 99, 107, 110, 117, 123, 125, 132, 134, 135, 136, 144, 147, 154, 158, 159, 163, 167, 169, 173, 175, 176, 177, 178, 180, 181, 184, 189, 190, 191, 193, 194, 197, 199, 201, 202, 204, 205, 206, 207, 213, 214, 215, 218, 219, 223, 225, 229, 230, 233, 235, 236, 239, 245, 251, 252, 255, 260, 261, 265, 268, 270, 271, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 325, 326, 331, 335, 337, 338, 340, 342, 344, 345, 347], "directli": [0, 9, 11, 37, 39, 53, 54, 67, 68, 109, 110, 119, 136, 138, 163, 165, 179, 180, 193, 194, 229, 236, 244, 252, 270, 277, 281, 283, 289, 325, 327, 350], "directiongett": [0, 287, 328, 341], "direct": [0, 1, 2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 18, 20, 21, 25, 26, 28, 32, 37, 39, 40, 41, 42, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 68, 69, 72, 73, 84, 85, 87, 90, 92, 94, 98, 104, 105, 107, 127, 128, 129, 131, 132, 133, 136, 137, 139, 140, 141, 142, 146, 147, 151, 152, 154, 158, 163, 165, 166, 167, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 194, 195, 198, 199, 210, 211, 213, 216, 218, 220, 224, 229, 239, 243, 245, 249, 252, 270, 273, 274, 275, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 304, 305, 318, 321, 324, 325, 326, 327, 328, 331, 332, 333, 335, 337, 341, 346, 347, 350, 351], "closest_peak_direction_gett": 0, "basedirectiongett": 0, "basepmfdirectiongett": 0, "reconst": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 24, 26, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 85, 90, 92, 94, 98, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 150, 152, 160, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 210, 211, 216, 218, 220, 224, 232, 274, 290, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 341], "eudxdirectiongett": [0, 280], "eudx_direction_gett": 0, "migrat": [0, 249, 341], "tavi": 0, "azur": [0, 249, 336, 337, 338, 339, 341], "depend": [0, 9, 11, 18, 28, 34, 37, 38, 41, 42, 51, 53, 54, 65, 78, 82, 94, 136, 138, 154, 160, 163, 164, 167, 168, 177, 179, 180, 191, 204, 208, 220, 229, 233, 234, 239, 240, 243, 245, 249, 265, 275, 277, 278, 279, 283, 284, 285, 287, 289, 308, 326, 329, 331, 333, 335, 336, 339, 341], "ad": [0, 1, 15, 20, 21, 26, 42, 52, 53, 63, 68, 99, 107, 108, 109, 110, 120, 128, 142, 146, 147, 152, 168, 178, 179, 189, 194, 225, 230, 232, 233, 234, 235, 249, 257, 259, 269, 272, 275, 279, 281, 283, 284, 285, 287, 289, 290, 292, 298, 299, 306, 307, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343], "tqdm": [0, 249, 338], "registr": [0, 31, 71, 75, 76, 87, 89, 103, 104, 105, 127, 157, 197, 201, 202, 213, 215, 232, 233, 241, 242, 249, 253, 274, 275, 278, 281, 284, 288, 289, 291, 296, 313, 316, 318, 324, 326, 328, 329, 330, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344], "interp": [0, 338], "method": [0, 1, 5, 9, 15, 18, 24, 25, 26, 28, 31, 32, 37, 39, 41, 42, 46, 47, 51, 52, 53, 54, 57, 58, 63, 66, 67, 68, 75, 78, 79, 80, 81, 82, 84, 87, 90, 92, 93, 96, 97, 99, 100, 102, 103, 104, 105, 125, 128, 132, 136, 142, 150, 151, 152, 154, 157, 158, 163, 165, 167, 168, 172, 173, 177, 178, 179, 180, 183, 184, 189, 192, 193, 194, 201, 204, 205, 206, 207, 208, 210, 213, 216, 218, 219, 222, 223, 225, 226, 228, 232, 233, 237, 240, 241, 242, 243, 244, 249, 258, 261, 264, 265, 267, 270, 272, 273, 277, 279, 282, 283, 284, 285, 287, 289, 296, 298, 299, 300, 301, 310, 315, 328, 329, 331, 332, 333, 336, 337, 339, 341, 342, 343], "align": [0, 1, 2, 31, 33, 34, 42, 43, 54, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 85, 96, 99, 127, 128, 129, 157, 159, 160, 168, 169, 180, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 211, 222, 225, 229, 230, 237, 243, 244, 253, 274, 277, 281, 283, 284, 290, 292, 318, 324, 326, 327, 333, 337, 338, 339, 341, 343], "imaffin": [0, 64, 65, 71, 73, 190, 191, 197, 199, 290, 326, 335, 341], "affinemap": [0, 64, 65, 73, 190, 191, 199, 290, 324, 328, 336, 338, 343], "transform": [0, 1, 5, 17, 22, 24, 31, 33, 41, 47, 51, 58, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 87, 94, 96, 97, 99, 128, 132, 144, 148, 150, 157, 159, 167, 173, 177, 184, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 213, 220, 222, 223, 225, 229, 230, 231, 236, 237, 241, 249, 263, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 316, 318, 324, 329, 330, 332, 333, 334, 335, 337, 338, 342, 343, 346], "interpol": [0, 10, 15, 17, 23, 25, 26, 28, 33, 43, 45, 48, 51, 55, 62, 67, 94, 99, 137, 142, 144, 149, 151, 152, 154, 159, 169, 171, 174, 177, 181, 188, 193, 220, 225, 231, 249, 265, 275, 283, 287, 289, 317, 326, 331, 335, 339, 341, 343], "transform_invers": [0, 72, 73, 198, 199, 275, 290], "tissu": [0, 9, 10, 18, 24, 37, 38, 42, 47, 49, 51, 52, 54, 55, 56, 57, 71, 77, 85, 94, 104, 105, 136, 137, 150, 163, 164, 168, 173, 175, 177, 178, 180, 181, 182, 183, 197, 203, 211, 220, 240, 243, 245, 249, 257, 269, 270, 273, 278, 282, 283, 285, 289, 290, 307, 325, 326, 334, 335, 336, 337, 338], "tissueclassifierhmrf": [0, 53, 82, 179, 208, 290, 338], "now": [0, 2, 5, 13, 14, 17, 21, 23, 24, 28, 29, 32, 36, 41, 42, 44, 45, 47, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 80, 82, 86, 89, 90, 92, 94, 96, 99, 100, 102, 109, 110, 112, 113, 119, 120, 121, 124, 125, 129, 132, 140, 141, 144, 147, 149, 150, 154, 155, 158, 162, 167, 168, 170, 171, 173, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 197, 198, 199, 201, 206, 208, 212, 215, 216, 218, 220, 222, 225, 226, 228, 230, 232, 233, 234, 249, 250, 251, 252, 262, 264, 266, 267, 268, 270, 277, 283, 324, 325, 331, 332, 333, 350], "check": [0, 28, 33, 36, 41, 42, 47, 52, 58, 72, 79, 80, 107, 110, 120, 124, 154, 159, 162, 167, 168, 173, 178, 184, 198, 205, 206, 233, 234, 239, 240, 242, 243, 244, 245, 252, 255, 264, 268, 271, 277, 278, 281, 282, 284, 289, 297, 298, 303, 307, 312, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 337, 338, 341, 344], "toler": [0, 66, 90, 192, 216, 275, 277, 279, 280, 281, 283, 284, 287, 324, 326, 329, 341], "base": [0, 2, 4, 5, 18, 20, 21, 24, 25, 26, 38, 39, 40, 41, 42, 43, 44, 48, 51, 54, 60, 61, 62, 65, 67, 68, 69, 75, 87, 90, 92, 94, 100, 102, 103, 104, 105, 110, 127, 129, 131, 132, 146, 147, 150, 151, 152, 164, 165, 166, 167, 168, 169, 170, 174, 177, 180, 186, 187, 188, 191, 193, 194, 195, 201, 213, 216, 218, 220, 226, 228, 232, 234, 237, 239, 240, 241, 249, 253, 254, 256, 259, 260, 268, 271, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 296, 299, 301, 310, 313, 316, 318, 324, 325, 326, 328, 329, 332, 333, 335, 336, 337, 338, 341, 343, 347, 349], "stop": [0, 2, 4, 7, 8, 9, 11, 12, 13, 18, 37, 94, 110, 129, 131, 134, 135, 136, 138, 139, 140, 163, 220, 245, 275, 283, 284, 287, 289, 292, 321, 322, 329, 333, 335, 337], "criterion": [0, 2, 4, 7, 8, 11, 12, 13, 18, 94, 107, 129, 131, 134, 135, 138, 139, 140, 220, 244, 245, 279, 283, 287, 289, 321], "everi": [0, 5, 11, 14, 17, 29, 52, 55, 59, 67, 78, 79, 86, 93, 94, 96, 100, 102, 124, 132, 138, 141, 144, 155, 178, 181, 185, 193, 204, 205, 212, 219, 220, 222, 226, 228, 229, 233, 256, 265, 269, 271, 277, 278, 283, 284, 286, 287, 289, 329, 331, 344], "iter": [0, 29, 34, 39, 41, 44, 58, 60, 64, 65, 66, 70, 71, 72, 73, 82, 86, 100, 102, 125, 155, 160, 165, 167, 170, 184, 186, 190, 191, 192, 196, 197, 198, 199, 208, 212, 226, 228, 251, 256, 265, 275, 277, 279, 282, 283, 284, 285, 287, 289, 290, 291, 292, 296, 315, 324, 328, 335, 340], "previous": [0, 22, 29, 45, 49, 53, 54, 55, 64, 74, 78, 79, 80, 82, 86, 100, 102, 148, 155, 171, 175, 179, 180, 181, 190, 200, 204, 205, 206, 208, 212, 226, 228, 244, 251, 261, 262, 267, 269, 270, 283], "onli": [0, 1, 2, 5, 14, 15, 17, 20, 24, 26, 28, 33, 36, 39, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 54, 58, 59, 62, 63, 65, 67, 71, 72, 78, 79, 80, 81, 85, 86, 87, 94, 97, 100, 102, 107, 110, 111, 113, 119, 121, 124, 128, 129, 132, 141, 142, 144, 146, 150, 152, 154, 159, 162, 165, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 184, 185, 188, 189, 191, 193, 197, 198, 204, 205, 206, 207, 211, 212, 213, 220, 223, 226, 228, 229, 234, 235, 239, 240, 243, 244, 251, 255, 257, 262, 263, 267, 268, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 306, 307, 310, 311, 317, 318, 324, 325, 326, 329, 331, 333, 335, 336, 338, 343, 346, 347, 350], "10th": [0, 275], "thi": [0, 1, 2, 5, 7, 8, 9, 10, 11, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 99, 100, 102, 107, 108, 109, 110, 111, 112, 113, 116, 119, 120, 121, 124, 125, 128, 129, 132, 134, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 251, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 350, 351], "mai": [0, 28, 33, 41, 42, 43, 47, 52, 53, 54, 64, 65, 70, 71, 87, 97, 100, 102, 107, 109, 110, 112, 116, 125, 154, 159, 167, 168, 169, 173, 178, 179, 180, 190, 191, 196, 197, 213, 223, 226, 228, 233, 239, 240, 242, 245, 250, 252, 253, 256, 258, 263, 265, 271, 275, 277, 280, 281, 282, 283, 284, 287, 288, 289, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 315, 317, 319, 321, 322, 324, 326, 327, 328, 329, 330, 335, 336, 337, 339, 340, 341, 342, 343, 346, 347], "result": [0, 1, 2, 5, 7, 9, 13, 22, 23, 24, 25, 26, 28, 33, 36, 37, 41, 42, 47, 51, 52, 53, 54, 55, 57, 58, 59, 63, 64, 65, 70, 71, 72, 74, 76, 78, 80, 81, 82, 90, 94, 100, 102, 106, 107, 125, 128, 129, 132, 134, 136, 140, 148, 149, 150, 151, 152, 154, 159, 162, 163, 167, 168, 173, 177, 178, 179, 180, 181, 183, 184, 185, 189, 190, 191, 196, 197, 198, 200, 202, 204, 206, 207, 208, 216, 220, 226, 228, 230, 231, 232, 234, 239, 240, 241, 242, 249, 252, 255, 259, 260, 265, 271, 272, 275, 277, 278, 279, 282, 283, 284, 287, 288, 289, 294, 295, 296, 298, 299, 300, 301, 310, 311, 315, 319, 320, 329, 335, 340, 341], "earlier": [0, 236, 256, 268], "termin": [0, 87, 213, 233, 234, 238, 252, 275, 277, 283], "previou": [0, 32, 42, 43, 53, 64, 68, 110, 158, 168, 169, 179, 190, 194, 233, 234, 235, 245, 252, 253, 256, 260, 263, 265, 271, 275, 277, 282, 283, 287, 289, 325, 350], "reconstruct": [0, 2, 8, 9, 10, 11, 13, 14, 15, 19, 24, 25, 32, 34, 36, 37, 46, 48, 49, 51, 52, 57, 61, 84, 104, 105, 127, 129, 135, 136, 137, 138, 140, 141, 142, 145, 150, 151, 158, 160, 162, 163, 172, 174, 175, 177, 178, 183, 187, 210, 229, 232, 234, 239, 240, 241, 245, 249, 255, 256, 259, 263, 265, 271, 274, 277, 278, 279, 282, 283, 285, 289, 304, 306, 307, 308, 325, 326, 327, 328, 331, 333, 336, 337, 338, 339, 340, 342, 344, 350], "csdeconv": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 37, 39, 41, 58, 59, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 163, 165, 167, 184, 185, 290, 325, 327, 332, 337], "auto_respons": [0, 290, 327], "auto_response_ssst": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 37, 39, 41, 58, 59, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 163, 165, 167, 184, 185, 290], "response_from_mask": [0, 53, 179, 290], "response_from_mask_ssst": [0, 41, 167, 290], "sim": [0, 1, 41, 46, 54, 58, 60, 84, 85, 86, 127, 128, 167, 172, 180, 184, 186, 210, 211, 212, 274, 277, 278, 283, 290, 326, 329, 331, 335], "multi_shell_fiber_respons": [0, 53, 179, 290], "move": [0, 1, 2, 17, 29, 51, 60, 63, 64, 65, 66, 67, 68, 71, 72, 73, 75, 86, 94, 96, 99, 118, 122, 128, 129, 144, 155, 177, 186, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 212, 220, 222, 225, 234, 236, 237, 243, 244, 249, 256, 265, 266, 267, 269, 275, 277, 281, 283, 284, 285, 287, 288, 289, 291, 292, 293, 296, 318, 324, 326, 327, 329, 330, 333, 335, 337, 338, 340, 341], "mcsd": [0, 53, 179, 290, 336, 341], "In": [0, 1, 2, 5, 8, 9, 10, 11, 14, 17, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 71, 72, 78, 84, 85, 86, 87, 92, 93, 94, 96, 97, 99, 100, 102, 107, 114, 118, 123, 124, 125, 128, 129, 132, 135, 136, 137, 138, 141, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 197, 198, 204, 210, 211, 212, 213, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 249, 250, 251, 252, 255, 256, 257, 265, 267, 275, 277, 279, 281, 282, 283, 284, 287, 288, 289, 309, 324, 338, 346, 347, 350], "prior": [0, 25, 26, 90, 151, 152, 216, 239, 255, 256, 277, 284, 334], "user": [0, 15, 64, 66, 75, 110, 117, 120, 121, 124, 142, 190, 192, 201, 233, 234, 235, 239, 240, 244, 249, 260, 275, 277, 281, 282, 284, 285, 287, 288, 289, 324, 328, 329, 335, 341, 348], "scipi": [0, 34, 39, 42, 43, 51, 94, 106, 107, 160, 165, 168, 169, 177, 220, 229, 233, 249, 263, 271, 275, 277, 283, 284, 287, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341], "memori": [0, 5, 11, 14, 40, 44, 76, 125, 132, 138, 141, 166, 170, 202, 229, 249, 275, 277, 281, 282, 283, 285, 289, 315, 324, 325, 327, 329, 333, 335, 337, 339, 341, 344], "overlap": [0, 55, 67, 72, 73, 181, 193, 198, 199, 249, 265, 284, 337], "bug": [0, 108, 109, 110, 120, 249, 275, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 343], "occur": [0, 49, 57, 175, 183, 270, 283, 287], "multi_median": [0, 249, 290, 337], "caus": [0, 17, 42, 144, 168, 230, 265, 275, 277, 279, 283, 284, 289, 324, 332, 333], "overli": 0, "smooth": [0, 1, 2, 23, 25, 42, 43, 52, 53, 55, 58, 64, 70, 82, 128, 129, 149, 151, 168, 169, 178, 179, 181, 184, 190, 196, 208, 265, 275, 283, 284, 287, 289, 291, 292, 317, 331], "output": [0, 2, 9, 15, 22, 23, 25, 26, 27, 28, 37, 42, 60, 70, 74, 75, 80, 89, 96, 100, 102, 107, 110, 111, 129, 136, 142, 148, 149, 151, 152, 153, 154, 163, 168, 186, 196, 200, 201, 206, 215, 222, 226, 228, 235, 236, 239, 240, 242, 243, 244, 245, 252, 255, 256, 258, 259, 260, 262, 263, 265, 269, 271, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 323, 324, 325, 326, 329, 332, 333, 335, 337, 338, 339, 341], "fix": [0, 2, 10, 15, 51, 67, 102, 103, 108, 109, 110, 120, 124, 129, 137, 142, 177, 193, 228, 237, 249, 266, 267, 270, 275, 277, 282, 283, 284, 285, 287, 288, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "regardless": [0, 267, 283], "": [0, 1, 2, 5, 7, 9, 13, 14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 92, 93, 94, 96, 97, 99, 102, 103, 104, 105, 107, 109, 110, 116, 117, 119, 120, 124, 125, 126, 128, 129, 132, 134, 136, 140, 141, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 218, 219, 220, 222, 223, 225, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 250, 251, 252, 254, 255, 257, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 332, 334, 335, 338, 341, 343, 344, 346, 347, 348, 350], "instal": [0, 52, 102, 107, 110, 112, 118, 122, 124, 127, 178, 228, 246, 260, 324, 326, 327, 329, 332, 333, 334, 335, 336, 337], "via": [0, 1, 2, 5, 18, 30, 54, 59, 61, 90, 100, 102, 110, 124, 128, 129, 132, 156, 180, 185, 187, 216, 226, 228, 233, 275, 277, 278, 282, 283, 284, 289, 292, 324, 328, 346, 347], "median_otsu": [0, 1, 18, 20, 21, 24, 26, 30, 34, 40, 42, 43, 47, 53, 54, 58, 71, 72, 73, 77, 128, 146, 147, 150, 152, 156, 160, 166, 168, 169, 173, 179, 180, 184, 197, 198, 199, 203, 289, 290, 315, 335, 337], "threshold": [0, 2, 9, 10, 18, 28, 30, 34, 37, 41, 49, 51, 52, 53, 54, 58, 75, 78, 79, 80, 81, 87, 89, 90, 108, 129, 136, 137, 154, 156, 160, 163, 167, 175, 177, 178, 179, 180, 184, 201, 204, 205, 206, 207, 213, 215, 216, 235, 239, 243, 245, 275, 279, 283, 288, 289, 290, 292, 297, 298, 301, 304, 305, 306, 307, 308, 309, 311, 312, 316, 318, 319, 321, 322, 326, 329, 332, 333, 334, 335, 337], "should": [0, 5, 11, 15, 18, 26, 28, 31, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 57, 58, 70, 78, 92, 93, 94, 100, 102, 107, 108, 109, 110, 113, 116, 119, 124, 132, 138, 142, 152, 154, 157, 165, 166, 167, 168, 173, 177, 178, 179, 180, 181, 183, 184, 196, 204, 218, 219, 220, 226, 228, 229, 232, 233, 234, 242, 252, 262, 271, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 293, 305, 309, 311, 324, 326, 327, 329, 334, 335, 336, 338, 340, 341, 342, 343], "process": [0, 1, 2, 5, 20, 21, 23, 27, 28, 36, 41, 42, 43, 49, 51, 54, 55, 64, 66, 71, 72, 78, 80, 89, 93, 96, 100, 102, 107, 128, 129, 132, 146, 147, 149, 153, 154, 162, 167, 168, 169, 175, 177, 180, 181, 190, 192, 197, 198, 204, 206, 215, 219, 222, 226, 228, 232, 233, 235, 239, 240, 242, 243, 244, 245, 249, 251, 256, 260, 275, 277, 278, 279, 281, 282, 283, 284, 285, 289, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 315, 317, 319, 326, 335, 337, 341, 350], "pipelin": [0, 14, 28, 64, 65, 96, 99, 141, 154, 190, 191, 222, 225, 249, 255, 271, 275, 282, 283, 337, 338, 341], "after": [0, 1, 2, 10, 24, 27, 28, 41, 51, 55, 66, 67, 68, 71, 72, 75, 81, 82, 88, 93, 96, 99, 102, 110, 113, 128, 129, 150, 153, 154, 167, 177, 181, 192, 193, 194, 197, 198, 201, 207, 208, 214, 219, 222, 225, 228, 231, 233, 236, 237, 239, 240, 252, 261, 264, 265, 266, 267, 269, 270, 275, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 292, 301, 316, 322, 326, 331, 332, 333, 337, 340], "make": [0, 20, 22, 28, 32, 40, 45, 47, 51, 52, 53, 55, 65, 67, 70, 72, 74, 75, 78, 79, 80, 87, 90, 92, 94, 96, 97, 100, 102, 107, 108, 109, 114, 117, 118, 119, 121, 122, 125, 127, 146, 148, 154, 158, 166, 171, 173, 177, 178, 179, 181, 191, 193, 196, 198, 200, 201, 204, 205, 206, 213, 216, 218, 220, 222, 223, 226, 228, 229, 233, 235, 237, 247, 252, 256, 257, 261, 262, 264, 266, 267, 275, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 338, 341, 342, 345, 347, 350], "sure": [0, 40, 47, 65, 72, 78, 79, 80, 87, 96, 107, 109, 110, 124, 166, 173, 191, 198, 204, 205, 206, 213, 222, 233, 235, 236, 237, 261, 262, 264, 266, 267, 269, 270, 272, 284, 286, 288], "still": [0, 9, 13, 28, 34, 37, 44, 47, 52, 55, 57, 70, 94, 110, 124, 136, 140, 154, 160, 163, 170, 173, 178, 181, 183, 196, 220, 233, 243, 264, 267, 271, 277, 281, 283, 284, 287, 325, 326, 333, 338, 350], "oper": [0, 1, 2, 17, 20, 34, 64, 96, 102, 106, 107, 128, 129, 144, 146, 160, 190, 222, 228, 253, 275, 281, 283, 287, 289, 324, 344], "expect": [0, 5, 15, 42, 49, 63, 82, 132, 142, 168, 175, 189, 208, 229, 240, 244, 252, 258, 262, 264, 266, 267, 269, 270, 275, 278, 279, 281, 282, 283, 284, 287, 289, 290, 292, 326, 346, 347], "try": [0, 42, 47, 60, 65, 72, 80, 81, 90, 107, 121, 124, 168, 173, 186, 191, 198, 206, 207, 216, 232, 233, 234, 239, 240, 242, 243, 244, 245, 246, 247, 249, 252, 264, 269, 270, 271, 272, 275, 279, 283, 327, 331, 332, 333, 335, 346, 347], "readjust": 0, "median_radiu": [0, 20, 21, 22, 24, 26, 40, 42, 43, 47, 53, 54, 58, 71, 72, 73, 74, 146, 147, 148, 150, 152, 166, 168, 169, 173, 179, 180, 184, 197, 198, 199, 200, 234, 284, 289, 315], "peak_direction_gett": [0, 335], "dipy_track_loc": [0, 335], "dipy_track": [0, 127, 234, 245, 323, 337], "other": [0, 2, 5, 8, 9, 14, 20, 23, 26, 28, 33, 34, 36, 37, 39, 41, 42, 43, 47, 50, 51, 52, 53, 54, 55, 58, 59, 60, 63, 64, 65, 66, 67, 71, 72, 78, 82, 85, 89, 90, 94, 96, 100, 102, 107, 108, 114, 117, 119, 122, 123, 129, 132, 135, 136, 141, 146, 149, 152, 154, 159, 160, 162, 163, 165, 167, 168, 169, 173, 176, 177, 178, 179, 180, 181, 184, 185, 186, 189, 190, 191, 192, 193, 197, 198, 204, 208, 211, 215, 216, 220, 222, 226, 228, 229, 233, 235, 239, 240, 242, 243, 245, 252, 254, 266, 268, 269, 275, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 301, 307, 327, 331, 332, 335, 338, 340, 346, 347], "gradient": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 23, 25, 26, 28, 30, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 71, 72, 84, 85, 86, 90, 92, 94, 98, 104, 105, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 151, 152, 154, 156, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 197, 198, 210, 211, 212, 216, 218, 220, 224, 229, 232, 234, 239, 243, 249, 257, 260, 273, 274, 275, 278, 279, 282, 283, 285, 289, 290, 292, 308, 309, 324, 325, 328, 329, 331, 333, 336, 337, 338, 342, 343, 346, 347, 348], "unique_bv": [0, 290], "unique_bvals_magnitud": [0, 290], "visual": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 26, 28, 29, 36, 37, 40, 41, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 66, 68, 70, 72, 73, 75, 76, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 92, 93, 94, 99, 110, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 150, 152, 154, 155, 162, 163, 166, 167, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 194, 196, 198, 199, 201, 202, 204, 205, 206, 207, 210, 211, 212, 214, 215, 216, 218, 219, 220, 225, 229, 231, 232, 233, 234, 235, 236, 237, 248, 249, 255, 260, 265, 271, 274, 275, 279, 280, 283, 284, 289, 290, 311, 326, 327, 328, 329, 331, 332, 335, 338, 340, 341, 344], "window": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 26, 29, 37, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 63, 67, 68, 71, 72, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 108, 115, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 152, 155, 163, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 189, 193, 194, 197, 198, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 229, 234, 235, 249, 260, 275, 283, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 341, 343, 344], "scene": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 63, 67, 71, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 189, 193, 197, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 288, 289, 311, 337], "instead": [0, 13, 25, 28, 42, 58, 64, 75, 119, 120, 125, 140, 151, 154, 168, 184, 190, 201, 233, 235, 263, 270, 275, 277, 279, 281, 282, 283, 284, 286, 287, 288, 325, 326, 327, 328, 330, 333, 334, 336, 337, 340, 341, 342, 343], "render": [0, 18, 90, 92, 95, 96, 107, 216, 218, 221, 222, 288, 324, 326, 327, 328, 329, 330, 333, 337, 340], "clear": [0, 28, 29, 41, 47, 52, 59, 60, 63, 78, 79, 81, 97, 99, 107, 154, 155, 167, 173, 178, 185, 186, 189, 204, 205, 207, 223, 225, 283, 284, 290, 333, 337], "rm_all": 0, "img": [0, 24, 33, 36, 40, 44, 45, 48, 49, 50, 62, 70, 150, 159, 162, 166, 170, 171, 174, 175, 176, 188, 196, 275, 278, 281, 335], "get_data": [0, 329, 335, 336], "sinc": [0, 2, 5, 23, 24, 26, 27, 28, 34, 42, 47, 51, 52, 57, 58, 64, 70, 71, 78, 79, 81, 85, 87, 90, 102, 110, 120, 129, 132, 149, 150, 152, 153, 154, 160, 168, 173, 177, 178, 183, 184, 190, 196, 197, 204, 205, 207, 211, 213, 216, 228, 240, 252, 259, 270, 275, 277, 279, 281, 282, 283, 284, 285, 289, 350], "nibabel": [0, 17, 22, 25, 26, 33, 36, 40, 42, 44, 45, 47, 48, 49, 50, 62, 71, 74, 106, 107, 144, 148, 151, 152, 159, 162, 166, 168, 170, 171, 173, 174, 175, 176, 188, 197, 200, 229, 233, 249, 275, 278, 281, 327, 329, 333, 336, 338, 342, 344], "np": [0, 1, 2, 5, 6, 10, 15, 17, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 107, 128, 129, 132, 133, 137, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 223, 260, 264, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 324, 326, 331, 338, 340, 342], "asanyarrai": 0, "dataobj": [0, 24, 48, 49, 71, 150, 174, 175, 197], "tractogram": [0, 13, 17, 75, 76, 87, 104, 105, 140, 144, 201, 202, 213, 236, 245, 249, 275, 278, 281, 284, 288, 289, 311, 316, 318, 321, 322, 335, 340, 341, 342], "streamlin": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 37, 66, 67, 68, 69, 75, 77, 78, 79, 80, 81, 87, 88, 89, 90, 92, 94, 95, 96, 103, 104, 105, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 163, 192, 193, 194, 195, 201, 203, 204, 205, 206, 207, 213, 214, 215, 216, 218, 220, 221, 222, 232, 235, 237, 241, 245, 249, 274, 275, 278, 283, 284, 286, 289, 290, 296, 311, 313, 316, 318, 321, 322, 324, 325, 326, 327, 328, 329, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344], "statefultractogram": [0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 37, 68, 71, 75, 94, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 194, 197, 201, 220, 249, 288, 290, 337, 341], "creat": [0, 1, 2, 5, 6, 7, 9, 10, 14, 15, 17, 18, 24, 29, 36, 37, 41, 42, 43, 46, 47, 49, 51, 53, 57, 60, 64, 65, 66, 71, 73, 78, 79, 80, 84, 86, 87, 88, 89, 93, 94, 96, 97, 98, 101, 107, 109, 114, 128, 129, 132, 133, 134, 136, 137, 141, 142, 144, 150, 155, 162, 163, 167, 168, 169, 172, 173, 175, 177, 179, 183, 186, 190, 191, 192, 197, 199, 204, 205, 206, 210, 212, 213, 214, 215, 219, 220, 222, 223, 224, 227, 230, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 257, 261, 264, 266, 269, 270, 272, 275, 277, 278, 281, 282, 283, 284, 285, 287, 288, 289, 314, 324, 328, 329, 331, 332, 333, 334, 335, 337, 340], "anoth": [0, 2, 5, 17, 51, 76, 102, 109, 124, 129, 132, 144, 177, 202, 228, 252, 264, 271, 275, 277, 281, 283, 284, 285, 332, 333, 336, 343, 346], "one": [0, 2, 5, 9, 17, 18, 23, 25, 26, 28, 29, 31, 32, 34, 36, 37, 39, 41, 42, 43, 44, 45, 47, 49, 50, 51, 53, 54, 55, 58, 59, 61, 62, 63, 64, 67, 71, 73, 76, 78, 80, 85, 86, 87, 93, 94, 98, 100, 107, 108, 110, 113, 120, 124, 129, 132, 136, 144, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 167, 168, 169, 170, 171, 173, 175, 176, 177, 179, 180, 181, 184, 185, 187, 188, 189, 190, 193, 197, 199, 202, 204, 206, 211, 212, 213, 219, 220, 224, 226, 229, 230, 231, 233, 245, 249, 251, 252, 256, 257, 264, 265, 266, 269, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 301, 306, 307, 311, 324, 326, 328, 330, 333, 335, 336, 338, 340, 343, 346, 347, 350], "workflow": [0, 104, 114, 116, 118, 120, 127, 232, 235, 236, 237, 239, 240, 242, 243, 244, 245, 249, 290, 294, 295, 298, 299, 300, 301, 306, 307, 308, 309, 310, 314, 315, 321, 322, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 343], "dipy_nlmean": [0, 102, 228], "dipy_denoise_nlmean": [0, 127, 239, 323], "get_fdata": [0, 31, 48, 49, 57, 157, 174, 175, 183, 336], "modif": [0, 78, 204, 271, 275, 277, 283, 284, 289, 326, 327], "appli": [0, 1, 2, 18, 21, 24, 25, 28, 38, 40, 41, 42, 43, 44, 45, 50, 54, 58, 63, 64, 67, 69, 72, 73, 75, 81, 93, 94, 99, 128, 129, 147, 150, 151, 154, 164, 166, 167, 168, 169, 170, 171, 176, 180, 184, 189, 190, 193, 195, 198, 199, 201, 207, 219, 220, 225, 229, 239, 240, 241, 242, 249, 251, 275, 277, 279, 282, 283, 284, 285, 287, 288, 289, 292, 293, 294, 295, 300, 301, 310, 311, 315, 317, 318, 321, 329, 330, 333, 336, 337, 341, 344, 347], "codebas": [0, 232, 249, 252, 259, 260, 263], "datatyp": [0, 281, 333], "float64": [0, 1, 23, 27, 128, 149, 153, 275, 283, 324, 329, 335, 342], "some": [0, 5, 9, 17, 18, 29, 31, 32, 36, 37, 38, 39, 42, 49, 51, 52, 53, 54, 55, 57, 58, 60, 63, 65, 70, 71, 73, 75, 78, 79, 86, 87, 90, 92, 93, 94, 96, 97, 98, 100, 102, 106, 109, 113, 114, 117, 119, 120, 123, 124, 125, 132, 136, 144, 155, 157, 158, 162, 163, 164, 165, 168, 175, 177, 178, 179, 180, 181, 183, 184, 186, 189, 191, 196, 197, 199, 201, 204, 205, 212, 213, 216, 218, 219, 220, 222, 223, 224, 226, 228, 229, 230, 232, 233, 234, 235, 244, 248, 252, 253, 254, 256, 257, 260, 261, 262, 264, 265, 266, 268, 270, 272, 273, 275, 277, 278, 279, 283, 284, 287, 289, 306, 307, 315, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 347], "introduc": [0, 13, 24, 41, 51, 53, 57, 58, 67, 68, 107, 140, 150, 167, 177, 179, 183, 184, 193, 194, 243, 252, 279, 283, 325, 333], "break": [0, 67, 99, 108, 193, 225, 277, 278, 279, 324, 329, 331, 333, 335, 336, 341, 343], "backward": [0, 1, 108, 128, 275, 283, 333, 341], "compat": [0, 108, 122, 127, 249, 281, 282, 283, 284, 325, 329, 330, 331, 332, 333, 334, 335, 338, 341], "python": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 122, 124, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 246, 248, 249, 251, 252, 275, 277, 281, 282, 283, 284, 288, 289, 290, 305, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 342, 343], "harmon": [0, 8, 11, 18, 20, 38, 40, 48, 61, 110, 127, 135, 138, 146, 164, 166, 174, 187, 243, 249, 274, 278, 280, 283, 288, 289, 304, 305, 324, 329, 331, 333, 349], "mrtrix": [0, 278, 280, 283, 284, 335, 337, 338, 350], "fibernav": 0, "tournier07": [0, 280, 282, 283, 350], "descoteaux07": [0, 60, 186, 280, 282, 283, 350], "cycl": [0, 275, 277, 344], "start": [0, 7, 11, 12, 13, 14, 20, 21, 29, 31, 32, 33, 41, 49, 51, 55, 56, 58, 63, 64, 66, 67, 68, 80, 87, 89, 93, 94, 96, 99, 110, 116, 124, 126, 134, 138, 139, 140, 141, 146, 147, 155, 157, 158, 159, 167, 175, 177, 181, 182, 184, 189, 190, 192, 193, 194, 206, 213, 215, 219, 220, 222, 225, 230, 233, 243, 245, 246, 251, 252, 253, 257, 260, 266, 268, 269, 270, 275, 277, 282, 283, 284, 287, 288, 289, 296, 322, 333, 335, 344, 348], "data": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 103, 105, 107, 109, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 253, 255, 256, 257, 265, 267, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "default_spher": [0, 1, 2, 8, 9, 10, 11, 12, 15, 21, 37, 40, 41, 63, 90, 92, 94, 98, 128, 129, 135, 136, 137, 138, 139, 142, 147, 163, 166, 167, 189, 216, 218, 220, 224, 283, 285, 288, 290], "symmetric724": [0, 53, 60, 179, 186, 278, 335], "repulsion724": [0, 12, 20, 44, 46, 47, 48, 50, 52, 58, 61, 84, 86, 139, 146, 170, 172, 173, 174, 176, 178, 184, 187, 210, 212, 278, 283, 289, 335], "more": [0, 2, 5, 13, 14, 15, 17, 18, 23, 26, 27, 39, 42, 43, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 67, 68, 71, 75, 78, 79, 80, 85, 89, 90, 92, 93, 94, 96, 98, 99, 106, 107, 108, 113, 120, 123, 125, 126, 129, 132, 140, 141, 142, 144, 149, 152, 153, 165, 168, 169, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 193, 194, 197, 201, 204, 205, 206, 211, 215, 216, 218, 219, 220, 222, 224, 225, 229, 231, 232, 233, 234, 235, 236, 237, 242, 246, 249, 250, 251, 253, 255, 256, 257, 258, 260, 263, 264, 265, 266, 267, 268, 270, 273, 274, 275, 277, 279, 282, 283, 284, 285, 287, 288, 289, 298, 299, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 342, 344, 351], "evenli": [0, 14, 18, 29, 54, 60, 141, 155, 180, 186, 273, 277, 283, 287], "mask": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 34, 37, 40, 41, 42, 43, 47, 49, 50, 53, 54, 55, 56, 57, 58, 69, 71, 72, 73, 74, 90, 92, 94, 98, 104, 105, 110, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 152, 153, 158, 160, 163, 166, 167, 168, 169, 173, 175, 176, 179, 180, 181, 182, 183, 184, 195, 197, 198, 199, 200, 216, 218, 220, 224, 234, 243, 245, 249, 255, 271, 275, 278, 279, 280, 282, 283, 287, 288, 290, 302, 304, 305, 306, 307, 308, 314, 315, 319, 321, 322, 324, 325, 326, 329, 330, 331, 332, 333, 335, 337, 339, 341, 343], "follow": [0, 5, 8, 9, 11, 15, 17, 24, 25, 26, 28, 29, 31, 33, 34, 36, 37, 42, 43, 44, 47, 51, 53, 54, 55, 56, 57, 59, 63, 64, 67, 78, 86, 96, 98, 99, 104, 107, 108, 109, 110, 118, 120, 121, 122, 123, 124, 125, 126, 132, 135, 136, 138, 142, 144, 150, 151, 152, 154, 155, 157, 159, 160, 162, 163, 168, 169, 170, 173, 177, 179, 180, 181, 182, 183, 185, 189, 190, 193, 204, 212, 222, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 244, 245, 247, 258, 259, 260, 263, 264, 265, 271, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 301, 306, 307, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347], "wai": [0, 6, 8, 9, 11, 23, 24, 29, 31, 36, 37, 39, 41, 42, 43, 44, 47, 49, 52, 53, 54, 55, 58, 80, 86, 87, 94, 96, 97, 99, 100, 107, 109, 110, 116, 117, 119, 120, 123, 124, 125, 133, 135, 136, 138, 149, 150, 155, 157, 162, 163, 165, 167, 168, 169, 170, 173, 175, 178, 179, 180, 181, 184, 206, 212, 213, 220, 222, 223, 225, 226, 229, 233, 234, 242, 243, 245, 251, 257, 262, 272, 275, 277, 283, 284, 285, 287, 289, 309, 334, 347], "you": [0, 7, 9, 14, 17, 20, 21, 24, 26, 27, 29, 31, 33, 36, 37, 39, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 59, 60, 63, 64, 67, 68, 75, 78, 79, 80, 87, 90, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 134, 136, 141, 144, 146, 147, 150, 152, 153, 155, 157, 159, 162, 163, 165, 166, 167, 168, 170, 173, 175, 176, 177, 178, 179, 180, 181, 185, 186, 189, 190, 193, 194, 201, 204, 205, 206, 213, 216, 218, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 252, 256, 262, 275, 277, 278, 281, 282, 283, 284, 285, 286, 288, 289, 311, 313, 316, 317, 325, 329, 331, 342, 344, 345], "4d": [0, 25, 27, 28, 36, 41, 46, 47, 51, 58, 84, 151, 153, 154, 162, 167, 172, 173, 177, 184, 210, 232, 239, 243, 275, 279, 281, 282, 283, 284, 285, 287, 289, 310, 315, 317, 320, 329, 335, 337], "volum": [0, 5, 10, 13, 15, 17, 18, 22, 25, 26, 28, 30, 33, 36, 41, 43, 44, 47, 49, 51, 52, 53, 54, 56, 57, 58, 59, 63, 64, 65, 71, 72, 73, 74, 82, 87, 92, 95, 100, 103, 104, 105, 127, 132, 137, 140, 142, 144, 148, 151, 152, 154, 156, 159, 162, 167, 169, 170, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 197, 198, 199, 200, 208, 213, 218, 221, 226, 229, 234, 239, 240, 241, 243, 245, 263, 267, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 315, 317, 319, 320, 321, 322, 324, 326, 328, 332, 335, 337, 338, 341, 348], "vol_idx": [0, 20, 21, 24, 26, 34, 40, 42, 43, 47, 53, 54, 58, 71, 146, 147, 150, 152, 160, 166, 168, 169, 173, 179, 180, 184, 197, 234, 243, 284, 289, 315, 320, 335], "requir": [0, 1, 2, 5, 14, 17, 28, 33, 42, 43, 48, 52, 54, 55, 56, 57, 58, 59, 65, 75, 76, 78, 80, 81, 85, 96, 99, 106, 107, 128, 129, 132, 141, 144, 154, 159, 168, 169, 174, 178, 180, 181, 182, 183, 184, 185, 191, 201, 202, 204, 206, 207, 211, 222, 225, 233, 234, 235, 236, 239, 243, 244, 245, 253, 255, 256, 257, 258, 260, 262, 264, 266, 267, 269, 275, 277, 281, 282, 283, 285, 289, 315, 320, 326, 333, 335, 337, 338, 339, 343], "order": [0, 1, 2, 5, 9, 17, 20, 21, 23, 27, 28, 37, 40, 42, 45, 47, 48, 51, 52, 55, 56, 57, 60, 61, 64, 65, 67, 71, 80, 94, 99, 107, 124, 125, 128, 129, 132, 136, 144, 146, 147, 149, 153, 154, 163, 166, 168, 171, 173, 174, 177, 178, 181, 182, 183, 186, 187, 190, 191, 193, 197, 206, 220, 225, 238, 239, 243, 244, 245, 252, 254, 261, 262, 264, 267, 270, 275, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 304, 305, 309, 317, 324, 327, 329, 331, 335, 337, 341, 342, 350, 351], "also": [0, 9, 11, 13, 14, 15, 17, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 68, 71, 72, 73, 74, 78, 80, 81, 82, 85, 86, 89, 92, 93, 94, 96, 97, 99, 100, 102, 103, 107, 109, 110, 121, 125, 136, 138, 140, 141, 142, 144, 148, 149, 150, 152, 153, 154, 155, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 194, 197, 198, 199, 200, 204, 206, 207, 208, 211, 212, 215, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 235, 239, 240, 242, 243, 244, 245, 247, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 279, 282, 284, 288, 289, 311, 315, 324, 344, 350, 351], "load": [0, 6, 7, 8, 9, 10, 11, 13, 15, 17, 23, 25, 26, 28, 29, 31, 32, 33, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 54, 56, 57, 58, 61, 62, 63, 66, 72, 75, 78, 79, 80, 81, 94, 96, 99, 133, 134, 135, 136, 137, 138, 140, 142, 144, 149, 151, 152, 154, 155, 157, 158, 159, 162, 163, 166, 167, 168, 170, 171, 173, 174, 175, 176, 178, 180, 182, 183, 184, 187, 188, 189, 192, 198, 201, 204, 205, 206, 207, 220, 222, 225, 229, 268, 274, 277, 278, 281, 282, 289, 311, 324, 329, 331, 335, 342], "save": [0, 9, 14, 17, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 37, 40, 41, 44, 45, 47, 48, 50, 53, 58, 59, 60, 62, 63, 67, 68, 71, 74, 75, 79, 81, 85, 86, 89, 92, 94, 96, 99, 100, 102, 109, 110, 136, 141, 144, 148, 149, 151, 152, 154, 155, 157, 159, 160, 162, 163, 166, 167, 170, 171, 173, 174, 176, 179, 184, 185, 186, 188, 189, 193, 194, 197, 200, 201, 205, 207, 211, 212, 215, 218, 220, 222, 225, 226, 228, 229, 232, 235, 236, 237, 239, 240, 242, 243, 244, 245, 249, 258, 260, 274, 275, 277, 278, 280, 281, 282, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 315, 317, 319, 321, 322, 326, 329, 330, 333, 335, 336, 337, 338, 340, 342], "load_tractogram": [0, 17, 71, 78, 79, 80, 81, 144, 197, 204, 205, 206, 207, 284, 290, 336], "save_tractogram": [0, 17, 68, 71, 144, 194, 197, 290], "trk": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 37, 68, 71, 75, 87, 94, 104, 105, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 194, 197, 201, 213, 220, 229, 234, 235, 236, 237, 278, 281, 289, 296, 311, 332, 335, 336, 338], "tck": [0, 17, 104, 105, 144, 281, 289, 311, 329, 335, 336, 337], "vtk": [0, 17, 106, 144, 233, 249, 290, 324, 326, 327, 328, 329, 333, 334, 337, 341, 343], "fib": [0, 17, 104, 105, 144, 281], "dpy": [0, 17, 104, 105, 144, 229, 274, 289, 290, 311, 326, 344], "refer": [0, 17, 18, 51, 55, 70, 98, 103, 110, 116, 121, 124, 127, 144, 177, 181, 196, 224, 233, 241, 249, 257, 265, 267, 272, 273, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 338, 348, 349, 351], "nifti": [0, 17, 31, 33, 36, 47, 92, 100, 144, 157, 159, 162, 173, 218, 226, 229, 232, 235, 243, 244, 275, 278, 281, 283, 286, 287, 289, 290, 293, 304, 305, 307, 309, 328, 330, 335, 344], "file": [0, 5, 9, 14, 28, 31, 33, 36, 37, 47, 51, 62, 64, 65, 71, 75, 87, 94, 100, 102, 104, 105, 106, 107, 109, 110, 120, 124, 125, 132, 136, 141, 154, 157, 159, 162, 163, 173, 177, 188, 190, 191, 197, 201, 213, 220, 226, 228, 229, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 249, 254, 257, 258, 266, 267, 268, 269, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344], "need": [0, 5, 7, 9, 11, 17, 18, 20, 22, 23, 26, 27, 28, 29, 37, 39, 40, 42, 44, 47, 51, 52, 53, 54, 55, 59, 60, 63, 64, 65, 66, 71, 72, 73, 74, 78, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 107, 109, 110, 112, 113, 119, 122, 125, 132, 134, 136, 138, 144, 146, 148, 149, 152, 153, 154, 155, 163, 165, 166, 168, 170, 173, 177, 178, 179, 180, 181, 185, 186, 189, 190, 191, 192, 197, 198, 199, 200, 204, 205, 206, 211, 212, 213, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 252, 254, 261, 262, 264, 266, 267, 269, 270, 272, 273, 275, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 301, 311, 317, 321, 322, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 342, 345, 347], "guarante": [0, 17, 52, 78, 144, 178, 204, 283], "proper": [0, 58, 184, 283, 289, 324], "spatial": [0, 1, 5, 13, 17, 26, 47, 49, 51, 58, 61, 71, 78, 94, 128, 132, 140, 144, 152, 173, 175, 177, 184, 187, 197, 204, 220, 232, 243, 249, 265, 277, 279, 281, 283, 287, 289, 331, 335, 342, 348], "handl": [0, 17, 24, 106, 110, 125, 144, 150, 232, 249, 252, 257, 272, 275, 277, 278, 281, 282, 288, 289, 325, 326, 327, 328, 329, 332, 333, 335, 336, 337, 338, 339, 342], "were": [0, 5, 18, 25, 28, 41, 49, 51, 54, 55, 56, 68, 71, 90, 94, 132, 151, 154, 167, 175, 177, 180, 181, 182, 194, 197, 216, 220, 229, 252, 256, 258, 260, 264, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 283, 287, 289, 331, 332], "modifi": [0, 17, 64, 65, 66, 81, 92, 94, 110, 144, 190, 191, 192, 207, 218, 220, 260, 261, 262, 266, 269, 277, 278, 283, 284, 289, 296, 332, 337, 338, 350], "enforc": [0, 42, 52, 57, 93, 109, 168, 178, 183, 219, 277, 278, 281, 283, 340], "affin": [0, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 50, 52, 53, 54, 56, 58, 59, 61, 62, 63, 66, 67, 68, 69, 71, 74, 75, 87, 90, 92, 94, 96, 97, 98, 99, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 179, 180, 182, 184, 185, 187, 188, 189, 192, 193, 194, 195, 197, 200, 201, 213, 216, 218, 220, 222, 223, 224, 225, 229, 231, 232, 234, 242, 244, 249, 277, 278, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 318, 324, 326, 328, 329, 330, 333, 334, 335, 337, 341], "uniform": [0, 23, 32, 149, 158, 275, 277, 283], "docstr": [0, 100, 102, 107, 226, 228, 289, 324, 325, 326, 327, 330, 331, 333, 334, 336, 338, 339, 341, 342, 351], "deform_streamlin": [0, 71, 197, 290, 341, 342], "select_by_roi": [0, 290], "orient_by_roi": [0, 290, 326, 329], "_extract_v": 0, "values_from_volum": [0, 290, 326], "util": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 37, 47, 51, 63, 75, 90, 92, 93, 94, 98, 125, 127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 173, 177, 189, 201, 216, 218, 219, 220, 224, 234, 243, 249, 255, 258, 266, 275, 277, 288, 290, 325, 326, 327, 329, 331, 333, 335, 336, 337, 341, 343], "density_map": [0, 17, 94, 144, 220, 290, 337], "connectivity_matrix": [0, 94, 220, 290, 329, 333, 336], "seeds_from_mask": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224, 290], "random_seeds_from_mask": [0, 290], "target": [0, 15, 28, 66, 67, 71, 75, 94, 124, 142, 154, 192, 193, 197, 201, 220, 236, 275, 282, 284, 286, 289, 290, 296, 326, 329, 333], "target_line_bas": [0, 290, 337], "near_roi": [0, 2, 129, 290, 341], "length": [0, 18, 51, 52, 67, 68, 78, 79, 80, 87, 90, 91, 96, 97, 177, 178, 193, 194, 204, 205, 206, 213, 216, 217, 222, 223, 229, 231, 275, 277, 278, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 311, 316, 318, 324, 326, 329, 333, 334, 341, 351], "path_length": [0, 92, 218, 290], "affine_for_trackvi": 0, "move_streamlin": 0, "flexi_tvis_affin": 0, "get_flexi_tvis_affin": [0, 342], "delet": [0, 50, 114, 124, 176, 233, 275, 277, 278, 281, 324, 328, 332, 333, 335], "life": [0, 4, 18, 131, 249, 270, 272, 277, 290, 325, 333, 334, 335, 336, 337, 338], "voxel2streamlin": [0, 290], "setup": [0, 124, 233, 265, 275, 290, 325, 326, 333, 343], "fit": [0, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 24, 26, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 71, 84, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 150, 152, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 197, 210, 232, 243, 247, 249, 251, 258, 260, 261, 267, 269, 270, 273, 275, 277, 280, 282, 283, 284, 287, 288, 289, 290, 304, 305, 307, 308, 309, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 337, 341, 342, 343], "fibermodel": [0, 5, 132, 290], "afq_profil": [0, 87, 213, 290, 340], "stat": [0, 39, 59, 87, 88, 109, 127, 165, 185, 213, 214, 249, 274, 275, 277, 283, 290, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "analysi": [0, 9, 10, 14, 15, 24, 26, 31, 34, 36, 37, 42, 45, 48, 49, 52, 53, 54, 61, 62, 68, 87, 88, 92, 103, 107, 123, 136, 137, 141, 142, 150, 152, 157, 160, 162, 163, 168, 171, 174, 175, 178, 179, 180, 187, 188, 194, 213, 214, 218, 232, 234, 235, 236, 237, 239, 242, 243, 245, 248, 249, 253, 256, 275, 277, 278, 279, 283, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 330, 335, 337, 342, 346], "similarli": [0, 51, 55, 57, 177, 181, 183, 256, 265, 266, 275, 278, 289, 292], "simul": [0, 29, 46, 52, 54, 60, 63, 84, 93, 155, 172, 178, 180, 186, 189, 210, 219, 252, 254, 270, 272, 274, 277, 278, 279, 283, 285, 324, 331, 338], "singletensor": [0, 335], "single_tensor": [0, 85, 211, 290, 326, 335], "multitensor": [0, 18, 54, 60, 83, 180, 186, 209, 252, 285], "multi_tensor": [0, 46, 54, 84, 86, 172, 180, 210, 212, 283, 290, 326], "sticksandbal": 0, "sticks_and_bal": [0, 283, 290], "voxel_s": [0, 10, 17, 33, 44, 50, 137, 144, 159, 170, 176, 281, 290, 335], "stremline_map": 0, "_util": [0, 290], "_mapping_to_voxel": 0, "peaksandmetricsdirectiongett": [0, 328, 335], "localtrack": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224, 290, 326, 335, 341], "particlefilteringtrack": [0, 10, 137, 290], "local": [0, 2, 8, 9, 10, 12, 18, 23, 24, 26, 28, 30, 37, 41, 47, 54, 58, 64, 72, 75, 87, 92, 103, 104, 105, 110, 118, 121, 124, 129, 135, 136, 137, 139, 149, 150, 152, 154, 156, 163, 167, 173, 180, 184, 190, 198, 201, 213, 218, 233, 236, 241, 243, 249, 252, 275, 278, 279, 280, 282, 283, 284, 285, 287, 289, 298, 299, 300, 301, 310, 313, 316, 318, 321, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 348], "local_track": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224, 290], "thei": [0, 10, 17, 25, 33, 34, 39, 42, 47, 55, 58, 61, 64, 66, 67, 68, 78, 79, 80, 81, 90, 94, 96, 100, 102, 107, 110, 121, 144, 151, 159, 160, 165, 168, 173, 181, 184, 187, 190, 192, 193, 194, 204, 205, 206, 207, 216, 220, 222, 226, 228, 231, 234, 235, 239, 243, 252, 256, 262, 265, 267, 270, 271, 275, 277, 278, 280, 283, 284, 287, 288, 289, 335, 346, 347], "tissue_classifi": 0, "stopping_criterion": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224, 287, 289, 322], "tissueclassifi": 0, "stoppingcriterion": [0, 287], "binarytissueclassifi": [0, 329, 330], "binarystoppingcriterion": [0, 15, 94, 142, 220], "thresholdtissueclassifi": 0, "thresholdstoppingcriterion": [0, 2, 7, 8, 9, 11, 12, 13, 14, 15, 37, 90, 92, 98, 129, 134, 135, 136, 138, 139, 140, 141, 142, 163, 216, 218, 224], "constrainedtissueclassifi": 0, "anatomicalstoppingcriterion": [0, 287], "acttissueclassifi": 0, "actstoppingcriterion": [0, 15, 142], "cmctissueclassifi": 0, "cmcstoppingcriterion": [0, 10, 137], "tissueclass": 0, "streamlinestatu": 0, "eudx": [0, 8, 9, 37, 94, 135, 136, 163, 220, 234, 241, 289, 321, 332, 333, 335, 338], "tractographi": [0, 2, 4, 5, 7, 8, 9, 17, 18, 33, 37, 42, 44, 52, 54, 66, 67, 68, 71, 76, 77, 80, 85, 87, 90, 92, 103, 104, 105, 129, 131, 132, 134, 135, 136, 144, 159, 163, 168, 170, 178, 180, 192, 193, 194, 197, 202, 203, 206, 211, 213, 216, 218, 229, 232, 234, 236, 243, 245, 246, 249, 274, 277, 281, 283, 284, 285, 287, 289, 322, 326, 328, 333, 334, 340, 342, 343], "perform": [0, 1, 2, 9, 17, 23, 24, 26, 28, 31, 34, 37, 39, 42, 46, 51, 53, 54, 57, 64, 66, 68, 70, 71, 72, 73, 75, 78, 80, 81, 82, 84, 85, 107, 128, 129, 136, 144, 149, 150, 152, 154, 157, 160, 163, 165, 168, 172, 177, 179, 180, 183, 190, 192, 194, 196, 197, 198, 199, 201, 204, 206, 207, 208, 210, 211, 234, 239, 240, 242, 243, 244, 245, 249, 253, 255, 259, 260, 263, 265, 271, 275, 277, 279, 281, 282, 283, 284, 285, 287, 289, 292, 306, 307, 308, 337, 341, 346], "trackvi": [0, 9, 17, 37, 94, 136, 144, 163, 220, 229, 278, 281, 290, 328, 330, 335, 338, 344], "extern": [0, 41, 53, 102, 167, 179, 228, 288, 289, 326, 335, 344], "quickbund": [0, 335], "peak": [0, 4, 5, 8, 9, 11, 14, 18, 20, 37, 40, 41, 50, 53, 58, 59, 94, 131, 132, 135, 136, 138, 141, 146, 163, 166, 167, 176, 179, 184, 185, 220, 234, 241, 243, 249, 274, 283, 285, 286, 289, 290, 304, 305, 321, 322, 326, 327, 328, 331, 332, 335, 336, 346], "welcom": [0, 107, 123], "viz": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 40, 41, 42, 46, 47, 48, 52, 53, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 168, 172, 173, 174, 178, 179, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 229, 274, 290, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 341, 343], "integr": [0, 9, 34, 37, 43, 45, 47, 62, 103, 107, 114, 136, 160, 163, 169, 171, 173, 188, 232, 245, 249, 272, 282, 283, 328, 329, 334, 343, 346], "variou": [0, 4, 5, 10, 18, 51, 131, 132, 137, 177, 265, 277, 278, 282, 283, 287, 326, 346, 347], "analys": [0, 24, 150, 279], "adjust": [0, 25, 28, 54, 96, 99, 151, 154, 180, 222, 225, 275, 279, 283, 284, 289, 298, 326, 330, 333], "slr": [0, 66, 67, 68, 75, 192, 193, 194, 201, 236, 244, 249, 275, 284, 289, 318, 325, 329, 330, 333, 336, 341], "recobundl": [0, 18, 77, 127, 203, 241, 249, 290, 327, 328, 329, 330, 336, 337, 338, 340], "algorithm": [0, 2, 5, 9, 10, 18, 24, 25, 28, 30, 32, 33, 37, 38, 42, 46, 47, 48, 49, 51, 54, 58, 59, 67, 68, 71, 72, 73, 78, 80, 81, 82, 84, 93, 129, 132, 136, 150, 151, 154, 156, 158, 159, 163, 164, 168, 172, 173, 174, 175, 177, 180, 184, 185, 193, 194, 197, 198, 199, 204, 206, 207, 208, 210, 219, 232, 234, 239, 244, 249, 250, 274, 275, 277, 279, 282, 283, 284, 287, 288, 289, 292, 298, 300, 301, 335, 336, 342, 343, 344], "exclud": [0, 15, 34, 43, 49, 63, 90, 94, 119, 142, 160, 169, 175, 189, 216, 220, 260, 265, 283, 338], "insid": [0, 6, 36, 52, 80, 107, 133, 162, 178, 206, 260, 263, 269, 270, 275, 279, 283, 284, 287, 289, 321, 322, 331], "note": [0, 1, 5, 18, 28, 38, 39, 41, 42, 43, 47, 52, 53, 54, 55, 57, 65, 68, 70, 71, 73, 78, 79, 92, 100, 102, 107, 109, 110, 119, 120, 121, 124, 127, 128, 132, 154, 164, 165, 167, 168, 169, 173, 178, 179, 180, 181, 183, 191, 194, 196, 197, 199, 204, 205, 218, 226, 228, 235, 237, 239, 240, 243, 255, 261, 267, 282, 290, 296, 310, 344, 346, 347, 348], "nose": [0, 230, 249, 329, 341], "pytest": [0, 123, 124, 233, 249, 277, 283, 284, 287, 329, 330, 338, 341], "load_tck": [0, 17, 144, 290], "save_tck": [0, 290], "highli": [0, 31, 34, 42, 54, 78, 157, 160, 168, 180, 204, 233, 239, 242, 289, 296], "manag": [0, 93, 99, 219, 225, 233, 249, 252, 258, 260, 261, 274, 328, 333, 341], "tabl": [0, 1, 2, 5, 18, 25, 29, 52, 53, 55, 56, 57, 63, 64, 99, 104, 128, 129, 132, 151, 155, 178, 179, 181, 182, 183, 189, 190, 225, 233, 249, 252, 257, 273, 274, 277, 278, 279, 281, 283, 285, 287, 289, 309, 327, 329, 331, 333, 337, 338, 342], "b0_thresold": 0, "50": [0, 5, 18, 20, 21, 24, 28, 40, 41, 46, 47, 48, 49, 50, 51, 52, 58, 59, 60, 63, 66, 70, 72, 84, 85, 86, 92, 93, 98, 132, 146, 147, 150, 154, 166, 167, 172, 173, 174, 175, 176, 177, 178, 184, 185, 186, 189, 192, 196, 198, 210, 211, 212, 218, 219, 224, 234, 249, 250, 260, 273, 275, 277, 279, 283, 284, 285, 289, 331], "impact": [0, 7, 42, 54, 78, 85, 134, 168, 180, 204, 211, 243, 260, 279, 283, 284, 285, 289, 300], "your": [0, 9, 20, 21, 27, 29, 31, 33, 36, 37, 40, 45, 47, 62, 63, 78, 79, 87, 100, 102, 107, 108, 109, 114, 117, 118, 119, 120, 123, 124, 125, 126, 136, 146, 147, 153, 155, 157, 159, 162, 163, 166, 171, 173, 188, 189, 204, 205, 213, 226, 228, 229, 232, 233, 235, 236, 239, 240, 242, 243, 244, 245, 246, 248, 249, 252, 277, 278, 279, 283, 284, 326, 344, 345], "want": [0, 29, 33, 34, 44, 53, 63, 64, 65, 66, 67, 72, 73, 78, 79, 80, 87, 89, 90, 92, 93, 94, 96, 97, 99, 100, 104, 109, 112, 114, 120, 121, 123, 124, 125, 126, 155, 159, 160, 170, 179, 189, 190, 191, 192, 193, 198, 199, 204, 205, 206, 213, 215, 216, 218, 219, 220, 222, 223, 225, 226, 229, 230, 233, 235, 239, 240, 242, 246, 248, 251, 252, 257, 275, 277, 281, 282, 283, 284, 288, 289, 313, 316, 317, 324, 345, 347], "assur": [0, 9, 34, 37, 89, 136, 160, 163, 215, 281], "code": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 106, 109, 110, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 246, 249, 252, 254, 255, 256, 259, 260, 262, 263, 264, 266, 268, 271, 277, 281, 284, 289, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344], "run": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 108, 109, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 259, 266, 267, 268, 269, 270, 274, 275, 277, 282, 283, 284, 287, 289, 290, 322, 324, 325, 326, 329, 333, 335, 340, 342, 344, 346, 351], "exactli": [0, 7, 9, 37, 68, 107, 134, 136, 163, 194, 230, 252, 258, 262, 266, 267, 269, 275, 277, 281, 282, 283, 284, 333], "manner": [0, 41, 167, 244, 278, 287, 289], "befor": [0, 5, 9, 10, 25, 27, 31, 34, 37, 40, 42, 43, 54, 58, 64, 66, 67, 68, 70, 71, 72, 75, 76, 80, 82, 88, 107, 110, 124, 132, 136, 151, 153, 157, 160, 163, 166, 168, 169, 180, 184, 190, 192, 193, 194, 196, 197, 198, 201, 202, 206, 208, 214, 231, 233, 236, 237, 239, 240, 242, 252, 253, 255, 260, 264, 265, 266, 275, 277, 281, 282, 283, 284, 285, 286, 287, 289, 322, 328, 330, 331, 332, 333, 335, 341, 342], "pleas": [0, 20, 21, 24, 25, 27, 28, 32, 49, 56, 57, 90, 92, 96, 98, 103, 107, 108, 113, 120, 123, 125, 126, 146, 147, 150, 151, 153, 154, 158, 175, 182, 183, 216, 218, 222, 224, 233, 234, 235, 236, 237, 274, 277, 278, 279, 281, 283, 287, 289, 303, 330, 333], "initi": [0, 1, 5, 6, 9, 13, 14, 21, 37, 39, 43, 49, 51, 52, 55, 58, 59, 60, 63, 64, 65, 67, 81, 93, 96, 98, 99, 109, 112, 128, 132, 133, 136, 140, 141, 147, 163, 165, 169, 175, 177, 178, 181, 184, 185, 186, 189, 190, 191, 193, 207, 219, 222, 224, 225, 233, 235, 252, 257, 264, 265, 275, 277, 279, 280, 282, 283, 284, 285, 287, 289, 324, 331, 334, 337, 341], "keyword": [0, 5, 107, 132, 275, 277, 281, 282, 283, 285, 286, 288], "b0_threshold": [0, 28, 51, 154, 177, 243, 277, 279, 283, 289, 297, 298, 301, 304, 305, 306, 307, 308, 309, 312, 329], "fvtk": [0, 249, 324, 325, 326, 328, 329, 331, 332, 333], "impli": [0, 23, 31, 89, 119, 149, 157, 215, 242, 275, 277, 278, 283, 284, 285, 289, 291, 333, 351], "actor": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 63, 67, 71, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 189, 193, 197, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 229, 324, 328, 329, 337], "ren": [0, 99, 225, 326, 329], "ui": [0, 96, 99, 222, 225, 326, 327, 328, 329], "element": [0, 2, 32, 39, 41, 42, 47, 51, 56, 57, 58, 67, 79, 85, 99, 129, 158, 165, 167, 168, 173, 177, 182, 183, 184, 193, 205, 211, 225, 243, 260, 262, 264, 265, 266, 267, 270, 272, 275, 277, 279, 281, 283, 284, 285, 287, 289, 307, 326, 329], "To": [0, 9, 13, 14, 17, 23, 24, 25, 26, 36, 37, 42, 51, 53, 55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 72, 73, 80, 81, 85, 86, 87, 89, 94, 104, 109, 110, 125, 136, 140, 141, 144, 149, 150, 151, 152, 162, 163, 168, 177, 179, 181, 183, 184, 185, 186, 189, 190, 192, 193, 194, 198, 199, 206, 207, 211, 212, 213, 215, 220, 233, 236, 239, 240, 242, 243, 244, 245, 252, 267, 269, 275, 277, 278, 281, 282, 283, 284, 285, 287, 289, 303], "learn": [0, 28, 36, 39, 48, 51, 116, 117, 123, 154, 162, 165, 174, 177, 232, 238, 246, 249, 251, 252, 253, 260, 261, 265, 269, 278, 279, 282, 283, 289, 290, 301, 330, 339], "go": [0, 5, 9, 15, 36, 37, 42, 47, 51, 54, 64, 71, 78, 87, 96, 99, 100, 102, 109, 110, 113, 119, 120, 121, 123, 124, 132, 136, 142, 162, 163, 168, 173, 177, 180, 190, 197, 204, 213, 222, 225, 226, 228, 229, 230, 233, 235, 251, 252, 254, 258, 260, 261, 265, 270, 277, 282, 284, 287, 326, 328, 335], "http": [0, 13, 24, 26, 42, 52, 54, 56, 57, 58, 68, 80, 96, 103, 104, 105, 110, 113, 124, 125, 140, 150, 152, 168, 178, 180, 182, 183, 184, 194, 206, 222, 229, 230, 233, 235, 236, 237, 240, 252, 274, 275, 277, 278, 279, 281, 282, 283, 287, 289, 298, 310, 338], "gl": 0, "furthermor": [0, 229], "load_trk": [0, 5, 17, 68, 75, 76, 87, 88, 132, 144, 194, 201, 202, 213, 214, 290, 337], "save_trk": [0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 75, 94, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 201, 220, 290], "object": [0, 5, 9, 14, 17, 20, 25, 29, 36, 37, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 72, 73, 78, 80, 81, 94, 96, 97, 98, 99, 100, 102, 107, 109, 110, 125, 132, 136, 141, 144, 146, 151, 155, 162, 163, 166, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 187, 188, 189, 190, 198, 199, 204, 206, 207, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 249, 260, 265, 268, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 311, 326, 327, 329, 336, 337, 338, 342], "much": [0, 39, 51, 57, 64, 68, 90, 107, 108, 110, 125, 165, 177, 183, 190, 194, 216, 252, 275, 277, 281, 282, 283, 284, 287, 325], "less": [0, 23, 31, 44, 55, 58, 78, 92, 93, 107, 149, 157, 170, 181, 184, 204, 218, 219, 229, 231, 249, 253, 256, 263, 271, 275, 277, 278, 280, 283, 284, 287, 288, 289, 311, 316, 318, 325, 341, 342], "easier": [0, 46, 84, 94, 108, 110, 172, 210, 220, 234, 247, 269, 277, 283, 285, 289], "No": [0, 17, 18, 62, 107, 144, 188, 233, 257, 258, 267, 273, 277, 278, 283, 285, 289, 304, 305, 306, 308, 326, 327, 336, 343], "major": [0, 125, 230, 254, 257, 262, 266, 270, 275, 277, 283, 285, 331], "support": [0, 17, 33, 58, 90, 123, 125, 127, 144, 159, 184, 216, 229, 234, 249, 275, 277, 281, 282, 283, 284, 287, 288, 324, 326, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 341, 343], "It": [0, 1, 8, 10, 17, 22, 25, 29, 32, 34, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 59, 67, 68, 72, 74, 75, 76, 78, 79, 81, 89, 94, 97, 99, 100, 102, 109, 110, 116, 119, 120, 125, 128, 135, 137, 144, 148, 151, 155, 158, 160, 166, 167, 168, 173, 176, 177, 178, 179, 180, 181, 185, 193, 194, 198, 200, 201, 202, 204, 205, 207, 215, 220, 223, 225, 226, 228, 229, 230, 235, 244, 245, 249, 252, 253, 255, 257, 260, 265, 269, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 293, 296, 300, 301], "year": [0, 124, 251, 252, 330, 333], "multipl": [0, 18, 24, 32, 34, 39, 40, 41, 42, 45, 47, 49, 51, 55, 58, 62, 70, 99, 100, 102, 104, 105, 107, 150, 158, 160, 165, 166, 167, 168, 171, 173, 175, 177, 181, 184, 188, 196, 225, 226, 228, 229, 232, 234, 239, 240, 242, 243, 244, 245, 249, 257, 258, 265, 267, 268, 270, 272, 273, 275, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 315, 317, 319, 321, 322, 325, 328, 333, 337, 338, 342, 346], "As": [0, 5, 8, 10, 26, 33, 39, 42, 43, 49, 51, 52, 53, 54, 55, 56, 60, 67, 71, 73, 75, 107, 125, 132, 135, 152, 159, 165, 168, 169, 175, 177, 178, 179, 180, 181, 182, 186, 193, 197, 199, 201, 232, 239, 240, 242, 243, 245, 251, 252, 253, 256, 259, 261, 263, 265, 271, 272, 275, 283, 287], "far": [0, 52, 64, 87, 124, 178, 190, 213, 265], "know": [0, 5, 17, 32, 34, 64, 110, 123, 126, 132, 144, 158, 160, 190, 231, 233, 246, 247, 251, 252, 275, 277, 283, 284, 288, 338], "work": [0, 22, 28, 32, 34, 49, 51, 53, 58, 60, 64, 65, 71, 74, 75, 94, 100, 102, 107, 110, 116, 117, 120, 122, 123, 124, 125, 127, 148, 154, 158, 160, 175, 177, 179, 184, 186, 190, 191, 197, 200, 201, 220, 226, 228, 230, 233, 239, 243, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 271, 272, 277, 282, 283, 287, 289, 309, 324, 325, 326, 329, 331, 333, 335, 336, 337, 341, 342], "well": [0, 5, 11, 22, 23, 34, 42, 43, 53, 54, 55, 58, 59, 60, 66, 67, 71, 74, 87, 107, 109, 110, 116, 132, 138, 148, 149, 160, 168, 169, 179, 180, 181, 184, 185, 186, 192, 193, 197, 200, 213, 229, 233, 239, 243, 245, 252, 253, 255, 260, 262, 263, 265, 266, 268, 270, 271, 275, 277, 283, 285, 329, 350], "longer": [0, 119, 229, 275, 287, 334], "test": [0, 39, 47, 55, 63, 65, 92, 104, 105, 107, 108, 109, 110, 120, 123, 124, 125, 165, 173, 181, 189, 191, 218, 235, 252, 254, 257, 260, 261, 263, 265, 266, 271, 274, 277, 278, 282, 283, 284, 288, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344], "upgrad": [0, 329, 330, 336], "newer": [0, 233, 326, 328, 329], "probabilistic_direction_gett": 0, "probabilisticdirectiongett": [0, 2, 10, 11, 13, 129, 137, 138, 140, 287], "input": [0, 2, 7, 9, 17, 20, 23, 25, 26, 32, 37, 40, 53, 60, 63, 64, 66, 67, 70, 72, 75, 79, 80, 82, 92, 96, 97, 100, 102, 129, 134, 136, 144, 146, 149, 151, 152, 158, 163, 166, 179, 186, 189, 190, 192, 193, 196, 198, 201, 205, 206, 208, 218, 222, 223, 226, 228, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 252, 255, 256, 259, 264, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 315, 317, 319, 320, 321, 322, 324, 325, 326, 329, 332, 333, 335, 338, 340, 341, 346, 347], "pmf_threshold": [0, 245, 289, 321, 322], "probabl": [0, 1, 8, 10, 11, 45, 52, 55, 62, 64, 82, 120, 128, 135, 137, 138, 171, 178, 181, 188, 190, 208, 233, 243, 245, 264, 275, 282, 283, 284, 285, 287, 348], "lower": [0, 2, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 36, 37, 41, 42, 43, 45, 48, 49, 51, 54, 55, 58, 62, 65, 68, 73, 74, 125, 129, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 162, 163, 167, 168, 169, 171, 174, 175, 177, 180, 181, 184, 188, 191, 194, 199, 200, 229, 237, 275, 277, 281, 282, 283, 284, 289, 296, 309, 314], "mass": [0, 11, 64, 65, 138, 190, 191, 244, 245, 275, 287, 289, 291], "dki": [0, 18, 26, 43, 54, 83, 152, 169, 180, 209, 232, 241, 249, 257, 261, 266, 267, 273, 285, 289, 290, 306, 324, 325, 326, 328, 329, 335, 336, 337, 339, 340, 341, 342, 343, 344], "model": [0, 1, 2, 4, 5, 8, 9, 10, 11, 12, 15, 18, 20, 21, 22, 24, 26, 27, 28, 34, 36, 37, 38, 40, 41, 44, 45, 50, 51, 53, 54, 55, 56, 57, 62, 63, 74, 75, 76, 82, 85, 87, 88, 90, 92, 94, 103, 104, 105, 120, 128, 129, 131, 132, 135, 136, 137, 138, 139, 142, 146, 147, 148, 150, 152, 153, 154, 160, 162, 163, 164, 166, 167, 170, 171, 176, 177, 179, 180, 181, 182, 183, 188, 189, 200, 201, 202, 208, 211, 213, 214, 216, 218, 220, 232, 234, 235, 236, 243, 245, 249, 252, 253, 255, 257, 259, 260, 261, 262, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 301, 309, 313, 316, 318, 326, 327, 328, 330, 331, 332, 333, 335, 337, 338, 341, 342], "wl": [0, 18, 63, 189, 273, 283, 289, 306, 307], "max_kurtosi": [0, 283], "axial_kurtosi": [0, 290], "mean_kurtosi": [0, 290], "radial_kuroti": 0, "prefer": [0, 18, 67, 68, 75, 99, 110, 125, 193, 194, 201, 225, 229, 235, 258, 273, 284, 324, 330, 341], "rather": [0, 63, 65, 70, 119, 121, 124, 189, 191, 196, 230, 233, 255, 264, 265, 266, 277, 283, 284, 324, 328], "widget": [0, 96, 222, 326], "slicer": [0, 2, 5, 13, 14, 71, 94, 96, 99, 129, 132, 140, 141, 197, 220, 222, 225, 288, 326, 327, 328, 329, 332, 337], "power": [0, 18, 51, 53, 104, 105, 177, 179, 240, 249, 273, 278, 283, 287, 324, 326], "rgb": [0, 47, 97, 173, 223, 234, 235, 281, 283, 289, 306, 307, 332], "too": [0, 42, 72, 78, 168, 198, 204, 233, 252, 260, 280, 289, 325, 335], "see": [0, 2, 5, 13, 14, 15, 17, 18, 20, 23, 24, 25, 26, 28, 34, 36, 39, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 59, 60, 61, 64, 67, 68, 72, 73, 78, 79, 80, 81, 93, 94, 96, 97, 99, 100, 102, 108, 110, 113, 115, 116, 120, 121, 123, 124, 125, 129, 132, 140, 141, 142, 144, 146, 149, 150, 151, 152, 154, 160, 162, 165, 168, 169, 170, 173, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 193, 194, 198, 199, 204, 205, 206, 207, 219, 220, 222, 223, 225, 226, 228, 230, 231, 232, 233, 234, 235, 239, 240, 247, 249, 250, 256, 258, 260, 263, 264, 265, 267, 268, 273, 275, 279, 282, 284, 286, 289, 303, 310, 346, 351], "tutori": [0, 7, 13, 18, 22, 38, 40, 42, 44, 45, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 73, 74, 75, 76, 79, 80, 88, 90, 92, 96, 98, 118, 134, 140, 148, 164, 166, 168, 170, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 194, 199, 200, 201, 202, 205, 206, 214, 216, 218, 222, 224, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 249, 250, 253, 260, 265, 267, 269, 272, 277, 324, 325, 327, 328, 329, 330, 331, 333, 335, 336, 337, 339, 340, 341, 342], "viz_slic": [0, 99, 225], "py": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 107, 120, 124, 125, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 233, 248, 254, 257, 258, 266, 267, 269, 270, 277, 283, 284, 287, 289, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "behavior": [0, 99, 125, 225, 275, 282, 283, 289, 328, 329, 335], "interp_rbf": [0, 326, 332], "addit": [0, 1, 26, 42, 49, 53, 57, 66, 96, 107, 128, 152, 168, 175, 179, 183, 192, 222, 229, 239, 243, 250, 265, 275, 278, 281, 282, 283, 286, 289, 326, 331, 335, 344, 345], "norm": [0, 1, 28, 41, 52, 53, 58, 80, 107, 128, 154, 167, 178, 179, 184, 206, 231, 275, 277, 289, 290, 297, 298, 304, 307, 309, 312, 332], "angl": [0, 2, 8, 9, 18, 20, 37, 38, 46, 52, 54, 56, 57, 60, 80, 84, 85, 86, 129, 135, 136, 146, 163, 164, 172, 178, 180, 182, 183, 186, 206, 210, 211, 212, 230, 231, 234, 241, 245, 255, 266, 277, 278, 283, 285, 287, 288, 289, 304, 321, 322, 332, 341, 342, 351], "euclidean_norm": 0, "discourag": [0, 326], "11": [0, 5, 43, 53, 75, 76, 81, 87, 88, 94, 103, 132, 169, 179, 201, 202, 207, 213, 214, 220, 232, 233, 249, 250, 252, 275, 277, 278, 283, 286, 287, 324, 326, 331, 334, 335, 336, 338, 339, 340, 342, 344], "vector_field": [0, 326], "warp_2d_affin": 0, "transform_2d_affin": 0, "warp_2d_affine_nn": 0, "transform_2d_affine_nn": 0, "warp_3d_affin": 0, "transform_3d_affin": 0, "warp_3d_affine_nn": 0, "transform_3d_affine_nn": 0, "gqi": [0, 18, 50, 176, 229, 273, 278, 290, 331, 344, 348], "calcul": [0, 2, 5, 7, 9, 18, 20, 21, 24, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 63, 87, 89, 91, 93, 129, 132, 134, 136, 146, 147, 150, 163, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 189, 213, 215, 217, 219, 232, 234, 235, 243, 264, 265, 267, 270, 275, 277, 279, 280, 281, 283, 284, 285, 286, 287, 289, 291, 298, 305, 310, 317, 324, 329, 331, 332, 333, 337, 344, 346, 347], "gqi2": [0, 18, 273, 283, 334], "match": [0, 18, 27, 30, 58, 66, 68, 71, 75, 124, 153, 156, 184, 192, 194, 197, 201, 237, 244, 245, 256, 262, 264, 266, 267, 270, 275, 277, 278, 279, 281, 282, 283, 284, 289, 296, 316, 343], "either": [0, 5, 9, 14, 15, 28, 37, 52, 53, 58, 64, 68, 78, 87, 94, 107, 119, 132, 136, 141, 142, 154, 163, 178, 179, 184, 190, 194, 204, 213, 220, 237, 257, 268, 275, 277, 278, 279, 281, 283, 285, 287, 289, 298, 299, 309, 326], "doc": [0, 57, 107, 108, 124, 125, 183, 233, 248, 252, 277, 281, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "therein": 0, "access": [0, 17, 23, 36, 51, 53, 56, 96, 99, 113, 119, 120, 124, 144, 149, 162, 177, 179, 182, 222, 225, 233, 256, 265, 268, 272, 277, 278, 279, 283, 289, 310, 327, 336], "complet": [0, 9, 13, 36, 37, 52, 57, 68, 81, 90, 92, 98, 119, 124, 136, 140, 162, 163, 178, 183, 194, 207, 216, 218, 224, 233, 234, 235, 237, 245, 252, 257, 259, 261, 264, 265, 275, 283, 326, 331, 332, 341], "resampl": [0, 33, 64, 65, 67, 68, 73, 79, 80, 81, 99, 159, 190, 191, 193, 194, 199, 205, 206, 207, 225, 229, 243, 274, 283, 284, 286, 287, 289, 290, 317, 324, 326, 333, 344], "aniso2iso": [0, 229, 324, 326], "reslic": [0, 18, 30, 44, 50, 71, 156, 170, 176, 197, 263, 289, 290, 317, 324, 326, 333, 341, 344], "peaks_from_model": [0, 2, 9, 11, 12, 14, 20, 21, 37, 40, 41, 50, 53, 58, 59, 90, 92, 94, 98, 129, 136, 138, 139, 141, 146, 147, 163, 166, 167, 176, 179, 184, 185, 216, 218, 220, 224, 290, 326, 331, 332, 333, 335, 341], "like": [0, 11, 17, 32, 36, 39, 41, 51, 58, 59, 62, 64, 65, 67, 68, 73, 75, 81, 96, 99, 100, 102, 104, 105, 108, 109, 110, 111, 119, 121, 124, 125, 138, 144, 158, 162, 165, 167, 177, 184, 185, 188, 190, 191, 193, 194, 199, 201, 207, 222, 225, 226, 228, 229, 230, 232, 233, 235, 244, 245, 252, 268, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 315, 324, 335, 340, 342], "odf": [0, 1, 2, 7, 9, 11, 12, 13, 20, 21, 37, 40, 41, 44, 46, 47, 48, 50, 52, 53, 55, 58, 59, 60, 61, 63, 84, 86, 128, 129, 134, 136, 138, 139, 140, 146, 147, 163, 166, 167, 170, 172, 173, 174, 176, 178, 179, 181, 184, 185, 186, 187, 189, 210, 212, 243, 249, 280, 282, 285, 288, 289, 290, 304, 305, 321, 322, 325, 326, 331, 332, 333, 337, 339, 344, 350], "take": [0, 1, 2, 11, 13, 14, 23, 25, 28, 41, 42, 44, 49, 51, 53, 55, 57, 58, 59, 63, 64, 67, 71, 78, 79, 80, 94, 110, 120, 123, 128, 129, 138, 140, 141, 149, 151, 154, 167, 168, 170, 175, 177, 179, 181, 183, 184, 185, 189, 190, 193, 197, 204, 205, 206, 220, 229, 233, 235, 251, 252, 254, 260, 262, 264, 266, 267, 268, 269, 270, 275, 277, 278, 279, 282, 283, 286, 287, 289, 298, 299, 328, 331, 338, 339, 350], "size": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 23, 26, 27, 28, 29, 33, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 70, 71, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 103, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 152, 153, 154, 155, 159, 162, 163, 166, 167, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 193, 196, 197, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 229, 234, 259, 260, 265, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 300, 311, 315, 317, 321, 322, 328, 329, 333, 335, 337, 342], "arrai": [0, 15, 23, 25, 27, 28, 29, 32, 34, 36, 41, 42, 44, 46, 47, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 71, 73, 79, 80, 81, 84, 85, 86, 88, 93, 94, 107, 108, 109, 142, 149, 151, 153, 154, 155, 158, 160, 162, 167, 168, 170, 172, 173, 177, 178, 179, 180, 181, 182, 184, 185, 186, 191, 197, 199, 205, 206, 207, 210, 211, 212, 214, 219, 220, 252, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 310, 315, 317, 324, 325, 326, 327, 328, 329, 333, 335, 336, 337, 340, 341, 342, 346, 347], "updat": [0, 29, 58, 60, 96, 109, 114, 118, 124, 155, 184, 186, 222, 232, 249, 255, 265, 275, 277, 281, 282, 283, 284, 289, 290, 292, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 350], "similar": [0, 18, 20, 32, 40, 42, 44, 52, 54, 55, 57, 64, 65, 67, 72, 73, 75, 76, 82, 87, 90, 91, 93, 113, 124, 146, 158, 166, 168, 170, 178, 180, 181, 183, 190, 191, 193, 198, 199, 201, 202, 208, 213, 216, 217, 219, 241, 249, 252, 255, 261, 264, 267, 270, 271, 273, 275, 277, 278, 279, 283, 284, 286, 287, 289, 291, 301, 316, 318, 333, 335, 350], "nib": [0, 17, 25, 26, 33, 48, 49, 71, 107, 144, 151, 152, 159, 174, 175, 197, 275, 281], "anat": 0, "voxel_dim": 0, "header": [0, 17, 36, 71, 87, 144, 162, 197, 213, 281, 289, 311, 326, 335, 338, 340, 346, 347], "pixdim": 0, "someth": [0, 39, 52, 55, 108, 109, 110, 120, 121, 124, 125, 165, 178, 181, 233, 234, 251, 266, 268, 277, 281, 283, 285, 287, 288, 289, 311, 315], "click": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 110, 113, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 239, 240, 252, 328], "download": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 115, 124, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 234, 235, 236, 237, 241, 249, 250, 277, 278, 289, 303, 326, 328, 329, 332, 333, 334, 341, 342], "full": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 123, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 244, 273, 275, 277, 278, 281, 283, 287, 289, 291, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350], "exampl": [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 105, 107, 109, 110, 119, 120, 123, 124, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 243, 244, 246, 249, 250, 260, 267, 279, 280, 284, 289, 292, 298, 299, 305, 310, 311, 315, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 343, 344], "demo": [1, 2, 31, 128, 129, 157], "present": [1, 2, 17, 41, 42, 47, 54, 99, 124, 128, 129, 144, 167, 168, 173, 180, 225, 233, 248, 255, 264, 269, 282, 283, 336, 341], "fod": [1, 2, 8, 11, 12, 128, 129, 135, 138, 139, 278, 283, 325, 327, 335], "field": [1, 9, 17, 37, 51, 53, 63, 68, 71, 82, 124, 128, 136, 144, 163, 177, 179, 189, 194, 197, 208, 229, 243, 244, 245, 251, 275, 277, 278, 282, 284, 285, 287, 288, 289, 292, 293, 308, 325, 326, 331, 346, 347], "meesters2016": [1, 2, 128, 129], "implement": [1, 2, 5, 15, 24, 29, 39, 48, 49, 52, 53, 58, 60, 63, 64, 65, 71, 72, 73, 80, 100, 109, 110, 128, 129, 132, 142, 150, 155, 165, 174, 175, 178, 179, 184, 186, 189, 190, 191, 197, 198, 199, 206, 226, 231, 244, 249, 251, 252, 253, 255, 257, 258, 259, 260, 262, 264, 265, 266, 267, 269, 270, 271, 272, 275, 277, 279, 281, 283, 287, 289, 326, 329, 330, 331, 333, 334, 335, 336, 341, 343, 344, 350], "pde": [1, 2, 128, 129], "framework": [1, 28, 32, 48, 51, 52, 55, 56, 57, 61, 66, 75, 78, 79, 82, 88, 89, 127, 128, 154, 158, 174, 177, 178, 181, 182, 183, 187, 192, 201, 204, 205, 208, 214, 215, 241, 249, 279, 283, 284, 285, 286, 288, 289, 295, 311, 316, 327, 328, 329, 330, 333, 335, 337, 350], "portegies2015a": [1, 128], "hardi": [1, 2, 5, 9, 14, 18, 37, 53, 59, 61, 64, 65, 71, 73, 104, 105, 128, 129, 132, 136, 141, 163, 179, 185, 187, 190, 191, 197, 199, 250, 273, 278, 279, 283, 289, 350], "aim": [1, 107, 128, 244, 247, 283], "elong": [1, 128], "structur": [1, 5, 9, 18, 24, 26, 28, 34, 37, 47, 55, 65, 71, 77, 94, 96, 100, 102, 104, 105, 128, 132, 136, 150, 152, 154, 160, 163, 173, 181, 191, 197, 203, 220, 222, 226, 228, 232, 235, 236, 237, 241, 243, 245, 263, 265, 268, 271, 278, 279, 283, 284, 287, 334, 341], "junction": [1, 128], "maintain": [1, 17, 41, 110, 114, 118, 125, 128, 144, 167, 234, 262], "while": [1, 17, 23, 24, 26, 39, 47, 49, 51, 54, 57, 58, 60, 85, 110, 111, 125, 128, 144, 149, 150, 152, 165, 173, 175, 177, 180, 183, 184, 186, 211, 237, 243, 251, 252, 254, 255, 256, 258, 260, 262, 264, 266, 269, 270, 272, 275, 277, 282, 283, 284, 286, 287, 289, 325, 326, 328, 340, 350], "reduc": [1, 10, 15, 17, 31, 52, 55, 66, 75, 93, 94, 103, 107, 110, 122, 128, 137, 142, 144, 157, 178, 181, 192, 201, 219, 220, 230, 233, 245, 249, 256, 260, 275, 277, 278, 283, 284, 287, 289, 315, 316, 322, 326, 332, 333, 337], "nois": [1, 11, 13, 18, 23, 27, 28, 30, 34, 42, 54, 57, 58, 63, 85, 86, 128, 138, 140, 149, 153, 154, 156, 160, 168, 180, 183, 184, 189, 211, 212, 239, 249, 256, 259, 271, 278, 279, 282, 283, 285, 287, 289, 298, 299, 300, 306, 307, 319, 324, 327, 331, 333, 335, 340], "small": [1, 2, 5, 8, 11, 23, 33, 40, 41, 47, 48, 51, 55, 57, 58, 59, 63, 65, 67, 70, 78, 79, 80, 81, 94, 125, 128, 129, 132, 135, 138, 149, 159, 166, 167, 173, 174, 177, 181, 183, 184, 185, 189, 191, 193, 196, 204, 205, 206, 207, 220, 243, 267, 274, 275, 277, 278, 279, 283, 284, 287, 288, 289, 309, 311, 316, 318, 324, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342], "incoher": [1, 18, 38, 128, 164, 241, 283, 289, 308], "achiev": [1, 23, 53, 56, 65, 67, 78, 82, 110, 128, 149, 179, 182, 191, 193, 204, 208, 244, 255, 256, 258, 260, 263, 265, 271], "hypo": [1, 128], "ellipt": [1, 128, 283], "2nd": [1, 128, 234, 252], "domain": [1, 2, 5, 72, 73, 80, 128, 129, 132, 198, 199, 206, 275, 289, 336], "coupl": [1, 39, 72, 128, 165, 198, 251, 252, 255, 259, 263, 289, 333, 337], "posit": [1, 2, 5, 10, 11, 15, 18, 38, 40, 47, 52, 54, 55, 61, 75, 76, 78, 88, 93, 94, 96, 97, 99, 128, 129, 132, 137, 138, 142, 164, 166, 173, 178, 180, 181, 187, 201, 202, 204, 214, 219, 220, 222, 223, 225, 229, 236, 237, 243, 249, 275, 277, 282, 283, 285, 286, 287, 288, 289, 323, 328, 329, 333, 341, 342], "mathbb": [1, 28, 56, 57, 67, 128, 154, 182, 183, 193, 277, 283], "r": [1, 2, 10, 13, 15, 24, 26, 28, 34, 39, 42, 43, 49, 54, 55, 58, 59, 63, 64, 65, 67, 70, 85, 90, 93, 98, 104, 105, 107, 110, 126, 128, 129, 137, 140, 142, 150, 152, 154, 160, 165, 168, 169, 175, 180, 181, 184, 185, 189, 190, 191, 193, 196, 211, 216, 219, 224, 230, 231, 243, 245, 265, 275, 277, 279, 280, 281, 283, 284, 285, 287, 288, 289, 292, 307, 310, 311, 322, 325, 326, 333, 346, 348, 350, 351], "3": [1, 2, 5, 9, 10, 15, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 40, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 67, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 88, 89, 92, 93, 94, 96, 99, 103, 104, 105, 107, 109, 122, 127, 128, 129, 132, 136, 137, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 162, 163, 166, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 193, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 214, 215, 218, 219, 220, 222, 225, 229, 230, 231, 233, 234, 243, 244, 249, 250, 252, 263, 264, 265, 266, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 293, 296, 298, 305, 306, 307, 311, 315, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350], "time": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 233, 235, 243, 251, 252, 254, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 289, 292, 301, 308, 327, 329, 331, 332, 333, 337, 346, 348], "2": [1, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 78, 80, 82, 84, 85, 86, 87, 90, 92, 93, 94, 96, 97, 98, 99, 103, 104, 105, 106, 109, 110, 122, 124, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 196, 197, 198, 199, 200, 204, 206, 208, 210, 211, 212, 213, 216, 218, 219, 220, 222, 223, 224, 225, 229, 230, 231, 233, 234, 239, 242, 243, 244, 245, 249, 250, 254, 259, 260, 263, 265, 266, 267, 268, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 298, 299, 300, 306, 307, 308, 309, 310, 311, 321, 322, 324, 325, 326, 329, 330, 332, 333, 335, 336, 338, 341, 343, 344, 346, 348, 350, 351], "carri": [1, 128, 253, 263, 265, 271], "non": [1, 2, 5, 13, 18, 23, 25, 26, 28, 30, 32, 36, 41, 42, 43, 49, 51, 52, 53, 54, 58, 64, 65, 68, 71, 85, 97, 99, 104, 105, 109, 128, 129, 132, 140, 149, 151, 152, 154, 156, 158, 162, 167, 168, 169, 175, 177, 178, 179, 180, 184, 190, 191, 194, 197, 211, 223, 225, 229, 239, 243, 249, 265, 266, 267, 273, 275, 277, 278, 279, 280, 283, 284, 287, 289, 300, 301, 305, 306, 307, 309, 326, 328, 330, 331, 332, 333, 334, 337, 341, 342, 343, 346, 347, 350], "flat": [1, 2, 24, 26, 28, 43, 49, 54, 128, 129, 150, 152, 154, 169, 175, 180, 277, 283, 285], "geometr": [1, 18, 128, 230, 273, 275, 283, 329], "differenti": [1, 51, 128, 177, 266, 275, 283, 287], "allow": [1, 10, 15, 20, 21, 52, 53, 55, 93, 94, 96, 99, 100, 107, 113, 124, 128, 142, 146, 147, 178, 179, 181, 219, 220, 222, 225, 226, 229, 240, 243, 244, 249, 260, 275, 277, 281, 283, 284, 285, 287, 288, 289, 316, 322, 325, 326, 329, 331, 333, 336, 338, 339, 340, 341, 342], "includ": [1, 2, 5, 15, 39, 42, 52, 55, 58, 63, 71, 80, 87, 94, 107, 110, 119, 128, 129, 132, 142, 165, 168, 178, 181, 184, 189, 197, 206, 213, 220, 229, 232, 233, 244, 249, 250, 255, 260, 269, 275, 277, 278, 279, 281, 282, 283, 284, 287, 288, 289, 291, 324, 326, 333, 337, 343, 350], "notion": [1, 128, 256], "between": [1, 5, 17, 18, 24, 25, 26, 27, 30, 41, 42, 43, 45, 47, 49, 51, 52, 53, 55, 57, 58, 59, 65, 66, 67, 68, 71, 72, 73, 76, 79, 80, 82, 87, 89, 94, 98, 107, 125, 127, 128, 132, 144, 150, 151, 152, 153, 156, 167, 168, 169, 171, 173, 175, 177, 178, 179, 181, 183, 184, 185, 191, 192, 193, 194, 197, 198, 199, 202, 205, 206, 208, 213, 215, 220, 224, 229, 233, 235, 237, 241, 244, 248, 257, 258, 259, 263, 265, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 293, 296, 298, 311, 321, 322, 329, 333, 338, 342, 344, 346, 347, 350, 351], "neighbor": [1, 2, 58, 75, 128, 129, 184, 201, 265, 275, 280, 284], "let": [1, 5, 7, 9, 17, 23, 24, 25, 26, 27, 28, 29, 31, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 80, 81, 84, 86, 88, 89, 93, 94, 96, 97, 99, 102, 110, 119, 123, 128, 132, 134, 136, 144, 149, 150, 151, 152, 153, 154, 155, 157, 162, 163, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 206, 207, 210, 212, 214, 215, 219, 220, 222, 223, 225, 228, 230, 233, 234, 235, 236, 237, 238, 247, 252, 268, 287, 327], "f": [1, 5, 10, 15, 21, 24, 28, 34, 39, 41, 43, 45, 49, 50, 51, 53, 54, 57, 58, 62, 67, 75, 87, 88, 89, 103, 104, 105, 110, 111, 128, 132, 137, 142, 147, 150, 154, 160, 165, 167, 169, 171, 175, 176, 177, 179, 180, 183, 184, 188, 193, 201, 213, 214, 215, 235, 236, 240, 263, 277, 278, 279, 280, 283, 284, 285, 286, 287, 289, 290, 295, 316, 350], "y": [1, 2, 5, 12, 13, 34, 45, 46, 49, 51, 52, 57, 58, 59, 61, 62, 63, 71, 82, 84, 96, 99, 103, 107, 128, 129, 132, 139, 140, 160, 171, 172, 175, 177, 178, 183, 184, 185, 187, 188, 189, 197, 208, 210, 222, 225, 229, 230, 231, 244, 252, 275, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 293, 307, 340, 346, 351], "n": [1, 5, 13, 14, 15, 23, 24, 27, 28, 31, 32, 39, 40, 42, 49, 51, 54, 56, 57, 58, 59, 63, 64, 65, 67, 71, 72, 73, 80, 81, 82, 88, 93, 103, 104, 105, 107, 124, 125, 128, 132, 140, 141, 142, 149, 150, 153, 154, 157, 158, 165, 166, 168, 175, 177, 180, 182, 183, 184, 185, 189, 190, 191, 193, 197, 198, 199, 206, 207, 208, 214, 219, 234, 239, 242, 244, 252, 275, 277, 278, 279, 280, 281, 283, 284, 285, 287, 288, 289, 291, 346, 347], "where": [1, 2, 5, 9, 10, 15, 20, 21, 25, 36, 37, 40, 41, 42, 47, 49, 51, 53, 54, 56, 57, 58, 59, 61, 63, 65, 67, 68, 71, 72, 80, 87, 89, 90, 93, 94, 97, 100, 102, 107, 110, 117, 120, 124, 125, 128, 129, 132, 136, 137, 142, 146, 147, 151, 162, 163, 166, 167, 168, 173, 175, 177, 179, 180, 182, 183, 184, 185, 187, 189, 191, 193, 194, 197, 198, 206, 213, 215, 216, 219, 220, 223, 226, 228, 229, 230, 231, 233, 235, 237, 239, 243, 245, 259, 264, 265, 267, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 292, 306, 307, 313, 316, 319, 321, 322, 336, 346, 347, 350], "denot": [1, 5, 51, 56, 57, 67, 128, 132, 177, 182, 183, 193, 229, 275, 277, 283, 350], "part": [1, 2, 9, 28, 36, 37, 39, 41, 47, 48, 52, 54, 57, 58, 59, 64, 80, 100, 107, 128, 129, 136, 154, 162, 163, 165, 167, 173, 174, 178, 180, 183, 184, 185, 190, 206, 226, 229, 231, 233, 235, 248, 250, 252, 262, 270, 275, 277, 279, 281, 282, 283, 284, 285, 287, 289, 306, 307, 326, 333, 345, 350], "angular": [1, 18, 46, 48, 61, 84, 85, 104, 105, 128, 172, 174, 187, 210, 211, 273, 277, 283, 285], "w": [1, 24, 41, 42, 48, 58, 59, 64, 65, 128, 150, 167, 168, 174, 184, 185, 190, 191, 231, 240, 275, 277, 281, 282, 283, 285, 286, 287, 289, 292, 328, 333], "im": [1, 5, 49, 51, 57, 70, 80, 92, 93, 120, 128, 132, 175, 177, 183, 196, 206, 218, 219, 350], "o": [1, 5, 17, 24, 36, 39, 48, 49, 51, 64, 65, 68, 71, 87, 99, 103, 115, 128, 132, 144, 150, 162, 165, 174, 175, 177, 190, 191, 194, 197, 213, 225, 233, 240, 243, 278, 281, 283, 284, 289, 308, 325, 333, 335, 344], "repres": [1, 2, 11, 20, 24, 40, 47, 49, 54, 55, 56, 57, 59, 60, 78, 80, 81, 85, 90, 93, 94, 110, 128, 129, 138, 146, 150, 166, 173, 175, 180, 181, 182, 183, 185, 186, 204, 206, 207, 211, 216, 219, 220, 229, 231, 235, 237, 243, 245, 258, 266, 267, 275, 277, 278, 281, 282, 283, 284, 285, 287, 289, 296, 309, 315, 329, 350, 351], "evolut": [1, 51, 72, 128, 177, 198, 275, 277, 283, 290, 333], "Then": [1, 2, 25, 33, 34, 51, 53, 66, 82, 96, 110, 111, 120, 121, 124, 128, 129, 151, 159, 160, 177, 179, 192, 208, 222, 233, 243, 244, 245, 246, 266, 275, 277, 283, 287, 289, 346, 347], "t": [1, 2, 9, 13, 15, 20, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 39, 41, 43, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 67, 71, 74, 79, 80, 87, 93, 94, 96, 99, 104, 105, 107, 110, 112, 113, 120, 121, 124, 125, 126, 128, 129, 136, 140, 142, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 163, 165, 167, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 188, 190, 191, 193, 197, 200, 205, 206, 213, 219, 220, 222, 225, 229, 231, 233, 235, 236, 243, 246, 252, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 283, 284, 285, 287, 288, 289, 292, 316, 317, 324, 325, 326, 328, 329, 331, 333, 334, 335, 337, 338, 341, 342, 346, 347, 350], "geq": [1, 128], "0": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 242, 243, 245, 249, 250, 265, 266, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 296, 298, 301, 304, 305, 310, 311, 317, 318, 319, 321, 322, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 350], "given": [1, 2, 52, 53, 55, 56, 57, 58, 63, 64, 67, 76, 80, 89, 92, 99, 128, 129, 178, 179, 181, 182, 183, 184, 189, 190, 193, 202, 206, 215, 218, 225, 231, 244, 252, 255, 263, 267, 269, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 311, 317, 324, 329, 330, 346, 350], "egin": [1, 42, 47, 56, 57, 128, 168, 173, 182, 183, 283], "case": [1, 5, 11, 14, 23, 28, 34, 42, 48, 52, 53, 63, 64, 65, 75, 78, 92, 97, 100, 102, 107, 110, 119, 124, 128, 132, 138, 141, 149, 154, 160, 168, 174, 178, 179, 189, 190, 191, 201, 204, 218, 223, 226, 228, 229, 230, 233, 236, 237, 239, 240, 242, 243, 244, 245, 257, 264, 266, 267, 270, 272, 275, 277, 279, 281, 283, 284, 287, 288, 289, 292, 293, 324, 329, 332, 346, 347, 350], "rac": [1, 39, 42, 47, 56, 57, 128, 165, 168, 173, 182, 183, 283], "partial": [1, 10, 15, 49, 58, 68, 104, 105, 124, 128, 137, 142, 175, 184, 194, 241, 245, 281, 283, 289, 322], "d": [1, 10, 14, 15, 24, 26, 28, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 75, 80, 82, 87, 88, 89, 93, 103, 104, 105, 107, 109, 110, 111, 124, 125, 128, 137, 141, 142, 150, 152, 154, 160, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 201, 206, 208, 213, 214, 215, 219, 230, 235, 236, 239, 240, 243, 252, 262, 264, 270, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 295, 298, 299, 305, 307, 308, 311, 316, 332, 338, 346, 348, 350], "33": [1, 18, 21, 28, 51, 55, 63, 81, 104, 105, 128, 147, 154, 177, 181, 189, 207, 233, 273, 275, 277, 279, 283, 289, 301, 307, 324, 331], "cdot": [1, 5, 128, 132, 231, 283, 287, 348], "abla": [1, 128], "44": [1, 40, 47, 75, 76, 78, 79, 88, 128, 166, 173, 201, 202, 204, 205, 214, 278, 283], "delta_": [1, 55, 128, 181], "u": [1, 5, 9, 23, 27, 36, 37, 40, 48, 51, 68, 71, 89, 107, 110, 117, 119, 120, 123, 126, 128, 132, 136, 149, 153, 162, 163, 166, 174, 177, 194, 197, 215, 229, 231, 247, 248, 250, 256, 259, 271, 275, 277, 279, 283, 329, 345, 351], "end": [1, 15, 29, 39, 42, 47, 56, 57, 66, 67, 68, 72, 78, 80, 86, 87, 93, 94, 100, 102, 110, 119, 128, 142, 155, 165, 168, 173, 182, 183, 192, 193, 194, 198, 204, 206, 212, 213, 219, 220, 226, 228, 230, 233, 235, 243, 252, 253, 255, 260, 266, 268, 270, 277, 282, 283, 287, 337, 346, 347, 350], "coeffici": [1, 18, 24, 27, 30, 43, 48, 51, 53, 55, 60, 62, 128, 150, 153, 156, 169, 174, 177, 179, 181, 186, 188, 240, 243, 249, 275, 277, 278, 279, 280, 282, 283, 285, 288, 289, 304, 305, 332, 350], "goe": [1, 53, 55, 128, 179, 181, 260, 288], "laplac": [1, 128, 265, 283], "beltrami": [1, 128, 283], "math": [1, 39, 52, 54, 55, 56, 85, 128, 165, 178, 180, 181, 182, 211, 269, 277, 278, 283, 298, 325, 326, 329, 330, 333, 341], "condit": [1, 10, 15, 57, 67, 82, 128, 142, 183, 193, 208, 256, 259, 277, 283, 284, 287, 289, 327, 329, 333], "noisi": [1, 23, 25, 34, 52, 63, 128, 149, 151, 160, 178, 189, 239, 243, 256, 263, 279, 282, 283, 284, 285], "equat": [1, 5, 25, 42, 56, 128, 132, 151, 168, 182, 229, 277, 279, 283, 285, 287, 289, 301, 326, 346, 347], "solv": [1, 31, 49, 52, 56, 57, 58, 128, 157, 175, 178, 182, 183, 184, 233, 242, 249, 252, 275, 277, 279, 283, 287, 289, 290, 301, 326, 334], "shift": [1, 24, 128, 150, 275, 277, 279, 281, 283, 289, 301, 310, 340], "twist": [1, 128], "convolut": [1, 58, 128, 184, 255, 256, 259, 263, 265, 282, 283], "st_": [1, 128], "its": [1, 13, 26, 28, 32, 45, 52, 53, 54, 55, 58, 59, 62, 63, 64, 80, 82, 85, 96, 97, 99, 104, 105, 106, 124, 128, 140, 152, 154, 158, 171, 178, 179, 180, 181, 184, 185, 188, 189, 190, 206, 208, 211, 222, 223, 225, 230, 231, 235, 236, 238, 249, 251, 252, 254, 256, 265, 266, 269, 275, 277, 278, 279, 282, 283, 284, 285, 286, 287, 289, 312, 333, 337, 338, 340], "kernel": [1, 2, 42, 58, 59, 64, 72, 128, 129, 168, 184, 185, 190, 198, 265, 275, 282, 283, 289, 292, 296, 341], "p_t": [1, 2, 128, 129], "int_": [1, 128, 277, 283, 285, 350], "t_": [1, 128, 283], "prime": [1, 51, 128, 177, 287], "r_": [1, 55, 128, 181, 283], "ani": [1, 11, 17, 18, 28, 31, 33, 34, 47, 51, 55, 58, 60, 62, 65, 66, 67, 80, 94, 99, 100, 107, 109, 110, 112, 119, 120, 124, 125, 128, 138, 144, 154, 157, 159, 160, 173, 177, 181, 184, 186, 188, 191, 192, 193, 206, 220, 225, 226, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 243, 245, 252, 256, 257, 260, 263, 271, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 287, 289, 303, 311, 312, 317, 320, 326, 328, 333, 342, 344, 350], "3d": [1, 5, 6, 9, 18, 23, 25, 26, 27, 28, 37, 38, 39, 42, 53, 54, 63, 65, 67, 69, 85, 93, 96, 98, 99, 128, 132, 133, 136, 149, 151, 152, 153, 154, 163, 164, 165, 168, 179, 180, 189, 191, 193, 195, 211, 219, 222, 224, 225, 229, 232, 239, 243, 259, 260, 263, 265, 267, 271, 273, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 298, 299, 310, 320, 324, 325, 329, 337, 341, 342], "rotat": [1, 2, 42, 55, 64, 94, 128, 129, 168, 181, 190, 220, 230, 231, 243, 244, 275, 277, 281, 283, 284, 285, 287, 289, 291, 328, 334, 335], "map": [1, 2, 5, 9, 10, 13, 14, 15, 17, 18, 26, 28, 31, 33, 34, 36, 37, 38, 42, 43, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 68, 70, 71, 72, 73, 76, 78, 79, 81, 82, 87, 91, 96, 97, 103, 104, 105, 128, 129, 132, 136, 137, 140, 141, 142, 144, 152, 154, 157, 159, 160, 162, 163, 164, 168, 169, 170, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 194, 196, 197, 198, 199, 202, 204, 205, 207, 208, 213, 217, 222, 223, 232, 234, 241, 244, 245, 249, 257, 266, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 309, 324, 326, 328, 329, 334, 337, 338, 340, 341, 342], "vector": [1, 29, 31, 36, 42, 47, 51, 56, 57, 67, 68, 79, 80, 85, 86, 97, 107, 128, 155, 157, 162, 168, 173, 177, 182, 183, 193, 194, 205, 206, 211, 212, 223, 229, 231, 232, 234, 239, 242, 243, 252, 254, 255, 256, 262, 274, 275, 277, 278, 281, 283, 285, 287, 288, 289, 292, 297, 298, 305, 307, 312, 324, 326, 329, 333, 346, 347, 350], "1": [1, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 103, 104, 105, 107, 110, 124, 125, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 229, 230, 231, 232, 234, 235, 236, 237, 240, 243, 244, 249, 250, 260, 263, 265, 268, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 344, 346, 347, 348, 350], "onto": [1, 110, 128, 230, 277, 283, 288, 351], "euclidean": [1, 128, 231, 275, 277, 283, 284, 287, 351], "account": [1, 25, 49, 57, 58, 63, 71, 85, 110, 114, 124, 128, 151, 175, 183, 184, 189, 197, 211, 256, 267, 268, 275, 277, 278, 283, 325, 338, 339, 350], "space": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 24, 28, 37, 38, 41, 42, 44, 45, 47, 52, 54, 61, 62, 64, 66, 67, 68, 71, 72, 75, 87, 94, 96, 97, 103, 104, 105, 107, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 150, 154, 163, 164, 167, 168, 170, 171, 173, 178, 180, 187, 188, 190, 192, 193, 194, 197, 198, 201, 213, 220, 222, 223, 229, 235, 236, 239, 240, 243, 244, 249, 253, 255, 256, 271, 273, 275, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 313, 316, 318, 326, 327, 328, 339, 341, 344, 346, 347, 348], "stochast": [1, 28, 128, 154, 283], "interpret": [1, 43, 47, 54, 55, 63, 94, 128, 169, 173, 180, 181, 189, 220, 267, 275, 277, 283, 285, 287, 326, 330], "duitsandfranken2011": [1, 2, 128, 129], "seen": [1, 52, 55, 70, 124, 128, 178, 181, 196, 253, 255, 263, 277, 283, 350], "limit": [1, 11, 41, 42, 51, 54, 128, 138, 167, 168, 177, 180, 243, 271, 275, 277, 281, 282, 283, 284, 288, 289, 328, 329, 341], "obtain": [1, 2, 12, 15, 26, 28, 32, 40, 41, 42, 45, 48, 49, 50, 51, 53, 54, 57, 64, 66, 71, 80, 85, 128, 129, 139, 142, 152, 154, 158, 166, 167, 168, 171, 174, 175, 176, 177, 179, 180, 183, 190, 192, 197, 206, 211, 229, 242, 243, 255, 263, 265, 267, 270, 271, 275, 278, 282, 283, 284, 288, 346], "accumul": [1, 128, 260], "random": [1, 2, 11, 14, 26, 28, 29, 39, 53, 54, 60, 75, 81, 82, 86, 88, 89, 93, 97, 128, 129, 138, 141, 152, 154, 155, 165, 179, 180, 186, 201, 207, 208, 212, 214, 215, 219, 223, 245, 249, 256, 260, 265, 275, 277, 279, 282, 283, 284, 285, 287, 288, 289, 298, 299, 311, 324, 325, 326, 329, 330, 335, 336, 341], "walk": [1, 64, 128, 190, 235, 239, 240, 242, 243, 244, 245], "particl": [1, 4, 18, 51, 55, 128, 131, 177, 181, 241, 243, 249, 287, 289, 322, 328], "each": [1, 2, 5, 6, 8, 9, 11, 14, 15, 18, 25, 28, 31, 32, 34, 36, 37, 39, 44, 47, 51, 52, 53, 54, 55, 58, 59, 60, 63, 64, 66, 67, 71, 72, 73, 76, 78, 79, 80, 82, 85, 86, 87, 90, 92, 93, 94, 96, 100, 102, 110, 123, 128, 129, 132, 133, 135, 136, 138, 141, 142, 151, 154, 157, 158, 160, 162, 163, 165, 170, 173, 177, 178, 179, 180, 181, 184, 185, 186, 189, 190, 192, 193, 197, 198, 199, 202, 204, 205, 206, 208, 211, 212, 213, 216, 218, 219, 220, 222, 226, 228, 229, 234, 235, 236, 237, 239, 240, 242, 244, 245, 259, 260, 265, 266, 267, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 298, 299, 300, 301, 311, 315, 318, 326, 332, 335, 341, 350], "step": [1, 5, 9, 11, 14, 18, 21, 23, 24, 25, 28, 31, 32, 36, 37, 43, 49, 51, 53, 59, 63, 67, 70, 75, 87, 90, 92, 93, 98, 112, 124, 128, 132, 136, 138, 141, 147, 149, 150, 151, 154, 157, 158, 162, 163, 169, 175, 177, 179, 185, 189, 193, 196, 201, 213, 216, 218, 219, 224, 234, 235, 239, 240, 242, 243, 244, 245, 252, 253, 256, 260, 263, 265, 271, 273, 275, 277, 282, 283, 285, 287, 289, 292, 321, 322, 325, 326, 335, 341, 343], "randomli": [1, 51, 89, 128, 177, 215, 243, 284, 287], "forward": [1, 5, 42, 47, 51, 54, 71, 119, 128, 132, 168, 173, 177, 180, 197, 251, 252, 256, 260, 263, 266, 269, 275, 283, 332], "along": [1, 2, 6, 9, 11, 18, 37, 42, 47, 52, 68, 87, 92, 94, 100, 102, 128, 129, 133, 136, 138, 163, 168, 173, 178, 194, 213, 218, 220, 226, 228, 229, 232, 236, 243, 245, 251, 255, 265, 273, 275, 277, 279, 281, 283, 286, 287, 288, 289, 338], "current": [1, 15, 53, 55, 65, 72, 93, 96, 102, 104, 105, 109, 110, 119, 121, 124, 128, 142, 179, 181, 191, 198, 219, 222, 228, 233, 239, 240, 242, 243, 244, 250, 251, 252, 259, 260, 263, 264, 271, 272, 275, 277, 278, 281, 283, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 329, 330], "chang": [1, 28, 41, 45, 49, 52, 53, 60, 63, 66, 75, 89, 93, 96, 99, 107, 108, 109, 112, 114, 120, 121, 127, 128, 154, 167, 171, 175, 178, 179, 186, 189, 192, 201, 215, 219, 222, 225, 229, 233, 237, 249, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 298, 306, 307, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 340, 341, 342, 350], "extens": [1, 7, 8, 10, 11, 13, 15, 23, 55, 107, 128, 134, 135, 137, 138, 140, 142, 149, 181, 231, 261, 269, 281, 283, 285, 289, 312, 326, 328, 332, 333, 336], "contour": [1, 70, 92, 128, 196, 218, 288, 289, 311, 326, 328, 329], "2d": [1, 2, 18, 63, 65, 69, 73, 128, 129, 189, 191, 195, 199, 229, 239, 263, 267, 273, 275, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 326, 327, 331, 342], "motion": [1, 18, 30, 38, 63, 127, 128, 156, 164, 189, 241, 249, 275, 277, 278, 283, 289, 308, 341], "b": [1, 2, 5, 18, 24, 25, 26, 28, 29, 31, 32, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 71, 72, 73, 75, 80, 82, 85, 86, 88, 89, 90, 93, 98, 103, 104, 105, 107, 110, 111, 124, 128, 129, 132, 150, 151, 152, 154, 155, 157, 158, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 197, 198, 199, 201, 206, 208, 211, 212, 214, 215, 216, 219, 224, 229, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 249, 265, 266, 267, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 331, 333, 334, 335, 337, 341, 342], "shown": [1, 2, 24, 26, 41, 49, 52, 54, 57, 63, 85, 128, 129, 150, 152, 167, 175, 178, 180, 183, 189, 211, 234, 235, 255, 256, 263, 265, 266, 271, 275, 283, 288, 289, 311], "right": [1, 2, 5, 15, 24, 25, 26, 27, 32, 34, 36, 43, 46, 51, 52, 54, 63, 64, 67, 71, 84, 87, 92, 94, 96, 97, 99, 109, 110, 119, 124, 128, 129, 132, 142, 150, 151, 152, 153, 158, 160, 162, 169, 172, 177, 178, 180, 189, 190, 193, 197, 210, 213, 218, 220, 222, 223, 225, 229, 230, 235, 251, 252, 255, 275, 277, 278, 281, 283, 284, 288], "adapt": [1, 2, 13, 18, 24, 27, 30, 49, 51, 58, 71, 128, 129, 140, 150, 153, 156, 175, 177, 184, 197, 234, 239, 243, 279, 283, 288, 289, 300, 311, 326, 328, 337], "practic": [1, 24, 34, 41, 49, 52, 59, 61, 92, 109, 127, 128, 150, 160, 167, 175, 178, 185, 187, 218, 240, 277, 283, 328, 338, 350], "exact": [1, 25, 59, 71, 76, 124, 128, 151, 185, 197, 202, 233, 275, 277, 279, 283, 284, 285, 287, 340], "analyt": [1, 18, 25, 38, 50, 62, 75, 88, 89, 127, 128, 151, 164, 176, 188, 201, 214, 215, 241, 243, 279, 280, 283, 284, 286, 289, 295, 316, 337, 350], "formula": [1, 128, 229, 252, 267, 271, 277, 283, 346, 347, 351], "unknown": [1, 126, 128, 283], "approxim": [1, 34, 39, 51, 52, 56, 57, 128, 160, 165, 177, 178, 182, 183, 239, 263, 275, 277, 283, 285, 287, 347], "portegies2015b": [1, 128], "numpi": [1, 2, 5, 6, 10, 13, 14, 15, 17, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 106, 107, 123, 128, 129, 132, 133, 137, 140, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 223, 229, 233, 249, 275, 277, 278, 281, 282, 283, 284, 285, 287, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343], "dipi": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 110, 112, 114, 116, 119, 120, 121, 123, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 263, 265, 267, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 344, 345, 348, 350], "gradient_t": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 25, 26, 29, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 71, 84, 85, 86, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 151, 152, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 197, 210, 211, 212, 216, 218, 220, 224, 232, 283, 285, 290, 328], "get_fnam": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 71, 72, 73, 74, 78, 79, 80, 81, 82, 84, 85, 90, 92, 94, 98, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 197, 198, 199, 200, 204, 205, 206, 207, 208, 210, 211, 216, 218, 220, 224, 275, 282, 284, 285, 290, 336], "load_nifti_data": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 24, 37, 51, 71, 72, 82, 90, 92, 94, 98, 99, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 150, 163, 177, 197, 198, 208, 216, 218, 220, 224, 225, 290, 336], "read_bvals_bvec": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 25, 26, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 71, 85, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 151, 152, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 197, 211, 216, 218, 220, 224, 232, 285, 290, 324, 328, 332, 338], "add_nois": [1, 128, 290], "odf_sh_to_sharp": [1, 128, 290], "evalu": [1, 2, 4, 14, 18, 20, 39, 40, 42, 43, 53, 54, 55, 59, 71, 72, 73, 80, 82, 103, 104, 105, 128, 129, 131, 141, 146, 165, 166, 168, 169, 179, 180, 181, 185, 197, 198, 199, 206, 208, 234, 244, 245, 249, 260, 275, 277, 278, 280, 282, 283, 285, 287, 290, 338], "stanford": [1, 2, 5, 9, 14, 27, 34, 37, 59, 64, 65, 71, 73, 104, 105, 126, 128, 129, 132, 136, 141, 153, 160, 163, 185, 190, 191, 197, 199, 278, 324, 334, 338], "dataset": [1, 2, 5, 9, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 62, 63, 64, 65, 68, 71, 73, 74, 81, 82, 85, 90, 93, 96, 97, 98, 99, 105, 106, 127, 128, 129, 132, 136, 144, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 194, 197, 199, 200, 207, 208, 211, 216, 219, 222, 223, 224, 225, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 245, 246, 249, 251, 253, 255, 260, 265, 274, 275, 278, 279, 281, 282, 283, 284, 287, 289, 303, 317, 328, 329, 331, 332, 333, 335, 336, 337, 338, 341, 342, 344], "150": [1, 2, 28, 41, 58, 59, 128, 129, 154, 167, 184, 185, 285], "2000": [1, 2, 18, 24, 26, 36, 41, 48, 52, 53, 54, 58, 59, 104, 105, 128, 129, 150, 152, 162, 167, 174, 178, 179, 180, 184, 185, 234, 273, 277, 278, 283, 289, 309, 336], "mm": [1, 2, 10, 18, 29, 31, 33, 42, 49, 54, 55, 59, 61, 68, 71, 75, 76, 86, 93, 103, 104, 105, 128, 129, 155, 157, 159, 168, 175, 180, 181, 185, 187, 194, 197, 201, 202, 212, 219, 229, 243, 273, 275, 277, 283, 284, 285, 287, 288, 289, 309, 311, 315, 316, 321, 322, 346], "rician": [1, 13, 23, 25, 27, 32, 58, 85, 86, 128, 140, 149, 151, 153, 158, 184, 211, 212, 278, 279, 283, 285, 289, 300], "constrain": [1, 2, 8, 10, 11, 15, 18, 21, 38, 39, 48, 49, 52, 53, 57, 58, 59, 107, 128, 129, 135, 137, 138, 142, 147, 164, 165, 174, 175, 178, 179, 183, 184, 185, 241, 249, 277, 278, 280, 282, 283, 289, 305, 309, 332, 333, 334, 337, 350], "deconvolut": [1, 2, 4, 8, 10, 11, 15, 18, 21, 26, 38, 39, 48, 53, 59, 83, 107, 128, 129, 131, 135, 137, 138, 142, 147, 152, 164, 165, 174, 179, 185, 209, 241, 249, 250, 265, 280, 282, 283, 289, 305, 331, 332, 335, 337, 350], "fiber": [1, 3, 5, 7, 8, 9, 11, 12, 13, 34, 37, 38, 39, 42, 43, 44, 46, 47, 51, 53, 54, 59, 63, 67, 77, 84, 85, 87, 94, 104, 105, 128, 130, 132, 134, 135, 136, 138, 139, 140, 160, 163, 164, 165, 168, 169, 170, 172, 173, 177, 179, 180, 185, 189, 193, 203, 210, 211, 213, 220, 241, 243, 249, 275, 282, 283, 285, 286, 287, 289, 305, 321, 326, 329, 335, 338, 341, 342, 344], "read": [1, 2, 5, 14, 16, 18, 20, 21, 22, 36, 40, 44, 45, 47, 48, 50, 52, 55, 56, 57, 61, 62, 71, 74, 75, 76, 78, 86, 87, 88, 99, 107, 110, 117, 119, 120, 121, 128, 129, 132, 141, 143, 146, 147, 148, 162, 166, 170, 171, 173, 174, 176, 178, 181, 182, 183, 187, 188, 197, 200, 201, 202, 204, 212, 213, 214, 225, 229, 232, 233, 234, 246, 249, 251, 252, 253, 260, 264, 266, 268, 275, 277, 278, 281, 282, 283, 284, 289, 290, 324, 328, 333, 334, 337, 338, 341, 344], "hardi_fnam": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 28, 34, 37, 39, 40, 41, 47, 58, 59, 63, 71, 73, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 154, 160, 163, 165, 166, 167, 173, 184, 185, 189, 197, 199, 216, 218, 220, 224], "hardi_bval_fnam": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 28, 34, 37, 39, 40, 41, 47, 58, 59, 63, 71, 73, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 154, 160, 163, 165, 166, 167, 173, 184, 185, 189, 197, 199, 216, 218, 220, 224], "hardi_bvec_fnam": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 28, 34, 37, 39, 40, 41, 47, 58, 59, 63, 71, 73, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 154, 160, 163, 165, 166, 167, 173, 184, 185, 189, 197, 199, 216, 218, 220, 224], "stanford_hardi": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 28, 34, 37, 39, 40, 41, 47, 58, 59, 63, 71, 73, 90, 92, 94, 98, 104, 105, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 154, 160, 163, 165, 166, 167, 173, 184, 185, 189, 197, 199, 216, 218, 220, 224, 239, 243, 245], "bval": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 29, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 71, 85, 86, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 150, 151, 152, 154, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 190, 197, 211, 212, 216, 218, 220, 224, 232, 234, 239, 242, 243, 252, 269, 275, 277, 278, 279, 281, 283, 285, 289, 290, 301, 303, 308, 309, 312, 319, 324, 331, 338, 343, 346], "bvec": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 25, 26, 29, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 71, 85, 86, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 151, 152, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 190, 197, 211, 212, 216, 218, 220, 224, 232, 234, 239, 242, 243, 252, 269, 275, 277, 278, 279, 281, 283, 285, 287, 289, 290, 297, 298, 303, 304, 305, 307, 309, 312, 319, 328, 333, 335, 337, 346], "gtab": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 29, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 71, 84, 85, 86, 90, 92, 94, 98, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 150, 151, 152, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 197, 210, 211, 212, 216, 218, 220, 224, 232, 269, 275, 277, 278, 279, 282, 283, 285, 287, 329, 338, 340, 343], "add": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 63, 67, 71, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 102, 107, 109, 110, 117, 119, 120, 121, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 189, 193, 197, 201, 202, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 228, 233, 249, 270, 277, 281, 283, 284, 285, 287, 288, 289, 290, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343], "b0_slice": [1, 128], "b0_mask": [1, 22, 34, 53, 58, 72, 74, 128, 148, 160, 179, 184, 198, 200], "seed": [1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 37, 39, 90, 92, 94, 98, 107, 128, 129, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 165, 216, 218, 220, 224, 234, 245, 249, 277, 278, 283, 287, 289, 321, 322, 324, 325, 326, 329, 332, 333, 335, 336, 337, 340], "data_noisi": [1, 128], "10": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 24, 25, 26, 28, 31, 34, 36, 37, 39, 40, 41, 42, 43, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 68, 70, 71, 72, 73, 75, 76, 78, 79, 81, 85, 88, 89, 92, 93, 96, 99, 103, 104, 105, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 150, 151, 152, 154, 157, 160, 162, 163, 165, 166, 167, 168, 169, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 194, 196, 197, 198, 199, 201, 202, 204, 205, 207, 211, 214, 215, 218, 219, 222, 225, 233, 234, 235, 239, 240, 243, 249, 250, 263, 265, 275, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 292, 295, 298, 299, 305, 308, 310, 316, 325, 326, 327, 328, 329, 330, 335, 336, 337, 341, 342, 343, 344], "mean": [1, 5, 18, 23, 24, 26, 28, 30, 34, 38, 39, 43, 45, 47, 48, 49, 52, 55, 58, 62, 64, 66, 67, 71, 75, 78, 80, 87, 89, 99, 110, 121, 128, 132, 149, 150, 152, 154, 156, 160, 164, 165, 169, 171, 173, 174, 175, 178, 181, 184, 188, 190, 192, 193, 197, 201, 204, 206, 213, 215, 225, 230, 231, 239, 241, 249, 252, 265, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 298, 300, 306, 307, 309, 310, 311, 321, 322, 333, 334, 335, 338, 351], "noise_typ": [1, 128, 285], "pad": [1, 2, 65, 128, 129, 191, 282, 283], "larger": [1, 11, 23, 26, 41, 43, 58, 67, 70, 75, 81, 85, 128, 138, 149, 152, 167, 169, 184, 193, 196, 201, 207, 211, 233, 241, 275, 277, 280, 282, 283, 285, 287, 289, 292, 324, 328], "region": [1, 2, 5, 9, 10, 15, 34, 37, 39, 41, 42, 43, 49, 51, 54, 58, 63, 65, 75, 92, 93, 94, 104, 105, 128, 129, 132, 136, 137, 142, 160, 163, 165, 167, 168, 169, 175, 177, 180, 184, 189, 191, 201, 218, 219, 220, 278, 279, 283, 287], "avoid": [1, 11, 24, 28, 42, 47, 49, 54, 64, 79, 107, 110, 128, 138, 150, 154, 168, 173, 175, 180, 190, 205, 275, 277, 282, 283, 287, 289, 326, 328, 330, 331, 333, 335, 336, 341, 342], "boundari": [1, 15, 128, 142, 275, 284, 287, 288, 289, 317], "effect": [1, 10, 13, 15, 24, 25, 42, 49, 54, 55, 58, 63, 71, 72, 104, 105, 111, 128, 137, 140, 142, 150, 151, 168, 175, 180, 181, 184, 189, 197, 198, 230, 239, 240, 245, 255, 256, 260, 263, 265, 275, 277, 281, 282, 283, 284, 287, 288, 289, 307, 311, 346, 347, 350], "data_smal": [1, 2, 31, 40, 41, 48, 49, 52, 58, 59, 61, 128, 129, 157, 166, 167, 174, 175, 178, 184, 185, 187], "25": [1, 2, 7, 8, 9, 11, 12, 13, 14, 20, 21, 37, 40, 41, 42, 43, 50, 53, 55, 56, 58, 59, 70, 72, 75, 90, 92, 93, 98, 99, 128, 129, 134, 135, 136, 138, 139, 140, 141, 146, 147, 163, 166, 167, 168, 169, 176, 179, 181, 182, 184, 185, 196, 198, 201, 216, 218, 219, 224, 225, 244, 245, 275, 278, 280, 282, 283, 285, 287, 289, 331], "40": [1, 5, 12, 13, 14, 18, 24, 33, 34, 39, 52, 53, 58, 61, 70, 72, 75, 76, 88, 90, 93, 94, 104, 105, 128, 132, 139, 140, 141, 150, 159, 160, 165, 178, 179, 184, 187, 196, 198, 201, 202, 214, 216, 219, 220, 273, 275, 277, 283, 284, 289, 306, 331], "65": [1, 2, 28, 42, 51, 52, 81, 128, 129, 154, 168, 177, 178, 207, 283, 285, 289, 306, 331], "80": [1, 23, 41, 45, 51, 54, 55, 58, 62, 92, 93, 104, 105, 128, 149, 167, 171, 177, 180, 181, 184, 188, 218, 219, 243, 278, 331, 334], "35": [1, 2, 5, 13, 14, 41, 43, 45, 53, 55, 64, 65, 66, 71, 72, 73, 81, 92, 94, 96, 109, 128, 129, 132, 140, 141, 167, 169, 171, 179, 181, 190, 191, 192, 197, 198, 199, 207, 218, 220, 222, 244, 278, 280, 283, 285, 331, 334, 350], "42": [1, 2, 24, 29, 51, 97, 107, 110, 128, 129, 150, 177, 223, 243, 283, 285, 289, 308, 333], "data_noisy_smal": [1, 128], "enabl": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 36, 37, 40, 41, 46, 47, 52, 56, 57, 58, 59, 60, 61, 63, 78, 79, 80, 81, 84, 86, 93, 94, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 162, 163, 166, 167, 172, 173, 178, 182, 183, 184, 185, 186, 187, 189, 204, 205, 206, 207, 210, 212, 219, 220, 233, 248, 275, 283, 288, 289, 291, 311, 316, 327, 336], "disabl": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 40, 41, 46, 47, 52, 58, 59, 60, 61, 63, 78, 79, 80, 81, 84, 86, 93, 94, 99, 110, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 172, 173, 178, 184, 185, 186, 187, 189, 204, 205, 206, 207, 210, 212, 219, 220, 225, 279, 289, 291, 331], "interact": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 29, 37, 40, 41, 46, 47, 52, 53, 58, 59, 60, 61, 63, 66, 68, 75, 76, 78, 79, 80, 81, 84, 86, 88, 90, 92, 93, 94, 95, 98, 99, 106, 110, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 172, 173, 178, 179, 184, 185, 186, 187, 189, 192, 194, 201, 202, 204, 205, 206, 207, 210, 212, 214, 216, 218, 219, 220, 221, 224, 225, 235, 249, 260, 275, 277, 283, 284, 285, 287, 288, 289, 296, 311, 329, 344], "fals": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 24, 26, 28, 29, 37, 40, 41, 42, 43, 45, 46, 47, 50, 52, 53, 54, 58, 59, 60, 61, 63, 66, 67, 68, 71, 75, 76, 78, 79, 80, 81, 84, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 110, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 150, 152, 154, 155, 163, 166, 167, 168, 169, 171, 172, 173, 176, 178, 179, 180, 184, 185, 186, 187, 189, 192, 193, 194, 197, 201, 202, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 244, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 296, 301, 307, 324, 341, 343], "csd": [1, 2, 8, 10, 11, 12, 15, 18, 19, 38, 39, 41, 48, 58, 107, 128, 129, 135, 137, 138, 139, 142, 145, 164, 165, 167, 174, 184, 235, 241, 249, 273, 282, 283, 289, 324, 326, 328, 329, 332, 333, 334, 335, 336, 337, 338, 342, 344], "origin": [1, 2, 9, 13, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 32, 36, 37, 43, 45, 48, 49, 51, 52, 54, 55, 57, 58, 60, 62, 63, 64, 65, 71, 74, 75, 78, 96, 109, 110, 120, 121, 128, 129, 136, 140, 142, 144, 148, 149, 150, 151, 152, 153, 154, 158, 162, 163, 169, 171, 174, 175, 177, 178, 180, 181, 183, 184, 186, 188, 189, 190, 191, 197, 200, 201, 204, 222, 236, 237, 239, 255, 264, 266, 267, 271, 273, 275, 277, 279, 282, 283, 284, 285, 287, 289, 290, 296, 316, 324, 333, 335, 336, 337, 350, 351], "constrainedsphericaldeconvmodel": [1, 2, 7, 8, 10, 11, 12, 15, 21, 39, 41, 128, 129, 134, 135, 137, 138, 139, 142, 147, 165, 167, 290], "respons": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 37, 38, 39, 53, 59, 85, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 163, 164, 165, 179, 185, 211, 243, 249, 278, 283, 287, 289, 305, 324, 332, 333, 334, 335, 337, 338, 342], "ratio": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 34, 37, 39, 41, 52, 58, 59, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 160, 163, 165, 167, 178, 184, 185, 229, 275, 282, 283, 284, 285, 289, 319], "roi_radii": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 37, 39, 41, 53, 58, 59, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 163, 165, 167, 179, 184, 185, 283, 289, 305], "fa_thr": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 37, 39, 41, 58, 59, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 163, 165, 167, 184, 185, 243, 283, 289, 305], "7": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 26, 32, 37, 39, 41, 42, 43, 45, 49, 53, 54, 55, 58, 59, 70, 75, 76, 81, 87, 103, 110, 124, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 152, 158, 163, 165, 167, 168, 169, 171, 175, 179, 180, 181, 184, 185, 196, 201, 202, 207, 213, 229, 232, 233, 243, 249, 250, 273, 275, 277, 278, 282, 283, 284, 286, 287, 289, 325, 329, 333, 334, 335, 337, 344], "csd_model_orig": [1, 128], "csd_fit_orig": [1, 128], "csd_shm_orig": [1, 128], "shm_coeff": [1, 2, 8, 10, 11, 15, 53, 128, 129, 135, 137, 138, 142, 179, 280, 281, 283, 290, 337], "csd_model_noisi": [1, 128], "csd_fit_noisi": [1, 128], "csd_shm_noisi": [1, 128], "inspir": [1, 2, 53, 128, 129, 179, 256, 284], "rodrigues2010": [1, 2, 128, 129], "lookup": [1, 2, 99, 128, 129, 225, 287], "contain": [1, 2, 5, 17, 18, 22, 26, 28, 39, 40, 41, 42, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 74, 79, 81, 96, 99, 100, 102, 107, 109, 125, 128, 129, 132, 144, 148, 152, 154, 165, 166, 167, 168, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 200, 205, 207, 222, 225, 226, 228, 232, 233, 234, 240, 242, 243, 244, 249, 253, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 315, 317, 319, 321, 322, 324, 326, 327, 328, 329, 330, 335, 336, 337, 339, 340, 341, 342, 343, 351], "sampl": [1, 10, 11, 13, 18, 38, 42, 52, 54, 57, 60, 63, 64, 65, 70, 73, 85, 90, 102, 103, 128, 138, 140, 164, 168, 178, 180, 183, 186, 189, 190, 191, 196, 199, 211, 216, 228, 229, 235, 255, 256, 260, 265, 271, 273, 275, 277, 282, 283, 286, 287, 324, 326, 330, 341, 343], "over": [1, 2, 5, 17, 25, 52, 55, 56, 57, 65, 68, 73, 103, 124, 128, 129, 132, 144, 151, 178, 181, 182, 183, 191, 194, 199, 229, 230, 231, 239, 252, 265, 275, 277, 278, 281, 283, 287, 288, 326, 336, 340, 346], "discret": [1, 2, 11, 13, 20, 40, 52, 64, 128, 129, 138, 140, 146, 166, 178, 190, 244, 245, 253, 255, 267, 275, 277, 278, 280, 283, 284, 287, 289, 291, 318, 331], "ensur": [1, 2, 42, 52, 94, 107, 110, 128, 129, 168, 178, 220, 266, 267, 269, 275, 277, 281, 283, 289, 337], "rotation": [1, 2, 52, 55, 128, 129, 178, 181, 277], "invari": [1, 2, 18, 38, 42, 52, 55, 80, 128, 129, 164, 168, 178, 181, 206, 243, 277, 283, 287, 288, 326], "equal": [1, 2, 5, 11, 41, 45, 47, 52, 55, 62, 67, 70, 93, 109, 128, 129, 132, 138, 167, 171, 173, 178, 181, 188, 193, 196, 219, 243, 271, 275, 277, 280, 283, 285, 287, 288, 289, 322, 328, 331, 333, 337, 346, 347], "By": [1, 2, 11, 17, 28, 36, 45, 47, 53, 58, 63, 66, 78, 79, 82, 99, 102, 124, 128, 129, 138, 144, 154, 162, 171, 173, 179, 184, 189, 192, 204, 205, 208, 225, 228, 230, 237, 255, 258, 265, 275, 277, 282, 283, 284, 285, 287, 288, 346, 350], "100": [1, 2, 5, 17, 18, 24, 29, 46, 51, 54, 55, 60, 64, 65, 70, 71, 72, 81, 82, 84, 86, 87, 88, 90, 93, 104, 105, 128, 129, 132, 144, 150, 155, 172, 177, 180, 181, 186, 190, 191, 196, 197, 198, 207, 208, 210, 212, 213, 214, 216, 219, 256, 260, 263, 273, 275, 278, 279, 283, 284, 285, 286, 287, 289, 291, 331], "enhancement_kernel": [1, 2, 128, 129], "enhancementkernel": [1, 2, 128, 129], "shift_twist_convolut": [1, 128], "convolv": [1, 128], "d33": [1, 2, 128, 129], "d44": [1, 2, 128, 129], "02": [1, 2, 55, 56, 57, 73, 128, 129, 181, 182, 183, 199, 283, 325, 326, 331, 338], "k": [1, 2, 5, 10, 15, 18, 24, 28, 34, 36, 38, 40, 42, 54, 56, 57, 63, 64, 65, 67, 78, 80, 90, 92, 99, 103, 104, 105, 107, 128, 129, 132, 137, 142, 150, 154, 160, 162, 164, 166, 168, 180, 182, 183, 189, 190, 191, 193, 204, 206, 216, 218, 225, 229, 234, 240, 243, 245, 275, 277, 278, 282, 283, 284, 285, 287, 288, 289, 307, 311, 322, 346, 348, 350], "shm": [1, 2, 7, 8, 9, 11, 12, 20, 37, 40, 53, 60, 90, 92, 94, 98, 128, 129, 134, 135, 136, 138, 139, 146, 163, 166, 179, 186, 216, 218, 220, 224, 289, 290, 324, 329, 331, 332, 333, 337, 350], "sf_to_sh": [1, 60, 128, 186, 290], "sh_to_sf": [1, 60, 128, 186, 290], "delta": [1, 128, 229, 243, 277, 288, 289, 290, 309, 333, 342, 346, 348], "spike": [1, 128], "zero": [1, 2, 5, 17, 18, 26, 42, 43, 49, 53, 54, 55, 56, 58, 65, 70, 76, 85, 92, 93, 98, 107, 128, 129, 132, 144, 152, 168, 169, 175, 179, 180, 181, 182, 184, 191, 196, 202, 211, 218, 219, 224, 264, 266, 267, 273, 275, 277, 279, 280, 281, 282, 283, 285, 287, 326, 327, 328, 329, 335, 341, 343, 346, 347], "get_orient": [1, 128], "shape": [1, 2, 5, 9, 10, 13, 15, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 75, 78, 80, 82, 86, 88, 91, 93, 94, 96, 97, 99, 128, 129, 132, 136, 137, 140, 142, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 181, 182, 184, 186, 187, 188, 190, 191, 193, 194, 196, 197, 199, 200, 201, 204, 206, 208, 212, 214, 217, 219, 220, 222, 223, 225, 231, 237, 241, 244, 252, 260, 262, 263, 264, 271, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 295, 305, 307, 316, 324, 325, 326, 331, 333, 335, 337, 338, 341, 342], "dtype": [1, 43, 71, 76, 81, 128, 169, 197, 202, 207, 275, 277, 279, 281, 283, 285, 287, 289, 324, 331, 332, 335, 337, 342], "spike_shm_conv": [1, 128], "get_spher": [1, 12, 14, 20, 44, 46, 47, 48, 50, 52, 53, 58, 59, 60, 61, 84, 86, 128, 139, 141, 146, 170, 172, 173, 174, 176, 178, 179, 184, 185, 186, 187, 210, 212, 283, 287, 290], "sh_order": [1, 2, 7, 8, 9, 11, 12, 37, 41, 48, 53, 58, 60, 90, 92, 98, 128, 129, 134, 135, 136, 138, 139, 163, 167, 174, 179, 184, 186, 216, 218, 224, 243, 280, 282, 283, 289, 304, 305], "8": [1, 2, 5, 9, 18, 21, 25, 26, 28, 37, 41, 42, 43, 52, 53, 55, 58, 59, 60, 61, 64, 65, 75, 81, 90, 92, 94, 98, 99, 103, 107, 127, 128, 129, 132, 136, 147, 151, 152, 154, 163, 167, 168, 169, 178, 179, 181, 184, 185, 186, 187, 190, 191, 201, 207, 216, 218, 220, 224, 225, 243, 249, 250, 273, 275, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 298, 321, 322, 324, 328, 329, 331, 334, 335, 336, 337, 339, 344, 348], "test_mod": [1, 128], "true": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 25, 26, 27, 28, 32, 33, 34, 36, 37, 40, 41, 44, 47, 50, 51, 52, 55, 58, 60, 64, 65, 66, 67, 68, 71, 74, 75, 80, 81, 88, 89, 90, 92, 94, 96, 98, 107, 109, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 153, 154, 158, 159, 160, 162, 163, 166, 167, 170, 173, 176, 177, 178, 181, 184, 186, 190, 191, 192, 193, 194, 197, 200, 201, 206, 207, 214, 215, 216, 218, 220, 222, 224, 229, 244, 252, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 291, 292, 296, 299, 300, 304, 305, 309, 311, 315, 321, 322, 328, 337], "spike_sf_conv": [1, 128], "model_kernel": [1, 128], "odf_slic": [1, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 84, 86, 128, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 210, 212, 329], "6": [1, 2, 7, 8, 9, 11, 12, 18, 24, 26, 28, 32, 34, 37, 39, 42, 43, 44, 45, 47, 48, 49, 51, 52, 54, 55, 56, 57, 61, 62, 66, 67, 73, 75, 76, 78, 79, 80, 81, 87, 88, 90, 92, 94, 96, 98, 103, 108, 124, 125, 127, 128, 129, 134, 135, 136, 138, 139, 150, 152, 154, 158, 160, 163, 165, 168, 169, 170, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 187, 188, 192, 193, 199, 201, 202, 204, 205, 206, 207, 213, 214, 216, 218, 220, 222, 224, 232, 233, 243, 249, 250, 264, 266, 270, 273, 275, 277, 278, 281, 283, 284, 285, 287, 289, 306, 307, 315, 319, 324, 326, 327, 329, 330, 332, 333, 341, 343, 344, 346, 347], "scale": [1, 40, 41, 46, 47, 48, 52, 53, 54, 58, 59, 61, 63, 64, 70, 71, 72, 84, 94, 128, 166, 167, 172, 173, 174, 178, 179, 180, 184, 185, 187, 189, 190, 196, 197, 198, 210, 220, 231, 244, 271, 275, 277, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 292, 302, 309, 316, 330, 338, 341, 346, 348], "4": [1, 2, 5, 6, 10, 14, 17, 20, 22, 23, 24, 26, 27, 28, 32, 33, 34, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 62, 64, 65, 67, 71, 72, 73, 74, 78, 79, 81, 82, 90, 94, 96, 99, 103, 104, 105, 106, 127, 128, 129, 132, 133, 137, 141, 144, 146, 148, 149, 150, 152, 153, 154, 158, 159, 160, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 188, 190, 191, 193, 197, 198, 199, 200, 204, 205, 207, 208, 216, 220, 222, 225, 229, 231, 233, 234, 239, 240, 243, 249, 250, 260, 263, 266, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 305, 307, 315, 324, 325, 326, 329, 335, 338, 341, 344, 346, 350], "displai": [1, 2, 5, 9, 13, 14, 37, 40, 46, 48, 52, 61, 71, 76, 84, 94, 96, 97, 98, 99, 107, 128, 129, 132, 136, 140, 141, 163, 166, 172, 174, 178, 187, 197, 202, 210, 220, 222, 223, 224, 225, 265, 278, 288, 289, 311, 326, 330, 336], "x": [1, 2, 5, 13, 34, 51, 56, 57, 59, 61, 67, 71, 80, 85, 94, 96, 99, 107, 115, 124, 128, 129, 132, 140, 160, 177, 182, 183, 185, 187, 193, 197, 206, 211, 220, 222, 225, 229, 230, 231, 233, 244, 249, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 293, 300, 324, 327, 331, 335, 337, 340, 344, 346, 351], "set_camera": [1, 2, 6, 75, 76, 88, 93, 94, 97, 128, 129, 133, 201, 202, 214, 219, 220, 223], "30": [1, 2, 7, 8, 11, 13, 15, 18, 24, 39, 45, 46, 48, 49, 55, 62, 75, 76, 81, 84, 88, 93, 97, 104, 105, 128, 129, 134, 135, 138, 140, 142, 150, 165, 171, 172, 174, 175, 181, 188, 201, 202, 207, 210, 214, 219, 223, 235, 236, 250, 273, 275, 277, 289, 329, 331], "focal_point": [1, 2, 75, 76, 88, 93, 94, 97, 128, 129, 201, 202, 214, 219, 220, 223], "view_up": [1, 2, 6, 75, 76, 88, 94, 97, 128, 129, 133, 201, 202, 214, 220, 223], "record": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 39, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 63, 67, 71, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 165, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 189, 193, 197, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 282, 284, 288, 328, 329, 330, 333, 335, 337, 343], "out_path": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 37, 40, 41, 46, 47, 48, 52, 53, 58, 59, 60, 61, 63, 67, 71, 75, 76, 78, 79, 80, 81, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 155, 163, 166, 167, 172, 173, 174, 178, 179, 184, 185, 186, 187, 189, 193, 197, 201, 202, 204, 205, 206, 207, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225], "png": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 252, 288, 289, 330, 337], "900": [1, 2, 9, 14, 37, 67, 71, 89, 93, 96, 98, 99, 104, 105, 128, 129, 136, 141, 163, 193, 197, 215, 219, 222, 224, 225, 325], "show": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 98, 99, 110, 119, 121, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 224, 225, 230, 232, 234, 252, 255, 256, 260, 266, 271, 279, 282, 283, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 329, 331, 335, 336, 341, 346], "csd_shm_enh": [1, 128], "sharpen": [1, 52, 128, 178, 283, 332], "csd_shm_enh_sharp": [1, 128], "lambda_": [1, 128, 283], "convert": [1, 42, 54, 60, 85, 109, 124, 128, 168, 180, 186, 211, 270, 277, 280, 281, 282, 283, 289, 305, 325, 329, 335, 337, 343], "raw": [1, 23, 40, 44, 45, 47, 50, 62, 63, 128, 149, 166, 170, 171, 173, 176, 188, 189, 229, 252, 278, 282, 333], "form": [1, 47, 48, 64, 65, 119, 124, 125, 128, 173, 174, 190, 191, 233, 243, 275, 277, 278, 283, 284, 285, 289, 346, 347], "csd_sf_orig": [1, 128], "csd_sf_noisi": [1, 128], "csd_sf_enh": [1, 128], "csd_sf_enh_sharp": [1, 128], "normal": [1, 6, 45, 47, 49, 54, 58, 64, 65, 71, 72, 73, 80, 100, 128, 133, 171, 173, 175, 180, 184, 190, 191, 197, 198, 199, 206, 226, 231, 232, 244, 263, 265, 271, 275, 277, 279, 281, 283, 284, 287, 288, 290, 333, 334, 337, 350], "amax": [1, 128], "observ": [1, 11, 23, 24, 32, 46, 49, 54, 57, 58, 68, 82, 84, 107, 128, 138, 149, 150, 158, 172, 175, 180, 183, 184, 194, 208, 210, 230, 245, 257, 264, 265, 270, 277, 283], "diffus": [1, 2, 5, 9, 10, 11, 13, 14, 15, 18, 24, 25, 26, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 53, 56, 57, 58, 59, 62, 63, 64, 71, 76, 84, 85, 90, 94, 96, 103, 104, 105, 107, 123, 128, 129, 132, 136, 137, 138, 140, 141, 142, 150, 151, 152, 154, 155, 156, 158, 162, 163, 164, 165, 166, 167, 171, 172, 174, 175, 176, 177, 179, 182, 183, 184, 185, 188, 189, 190, 197, 202, 210, 211, 216, 220, 222, 229, 233, 234, 235, 236, 237, 240, 241, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 260, 262, 264, 265, 266, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 331, 339, 341, 346, 347, 348, 350], "closer": [1, 66, 73, 128, 192, 199, 244, 264, 275, 338], "noiseless": [1, 63, 85, 86, 128, 189, 211, 212], "fodf_spheres_org": [1, 128], "z": [1, 2, 5, 13, 34, 40, 51, 56, 57, 61, 71, 85, 94, 96, 99, 107, 128, 129, 132, 140, 160, 166, 177, 182, 183, 187, 197, 211, 220, 222, 225, 229, 230, 231, 244, 275, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 293, 346, 351], "setposit": [1, 93, 99, 128, 219, 225], "fodf_spher": [1, 41, 53, 58, 59, 128, 167, 179, 184, 185], "fodf_spheres_enh": [1, 128], "fodf_spheres_enh_sharp": [1, 128], "top": [1, 5, 43, 64, 72, 73, 92, 98, 107, 110, 119, 125, 128, 132, 169, 190, 198, 199, 218, 224, 230, 233, 255, 270, 277, 288, 325, 331, 335], "left": [1, 2, 5, 15, 23, 24, 25, 26, 27, 28, 32, 34, 36, 39, 43, 46, 52, 54, 55, 56, 57, 59, 64, 65, 66, 67, 68, 71, 75, 76, 84, 87, 88, 92, 94, 96, 97, 99, 110, 128, 129, 132, 142, 149, 150, 151, 152, 153, 154, 158, 160, 162, 165, 169, 172, 178, 180, 181, 182, 183, 185, 190, 191, 192, 193, 194, 197, 201, 202, 210, 213, 214, 218, 220, 222, 223, 225, 229, 230, 235, 236, 237, 275, 277, 278, 281, 283, 284, 288], "bottom": [1, 2, 128, 129, 230], "snr": [1, 18, 26, 27, 30, 32, 46, 54, 84, 85, 86, 128, 152, 153, 156, 158, 172, 180, 210, 211, 212, 239, 278, 283, 285, 326, 333, 337], "meester": [1, 2, 126, 128, 129, 325, 326], "g": [1, 2, 5, 6, 8, 10, 15, 24, 32, 36, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 55, 58, 59, 61, 62, 63, 64, 65, 70, 71, 72, 73, 78, 80, 90, 92, 93, 96, 98, 103, 107, 110, 111, 117, 124, 125, 128, 129, 132, 133, 135, 137, 142, 150, 158, 162, 166, 168, 170, 171, 173, 175, 176, 177, 178, 180, 181, 184, 185, 187, 188, 189, 190, 191, 196, 197, 198, 199, 204, 206, 216, 218, 219, 222, 224, 229, 230, 234, 236, 239, 240, 242, 243, 244, 245, 249, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 307, 321, 322, 344, 346, 347], "sanguinetti": [1, 2, 128, 129, 324], "e": [1, 2, 5, 6, 8, 9, 10, 13, 15, 24, 26, 28, 32, 36, 37, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 62, 63, 65, 66, 70, 71, 75, 76, 78, 79, 80, 81, 85, 87, 88, 89, 92, 96, 103, 104, 105, 107, 110, 111, 117, 124, 125, 126, 128, 129, 132, 133, 135, 136, 137, 140, 142, 150, 152, 154, 158, 162, 163, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 183, 184, 185, 187, 188, 189, 191, 192, 196, 197, 201, 202, 204, 205, 206, 207, 211, 213, 214, 215, 218, 222, 229, 230, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 249, 252, 256, 260, 263, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 331, 333, 344, 345, 346, 347, 350], "garyfallidi": [1, 2, 9, 28, 37, 49, 50, 66, 67, 68, 75, 78, 79, 80, 81, 87, 88, 89, 96, 103, 104, 105, 107, 123, 126, 128, 129, 136, 154, 163, 175, 176, 192, 193, 194, 201, 204, 205, 206, 207, 213, 214, 215, 222, 234, 235, 236, 237, 244, 245, 275, 278, 279, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "j": [1, 2, 5, 7, 10, 13, 15, 24, 26, 28, 34, 36, 39, 41, 42, 43, 47, 48, 49, 51, 53, 56, 57, 58, 59, 61, 67, 71, 72, 73, 75, 82, 87, 88, 89, 99, 103, 104, 105, 107, 128, 129, 132, 134, 137, 140, 142, 150, 152, 154, 160, 162, 165, 167, 168, 169, 173, 174, 175, 177, 179, 182, 183, 184, 185, 187, 193, 197, 198, 199, 201, 208, 213, 214, 215, 225, 229, 235, 236, 240, 243, 244, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 295, 298, 299, 301, 302, 305, 306, 307, 308, 311, 316, 331, 342, 346, 348, 350], "portegi": [1, 2, 128, 129], "duit": [1, 2, 128, 129], "2016": [1, 2, 7, 18, 24, 26, 28, 42, 43, 48, 51, 52, 53, 54, 56, 57, 104, 105, 128, 129, 134, 150, 152, 154, 168, 169, 174, 177, 178, 179, 180, 182, 183, 232, 234, 250, 273, 277, 278, 279, 283, 284, 289, 298, 299, 325, 326, 336], "fast": [1, 9, 18, 37, 42, 43, 51, 53, 54, 55, 64, 77, 80, 82, 94, 103, 104, 105, 119, 128, 136, 163, 168, 169, 177, 179, 180, 181, 190, 203, 206, 208, 220, 232, 233, 234, 243, 249, 252, 275, 280, 283, 284, 285, 288, 289, 311, 324, 326, 331, 343, 350], "ismrm": [1, 39, 51, 66, 67, 128, 165, 177, 192, 193, 250, 275, 283, 284, 287, 288, 289, 311, 318, 333, 337], "confer": [1, 2, 128, 129, 275, 283, 287], "fick": [1, 2, 18, 52, 104, 105, 126, 128, 129, 178, 273, 278, 283, 326, 327, 329], "girard": [1, 2, 6, 10, 15, 126, 128, 129, 133, 137, 142, 245, 287, 289, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 337, 340, 341, 343], "2015": [1, 2, 13, 14, 18, 24, 42, 54, 58, 59, 66, 67, 85, 103, 104, 105, 128, 129, 140, 141, 150, 168, 180, 184, 185, 192, 193, 211, 232, 233, 236, 240, 243, 244, 249, 250, 273, 275, 277, 278, 283, 285, 287, 289, 318, 324, 325, 326, 334, 336], "improv": [1, 2, 5, 10, 15, 23, 26, 27, 53, 57, 58, 68, 71, 128, 129, 132, 137, 142, 149, 152, 153, 179, 183, 184, 194, 197, 237, 244, 249, 252, 253, 258, 260, 261, 263, 264, 271, 275, 277, 283, 284, 289, 324, 326, 327, 328, 331, 333, 335, 336, 337, 338, 339, 341, 342], "combin": [1, 2, 9, 14, 18, 23, 32, 37, 52, 53, 55, 56, 58, 59, 61, 70, 94, 101, 110, 128, 129, 136, 141, 149, 158, 163, 178, 179, 181, 182, 184, 185, 187, 196, 220, 227, 252, 256, 266, 271, 275, 277, 279, 283, 287, 289, 326], "flow": [1, 2, 102, 128, 129, 228, 275, 283, 289, 328, 329, 336, 342], "plo": [1, 2, 13, 14, 25, 26, 28, 58, 59, 87, 104, 105, 128, 129, 140, 141, 151, 152, 154, 184, 185, 213, 278, 279, 282, 283, 286, 289, 298], "One": [1, 2, 5, 11, 13, 24, 28, 32, 34, 39, 41, 42, 47, 53, 58, 63, 87, 97, 128, 129, 132, 138, 140, 150, 154, 158, 160, 165, 167, 168, 173, 179, 184, 189, 213, 223, 233, 234, 254, 263, 264, 267, 272, 275, 277, 278, 282, 283, 286, 287, 325, 327, 329, 342, 347], "se": [1, 48, 49, 128, 174, 175], "applic": [1, 2, 20, 22, 24, 26, 32, 42, 47, 52, 54, 58, 74, 93, 128, 129, 146, 148, 150, 152, 158, 168, 173, 178, 180, 184, 200, 219, 233, 275, 277, 279, 281, 282, 283, 284, 289, 310], "neuroimag": [1, 6, 7, 10, 15, 24, 26, 34, 36, 41, 42, 43, 44, 45, 46, 49, 52, 53, 54, 56, 57, 58, 62, 63, 66, 67, 75, 84, 85, 87, 90, 104, 105, 128, 133, 134, 137, 142, 150, 152, 160, 162, 167, 168, 169, 170, 171, 172, 175, 178, 179, 180, 182, 183, 184, 188, 189, 192, 193, 201, 210, 211, 213, 216, 233, 235, 236, 240, 243, 244, 245, 246, 275, 277, 278, 279, 280, 283, 284, 285, 287, 289, 298, 299, 305, 307, 313, 316, 318, 322, 324, 345, 350], "fifth": [1, 128], "intern": [1, 2, 11, 17, 26, 43, 51, 53, 75, 79, 81, 128, 129, 138, 144, 152, 169, 177, 179, 201, 205, 207, 232, 275, 283, 284, 288, 289, 311, 331], "variat": [1, 5, 28, 58, 128, 132, 154, 184, 255, 265, 275, 283, 289], "comput": [1, 2, 6, 9, 13, 17, 20, 21, 23, 24, 25, 26, 28, 34, 37, 41, 42, 43, 45, 47, 48, 49, 51, 52, 53, 54, 58, 61, 62, 64, 65, 66, 68, 71, 75, 76, 78, 79, 80, 85, 88, 89, 98, 103, 106, 109, 121, 128, 129, 133, 136, 140, 144, 146, 147, 149, 150, 151, 152, 154, 160, 163, 167, 168, 169, 171, 173, 174, 175, 177, 178, 179, 180, 184, 187, 188, 190, 191, 192, 194, 197, 201, 202, 204, 205, 206, 211, 214, 215, 224, 232, 233, 235, 240, 243, 244, 249, 251, 252, 269, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 295, 305, 306, 307, 308, 316, 319, 326, 329, 337, 350], "vision": [1, 2, 123, 128, 129, 251, 275, 283], "franken": [1, 2, 128, 129], "2011": [1, 2, 18, 23, 27, 34, 42, 43, 45, 61, 62, 64, 65, 67, 71, 72, 73, 82, 103, 104, 105, 128, 129, 149, 153, 160, 168, 169, 171, 187, 188, 190, 191, 193, 197, 198, 199, 208, 235, 239, 243, 244, 273, 277, 279, 283, 284, 289, 306, 331, 336], "journal": [1, 2, 13, 14, 25, 26, 28, 51, 58, 59, 90, 96, 104, 105, 128, 129, 140, 141, 151, 152, 154, 177, 184, 185, 216, 222, 243, 250, 279, 282, 283, 285, 287, 289, 298, 307, 308], "92": [1, 2, 18, 58, 128, 129, 184, 273, 283, 285, 333], "231": [1, 2, 128, 129, 277], "264": [1, 2, 128, 129, 332], "p": [1, 2, 13, 25, 26, 27, 28, 45, 46, 58, 62, 82, 84, 107, 110, 119, 128, 129, 140, 151, 152, 153, 154, 171, 172, 184, 188, 208, 210, 229, 232, 235, 239, 268, 275, 277, 279, 281, 282, 283, 284, 285, 287, 289, 298, 307, 348, 350, 351], "rodrigu": [1, 2, 128, 129, 277], "romeni": [1, 2, 128, 129], "A": [1, 2, 5, 6, 9, 10, 13, 14, 15, 18, 24, 25, 26, 28, 31, 32, 37, 39, 41, 42, 43, 48, 49, 52, 53, 54, 57, 58, 59, 63, 64, 67, 75, 80, 82, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 111, 117, 122, 125, 127, 128, 129, 132, 133, 136, 137, 140, 141, 142, 150, 151, 152, 154, 157, 158, 163, 165, 167, 168, 169, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 193, 201, 206, 208, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 233, 234, 235, 236, 237, 240, 242, 243, 245, 249, 250, 255, 256, 267, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 329, 330, 331, 332, 334, 335, 346, 347, 350], "vilanova": [1, 2, 128, 129], "2010": [1, 2, 18, 20, 40, 42, 46, 50, 67, 84, 103, 104, 105, 128, 129, 146, 166, 168, 172, 176, 193, 210, 233, 234, 243, 273, 275, 277, 278, 283, 285, 336], "acceler": [1, 2, 18, 58, 64, 128, 129, 184, 190, 240, 273, 275, 283, 289], "dw": [1, 2, 34, 85, 92, 128, 129, 160, 211, 218, 283], "mri": [1, 2, 5, 9, 10, 13, 14, 15, 18, 22, 24, 26, 28, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 74, 76, 90, 92, 103, 104, 105, 107, 123, 128, 129, 132, 136, 137, 140, 141, 142, 148, 150, 152, 154, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 200, 202, 216, 218, 229, 234, 235, 236, 237, 239, 240, 241, 245, 246, 249, 250, 251, 252, 255, 257, 260, 265, 271, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 337, 339, 341, 350], "eurograph": [1, 2, 128, 129], "workshop": [1, 2, 48, 61, 128, 129, 174, 187, 250, 283, 330], "biologi": [1, 2, 94, 128, 129, 220], "medicin": [1, 2, 26, 28, 29, 40, 42, 43, 48, 51, 53, 54, 58, 128, 129, 152, 154, 166, 168, 169, 174, 177, 179, 180, 184, 234, 243, 279, 283, 284, 285, 288, 289, 299, 311], "associ": [1, 2, 28, 43, 49, 99, 128, 129, 154, 169, 175, 225, 275, 277, 278, 281, 283, 284, 285, 287, 289, 301, 321, 322, 331, 350], "total": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 234, 270, 277, 282, 283, 285, 287, 289, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "script": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 233, 234, 248, 289, 305, 315, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 351], "minut": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 109, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 233, 252], "000": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 273, 277, 283, 285], "second": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 119, 124, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 233, 243, 252, 254, 263, 265, 271, 275, 277, 282, 283, 284, 285, 287, 288, 289, 331, 336, 346], "sourc": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 108, 122, 123, 124, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 248, 251, 253, 254, 265, 266, 267, 269, 270, 272, 275, 277, 284, 287, 289, 331], "contextual_enhanc": [1, 128], "jupyt": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 260, 343], "notebook": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 260, 326, 328, 335, 337, 343], "ipynb": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228], "galleri": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 232, 249, 250, 326, 332, 335, 343, 344], "sphinx": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 107, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 232, 233, 257, 329, 330, 337, 338, 343], "fbc": [2, 129, 249, 326, 338], "quantit": [2, 10, 15, 42, 48, 104, 105, 129, 137, 142, 168, 174, 245, 265, 271, 283, 286, 287, 289, 307], "surround": [2, 55, 63, 129, 181, 189], "These": [2, 13, 15, 17, 24, 25, 34, 39, 42, 43, 47, 49, 51, 52, 55, 58, 64, 82, 85, 87, 90, 94, 107, 112, 116, 124, 129, 140, 142, 144, 150, 151, 160, 165, 168, 169, 173, 175, 177, 178, 181, 184, 190, 208, 211, 213, 216, 220, 243, 251, 252, 256, 260, 265, 267, 269, 271, 275, 277, 278, 283, 285, 324, 326, 327, 328, 329, 330, 335, 336, 337, 339, 340, 341, 342, 343, 346, 347, 348, 350, 351], "clean": [2, 117, 124, 129, 232, 233, 249, 284, 326, 328, 329, 330, 331, 332, 334, 335, 341], "low": [2, 15, 18, 23, 42, 51, 52, 53, 54, 59, 63, 78, 90, 123, 129, 142, 149, 168, 177, 178, 179, 180, 185, 189, 204, 216, 229, 239, 243, 273, 275, 277, 279, 282, 283, 284, 285, 287], "indic": [2, 6, 18, 20, 26, 34, 38, 40, 42, 43, 47, 48, 52, 63, 72, 76, 78, 79, 80, 81, 89, 92, 129, 133, 146, 152, 160, 164, 166, 168, 169, 173, 174, 178, 189, 198, 202, 204, 205, 206, 207, 215, 218, 243, 263, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 304, 305, 313, 315, 316, 332, 338, 340, 341], "isol": [2, 34, 52, 58, 129, 160, 178, 184, 275], "poorli": [2, 129, 283], "figur": [2, 5, 9, 13, 15, 21, 22, 23, 24, 26, 28, 34, 36, 37, 43, 45, 48, 49, 51, 53, 54, 55, 56, 62, 65, 71, 74, 82, 85, 92, 93, 94, 107, 129, 132, 136, 140, 142, 147, 148, 149, 150, 152, 154, 160, 162, 163, 169, 171, 174, 175, 177, 179, 180, 181, 182, 188, 191, 197, 200, 208, 211, 218, 219, 220, 249, 252, 262, 264, 266, 267, 270, 272, 277, 288, 289, 311, 324, 326, 327, 328, 335], "below": [2, 6, 15, 17, 18, 24, 25, 26, 28, 38, 42, 43, 47, 49, 53, 80, 90, 92, 93, 97, 99, 104, 129, 133, 142, 144, 150, 151, 152, 154, 164, 168, 169, 173, 175, 179, 206, 216, 218, 219, 223, 225, 230, 233, 235, 245, 256, 263, 265, 271, 275, 277, 281, 282, 283, 285, 286, 287, 289, 292, 330, 350], "On": [2, 42, 52, 78, 103, 110, 129, 168, 178, 204, 233, 260, 275, 277, 283, 329], "illustr": [2, 24, 29, 40, 41, 42, 47, 49, 52, 53, 54, 55, 58, 59, 60, 63, 86, 129, 150, 155, 166, 167, 168, 173, 175, 178, 179, 180, 181, 184, 185, 186, 189, 212, 239, 277, 283, 285, 342, 351], "contribut": [2, 5, 43, 49, 51, 54, 55, 65, 85, 86, 87, 107, 123, 126, 129, 132, 169, 175, 177, 180, 181, 191, 211, 212, 213, 252, 265, 275, 282, 283, 285, 287, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348], "two": [2, 5, 7, 18, 23, 24, 26, 29, 32, 34, 36, 39, 41, 43, 45, 47, 49, 51, 53, 54, 55, 57, 59, 61, 62, 64, 65, 67, 68, 71, 72, 73, 78, 79, 80, 82, 85, 86, 89, 93, 94, 99, 103, 124, 129, 132, 134, 149, 150, 152, 155, 158, 160, 162, 165, 167, 169, 171, 173, 175, 177, 179, 180, 181, 183, 185, 187, 188, 190, 191, 193, 194, 197, 198, 199, 204, 205, 206, 208, 211, 212, 215, 219, 220, 225, 229, 230, 233, 235, 236, 237, 243, 244, 251, 255, 256, 259, 261, 263, 265, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 296, 308, 332, 346, 347, 350], "densiti": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 37, 42, 47, 58, 71, 90, 91, 92, 98, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 168, 173, 184, 197, 216, 217, 218, 224, 243, 275, 283, 285, 287, 289, 321, 322, 333, 348], "estim": [2, 8, 9, 10, 11, 15, 18, 23, 24, 27, 28, 30, 37, 38, 39, 42, 43, 47, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 63, 70, 71, 94, 103, 129, 135, 136, 137, 138, 142, 149, 150, 153, 154, 156, 163, 164, 165, 168, 169, 173, 174, 175, 177, 178, 179, 180, 182, 183, 185, 187, 189, 196, 197, 220, 229, 239, 240, 243, 245, 249, 255, 256, 257, 273, 275, 277, 279, 280, 283, 284, 285, 287, 289, 292, 298, 299, 300, 306, 307, 308, 309, 322, 324, 325, 326, 327, 333, 335, 337, 338, 339, 346, 347], "sum": [2, 5, 34, 41, 42, 44, 45, 50, 52, 53, 54, 56, 58, 59, 62, 70, 72, 78, 80, 129, 132, 160, 167, 168, 170, 171, 176, 178, 179, 180, 182, 184, 185, 188, 196, 198, 204, 206, 230, 244, 260, 265, 275, 277, 278, 282, 283, 285, 286, 287, 289, 292], "color": [2, 5, 6, 9, 13, 14, 24, 29, 34, 37, 39, 47, 51, 55, 63, 66, 67, 68, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 88, 89, 90, 93, 94, 96, 98, 99, 109, 129, 132, 133, 136, 140, 141, 150, 155, 160, 163, 165, 173, 177, 181, 189, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 214, 215, 216, 219, 220, 222, 224, 225, 232, 235, 236, 249, 255, 275, 281, 283, 284, 288, 289, 306, 307, 311, 324, 326, 328, 329, 333, 341], "spuriou": [2, 52, 63, 67, 124, 129, 178, 189, 193, 283], "badli": [2, 34, 129, 160], "identifi": [2, 9, 10, 13, 18, 34, 37, 63, 94, 96, 129, 136, 137, 140, 160, 163, 189, 220, 222, 245, 267, 273, 275, 277, 278, 279, 281, 282, 283, 284, 287, 289, 312, 321, 346], "lfbc": [2, 129], "deviat": [2, 23, 27, 32, 34, 55, 63, 72, 85, 129, 149, 153, 158, 160, 181, 189, 198, 211, 239, 275, 279, 283, 285, 287, 288, 289, 292, 298, 299, 333, 341], "portegies2015": [2, 129], "5d": [2, 129, 281], "first": [2, 5, 6, 9, 14, 17, 20, 22, 23, 24, 25, 27, 28, 29, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 100, 102, 107, 110, 119, 121, 124, 125, 129, 132, 133, 136, 141, 144, 146, 148, 149, 150, 151, 153, 154, 155, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 255, 256, 262, 263, 265, 268, 271, 275, 277, 279, 282, 283, 284, 285, 287, 288, 289, 327, 345], "induc": [2, 42, 129, 168, 283], "lift": [2, 129], "defin": [2, 8, 10, 14, 15, 24, 26, 34, 42, 43, 47, 49, 51, 54, 55, 56, 57, 61, 63, 65, 66, 67, 70, 72, 73, 78, 79, 80, 82, 85, 90, 107, 129, 135, 137, 141, 142, 150, 152, 160, 168, 169, 173, 175, 177, 180, 181, 182, 183, 187, 189, 191, 192, 193, 196, 198, 199, 204, 205, 206, 208, 211, 216, 231, 255, 268, 275, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 311, 315, 317, 326, 328, 334, 337, 341, 343, 350], "whole": [2, 41, 55, 58, 92, 104, 105, 129, 167, 181, 184, 218, 252, 256, 279, 284, 287], "rel": [2, 5, 14, 39, 47, 63, 87, 90, 107, 109, 110, 129, 132, 141, 165, 173, 189, 213, 216, 237, 277, 280, 283, 286, 289, 324, 326, 329, 330, 331], "rfbc": [2, 129], "averag": [2, 10, 23, 41, 42, 51, 54, 56, 57, 58, 59, 67, 68, 75, 104, 105, 129, 137, 149, 167, 168, 177, 180, 182, 183, 184, 185, 193, 194, 201, 229, 235, 236, 239, 265, 275, 278, 279, 282, 283, 284, 285, 286, 288, 289, 311, 326, 348], "detail": [2, 5, 15, 17, 24, 26, 27, 28, 32, 42, 43, 49, 51, 53, 54, 56, 61, 64, 90, 104, 113, 114, 117, 118, 129, 132, 142, 144, 150, 152, 153, 154, 158, 168, 169, 175, 177, 179, 180, 182, 187, 190, 216, 229, 233, 234, 238, 255, 256, 257, 260, 270, 271, 277, 278, 283, 284, 324, 333, 337], "found": [2, 10, 24, 52, 55, 57, 64, 90, 92, 100, 102, 129, 137, 150, 178, 181, 183, 190, 216, 218, 226, 228, 245, 249, 254, 277, 279, 280, 283, 287, 289, 300, 301, 315, 324, 326, 343, 345, 346, 347], "load_nifti": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 50, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 65, 71, 73, 74, 87, 90, 92, 94, 98, 99, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 179, 180, 182, 184, 185, 187, 188, 189, 190, 191, 197, 199, 200, 213, 216, 218, 220, 224, 225, 232, 275, 278, 290], "label_fnam": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224], "stanford_label": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 104, 105, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224], "t1_fname": [2, 5, 13, 14, 24, 27, 42, 43, 52, 53, 54, 73, 82, 92, 94, 129, 132, 140, 141, 150, 153, 168, 169, 178, 179, 180, 199, 208, 218, 220], "stanford_t1": [2, 5, 13, 14, 27, 92, 94, 104, 105, 129, 132, 140, 141, 153, 218, 220], "label": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 39, 51, 54, 55, 63, 71, 72, 73, 81, 85, 86, 90, 92, 93, 94, 96, 98, 104, 105, 107, 108, 109, 120, 124, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 165, 177, 180, 181, 189, 197, 198, 199, 207, 211, 212, 216, 218, 219, 220, 222, 224, 244, 278, 282, 287, 288, 289, 313, 324, 327, 329, 335, 337], "t1_data": [2, 5, 13, 14, 92, 94, 129, 132, 140, 141, 218, 220], "relev": [2, 42, 43, 49, 51, 54, 57, 85, 107, 129, 168, 169, 175, 177, 180, 183, 211, 233, 234, 235, 236, 237, 248, 249, 251, 254, 257, 282, 283, 286, 287, 289], "hemispher": [2, 11, 29, 54, 60, 68, 86, 129, 138, 155, 180, 186, 194, 212, 237, 278, 280, 283, 290, 331], "coordin": [2, 5, 6, 22, 29, 31, 33, 36, 47, 51, 54, 58, 60, 74, 78, 85, 86, 87, 93, 94, 96, 97, 127, 129, 132, 133, 148, 155, 157, 159, 162, 173, 177, 180, 184, 186, 200, 204, 211, 212, 213, 219, 220, 222, 223, 229, 231, 232, 234, 243, 249, 274, 275, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 311, 324, 325, 335, 340, 342, 349, 350], "bound": [2, 51, 129, 177, 275, 277, 281, 283, 284, 285, 289, 314, 315, 319, 326, 329, 337], "dshape": [2, 129], "xa": [2, 129], "xb": [2, 129], "ya": [2, 129], "yb": [2, 129], "za": [2, 129, 289], "zb": [2, 129], "15": [2, 10, 12, 18, 24, 34, 41, 42, 45, 53, 55, 57, 58, 62, 65, 68, 70, 75, 81, 96, 99, 103, 127, 129, 137, 139, 150, 160, 167, 168, 171, 179, 181, 183, 184, 188, 191, 194, 196, 201, 207, 222, 225, 233, 234, 249, 250, 273, 275, 277, 282, 283, 284, 285, 287, 288, 289, 296, 305, 311, 324, 330, 331, 342, 344, 350], "18": [2, 18, 45, 55, 75, 76, 81, 88, 96, 97, 103, 129, 171, 181, 201, 202, 207, 214, 222, 223, 234, 235, 236, 237, 250, 273, 277, 279, 283, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 331, 334, 336, 337], "selectionmask": [2, 129], "bool": [2, 32, 43, 81, 129, 158, 169, 207, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 340, 341], "constant": [2, 8, 9, 18, 20, 37, 38, 51, 61, 65, 129, 135, 136, 146, 163, 164, 177, 187, 191, 229, 234, 241, 275, 283, 285, 289, 304, 317, 332, 346], "solid": [2, 8, 9, 18, 20, 37, 38, 129, 135, 136, 146, 163, 164, 234, 241, 277, 283, 285, 289, 304], "cda": [2, 129], "csa": [2, 5, 7, 8, 11, 12, 18, 20, 40, 90, 98, 129, 132, 134, 135, 138, 139, 146, 166, 216, 224, 234, 235, 241, 245, 273, 283, 286, 289, 304, 305, 326, 346, 347], "good": [2, 9, 34, 37, 39, 41, 52, 53, 59, 63, 64, 72, 82, 93, 107, 109, 110, 115, 117, 119, 124, 125, 129, 136, 160, 163, 165, 167, 178, 179, 185, 189, 190, 198, 208, 219, 239, 247, 252, 263, 270, 275, 277, 283, 284, 287, 289, 326, 333, 336, 340, 351], "choic": [2, 7, 52, 58, 64, 65, 72, 107, 109, 129, 134, 178, 184, 190, 191, 198, 239, 284, 324, 347, 350], "fraction": [2, 9, 13, 14, 15, 37, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 63, 84, 85, 86, 87, 97, 104, 105, 129, 136, 140, 141, 142, 163, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 189, 210, 211, 212, 213, 223, 249, 266, 282, 283, 284, 285, 286, 289, 306, 307, 308, 335], "anisotropi": [2, 9, 13, 14, 15, 37, 44, 47, 48, 49, 52, 53, 54, 55, 56, 63, 87, 97, 104, 105, 129, 136, 140, 141, 142, 163, 170, 173, 174, 175, 178, 179, 180, 181, 182, 189, 213, 223, 249, 277, 283, 284, 286, 289, 306, 307, 334, 335, 337], "gfa": [2, 7, 8, 9, 11, 12, 13, 14, 20, 37, 40, 44, 50, 90, 92, 98, 129, 134, 135, 136, 138, 139, 140, 141, 146, 163, 166, 170, 176, 216, 218, 224, 245, 280, 286, 289, 290, 331, 332, 333, 337], "restrict": [2, 9, 11, 17, 37, 42, 43, 52, 55, 57, 92, 129, 136, 138, 144, 163, 168, 169, 178, 181, 183, 218, 245, 254, 256, 281, 283, 285, 344], "those": [2, 5, 8, 9, 15, 34, 36, 37, 40, 47, 53, 55, 71, 79, 94, 99, 107, 110, 117, 119, 129, 132, 135, 136, 142, 160, 162, 163, 166, 173, 179, 181, 197, 205, 220, 225, 233, 245, 254, 258, 262, 269, 277, 279, 283, 284, 289], "area": [2, 9, 14, 15, 37, 40, 47, 51, 68, 75, 96, 99, 126, 129, 136, 141, 142, 163, 166, 173, 177, 194, 201, 222, 225, 235, 261, 275, 277, 281, 282, 283, 284, 287, 289, 311], "signific": [2, 9, 37, 52, 129, 136, 163, 178, 235, 283, 287], "thu": [2, 32, 34, 42, 43, 49, 51, 53, 71, 79, 107, 124, 129, 158, 160, 168, 169, 175, 177, 179, 197, 205, 239, 277, 282, 283], "interest": [2, 9, 29, 32, 34, 37, 42, 43, 63, 65, 71, 86, 92, 94, 129, 136, 155, 158, 160, 163, 168, 169, 189, 191, 197, 212, 218, 220, 239, 243, 278, 283, 287, 338], "done": [2, 5, 9, 24, 28, 32, 33, 37, 39, 43, 47, 52, 53, 54, 55, 58, 65, 67, 68, 73, 78, 80, 87, 94, 110, 116, 120, 124, 129, 132, 136, 150, 154, 158, 159, 163, 165, 169, 173, 178, 179, 180, 181, 184, 191, 193, 194, 199, 204, 206, 213, 220, 233, 252, 255, 261, 262, 264, 266, 268, 271, 272, 275, 277, 279, 283, 284, 287, 289, 298], "csaodfmodel": [2, 7, 8, 9, 11, 12, 20, 37, 40, 90, 92, 94, 98, 129, 134, 135, 136, 138, 139, 146, 163, 166, 216, 218, 220, 224, 290], "csa_model": [2, 7, 8, 9, 11, 12, 37, 90, 92, 98, 129, 134, 135, 136, 138, 139, 163, 216, 218, 224], "csa_peak": [2, 9, 37, 90, 92, 98, 129, 136, 163, 216, 218, 224, 235], "relative_peak_threshold": [2, 9, 14, 20, 21, 37, 40, 41, 50, 53, 58, 59, 90, 92, 94, 98, 129, 136, 141, 146, 147, 163, 166, 167, 176, 179, 184, 185, 216, 218, 220, 224, 280, 289, 332], "min_separation_angl": [2, 9, 14, 20, 21, 37, 40, 41, 50, 53, 58, 59, 90, 92, 94, 98, 129, 136, 141, 146, 147, 163, 166, 167, 176, 179, 184, 185, 216, 218, 220, 224, 280, 289], "45": [2, 9, 24, 37, 70, 82, 90, 92, 94, 98, 99, 109, 129, 136, 150, 163, 196, 208, 216, 218, 220, 224, 225, 233, 275, 278, 283, 331, 334], "probabilist": [2, 4, 5, 7, 8, 10, 13, 18, 32, 90, 92, 98, 129, 131, 132, 134, 135, 137, 140, 158, 216, 218, 224, 241, 249, 256, 279, 283, 285, 289, 321, 330, 332, 335, 344], "collect": [2, 58, 104, 105, 110, 129, 184, 267, 275, 278, 281, 282, 283, 286, 287, 329, 341, 350], "white": [2, 9, 10, 11, 13, 14, 15, 24, 32, 34, 37, 39, 42, 43, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 63, 65, 66, 67, 68, 75, 78, 81, 82, 87, 90, 92, 93, 94, 97, 103, 104, 105, 127, 129, 136, 137, 138, 140, 141, 142, 150, 158, 160, 163, 165, 168, 169, 173, 174, 177, 178, 179, 180, 181, 183, 184, 185, 189, 191, 192, 193, 194, 201, 204, 207, 208, 213, 216, 218, 219, 220, 223, 235, 241, 243, 244, 245, 265, 275, 278, 282, 283, 284, 285, 286, 287, 289, 296, 313, 316, 318, 322, 326, 327, 331, 343], "matter": [2, 9, 10, 11, 13, 14, 15, 17, 24, 32, 34, 37, 39, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 63, 66, 67, 68, 75, 82, 87, 90, 92, 94, 103, 104, 105, 127, 129, 136, 137, 138, 140, 141, 142, 144, 150, 158, 160, 163, 165, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 189, 192, 193, 194, 201, 208, 213, 216, 218, 220, 235, 241, 243, 244, 245, 265, 270, 275, 278, 281, 282, 283, 284, 285, 286, 287, 289, 296, 313, 316, 318, 322, 331, 343, 346], "known": [2, 9, 37, 39, 41, 49, 54, 59, 78, 80, 81, 129, 136, 163, 165, 167, 175, 180, 185, 204, 206, 207, 232, 245, 278, 283, 289, 306, 307], "csd_model": [2, 7, 8, 10, 11, 12, 15, 21, 39, 41, 129, 134, 135, 137, 138, 139, 142, 147, 165, 167], "csd_fit": [2, 7, 8, 10, 11, 12, 15, 41, 129, 134, 135, 137, 138, 139, 142, 167], "csd_fit_shm": [2, 129], "lib": [2, 24, 110, 129, 150, 278], "get": [2, 6, 7, 9, 15, 18, 20, 21, 26, 28, 29, 35, 37, 44, 45, 50, 51, 52, 53, 58, 62, 64, 65, 66, 68, 71, 72, 73, 75, 78, 79, 87, 90, 92, 94, 96, 99, 100, 102, 109, 110, 115, 116, 117, 118, 120, 121, 123, 124, 125, 129, 133, 134, 136, 142, 146, 147, 152, 154, 155, 161, 163, 170, 171, 176, 177, 178, 179, 184, 188, 190, 191, 192, 194, 197, 198, 199, 201, 204, 205, 213, 216, 218, 220, 222, 225, 226, 228, 235, 236, 239, 243, 245, 251, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 325, 328, 329, 331, 335, 337, 340, 341, 346, 347], "prob_dg": [2, 11, 13, 129, 138, 140], "from_shcoeff": [2, 8, 10, 11, 15, 129, 135, 137, 138, 142, 343], "max_angl": [2, 7, 8, 10, 11, 12, 13, 15, 129, 134, 135, 137, 138, 139, 140, 142, 287, 289, 321, 322, 343], "optic": [2, 129, 275, 278, 283], "radiat": [2, 92, 129, 218, 278], "calcarin": [2, 129], "sulcu": [2, 129], "cortex": [2, 5, 71, 129, 132, 197], "v1": [2, 80, 129, 206, 277], "later": [2, 42, 43, 51, 55, 58, 71, 87, 107, 129, 168, 169, 177, 181, 184, 197, 213, 251, 253, 256, 260, 263, 265, 269, 277, 283, 332], "genicul": [2, 129], "nucleu": [2, 129], "lgn": [2, 129, 278], "roi": [2, 5, 17, 18, 34, 41, 48, 53, 58, 61, 63, 71, 90, 91, 92, 95, 129, 132, 144, 160, 167, 174, 179, 184, 187, 189, 197, 216, 217, 218, 221, 249, 278, 283, 284, 287, 289, 290, 305, 311, 324, 329, 341], "cube": [2, 18, 55, 129, 181, 273, 283], "dimens": [2, 5, 17, 32, 36, 47, 51, 58, 64, 72, 80, 99, 103, 129, 132, 144, 158, 162, 173, 177, 184, 190, 198, 206, 225, 229, 243, 245, 259, 265, 271, 275, 277, 279, 281, 282, 283, 284, 285, 287, 289, 290, 307, 321, 322, 328, 335], "3x3x3": [2, 129], "rad": [2, 129, 277], "26": [2, 32, 66, 71, 72, 73, 81, 124, 129, 158, 192, 197, 198, 199, 207, 244, 250, 283, 326, 331, 333], "29": [2, 40, 47, 50, 129, 166, 173, 176, 331, 332, 342], "31": [2, 52, 97, 129, 178, 223, 234, 277, 283, 333], "getter": [2, 4, 5, 10, 12, 13, 15, 18, 92, 129, 131, 132, 137, 139, 140, 142, 218, 245, 281, 289, 321, 327, 328, 333, 335, 337], "streamlines_gener": [2, 9, 37, 129, 136, 163], "step_siz": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224, 277, 287, 289, 321, 322], "5": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 26, 31, 33, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 58, 59, 61, 66, 68, 70, 71, 72, 73, 74, 78, 82, 84, 89, 90, 92, 93, 94, 96, 97, 98, 99, 103, 104, 105, 125, 127, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 152, 157, 159, 160, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 184, 185, 187, 192, 194, 196, 197, 198, 199, 200, 204, 208, 210, 215, 216, 218, 219, 220, 222, 223, 224, 225, 232, 233, 234, 235, 242, 243, 245, 249, 250, 254, 265, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 307, 315, 317, 325, 326, 329, 331, 333, 335, 337, 342, 344], "enter": [2, 5, 110, 124, 129, 132, 275, 279, 280, 283, 284, 289, 304, 305, 310, 317, 318, 328], "5x5x5": [2, 26, 129, 152, 279, 289, 298, 299], "find": [2, 5, 10, 20, 32, 41, 47, 50, 52, 59, 67, 71, 72, 73, 75, 76, 82, 87, 93, 94, 96, 110, 113, 116, 120, 124, 129, 132, 137, 146, 158, 167, 173, 176, 178, 185, 193, 197, 198, 199, 201, 202, 208, 213, 219, 220, 222, 229, 233, 238, 243, 245, 246, 252, 255, 256, 259, 275, 277, 283, 284, 286, 287, 289, 297, 298, 304, 305, 306, 307, 309, 312, 326, 331, 333], "travers": [2, 5, 129, 132], "through": [2, 5, 10, 14, 15, 32, 44, 51, 52, 53, 58, 59, 64, 71, 80, 82, 90, 94, 100, 102, 129, 132, 137, 141, 142, 158, 170, 177, 178, 179, 184, 185, 190, 197, 206, 208, 216, 220, 226, 228, 229, 232, 235, 239, 240, 242, 243, 244, 245, 251, 252, 254, 255, 256, 261, 263, 264, 265, 267, 268, 271, 275, 278, 283, 287, 326, 331, 333, 338, 351], "mask_lgn": [2, 129], "28": [2, 40, 47, 56, 129, 166, 173, 182, 249, 282, 283, 284, 285, 287, 328, 331, 339, 340], "discard": [2, 94, 110, 124, 129, 220, 277, 278, 283, 325, 341], "filtered_fibers2": [2, 129], "tol": [2, 129, 275, 277, 278, 283, 287], "sfil": [2, 129], "rang": [2, 18, 20, 21, 23, 24, 40, 42, 43, 47, 51, 52, 54, 56, 57, 71, 75, 76, 88, 107, 122, 129, 146, 147, 149, 150, 166, 168, 169, 173, 177, 178, 180, 182, 183, 197, 201, 202, 214, 235, 249, 271, 273, 277, 281, 282, 283, 284, 287, 288, 289, 321, 322, 329, 337, 346], "len": [2, 6, 17, 76, 78, 79, 80, 81, 88, 93, 94, 129, 133, 144, 202, 204, 205, 206, 207, 214, 219, 220, 277, 278, 282, 283, 284, 285, 287, 288, 324, 338], "append": [2, 55, 60, 88, 90, 93, 100, 102, 129, 181, 186, 214, 216, 219, 226, 228, 284, 289], "propag": [2, 34, 45, 46, 52, 62, 84, 129, 160, 171, 172, 178, 188, 210, 241, 245, 249, 283, 285, 289, 309, 333, 346, 348], "cross": [2, 3, 5, 18, 38, 42, 44, 47, 51, 52, 54, 55, 58, 63, 71, 72, 73, 85, 107, 129, 130, 132, 164, 168, 170, 173, 177, 178, 180, 181, 184, 189, 197, 198, 199, 211, 243, 244, 249, 271, 275, 277, 283, 287, 289, 292, 324, 326, 329, 333, 335, 336, 341], "preserv": [2, 3, 18, 23, 26, 28, 129, 130, 149, 152, 154, 231, 237, 277, 287], "contextu": [2, 129, 249, 289, 325, 326], "enhanc": [2, 6, 77, 129, 133, 203, 239, 249, 325, 326, 333, 336], "regard": [2, 54, 61, 129, 180, 187, 251, 275, 326], "electrostat": [2, 29, 60, 86, 129, 155, 186, 212, 277, 342], "repuls": [2, 29, 129, 155, 277, 326, 342], "fbcmeasur": [2, 129], "chosen": [2, 9, 11, 37, 55, 60, 129, 136, 138, 163, 181, 186, 245, 283, 287, 347], "recal": [2, 129, 230, 283], "20": [2, 10, 18, 41, 45, 47, 54, 55, 58, 59, 62, 63, 67, 68, 70, 75, 82, 85, 86, 97, 99, 104, 105, 129, 137, 167, 171, 173, 180, 181, 184, 185, 188, 189, 193, 194, 196, 201, 208, 211, 212, 223, 225, 273, 275, 277, 278, 283, 284, 285, 287, 289, 296, 324, 331], "percent": [2, 129, 284], "most": [2, 5, 8, 20, 22, 32, 33, 34, 40, 55, 58, 64, 65, 67, 68, 72, 73, 74, 82, 107, 110, 115, 129, 132, 135, 146, 148, 158, 159, 160, 166, 181, 184, 190, 191, 193, 194, 198, 199, 200, 208, 233, 245, 260, 267, 278, 281, 283, 284, 287, 344], "fbc_sl_orig": [2, 129], "clrs_orig": [2, 129], "rfbc_orig": [2, 129], "get_points_rfbc_threshold": [2, 129], "emphasi": [2, 129], "01": [2, 41, 51, 58, 68, 73, 75, 129, 167, 177, 184, 194, 199, 201, 234, 237, 275, 277, 279, 283, 289, 296, 328, 329, 334, 336, 337, 342, 343], "fbc_sl_thre": [2, 129], "clrs_thre": [2, 129], "rfbc_thre": [2, 129], "125": [2, 18, 26, 81, 99, 129, 152, 207, 225, 271, 273, 331], "procedur": [2, 5, 23, 24, 42, 49, 54, 55, 85, 129, 132, 149, 150, 168, 175, 180, 181, 211, 240, 242, 243, 275, 277, 283, 285, 289, 304, 305, 326, 328], "tau": [2, 55, 129, 181, 277, 279, 283, 285, 287, 289, 290, 298, 338, 346], "lineactor": [2, 129], "vstack": [2, 29, 46, 54, 60, 84, 86, 93, 129, 155, 172, 180, 186, 210, 212, 219, 252, 287], "linewidth": [2, 13, 14, 54, 67, 71, 81, 88, 89, 90, 93, 97, 129, 140, 141, 180, 193, 197, 207, 214, 215, 216, 219, 223, 288], "horizont": [2, 129, 288, 351], "axial": [2, 23, 26, 27, 32, 36, 40, 41, 42, 47, 48, 53, 54, 58, 59, 82, 94, 99, 129, 149, 152, 153, 158, 162, 166, 167, 168, 173, 174, 179, 180, 184, 185, 208, 220, 225, 249, 267, 269, 270, 283, 287, 288, 289, 306, 307], "slice": [2, 9, 13, 18, 22, 23, 24, 26, 27, 28, 32, 34, 36, 37, 40, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 62, 63, 65, 72, 73, 74, 82, 90, 94, 95, 96, 129, 136, 140, 148, 149, 150, 152, 153, 154, 158, 160, 162, 163, 166, 168, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 188, 189, 191, 198, 199, 200, 208, 216, 220, 221, 222, 232, 234, 249, 263, 265, 271, 275, 278, 279, 281, 283, 284, 289, 290, 310, 326, 328, 329, 335, 337, 341, 343], "t1": [2, 14, 18, 24, 53, 77, 92, 96, 102, 104, 105, 129, 141, 150, 179, 203, 218, 222, 228, 234, 239, 253, 260, 271, 278, 279, 282, 324], "vol_actor1": [2, 129], "sagitt": [2, 9, 34, 37, 94, 99, 129, 136, 160, 163, 220, 225, 288], "vol_actor2": [2, 5, 13, 14, 94, 129, 132, 140, 141, 220], "285": [2, 129, 332], "155": [2, 51, 129, 177, 333], "14": [2, 55, 57, 81, 103, 110, 127, 129, 181, 183, 207, 233, 249, 250, 278, 283, 284, 327, 329, 330, 331, 338, 340, 344], "9": [2, 5, 18, 25, 26, 28, 41, 42, 43, 48, 49, 50, 54, 55, 56, 73, 82, 103, 127, 129, 132, 151, 152, 154, 167, 168, 169, 174, 175, 176, 180, 181, 182, 199, 208, 233, 249, 250, 268, 273, 275, 278, 279, 281, 282, 283, 287, 289, 298, 324, 325, 331, 340, 343, 344], "n_frame": [2, 5, 40, 47, 67, 71, 78, 89, 90, 92, 94, 129, 132, 166, 173, 193, 197, 204, 215, 216, 218, 220, 324], "or_befor": [2, 129], "rm": [2, 5, 41, 42, 58, 129, 132, 167, 168, 184], "or_aft": [2, 129], "techniqu": [2, 13, 15, 24, 26, 43, 53, 54, 58, 76, 129, 140, 142, 150, 152, 169, 179, 180, 184, 202, 244, 256, 282, 283, 284, 333], "develop": [2, 25, 42, 54, 85, 107, 112, 117, 118, 119, 123, 124, 127, 129, 151, 168, 180, 211, 233, 234, 243, 248, 249, 250, 251, 275, 277, 281, 282, 283, 284, 285, 324, 326, 327, 328, 329, 333], "close": [2, 34, 44, 51, 53, 63, 64, 68, 89, 94, 97, 107, 108, 110, 119, 124, 129, 160, 170, 177, 179, 189, 190, 194, 215, 220, 223, 232, 237, 239, 245, 249, 258, 271, 275, 277, 278, 280, 281, 287, 289, 290, 296, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "collabor": [2, 110, 126, 129, 246, 247, 272, 345], "pauli": [2, 129, 289], "ossenblok": [2, 129], "academ": [2, 57, 129, 183, 251], "center": [2, 5, 28, 41, 51, 54, 58, 64, 70, 71, 92, 94, 96, 98, 126, 129, 132, 154, 167, 177, 180, 184, 190, 196, 197, 218, 220, 222, 224, 229, 239, 244, 245, 275, 277, 281, 283, 285, 287, 289, 291, 305, 321, 322, 324, 336], "epileptologi": [2, 129], "kempenhaegh": [2, 129], "maastricht": [2, 129], "umc": [2, 126, 129], "open": [2, 34, 48, 55, 82, 92, 94, 96, 102, 107, 110, 124, 125, 129, 160, 174, 181, 208, 218, 220, 222, 228, 233, 246, 251, 253, 265, 277, 278, 281, 283, 336, 337, 339, 340, 341, 350], "human": [2, 42, 47, 56, 57, 103, 104, 105, 107, 126, 129, 168, 173, 182, 183, 235, 236, 249, 265, 278, 283], "brain": [2, 5, 9, 15, 17, 18, 24, 26, 30, 31, 34, 37, 39, 41, 42, 43, 47, 48, 49, 54, 56, 57, 58, 59, 63, 68, 71, 72, 73, 75, 76, 77, 82, 88, 89, 92, 94, 103, 104, 105, 126, 129, 132, 136, 142, 144, 150, 152, 156, 157, 160, 163, 165, 167, 168, 169, 173, 174, 175, 180, 182, 183, 184, 185, 189, 194, 197, 198, 199, 201, 202, 203, 208, 214, 215, 218, 220, 234, 235, 237, 242, 244, 245, 249, 253, 263, 265, 271, 273, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 310, 311, 316, 319, 328, 333, 335, 339, 341], "fiber_to_bundle_coher": [2, 129, 328], "bundl": [3, 8, 11, 18, 55, 69, 71, 76, 77, 78, 79, 80, 81, 90, 91, 92, 93, 95, 96, 103, 104, 105, 127, 130, 135, 138, 181, 195, 197, 202, 203, 204, 205, 206, 207, 216, 217, 218, 219, 221, 222, 232, 233, 241, 244, 249, 275, 278, 286, 287, 288, 289, 290, 294, 295, 296, 311, 313, 316, 326, 328, 329, 330, 333, 335, 337, 338, 340, 342, 343], "coher": [3, 13, 18, 41, 55, 58, 130, 140, 167, 181, 184, 249, 278, 281, 283, 326], "measur": [3, 18, 24, 26, 29, 39, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 62, 63, 75, 104, 105, 130, 150, 152, 165, 167, 168, 169, 171, 173, 174, 175, 177, 178, 180, 181, 183, 184, 185, 188, 189, 201, 229, 235, 240, 243, 249, 269, 270, 273, 275, 277, 278, 279, 282, 283, 285, 286, 287, 289, 306, 308, 326, 338, 340, 346, 348], "surfac": [4, 14, 18, 59, 90, 92, 95, 131, 141, 185, 216, 218, 221, 249, 277, 278, 283, 326, 328, 340, 350], "introduct": [4, 5, 7, 10, 13, 15, 17, 18, 35, 92, 94, 117, 118, 122, 127, 131, 132, 134, 137, 140, 142, 144, 161, 218, 220, 233, 241, 337, 346], "determinist": [4, 7, 9, 11, 15, 18, 37, 131, 134, 136, 138, 142, 163, 241, 249, 256, 283, 289, 321, 329, 333, 341, 344], "transport": [4, 18, 131, 232, 277, 342, 343], "robust": [4, 9, 18, 26, 31, 37, 38, 41, 42, 52, 53, 54, 55, 66, 67, 85, 103, 107, 131, 136, 152, 157, 163, 164, 167, 168, 178, 179, 180, 181, 192, 193, 211, 236, 242, 243, 244, 245, 249, 266, 267, 275, 278, 280, 281, 283, 284, 285, 289, 305, 306, 307, 318, 335, 341, 350], "unbias": [4, 18, 38, 66, 104, 105, 131, 164, 192, 249, 275, 278, 283, 289, 342], "rumba": [4, 18, 58, 131, 184, 249, 273, 289, 290, 341, 342, 343], "sd": [4, 18, 58, 131, 184, 243, 249, 259, 273, 283, 289, 342, 343, 350], "spars": [4, 5, 18, 38, 52, 57, 65, 131, 132, 164, 178, 183, 191, 249, 275, 277, 283, 284, 333], "fascicl": [4, 18, 38, 66, 67, 103, 131, 164, 192, 193, 236, 244, 249, 275, 278, 283, 287, 289, 318, 333], "bootstrap": [4, 18, 63, 131, 189, 249, 274, 283, 289, 307, 328, 331], "closest": [4, 18, 34, 131, 160, 241, 256, 257, 277, 283, 284, 333], "basic": [4, 7, 11, 18, 23, 26, 33, 35, 41, 49, 80, 119, 131, 134, 138, 149, 152, 159, 161, 167, 175, 206, 234, 239, 243, 252, 253, 259, 267, 269, 270, 277, 281, 284, 285, 289, 329, 335, 337], "filter": [4, 5, 18, 23, 25, 27, 28, 54, 58, 70, 71, 75, 94, 131, 132, 149, 151, 153, 154, 180, 184, 196, 197, 201, 220, 239, 241, 249, 251, 265, 275, 277, 279, 280, 282, 283, 284, 287, 289, 300, 315, 322, 326, 328, 341], "linear": [4, 18, 28, 42, 43, 51, 52, 56, 57, 61, 66, 67, 68, 70, 72, 73, 103, 110, 131, 154, 168, 169, 177, 178, 182, 183, 187, 192, 193, 194, 196, 198, 199, 231, 235, 237, 241, 244, 249, 273, 275, 277, 278, 279, 280, 284, 287, 289, 290, 294, 301, 307, 316, 318, 326, 330, 331, 333, 338, 342, 343], "biggest": [5, 132], "challeng": [5, 55, 87, 104, 105, 132, 181, 213, 250, 261], "propos": [5, 15, 23, 25, 46, 47, 49, 51, 55, 57, 63, 71, 72, 73, 82, 84, 109, 132, 142, 149, 151, 172, 173, 175, 177, 181, 183, 189, 197, 198, 199, 208, 210, 234, 243, 244, 252, 265, 275, 282, 283, 350], "predict": [5, 28, 39, 51, 53, 59, 132, 154, 165, 177, 179, 185, 245, 259, 275, 277, 282, 283, 287, 290, 324, 325, 326, 332, 333, 334, 337], "signal": [5, 14, 18, 21, 24, 25, 28, 32, 34, 36, 38, 39, 41, 45, 46, 49, 51, 53, 55, 56, 57, 58, 59, 62, 63, 84, 85, 86, 110, 120, 132, 141, 147, 150, 151, 154, 158, 160, 162, 164, 165, 167, 171, 172, 175, 177, 179, 181, 182, 183, 184, 185, 188, 189, 210, 211, 212, 229, 232, 239, 243, 249, 252, 257, 258, 261, 266, 267, 269, 273, 274, 279, 282, 283, 285, 287, 288, 289, 306, 307, 308, 309, 319, 329, 331, 335, 337, 338, 340, 346, 348, 350], "simultan": [5, 51, 58, 66, 71, 132, 177, 184, 192, 197, 249, 283], "pestilli2014": [5, 132], "For": [5, 9, 13, 14, 21, 22, 23, 24, 26, 28, 29, 31, 32, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 72, 74, 78, 79, 80, 81, 84, 85, 86, 87, 90, 92, 94, 98, 102, 107, 109, 110, 116, 119, 124, 125, 132, 136, 140, 141, 147, 148, 149, 150, 152, 154, 155, 157, 158, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 197, 198, 200, 204, 205, 206, 207, 210, 211, 212, 213, 216, 218, 220, 224, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 249, 253, 260, 261, 265, 271, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 298, 299, 311, 315, 318, 321, 322, 344, 346, 347, 350, 351], "breviti": [5, 14, 51, 71, 132, 141, 177, 197], "corpu": [5, 7, 8, 9, 10, 11, 12, 15, 34, 37, 39, 40, 41, 47, 52, 55, 58, 59, 63, 71, 90, 92, 94, 98, 104, 105, 132, 134, 135, 136, 137, 138, 139, 142, 160, 163, 165, 166, 167, 173, 178, 181, 184, 185, 189, 197, 216, 218, 220, 224, 278, 283, 284, 287, 289, 319], "callosum": [5, 7, 8, 9, 10, 11, 12, 15, 34, 37, 39, 40, 41, 47, 52, 55, 58, 59, 63, 71, 90, 92, 94, 98, 104, 105, 132, 134, 135, 136, 137, 138, 139, 142, 160, 163, 165, 166, 167, 173, 178, 181, 184, 185, 189, 197, 216, 218, 220, 224, 278, 283, 284, 287, 289, 319], "connect": [5, 9, 10, 11, 15, 17, 37, 59, 67, 71, 90, 92, 96, 104, 105, 121, 132, 136, 137, 138, 142, 144, 163, 185, 193, 197, 216, 218, 222, 245, 260, 278, 287, 289, 322, 326, 341, 351], "superior": [5, 34, 71, 94, 107, 132, 160, 197, 220, 265, 271, 277, 281], "frontal": [5, 71, 94, 132, 197, 220], "fulli": [5, 42, 68, 71, 132, 168, 194, 197, 241, 248, 277, 283, 285], "demonstr": [5, 7, 13, 14, 22, 28, 32, 39, 47, 54, 60, 63, 65, 70, 71, 74, 90, 92, 94, 107, 132, 134, 140, 141, 148, 154, 158, 165, 173, 180, 186, 189, 191, 196, 197, 200, 216, 218, 220, 243, 245], "matric": [5, 18, 66, 71, 91, 132, 192, 197, 217, 231, 275, 277, 278, 283, 287, 326, 329], "intersect": [5, 18, 51, 54, 71, 91, 132, 177, 180, 197, 217, 287], "otherwis": [5, 53, 71, 78, 99, 107, 132, 179, 197, 204, 225, 233, 234, 275, 277, 278, 279, 283, 284, 287, 288, 289, 300, 301, 318, 326], "ll": [5, 9, 11, 37, 58, 59, 71, 87, 94, 96, 99, 109, 110, 119, 121, 123, 124, 132, 136, 138, 163, 184, 185, 197, 213, 220, 222, 225, 233, 253, 254, 257, 258, 266, 267, 269, 272, 283], "path": [5, 11, 17, 18, 31, 33, 36, 42, 48, 49, 64, 65, 68, 71, 87, 91, 99, 100, 102, 107, 132, 138, 144, 157, 159, 162, 168, 174, 175, 190, 191, 194, 197, 213, 217, 225, 226, 228, 233, 239, 240, 242, 243, 244, 245, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 319, 321, 322, 324, 325, 326, 329, 333, 336, 337], "join": [5, 36, 48, 49, 64, 65, 68, 71, 87, 99, 126, 132, 162, 174, 175, 190, 191, 194, 197, 213, 225, 332], "pjoin": [5, 64, 65, 68, 71, 132, 190, 191, 194, 197], "matplotlib": [5, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 39, 43, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 58, 62, 63, 65, 70, 74, 82, 85, 86, 87, 90, 92, 93, 94, 106, 132, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 160, 162, 163, 165, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 184, 188, 189, 191, 196, 200, 208, 211, 212, 213, 216, 218, 219, 220, 229, 233, 288, 326, 329, 331, 333], "pyplot": [5, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 39, 43, 44, 45, 48, 49, 51, 53, 54, 55, 56, 58, 62, 63, 65, 70, 74, 82, 85, 86, 87, 90, 92, 93, 94, 132, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 160, 162, 163, 165, 169, 170, 171, 174, 175, 177, 179, 180, 181, 182, 184, 188, 189, 191, 196, 200, 208, 211, 212, 213, 216, 218, 219, 220, 278], "plt": [5, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 39, 43, 44, 45, 48, 49, 51, 53, 54, 55, 56, 58, 62, 63, 65, 70, 74, 82, 85, 86, 87, 90, 93, 94, 132, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 160, 162, 163, 165, 169, 170, 171, 174, 175, 177, 179, 180, 181, 182, 184, 188, 189, 191, 196, 200, 208, 211, 212, 213, 216, 219, 220], "mpl_toolkit": [5, 92, 132, 218], "axes_grid1": [5, 92, 132, 218], "axesgrid": [5, 92, 132, 218], "optim": [5, 18, 26, 27, 28, 29, 43, 49, 51, 52, 53, 54, 55, 59, 64, 65, 67, 70, 71, 72, 73, 82, 103, 104, 105, 108, 132, 152, 153, 154, 169, 175, 177, 178, 179, 180, 181, 185, 190, 191, 193, 196, 197, 198, 199, 208, 234, 239, 244, 249, 260, 263, 273, 275, 279, 280, 281, 282, 283, 284, 289, 290, 292, 301, 324, 329, 333, 335, 336, 340, 341], "opt": [5, 108, 132, 289, 329, 332, 333, 336, 341], "fetch_stanford_track": [5, 71, 132, 197, 290], "colormap": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 40, 41, 46, 47, 48, 51, 52, 53, 58, 59, 61, 78, 79, 80, 81, 84, 86, 92, 94, 98, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 166, 167, 172, 173, 174, 177, 178, 179, 184, 185, 187, 204, 205, 206, 207, 210, 212, 218, 220, 224, 283, 288, 289, 311, 326, 328, 329, 333, 335], "cmap": [5, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 36, 37, 43, 48, 49, 51, 52, 53, 54, 55, 56, 65, 74, 76, 80, 82, 92, 94, 98, 132, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 162, 163, 169, 174, 175, 177, 178, 179, 180, 181, 182, 191, 200, 202, 206, 208, 218, 220, 224, 288], "hardi_img": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 71, 92, 94, 98, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 197, 218, 220, 224], "return_img": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 36, 37, 64, 65, 71, 92, 94, 98, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 162, 163, 190, 191, 197, 218, 220, 224, 281], "cc_slice": [5, 94, 132, 220], "fetch": [5, 6, 17, 20, 21, 24, 26, 32, 39, 42, 47, 52, 53, 54, 63, 64, 65, 71, 73, 75, 76, 82, 88, 89, 96, 110, 119, 121, 132, 133, 144, 146, 147, 150, 152, 158, 165, 168, 173, 178, 179, 180, 189, 190, 191, 197, 199, 201, 202, 208, 214, 215, 222, 238, 239, 240, 242, 243, 244, 245, 278, 324, 326, 331, 334, 335, 336, 338], "ref": [5, 76, 107, 110, 132, 202, 275, 284, 328], "streamline_tool": [5, 94, 132, 220, 326, 328, 333, 335], "candid": [5, 18, 132, 273, 287], "streamlines_fil": [5, 71, 132, 197], "lr_superiorfrontal_path": [5, 71, 132, 197], "lr": [5, 71, 94, 132, 197, 220, 263, 271, 283], "superiorfront": [5, 71, 94, 132, 197, 220], "candidate_sl_sft": [5, 132], "to_vox": [5, 17, 132, 144, 281, 290], "candidate_sl": [5, 132], "term": [5, 42, 51, 52, 57, 58, 78, 82, 132, 168, 177, 178, 183, 184, 204, 208, 229, 243, 254, 256, 271, 275, 283, 332, 349], "connectom": [5, 104, 105, 132, 235, 236, 249, 278, 287], "group": [5, 32, 49, 63, 66, 67, 94, 107, 124, 132, 158, 175, 189, 192, 193, 220, 241, 249, 275, 284, 286, 289, 318, 337, 339, 341], "anatom": [5, 10, 15, 26, 28, 90, 92, 94, 132, 137, 142, 152, 154, 216, 218, 220, 235, 237, 245, 249, 271, 287, 289, 334, 344], "candidate_streamlines_actor": [5, 132], "streamtub": [5, 13, 14, 67, 71, 78, 79, 80, 81, 89, 93, 96, 97, 132, 140, 141, 193, 197, 204, 205, 206, 207, 215, 219, 222, 223, 324, 328, 329, 332], "line_color": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 92, 94, 98, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 218, 220, 224], "cc_roi_actor": [5, 94, 132, 220], "contour_from_roi": [5, 92, 94, 98, 132, 218, 220, 224], "opac": [5, 55, 78, 81, 94, 96, 98, 99, 132, 181, 204, 207, 220, 222, 224, 225, 324, 328, 329], "vol_actor": [5, 13, 14, 94, 132, 140, 141, 220], "copi": [5, 13, 14, 15, 43, 63, 65, 71, 94, 96, 99, 102, 109, 110, 114, 118, 120, 121, 132, 140, 141, 142, 169, 189, 191, 197, 220, 222, 225, 228, 248, 275, 278, 281, 283, 284, 287, 289, 328, 333, 336], "canva": [5, 94, 132, 220], "life_candid": [5, 132], "800": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 90, 92, 94, 104, 105, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 216, 218, 220, 234, 285], "next": [5, 7, 9, 14, 29, 34, 36, 37, 39, 42, 47, 51, 53, 55, 57, 60, 63, 64, 86, 87, 93, 94, 98, 100, 122, 123, 124, 132, 134, 136, 141, 155, 160, 162, 163, 165, 168, 173, 177, 179, 181, 183, 186, 189, 190, 212, 213, 219, 220, 224, 226, 233, 251, 253, 277, 282, 283, 285, 329], "fiber_model": [5, 132, 287], "alreadi": [5, 9, 13, 33, 37, 51, 52, 70, 73, 75, 76, 79, 88, 110, 119, 120, 124, 132, 136, 140, 159, 163, 177, 178, 196, 199, 201, 202, 205, 214, 233, 235, 252, 257, 258, 261, 262, 267, 269, 270, 271, 275, 277, 278, 281, 282, 284, 286], "do": [5, 9, 11, 17, 18, 25, 28, 31, 32, 34, 37, 38, 40, 41, 44, 52, 53, 54, 55, 60, 63, 64, 66, 72, 73, 76, 78, 79, 80, 90, 92, 94, 104, 107, 108, 109, 112, 113, 114, 117, 119, 120, 122, 123, 132, 136, 138, 144, 151, 154, 157, 158, 160, 163, 164, 166, 167, 170, 178, 179, 180, 181, 186, 189, 190, 192, 198, 199, 202, 204, 205, 206, 216, 218, 220, 229, 230, 231, 233, 234, 235, 239, 244, 247, 250, 252, 256, 258, 264, 265, 266, 272, 275, 277, 278, 282, 283, 284, 287, 289, 311, 326, 328, 329, 333, 335, 347], "them": [5, 17, 28, 29, 36, 44, 45, 48, 51, 57, 62, 63, 64, 66, 71, 72, 73, 75, 76, 80, 88, 90, 92, 93, 94, 96, 98, 107, 110, 120, 124, 132, 144, 154, 155, 162, 170, 171, 174, 177, 183, 188, 189, 190, 192, 197, 198, 199, 201, 202, 206, 214, 216, 218, 219, 220, 222, 224, 229, 240, 252, 253, 255, 262, 263, 265, 267, 269, 275, 277, 283, 284, 285, 288, 332], "world": [5, 22, 31, 33, 47, 74, 93, 96, 97, 126, 132, 148, 157, 159, 173, 200, 219, 222, 223, 229, 252, 275, 281, 284, 287, 288], "scanner": [5, 13, 23, 27, 58, 104, 105, 132, 140, 149, 153, 184, 229, 277, 278, 279, 283, 289, 346, 347], "iso": [5, 49, 56, 132, 175, 182, 283, 290], "mid": [5, 32, 34, 132, 158, 160, 275], "ac": [5, 132, 278], "pc": [5, 132], "would": [5, 32, 41, 52, 59, 63, 65, 67, 68, 73, 87, 96, 99, 110, 111, 124, 132, 158, 167, 178, 185, 189, 191, 193, 194, 199, 213, 222, 225, 229, 237, 238, 244, 251, 252, 256, 261, 262, 265, 266, 271, 277, 283, 287, 289, 310, 311], "inv_affin": [5, 132], "linalg": [5, 13, 14, 56, 96, 97, 132, 140, 141, 182, 222, 223, 283, 338, 342], "inv": [5, 13, 14, 96, 97, 132, 140, 141, 222, 223, 275, 283], "invers": [5, 52, 55, 72, 73, 96, 132, 178, 181, 198, 199, 222, 231, 275, 277, 280, 283, 286, 287, 288, 289, 290, 292, 327, 335], "produc": [5, 40, 42, 49, 52, 53, 54, 55, 57, 64, 85, 107, 132, 166, 168, 175, 178, 179, 180, 181, 183, 190, 211, 229, 252, 253, 256, 258, 263, 275, 277, 278, 283], "fiberfit": [5, 132, 290], "instanc": [5, 28, 42, 43, 47, 54, 56, 63, 72, 73, 78, 79, 82, 110, 132, 154, 168, 169, 173, 180, 182, 189, 198, 199, 204, 205, 208, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287], "store": [5, 44, 54, 55, 59, 66, 97, 98, 107, 132, 170, 180, 181, 185, 192, 223, 224, 229, 231, 275, 277, 281, 283, 285, 287, 288, 328, 331], "explain": [5, 51, 52, 64, 65, 66, 67, 68, 72, 73, 75, 76, 78, 79, 81, 82, 88, 89, 110, 117, 120, 132, 177, 178, 190, 191, 192, 193, 194, 198, 199, 201, 202, 204, 205, 207, 208, 214, 215, 236, 237, 247, 279, 334, 346, 347], "beta": [5, 53, 59, 68, 82, 132, 179, 185, 194, 208, 230, 275, 283, 284, 287, 289, 296], "weight": [5, 14, 18, 24, 25, 26, 28, 30, 32, 36, 39, 42, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 63, 67, 77, 87, 90, 104, 105, 132, 141, 150, 151, 152, 154, 156, 158, 162, 165, 168, 173, 175, 177, 178, 180, 181, 182, 183, 184, 185, 189, 193, 203, 213, 216, 229, 239, 240, 243, 255, 257, 260, 271, 273, 277, 278, 279, 283, 285, 286, 287, 289, 290, 298, 306, 307, 309, 346, 347], "design": [5, 18, 28, 29, 55, 59, 96, 132, 154, 155, 181, 185, 222, 229, 248, 257, 260, 262, 266, 273, 275, 277, 279, 281, 282, 283, 287, 330, 336], "matrix": [5, 17, 22, 24, 26, 28, 31, 33, 42, 47, 54, 58, 59, 67, 73, 74, 76, 94, 97, 99, 132, 144, 148, 150, 152, 154, 157, 159, 168, 173, 180, 184, 185, 193, 199, 200, 202, 220, 223, 225, 230, 231, 234, 239, 243, 244, 257, 262, 266, 269, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 296, 297, 298, 299, 324, 325, 326, 329, 330, 333, 335, 336, 337, 338, 339, 341], "m": [5, 6, 10, 13, 15, 18, 24, 31, 34, 41, 42, 43, 45, 48, 49, 55, 56, 57, 58, 59, 62, 67, 71, 72, 73, 80, 82, 87, 93, 94, 103, 104, 105, 107, 110, 120, 132, 133, 137, 140, 142, 150, 157, 160, 167, 168, 169, 171, 174, 175, 181, 182, 183, 184, 185, 188, 193, 197, 198, 199, 206, 208, 213, 219, 220, 234, 235, 236, 237, 242, 244, 245, 252, 267, 268, 270, 272, 273, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 350], "n_": [5, 42, 132, 168, 283], "consid": [5, 17, 28, 41, 48, 51, 59, 94, 114, 119, 120, 132, 144, 154, 167, 174, 177, 185, 220, 244, 267, 275, 277, 279, 280, 281, 282, 283, 284, 287, 288, 289, 292, 301, 351], "th": [5, 39, 67, 72, 73, 132, 165, 193, 198, 199, 275, 283, 287, 288, 350], "column": [5, 56, 57, 59, 67, 94, 99, 132, 182, 183, 185, 193, 220, 225, 231, 265, 275, 277, 283, 284, 285, 287, 288], "arbitrarili": [5, 132], "becaus": [5, 9, 11, 15, 25, 32, 37, 42, 46, 54, 65, 79, 84, 86, 89, 92, 94, 96, 99, 108, 110, 119, 124, 125, 132, 136, 138, 142, 151, 158, 163, 168, 172, 180, 191, 205, 210, 212, 215, 218, 220, 222, 225, 229, 239, 243, 245, 254, 258, 262, 264, 266, 270, 271, 272, 275, 277, 283, 284, 285, 328, 346], "percentag": [5, 64, 85, 86, 132, 190, 211, 212, 277, 284, 285], "node": [5, 87, 132, 213, 260, 277, 282, 284, 286, 287, 342], "cylindr": [5, 132, 285], "compart": [5, 13, 42, 43, 49, 51, 53, 54, 58, 85, 103, 132, 140, 168, 169, 175, 177, 179, 180, 184, 211, 243, 254, 283, 285, 289], "gaussian": [5, 13, 25, 27, 32, 34, 39, 42, 52, 54, 58, 64, 70, 72, 73, 82, 85, 132, 140, 151, 153, 158, 160, 165, 168, 178, 180, 184, 190, 196, 198, 199, 208, 211, 243, 254, 258, 275, 279, 283, 285, 289, 292, 296, 300, 306, 309, 324, 328, 333], "tensor": [5, 18, 34, 36, 38, 39, 41, 43, 46, 48, 49, 52, 53, 54, 56, 57, 58, 59, 84, 85, 86, 103, 132, 160, 162, 164, 165, 167, 169, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 210, 211, 212, 229, 232, 234, 241, 249, 254, 258, 261, 262, 264, 266, 269, 270, 272, 273, 274, 277, 278, 282, 283, 285, 287, 289, 306, 307, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 342, 346, 347], "fiber_fit": [5, 132], "ey": [5, 17, 64, 65, 71, 94, 96, 132, 144, 190, 191, 197, 220, 222, 271, 275, 283, 287, 334], "hold": [5, 11, 28, 36, 67, 96, 99, 107, 132, 138, 154, 162, 193, 222, 225, 260, 275, 277, 281, 283], "properti": [5, 20, 28, 40, 47, 50, 52, 54, 55, 63, 67, 80, 85, 87, 132, 146, 154, 166, 173, 176, 178, 180, 181, 189, 193, 206, 211, 213, 230, 243, 275, 277, 278, 281, 283, 284, 285, 286, 288, 289, 324, 350], "assign": [5, 18, 91, 107, 132, 217, 252, 268, 275, 277, 283, 284, 285, 286, 290, 324, 333], "redund": [5, 25, 26, 107, 125, 132, 151, 152, 239], "beta_i": [5, 132], "fig": [5, 15, 23, 24, 25, 27, 32, 34, 39, 45, 48, 51, 55, 56, 58, 62, 65, 70, 82, 87, 90, 92, 93, 132, 142, 149, 150, 151, 153, 158, 160, 165, 171, 174, 177, 181, 182, 184, 188, 191, 196, 208, 213, 216, 218, 219, 283], "ax": [5, 23, 24, 25, 26, 27, 28, 32, 34, 39, 43, 44, 49, 51, 54, 55, 56, 57, 58, 63, 65, 86, 90, 92, 93, 109, 132, 149, 150, 151, 152, 153, 154, 158, 160, 165, 169, 170, 175, 177, 180, 181, 182, 183, 184, 189, 191, 212, 216, 218, 219, 230, 275, 277, 288], "subplot": [5, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 39, 43, 44, 49, 51, 54, 55, 56, 58, 63, 65, 70, 74, 87, 90, 93, 132, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 160, 162, 163, 165, 169, 170, 175, 177, 180, 181, 182, 184, 189, 191, 196, 200, 213, 216, 219], "hist": [5, 63, 90, 93, 132, 189, 216, 219, 282], "bin": [5, 64, 90, 100, 102, 132, 190, 216, 226, 228, 233, 275, 277, 284, 289, 291], "histtyp": [5, 63, 90, 93, 132, 189, 216, 219], "set_xlabel": [5, 39, 51, 54, 55, 63, 87, 90, 93, 132, 165, 177, 180, 181, 189, 213, 216, 219], "set_ylabel": [5, 39, 51, 54, 55, 63, 87, 90, 93, 132, 165, 177, 180, 181, 189, 213, 216, 219], "savefig": [5, 9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 39, 43, 44, 45, 48, 49, 51, 53, 54, 55, 58, 62, 63, 65, 70, 74, 82, 85, 86, 87, 90, 92, 93, 94, 132, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 160, 162, 163, 165, 169, 170, 171, 174, 175, 177, 179, 180, 181, 184, 188, 189, 191, 196, 200, 208, 211, 212, 213, 216, 218, 219, 220], "beta_histogram": [5, 132], "out": [5, 21, 28, 34, 39, 51, 60, 71, 75, 87, 94, 99, 107, 120, 124, 132, 147, 154, 160, 165, 177, 186, 197, 201, 213, 220, 225, 233, 239, 243, 248, 251, 252, 253, 254, 255, 260, 262, 264, 265, 266, 267, 270, 271, 272, 275, 277, 279, 282, 283, 284, 287, 289, 298, 326, 329, 331, 332, 333, 335, 337, 344, 346, 347], "optimized_sl": [5, 132], "row_stack": [5, 132], "life_optim": [5, 132], "presum": [5, 132], "But": [5, 28, 29, 63, 71, 110, 123, 132, 154, 155, 189, 197, 230, 251, 252, 257, 262, 264, 266, 268, 277], "how": [5, 7, 9, 15, 17, 21, 22, 24, 25, 26, 28, 29, 33, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 107, 117, 119, 120, 123, 124, 132, 134, 136, 142, 144, 147, 148, 150, 151, 152, 154, 155, 159, 160, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 226, 230, 232, 233, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 252, 254, 255, 258, 266, 269, 275, 277, 278, 281, 282, 283, 284, 285, 287, 289, 329, 333, 334, 335, 336, 337, 338, 340, 341, 342, 346], "doe": [5, 8, 28, 42, 51, 52, 54, 55, 71, 78, 79, 92, 93, 124, 132, 135, 154, 168, 177, 178, 180, 181, 197, 204, 205, 218, 219, 229, 245, 255, 260, 263, 275, 278, 279, 281, 282, 283, 284, 287, 289, 324, 325, 326, 328, 329, 332, 333, 335, 338, 340, 341, 342], "quantifi": [5, 39, 42, 52, 132, 165, 168, 178, 243, 283], "invert": [5, 34, 72, 73, 107, 132, 160, 198, 199, 283, 288, 289, 311, 331], "back": [5, 72, 73, 92, 96, 110, 120, 124, 132, 198, 199, 218, 222, 230, 252, 282, 283, 287, 289, 322, 324, 331, 333, 337, 340], "unseen": [5, 132, 256], "valid": [5, 10, 15, 17, 18, 38, 41, 52, 55, 59, 89, 124, 132, 137, 142, 144, 164, 167, 178, 181, 185, 215, 249, 275, 278, 281, 282, 283, 287, 324, 325, 333, 336, 337, 341], "fold": [5, 18, 38, 132, 164, 283], "comparison": [5, 18, 23, 32, 34, 38, 43, 49, 54, 55, 57, 63, 67, 85, 104, 105, 132, 149, 158, 160, 164, 169, 175, 180, 181, 183, 189, 193, 211, 241, 271, 275, 283, 289, 307, 318, 326, 337], "without": [5, 11, 21, 23, 24, 25, 28, 36, 45, 49, 55, 56, 57, 58, 63, 65, 93, 110, 124, 132, 138, 147, 149, 150, 151, 154, 162, 171, 175, 181, 182, 183, 184, 189, 191, 219, 233, 256, 260, 268, 271, 277, 278, 282, 283, 284, 287, 289, 329, 331, 335, 336, 344], "s0": [5, 36, 39, 41, 46, 51, 54, 58, 59, 84, 85, 86, 132, 162, 165, 167, 172, 177, 180, 184, 185, 210, 211, 212, 283, 285, 287, 289, 308, 326, 332], "acquisit": [5, 18, 28, 29, 31, 32, 34, 36, 42, 46, 52, 54, 55, 56, 57, 63, 84, 103, 107, 132, 154, 155, 157, 158, 160, 162, 168, 172, 178, 180, 181, 182, 183, 189, 210, 239, 242, 249, 273, 277, 278, 279, 282, 283, 289, 346, 347], "scheme": [5, 18, 25, 29, 46, 47, 55, 84, 103, 107, 132, 151, 155, 172, 173, 181, 210, 273, 275, 279, 282, 283], "baselin": [5, 63, 132, 189], "model_predict": [5, 39, 132, 165], "focu": [5, 51, 63, 126, 132, 177, 189, 251, 265, 269], "root": [5, 55, 124, 132, 181, 233, 283, 284, 347], "squar": [5, 28, 39, 42, 45, 51, 52, 55, 57, 58, 59, 62, 63, 65, 71, 72, 132, 154, 165, 168, 171, 177, 178, 181, 183, 184, 185, 188, 189, 191, 197, 198, 231, 244, 275, 277, 278, 283, 285, 287, 288, 289, 292, 306, 307, 337, 346, 347], "model_error": [5, 132], "model_rms": [5, 132], "sqrt": [5, 25, 26, 28, 42, 43, 44, 45, 47, 50, 55, 62, 80, 132, 151, 152, 154, 168, 169, 170, 171, 173, 176, 181, 188, 206, 231, 277, 279, 283, 285, 287, 350, 351], "against": [5, 46, 58, 84, 132, 172, 184, 210, 275, 277, 278, 282, 283, 284], "compar": [5, 21, 23, 26, 39, 42, 45, 51, 52, 57, 58, 63, 85, 89, 90, 107, 119, 132, 147, 149, 152, 165, 168, 171, 177, 178, 183, 184, 189, 211, 215, 216, 229, 235, 261, 265, 270, 271, 275, 281, 283, 284, 288, 325, 341], "assum": [5, 13, 28, 29, 32, 47, 51, 53, 58, 63, 67, 70, 71, 78, 79, 80, 85, 119, 132, 140, 154, 155, 158, 173, 177, 179, 184, 189, 193, 196, 197, 204, 205, 206, 211, 243, 255, 275, 277, 279, 283, 284, 285, 288, 289, 298, 299, 300, 305, 325, 326], "naiv": [5, 70, 132, 196, 283], "beta_baselin": [5, 132], "pred_weight": [5, 132], "reshap": [5, 132, 280, 281, 282, 283, 284, 285], "spdot": [5, 132, 290], "life_matrix": [5, 132, 287], "vox_coord": [5, 132, 287], "b0s_mask": [5, 36, 39, 71, 132, 162, 165, 197, 277, 283, 290], "mean_pr": [5, 132], "empti": [5, 54, 132, 180, 235, 275, 277, 283, 284, 285, 287, 335, 337, 341, 343], "b0_signal": [5, 132, 287], "demean": [5, 132], "multipli": [5, 53, 60, 85, 93, 132, 179, 186, 211, 219, 266, 270, 275, 283, 284, 289, 305], "mean_sign": [5, 26, 34, 132, 152, 160], "mean_error": [5, 132], "mean_rms": [5, 132], "overal": [5, 52, 93, 132, 178, 219], "altern": [5, 8, 10, 13, 21, 41, 42, 46, 57, 64, 70, 78, 84, 93, 132, 135, 137, 140, 147, 167, 168, 172, 183, 190, 196, 204, 210, 219, 244, 245, 265, 275, 277, 283, 289, 307, 332, 350], "text": [5, 36, 51, 55, 67, 96, 99, 100, 102, 107, 109, 110, 119, 124, 132, 162, 177, 181, 193, 222, 225, 226, 228, 229, 232, 244, 248, 288, 289, 292, 293, 324, 329], "median": [5, 53, 132, 179, 243, 277, 284, 286, 289, 315, 326, 332, 340], "rmse": [5, 132], "2f": [5, 54, 132, 180], "horizontalalign": [5, 51, 132, 177], "verticalalign": [5, 51, 132, 177], "transax": [5, 51, 132, 177], "error_histogram": [5, 132], "vol_model": [5, 132], "ones": [5, 15, 29, 43, 54, 76, 78, 79, 80, 81, 86, 100, 102, 132, 142, 155, 169, 180, 202, 204, 205, 206, 207, 212, 226, 228, 252, 261, 262, 263, 277, 281, 283], "nan": [5, 43, 47, 132, 169, 173, 277, 283, 285, 324, 325, 329, 330, 333, 337, 338], "vol_mean": [5, 132], "vol_improv": [5, 132], "sl_idx": [5, 132], "49": [5, 85, 132, 211, 249, 252, 283, 331, 338], "subplots_adjust": [5, 24, 26, 28, 49, 54, 92, 132, 150, 152, 154, 175, 180, 218], "05": [5, 26, 28, 29, 49, 52, 54, 78, 81, 92, 132, 152, 154, 155, 175, 178, 180, 204, 207, 218, 235, 275, 277, 279, 283, 284, 289, 328, 329, 335, 339, 340, 341], "95": [5, 63, 92, 132, 189, 218, 277, 283, 289, 306, 307, 331], "111": [5, 42, 54, 85, 92, 132, 168, 180, 211, 218, 243, 283, 285, 289, 307, 331], "nrows_ncol": [5, 92, 132, 218], "label_mod": [5, 132], "share_al": [5, 132], "cbar_loc": [5, 92, 132, 218], "cbar_mod": [5, 92, 132, 218], "cbar_siz": [5, 92, 132, 218], "cbar_pad": [5, 92, 132, 218], "matshow": [5, 53, 92, 132, 179, 218], "rot90": [5, 24, 34, 53, 56, 82, 92, 132, 150, 160, 179, 182, 208, 218], "cm": [5, 43, 48, 53, 92, 132, 169, 174, 179, 218], "bone": [5, 53, 92, 132, 179, 218], "hot": [5, 55, 132, 181], "cbar_ax": [5, 92, 132, 218], "colorbar": [5, 24, 43, 45, 48, 51, 54, 55, 58, 62, 70, 92, 132, 150, 169, 171, 174, 177, 180, 181, 184, 188, 196, 218, 329], "rdbu": [5, 132], "lax": [5, 92, 132, 218], "set_xtick": [5, 56, 92, 132, 182, 218], "set_ytick": [5, 56, 92, 132, 182, 218], "spatial_error": [5, 132], "mani": [5, 8, 14, 17, 29, 39, 41, 42, 52, 57, 64, 67, 90, 96, 97, 117, 132, 135, 141, 144, 155, 165, 167, 168, 178, 183, 190, 193, 216, 222, 223, 229, 233, 249, 252, 255, 260, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 304, 305, 310, 317, 318, 335, 341, 344], "place": [5, 63, 65, 107, 132, 189, 191, 236, 250, 268, 275, 277, 287, 288, 289, 298, 299, 324, 335, 337], "substanti": [5, 26, 39, 63, 124, 132, 152, 165, 189], "reduct": [5, 18, 66, 91, 103, 132, 192, 217, 230, 260, 283, 284, 289, 316], "larg": [5, 23, 42, 64, 76, 94, 106, 108, 132, 149, 168, 190, 202, 220, 229, 232, 233, 235, 249, 275, 281, 283, 287, 289, 316, 328, 332, 344], "amount": [5, 47, 52, 63, 76, 93, 132, 173, 178, 189, 202, 219, 277, 284, 287, 288, 289, 311], "profil": [5, 18, 24, 32, 68, 75, 88, 89, 91, 132, 150, 158, 194, 201, 214, 215, 217, 241, 249, 275, 278, 279, 283, 284, 286, 288, 289, 290, 292, 295, 316, 324, 327, 347], "ipython": [5, 106, 110, 132, 229, 233, 326, 335, 343, 344], "matlab": [5, 132, 229, 277, 334, 338, 349], "head": [5, 23, 27, 32, 63, 109, 110, 119, 132, 149, 153, 158, 189, 252, 333], "franco": [5, 14, 59, 132, 141, 185, 283], "pestilli": [5, 14, 39, 59, 75, 88, 89, 103, 104, 105, 132, 141, 165, 185, 201, 214, 215, 235, 283, 284, 286, 287, 289, 295, 316], "github": [5, 112, 114, 115, 116, 117, 119, 120, 121, 123, 124, 132, 233, 249, 252, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "webpag": [5, 132], "yeatman": [5, 14, 39, 59, 87, 103, 104, 105, 132, 141, 165, 185, 213, 283, 286, 287], "rokem": [5, 14, 18, 39, 49, 59, 75, 88, 89, 103, 104, 105, 107, 123, 126, 132, 141, 165, 175, 185, 201, 214, 215, 234, 235, 236, 237, 273, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "kai": [5, 14, 59, 103, 104, 105, 132, 141, 185, 283, 287], "wandel": [5, 14, 39, 59, 87, 104, 105, 132, 141, 165, 185, 213, 283, 286, 287], "2014": [5, 10, 15, 18, 39, 41, 42, 49, 53, 58, 67, 103, 104, 105, 107, 132, 137, 142, 165, 167, 168, 175, 179, 184, 193, 234, 235, 236, 237, 245, 250, 273, 275, 283, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 333, 336], "statist": [5, 18, 30, 39, 42, 47, 49, 63, 71, 87, 132, 156, 165, 168, 173, 175, 189, 197, 213, 232, 249, 265, 275, 277, 283, 286, 287, 289, 295, 324, 332, 340], "infer": [5, 39, 47, 80, 132, 165, 173, 206, 243, 256, 271, 282, 287, 289, 341], "live": [5, 132, 233, 282, 287, 336], "natur": [5, 23, 32, 42, 132, 149, 158, 168, 245, 247, 256, 275, 277, 281, 282, 283, 284, 287, 346, 347], "1058": [5, 132, 287, 326], "1063": [5, 51, 132, 177, 243, 287, 289, 308, 326], "doi": [5, 12, 13, 14, 24, 25, 26, 28, 40, 42, 43, 49, 51, 53, 54, 56, 57, 58, 59, 96, 104, 105, 132, 139, 140, 141, 150, 151, 152, 154, 166, 168, 169, 175, 177, 179, 180, 182, 183, 184, 185, 222, 234, 235, 240, 243, 277, 278, 279, 282, 283, 287, 289, 298, 299, 308, 310, 330], "1038": [5, 42, 43, 53, 54, 104, 105, 132, 168, 169, 179, 180, 234, 278, 287, 326], "nmeth": [5, 132, 287], "3098": [5, 132, 287], "linear_fascicle_evalu": [5, 132, 330], "cortic": [6, 10, 87, 133, 213], "stonge2018": [6, 133], "mesh": [6, 133, 249, 274, 277, 290, 340], "random_coordinates_from_surfac": [6, 133, 290], "seeds_from_surface_coordin": [6, 133, 290], "load_polydata": [6, 133, 290], "get_polydata_triangl": [6, 133], "get_polydata_vertic": [6, 133], "get_actor_from_polydata": [6, 133], "normals_from_v_f": [6, 133], "brain_lh": [6, 133], "fury_surfac": [6, 133], "polydata": [6, 133, 281, 337], "extract": [6, 14, 18, 22, 25, 28, 42, 43, 49, 54, 58, 59, 74, 76, 77, 78, 80, 89, 91, 133, 141, 148, 151, 154, 168, 169, 175, 180, 184, 185, 200, 202, 203, 204, 206, 215, 217, 235, 236, 253, 256, 275, 277, 278, 279, 282, 283, 284, 286, 287, 288, 289, 302, 313, 320, 325, 326, 329, 331, 332, 333, 335, 338], "triangl": [6, 67, 86, 133, 193, 212, 277, 287, 326], "vt": [6, 133, 287], "surface_actor": [6, 133], "500": [6, 18, 24, 104, 105, 133, 150, 271, 273, 287, 333], "uncom": [6, 97, 98, 99, 133, 223, 224, 225], "600": [6, 40, 41, 47, 48, 52, 53, 58, 61, 63, 75, 76, 78, 79, 80, 81, 88, 97, 99, 104, 105, 133, 166, 167, 173, 174, 178, 179, 184, 187, 189, 201, 202, 204, 205, 206, 207, 214, 223, 225, 234, 283, 284, 289, 324], "reset_camera": [6, 96, 97, 99, 133, 222, 223, 225], "surface_seed1": [6, 133], "choos": [6, 22, 23, 31, 47, 52, 74, 97, 110, 133, 148, 149, 157, 173, 178, 200, 223, 239, 244, 250, 283, 287, 341], "nb_seed": [6, 133, 287], "100000": [6, 133], "nb_triangl": [6, 133, 287], "trilinear": [6, 10, 15, 33, 133, 137, 142, 159, 275, 289, 317], "tri_idx": [6, 133], "trilin_co": [6, 133], "cartesian": [6, 18, 44, 54, 58, 86, 133, 170, 180, 184, 212, 243, 273, 277, 283, 285, 351], "seed_pt": [6, 133], "seed_n": [6, 133], "dot": [6, 55, 56, 57, 80, 133, 181, 182, 183, 206, 275, 277, 280, 283, 287, 331, 341, 342], "blue": [6, 29, 34, 39, 43, 68, 82, 92, 97, 98, 109, 133, 155, 160, 165, 169, 194, 208, 218, 223, 224, 271, 283], "seed_actor": [6, 133], "dot_siz": [6, 133], "green": [6, 24, 29, 34, 51, 55, 68, 71, 72, 73, 76, 98, 124, 133, 150, 155, 160, 177, 181, 194, 197, 198, 199, 202, 224, 236, 237, 283, 288, 335], "outsid": [6, 15, 34, 57, 133, 142, 160, 183, 251, 267, 269, 275, 279, 282, 287, 289, 317, 329, 330, 335, 341], "red": [6, 24, 29, 34, 39, 43, 67, 68, 72, 73, 76, 82, 93, 97, 133, 150, 155, 160, 165, 169, 193, 194, 198, 199, 202, 208, 219, 223, 235, 256, 260, 271, 283, 288, 289, 311], "normal_length": [6, 133], "normal_in": [6, 133], "tile": [6, 55, 133, 181], "newaxi": [6, 133, 335], "normal_out": [6, 133], "normal_in_actor": [6, 133], "normal_out_actor": [6, 133], "visualis": [6, 17, 106, 133, 144, 271, 280, 283, 326, 329, 350], "surface_seed2": [6, 133], "st": [6, 49, 76, 103, 109, 126, 133, 175, 202, 283, 284, 288, 289, 311, 324, 325, 326, 331, 332, 333, 334, 340, 343], "ong": [6, 76, 133, 202, 284, 288, 289, 311, 326, 340, 343], "daducci": [6, 13, 58, 104, 105, 133, 140, 184, 283, 289], "descoteaux": [6, 10, 15, 18, 34, 45, 62, 103, 107, 126, 133, 137, 142, 160, 171, 188, 234, 235, 236, 237, 245, 273, 278, 279, 280, 283, 285, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 329, 331, 332, 333, 334, 350], "169": [6, 133, 326, 332], "524": [6, 133, 333], "539": [6, 133, 324], "2018": [6, 18, 24, 26, 42, 54, 92, 104, 105, 133, 150, 152, 168, 180, 218, 232, 235, 236, 250, 273, 278, 279, 283, 289, 310, 328, 329, 330, 336], "surface_se": [6, 133], "type": [7, 24, 28, 36, 44, 53, 54, 80, 82, 94, 107, 110, 120, 134, 150, 154, 162, 170, 179, 180, 206, 208, 220, 230, 233, 234, 240, 244, 245, 275, 277, 278, 281, 283, 284, 285, 287, 288, 289, 293, 303, 309, 311, 312, 316, 324, 325, 328, 330, 331, 333, 341, 342], "describ": [7, 9, 14, 15, 23, 37, 39, 42, 47, 51, 52, 55, 57, 59, 63, 87, 92, 104, 107, 116, 134, 136, 141, 142, 149, 163, 165, 168, 173, 177, 178, 181, 183, 185, 189, 213, 218, 243, 245, 260, 275, 277, 278, 283, 285, 287], "berman": [7, 134, 283], "et": [7, 15, 18, 20, 25, 29, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 56, 57, 58, 61, 62, 63, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 92, 103, 104, 105, 126, 134, 142, 146, 151, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 187, 188, 189, 192, 193, 194, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 218, 236, 237, 243, 244, 249, 273, 275, 277, 278, 279, 282, 283, 284, 285, 287, 289, 296, 304, 305, 308, 313, 316, 318, 328, 350], "al": [7, 15, 18, 20, 25, 29, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 56, 57, 58, 61, 62, 63, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 87, 92, 103, 104, 105, 134, 142, 146, 151, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 187, 188, 189, 192, 193, 194, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 218, 236, 237, 243, 244, 249, 273, 275, 277, 278, 279, 282, 283, 284, 285, 287, 289, 296, 304, 305, 308, 313, 316, 318, 328, 350], "2008": [7, 18, 27, 28, 39, 44, 45, 61, 62, 134, 153, 154, 165, 170, 171, 187, 188, 233, 239, 273, 279, 283, 285, 289, 300, 326, 329, 336], "berman2008": [7, 134], "nd": [7, 54, 134, 180, 280, 283, 284, 287, 326], "amirbekian": [7, 90, 103, 107, 123, 126, 134, 216, 234, 235, 236, 237, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 331, 332, 333, 334], "phd": [7, 9, 37, 50, 134, 136, 163, 176, 234, 245, 283, 285, 289, 321], "thesi": [7, 9, 24, 26, 37, 42, 50, 54, 134, 136, 150, 152, 163, 168, 176, 180, 234, 245, 279, 283, 285, 289, 310, 321], "necessari": [7, 13, 14, 17, 22, 23, 25, 26, 28, 32, 40, 42, 44, 45, 47, 48, 50, 52, 55, 57, 61, 62, 66, 74, 75, 76, 78, 79, 80, 81, 82, 88, 89, 93, 124, 134, 140, 141, 144, 148, 149, 151, 152, 154, 158, 166, 168, 170, 171, 173, 174, 176, 178, 181, 183, 187, 188, 192, 200, 201, 202, 204, 205, 206, 207, 208, 214, 215, 219, 233, 265, 267, 275, 277, 278, 283, 287, 289, 338], "execut": [7, 14, 20, 21, 31, 72, 73, 92, 100, 102, 107, 134, 141, 146, 147, 157, 198, 199, 218, 226, 228, 229, 233, 239, 240, 242, 243, 275, 277, 279, 282, 283, 284, 289, 333], "small_spher": [7, 11, 13, 134, 138, 140, 290], "bootdirectiongett": [7, 134], "closestpeakdirectiongett": [7, 134], "stateful_tractogram": [7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 37, 68, 71, 75, 94, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 194, 197, 201, 220, 290], "has_furi": [7, 8, 9, 10, 11, 12, 14, 15, 37, 71, 134, 135, 136, 137, 138, 139, 141, 142, 163, 197], "seed_mask": [7, 8, 9, 10, 11, 12, 13, 15, 37, 90, 92, 98, 134, 135, 136, 137, 138, 139, 140, 142, 163, 216, 218, 224, 234], "white_matt": [7, 8, 9, 11, 12, 13, 14, 15, 37, 90, 92, 94, 98, 134, 135, 136, 138, 139, 140, 141, 142, 163, 216, 218, 220, 224], "serv": [7, 75, 89, 100, 134, 201, 215, 226, 283], "our": [7, 20, 26, 31, 34, 40, 41, 43, 47, 48, 51, 53, 55, 58, 60, 63, 64, 66, 67, 72, 78, 79, 80, 90, 92, 94, 96, 100, 102, 116, 119, 121, 123, 124, 127, 134, 146, 152, 157, 160, 166, 167, 169, 173, 174, 177, 179, 181, 184, 186, 189, 190, 192, 193, 198, 204, 205, 206, 216, 218, 220, 222, 226, 228, 229, 232, 233, 236, 237, 246, 249, 258, 265, 267, 269, 270, 271, 275, 277, 278, 283, 327, 329, 338, 340], "up": [7, 11, 14, 18, 32, 42, 55, 57, 58, 60, 66, 71, 75, 90, 92, 93, 97, 98, 99, 108, 109, 114, 117, 118, 120, 124, 134, 138, 141, 158, 168, 181, 183, 184, 186, 192, 197, 201, 216, 218, 219, 223, 224, 225, 229, 230, 233, 247, 249, 273, 275, 277, 281, 282, 283, 284, 287, 289, 290, 315, 324, 325, 326, 329, 331, 333, 334, 335, 336, 337, 341, 346, 347], "boot_dg_csd": [7, 134], "from_data": [7, 134], "boot_streamline_gener": [7, 134], "sft": [7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 71, 94, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 197, 220, 281, 336, 337, 342, 343], "rasmm": [7, 8, 9, 10, 11, 12, 13, 14, 15, 37, 68, 71, 75, 134, 135, 136, 137, 138, 139, 140, 141, 142, 163, 194, 197, 201, 281, 284, 290], "tractogram_bootstrap_dg": [7, 134], "repeat": [7, 9, 11, 37, 41, 57, 58, 64, 104, 105, 113, 134, 136, 138, 163, 167, 183, 184, 190, 341], "keep": [7, 9, 15, 17, 37, 50, 53, 58, 81, 94, 108, 110, 120, 122, 127, 134, 136, 142, 144, 163, 176, 179, 184, 207, 220, 251, 266, 269, 275, 283, 284, 289, 316, 318, 324, 329, 341], "NOT": [7, 134, 277, 284, 289, 326, 335], "clip": [7, 11, 12, 40, 42, 47, 58, 134, 138, 139, 166, 168, 173, 184, 279, 280, 282, 283, 289, 301, 329, 330, 337], "min": [7, 11, 12, 34, 36, 55, 58, 67, 76, 90, 97, 99, 134, 138, 139, 160, 162, 181, 184, 193, 202, 216, 223, 225, 234, 275, 277, 280, 282, 283, 284, 290, 341], "peak_dg": [7, 134], "from_pmf": [7, 11, 12, 13, 134, 138, 139, 140], "peak_streamline_gener": [7, 134], "closest_peak_dg_csd": [7, 134], "tractogram_closest_peak_dg": [7, 134], "q": [7, 18, 19, 28, 34, 38, 44, 45, 52, 53, 61, 62, 75, 88, 89, 103, 134, 145, 154, 160, 164, 170, 171, 178, 179, 187, 188, 201, 214, 215, 229, 234, 235, 239, 249, 254, 273, 275, 277, 278, 280, 282, 283, 284, 285, 286, 288, 289, 295, 304, 311, 316, 335, 339, 341, 347, 350], "ball": [7, 18, 19, 38, 44, 53, 134, 145, 164, 170, 179, 234, 273, 280, 283, 285, 289, 304, 350], "residu": [7, 23, 24, 25, 26, 28, 134, 149, 150, 151, 152, 154, 249, 263, 265, 275, 283, 341], "vol": [7, 23, 27, 29, 41, 44, 45, 46, 50, 53, 62, 66, 78, 79, 80, 81, 84, 87, 103, 104, 105, 107, 134, 149, 153, 167, 170, 171, 172, 176, 179, 188, 192, 204, 205, 206, 207, 210, 213, 234, 277, 279, 283, 284, 285, 287], "39": [7, 18, 41, 47, 58, 59, 63, 134, 167, 173, 184, 185, 189, 273, 277, 327, 331], "tracking_bootstrap_peak": [7, 134], "trajectori": [8, 10, 11, 18, 38, 87, 135, 137, 138, 164, 213, 245, 249, 278, 283, 341], "pathwai": [8, 9, 11, 37, 75, 88, 89, 90, 135, 136, 138, 163, 201, 214, 215, 216, 235, 245, 284, 286, 287, 289, 295, 316], "within": [8, 11, 18, 28, 40, 41, 47, 53, 76, 80, 87, 90, 108, 135, 138, 154, 166, 167, 173, 179, 202, 206, 213, 216, 234, 243, 245, 267, 272, 273, 275, 277, 278, 279, 281, 283, 284, 285, 287], "constraint": [8, 13, 18, 38, 41, 42, 52, 53, 59, 135, 140, 164, 167, 168, 178, 179, 185, 232, 245, 249, 277, 278, 283, 333, 342, 343], "max": [8, 18, 34, 36, 40, 47, 55, 65, 76, 90, 97, 99, 126, 135, 160, 162, 166, 173, 181, 191, 202, 216, 223, 225, 234, 245, 273, 277, 280, 282, 283, 284, 290, 331, 333, 346], "word": [8, 41, 55, 78, 107, 109, 110, 135, 167, 181, 204, 245, 252, 275, 283, 286, 288, 324, 330], "highest": [8, 34, 135, 160, 235, 245, 275, 277, 283, 284, 329], "oppos": [8, 51, 135, 177, 245, 275, 283, 287], "draw": [8, 64, 70, 72, 135, 190, 196, 198, 245, 255, 288], "therefor": [8, 24, 28, 32, 42, 44, 45, 47, 49, 50, 52, 66, 67, 96, 97, 99, 125, 135, 150, 154, 158, 168, 170, 171, 173, 175, 176, 178, 192, 193, 222, 223, 225, 229, 231, 245, 254, 255, 256, 258, 262, 266, 270, 275, 277, 283, 350], "equival": [8, 47, 135, 173, 230, 233, 245, 256, 265, 275, 277, 283, 285], "alwai": [8, 17, 32, 34, 41, 42, 47, 52, 54, 55, 59, 123, 125, 135, 144, 158, 160, 167, 168, 173, 178, 180, 181, 185, 229, 245, 252, 256, 266, 279, 283, 285, 287, 331, 337, 346], "unlik": [8, 11, 135, 138, 245, 283], "entir": [8, 14, 23, 25, 26, 28, 51, 52, 55, 75, 97, 135, 141, 149, 151, 152, 154, 177, 178, 181, 201, 223, 233, 245, 253, 257, 275, 281, 283, 284, 287, 289, 336], "begin": [8, 9, 10, 11, 14, 15, 29, 37, 58, 78, 80, 86, 94, 135, 136, 137, 138, 141, 142, 155, 163, 184, 204, 206, 212, 220, 230, 243, 245, 252, 283, 289, 337, 345, 346, 347, 350], "deterministicmaximumdirectiongett": [8, 15, 135, 142], "represent": [8, 9, 11, 37, 52, 55, 57, 63, 67, 81, 90, 94, 104, 105, 110, 119, 135, 136, 138, 163, 178, 181, 183, 189, 193, 207, 216, 220, 231, 245, 263, 267, 275, 277, 278, 281, 283, 287, 329, 350], "detmax_dg": [8, 135], "streamline_gener": [8, 11, 12, 13, 14, 15, 94, 135, 138, 139, 140, 141, 142, 220], "tractogram_deterministic_dg": [8, 135], "tracking_determinist": [8, 135], "approach": [9, 11, 28, 32, 37, 43, 51, 52, 55, 58, 63, 70, 71, 72, 73, 136, 138, 154, 158, 163, 169, 177, 178, 181, 184, 189, 196, 197, 198, 199, 245, 254, 260, 261, 264, 279, 283, 284, 286, 289, 307], "idea": [9, 26, 28, 37, 41, 51, 65, 72, 123, 136, 152, 154, 163, 167, 177, 191, 198, 229, 239, 243, 245, 247, 252, 257, 263, 283, 333, 340, 345], "direction": [9, 37, 55, 136, 163, 181, 245], "tract": [9, 18, 34, 37, 43, 47, 68, 75, 76, 91, 136, 160, 163, 169, 173, 194, 201, 202, 217, 235, 237, 245, 275, 283, 284, 286, 288, 289, 296, 311, 335, 337, 343], "build": [9, 11, 12, 28, 37, 53, 64, 72, 73, 100, 102, 122, 136, 138, 139, 154, 163, 179, 190, 198, 199, 226, 228, 234, 245, 247, 252, 275, 282, 283, 288, 289, 290, 291, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339], "wide": [9, 37, 80, 136, 163, 206, 245, 346], "simpl": [9, 18, 32, 37, 41, 43, 44, 47, 49, 51, 58, 61, 66, 67, 78, 79, 80, 93, 95, 98, 107, 120, 123, 136, 158, 163, 167, 169, 170, 173, 175, 177, 184, 187, 192, 193, 204, 205, 206, 219, 221, 224, 233, 245, 249, 256, 277, 282, 283, 284, 288, 289, 333, 338, 344], "three": [9, 18, 36, 37, 47, 51, 52, 53, 54, 55, 58, 61, 64, 65, 70, 72, 80, 82, 94, 110, 136, 162, 163, 173, 177, 178, 179, 180, 181, 184, 187, 190, 191, 196, 198, 206, 208, 220, 229, 230, 231, 243, 245, 259, 267, 273, 275, 277, 278, 281, 283, 285, 287, 288], "thing": [9, 37, 55, 63, 64, 65, 94, 100, 102, 114, 117, 120, 124, 125, 136, 163, 181, 189, 190, 191, 220, 226, 228, 233, 245, 251, 252, 255, 257, 264, 269, 271, 277, 279, 283, 287, 324, 333, 334], "must": [9, 10, 11, 13, 17, 32, 37, 41, 45, 52, 53, 62, 64, 71, 78, 79, 107, 136, 138, 140, 144, 158, 163, 167, 171, 178, 179, 188, 190, 197, 204, 205, 235, 245, 267, 275, 277, 278, 279, 281, 282, 283, 284, 286, 289, 292, 309], "abov": [9, 15, 18, 20, 21, 23, 24, 26, 28, 29, 37, 41, 42, 47, 49, 50, 51, 53, 54, 57, 65, 82, 85, 93, 94, 99, 107, 109, 110, 119, 124, 125, 136, 142, 146, 147, 149, 150, 152, 154, 155, 163, 167, 168, 173, 175, 176, 177, 179, 180, 183, 191, 208, 211, 219, 220, 225, 230, 233, 235, 249, 256, 265, 273, 275, 277, 278, 281, 282, 283, 284, 285, 289, 346, 350], "internet": [9, 37, 59, 136, 163, 185], "water": [9, 18, 37, 38, 42, 43, 54, 57, 85, 90, 103, 136, 163, 164, 168, 169, 180, 183, 211, 216, 229, 243, 249, 278, 283, 285, 289, 306, 326, 335, 338, 342], "qualiti": [9, 23, 24, 34, 37, 48, 78, 89, 136, 149, 150, 160, 163, 174, 204, 215, 244, 255, 256, 275, 278, 281, 283, 284, 288, 289, 291, 329, 330, 335], "basi": [9, 11, 37, 48, 52, 55, 60, 61, 136, 138, 163, 174, 178, 181, 186, 187, 243, 245, 249, 277, 278, 280, 282, 283, 289, 290, 309, 329, 331, 332, 335, 337, 338, 340, 350], "peak_slic": [9, 37, 41, 58, 59, 136, 163, 167, 184, 185, 329], "peak_dir": [9, 37, 41, 58, 59, 136, 163, 167, 184, 185, 281], "peak_valu": [9, 37, 40, 41, 50, 58, 59, 136, 163, 166, 167, 176, 184, 185, 280, 290, 333], "csa_direction_field": [9, 37, 136, 163], "ve": [9, 37, 87, 94, 110, 119, 120, 121, 125, 136, 163, 213, 220, 233, 252, 255, 266, 267, 268, 271, 277, 287, 347], "further": [9, 13, 14, 34, 37, 51, 52, 63, 75, 124, 136, 140, 141, 160, 163, 177, 178, 189, 201, 251, 253, 255, 260, 261, 265, 272, 275, 283, 284], "again": [9, 37, 55, 58, 64, 107, 109, 110, 124, 136, 163, 181, 184, 190, 230, 262, 264, 266, 268, 277, 283, 284, 326, 328, 331, 333, 351], "sli": [9, 13, 22, 25, 26, 28, 37, 74, 136, 140, 148, 151, 152, 154, 163, 200], "set_axis_off": [9, 13, 22, 23, 25, 32, 36, 37, 44, 45, 48, 62, 74, 136, 140, 148, 149, 151, 158, 162, 163, 170, 171, 174, 188, 200], "imshow": [9, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 43, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 62, 65, 70, 74, 82, 94, 136, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 160, 162, 163, 169, 170, 171, 173, 174, 175, 177, 180, 181, 182, 184, 188, 191, 196, 200, 208, 220, 288], "grai": [9, 10, 13, 15, 22, 23, 24, 25, 26, 27, 28, 32, 36, 37, 43, 48, 49, 51, 53, 54, 56, 65, 74, 82, 94, 104, 105, 136, 137, 140, 142, 148, 149, 150, 151, 152, 153, 154, 158, 162, 163, 169, 174, 175, 177, 179, 180, 182, 191, 200, 208, 220, 245, 275, 283, 288], "gfa_tracking_mask": [9, 37, 136, 163], "deriv": [9, 10, 24, 37, 42, 43, 48, 49, 57, 63, 136, 137, 150, 163, 168, 169, 174, 175, 183, 189, 229, 235, 240, 243, 269, 270, 275, 277, 278, 283, 284, 285, 287, 288, 289, 292, 306, 351], "specifi": [9, 17, 24, 37, 51, 53, 57, 58, 64, 65, 71, 94, 100, 136, 144, 150, 163, 177, 179, 183, 184, 190, 191, 197, 220, 226, 229, 233, 235, 238, 239, 240, 242, 243, 244, 245, 275, 277, 278, 282, 283, 284, 285, 287, 288, 289, 294, 295, 300, 301, 306, 307, 308, 309, 315, 326, 335, 346, 351], "grid": [9, 17, 18, 20, 37, 40, 41, 52, 64, 71, 73, 97, 99, 136, 144, 146, 163, 166, 167, 178, 190, 197, 199, 223, 225, 273, 275, 283, 285, 287, 288, 326, 333, 341], "per": [9, 14, 18, 37, 48, 53, 60, 66, 67, 68, 75, 94, 97, 107, 136, 141, 163, 174, 179, 186, 192, 193, 194, 201, 220, 223, 235, 236, 237, 245, 260, 273, 275, 278, 279, 282, 283, 284, 286, 287, 288, 289, 292, 301, 307, 321, 322, 329, 332, 333, 346, 348], "give": [9, 17, 23, 28, 32, 34, 37, 40, 41, 51, 57, 80, 89, 109, 110, 113, 117, 121, 123, 124, 136, 144, 149, 154, 158, 160, 163, 166, 167, 177, 183, 206, 215, 229, 239, 252, 269, 270, 277, 279, 283, 287, 289, 301, 325, 326, 327, 335, 341], "final": [9, 14, 25, 36, 37, 41, 42, 46, 47, 51, 52, 54, 55, 56, 58, 59, 64, 65, 66, 71, 72, 81, 84, 85, 93, 94, 96, 110, 120, 124, 136, 141, 151, 162, 163, 167, 168, 172, 173, 177, 178, 180, 181, 182, 184, 185, 190, 191, 192, 197, 198, 207, 210, 211, 219, 220, 222, 232, 233, 256, 259, 260, 272, 275, 277, 283, 284, 289], "bring": [9, 37, 71, 73, 96, 110, 136, 163, 197, 199, 222, 244, 252, 264, 275, 338], "togeth": [9, 25, 37, 46, 52, 53, 55, 65, 67, 84, 94, 96, 100, 136, 151, 163, 172, 178, 179, 181, 191, 193, 210, 220, 222, 226, 230, 252, 259, 262, 275, 277, 281, 283, 284, 287, 289, 335, 338], "garyfallidis12": [9, 37, 66, 78, 79, 80, 81, 87, 136, 163, 192, 204, 205, 206, 207, 213, 234, 245, 284, 287], "what": [9, 32, 34, 36, 37, 52, 55, 58, 63, 64, 68, 70, 72, 75, 78, 79, 93, 96, 99, 110, 121, 124, 127, 136, 158, 160, 162, 163, 178, 181, 184, 189, 190, 194, 196, 198, 201, 204, 205, 219, 222, 225, 229, 232, 234, 235, 247, 251, 275, 281, 283, 284, 285, 289], "happen": [9, 37, 52, 70, 97, 98, 136, 163, 178, 196, 223, 224, 233, 252, 255, 272, 277, 289, 335], "prepar": [9, 12, 37, 47, 51, 64, 136, 139, 163, 173, 177, 190, 251, 275, 277, 282, 283], "streamlines_actor": [9, 13, 14, 37, 92, 98, 136, 140, 141, 163, 218, 224], "static": [9, 37, 64, 65, 67, 68, 71, 72, 73, 136, 163, 190, 191, 193, 194, 197, 198, 199, 236, 237, 244, 275, 277, 281, 283, 288, 289, 291, 292, 293, 296, 318], "Or": [9, 33, 36, 37, 41, 109, 110, 125, 136, 159, 162, 163, 167, 229, 283], "tractogram_eudx": [9, 37, 136, 163], "so": [9, 11, 13, 14, 17, 28, 29, 37, 39, 42, 44, 47, 51, 52, 53, 55, 58, 60, 63, 64, 67, 68, 71, 72, 73, 75, 78, 79, 80, 81, 86, 87, 90, 93, 94, 96, 97, 99, 107, 108, 110, 119, 120, 121, 124, 125, 136, 138, 140, 141, 144, 154, 155, 163, 165, 168, 170, 173, 177, 178, 179, 181, 184, 186, 189, 190, 193, 194, 197, 198, 199, 201, 204, 205, 206, 207, 212, 213, 216, 219, 220, 222, 223, 225, 230, 233, 234, 240, 243, 244, 249, 251, 252, 255, 256, 257, 258, 260, 262, 263, 264, 266, 267, 268, 270, 275, 277, 278, 281, 282, 283, 284, 287, 288, 289, 304, 325, 331, 332, 333, 346, 351], "call": [9, 17, 21, 26, 27, 29, 32, 36, 37, 41, 42, 43, 44, 46, 47, 51, 53, 54, 55, 57, 60, 63, 64, 67, 68, 72, 82, 84, 86, 87, 94, 97, 100, 102, 107, 109, 110, 124, 125, 136, 144, 147, 152, 153, 155, 158, 162, 163, 167, 168, 169, 170, 172, 173, 177, 179, 180, 181, 183, 186, 189, 190, 193, 194, 198, 208, 210, 212, 213, 220, 223, 226, 228, 231, 233, 234, 243, 244, 245, 251, 252, 265, 267, 269, 275, 277, 278, 282, 283, 285, 287, 289, 290, 326, 329, 330, 331, 341, 351], "softwar": [9, 14, 17, 37, 71, 72, 73, 96, 103, 107, 136, 141, 144, 163, 197, 198, 199, 222, 244, 247, 248, 252, 277, 278, 283, 284, 289, 307, 346, 347, 350], "toward": [9, 10, 15, 37, 52, 64, 73, 136, 137, 142, 163, 178, 190, 199, 230, 234, 245, 262, 270, 275, 277, 283, 287, 288, 289, 351], "accur": [9, 13, 37, 42, 47, 58, 64, 136, 140, 163, 168, 173, 184, 190, 234, 243, 245, 258, 277, 279, 282, 283, 287, 289, 298, 299, 342], "univers": [9, 37, 54, 104, 105, 126, 136, 163, 180, 232, 234, 245, 268, 278, 283, 285, 289, 321], "cambridg": [9, 37, 54, 126, 136, 163, 180, 234, 245, 277, 283, 289, 321], "2012": [9, 10, 15, 37, 42, 43, 50, 66, 67, 78, 79, 80, 81, 87, 103, 136, 137, 142, 163, 168, 169, 176, 192, 193, 204, 205, 206, 207, 213, 233, 234, 245, 283, 284, 285, 286, 287, 289, 321, 336], "tracking_introduction_eudx_1": [9, 136], "pft": [10, 137, 241, 249, 329, 330], "girard2014": [10, 15, 137, 142, 245], "pve": [10, 15, 53, 82, 104, 105, 137, 142, 179, 208, 245, 284, 287, 289, 322, 334], "incorrectli": [10, 137, 245, 270], "corticospin": [10, 15, 34, 53, 75, 76, 82, 137, 142, 160, 179, 201, 202, 208, 235, 245, 283], "fluid": [10, 15, 49, 51, 53, 58, 82, 104, 105, 137, 142, 175, 177, 179, 184, 208, 245, 277, 283, 289, 322], "reli": [10, 28, 66, 107, 137, 154, 192, 245, 265, 283, 287, 326, 333], "correctli": [10, 110, 137, 256, 262, 264, 267, 324, 328, 329, 333, 340], "kept": [10, 41, 90, 137, 167, 216, 245, 260, 269, 275, 277, 280, 287], "extend": [10, 53, 96, 100, 102, 107, 117, 137, 179, 222, 226, 228, 234, 245, 263, 277, 283, 284, 288, 289, 327, 333, 335, 341], "continu": [10, 15, 18, 38, 137, 142, 164, 234, 245, 249, 256, 260, 271, 283, 287, 326, 332], "until": [10, 41, 58, 124, 137, 167, 184, 245, 252, 275, 283, 284], "whenev": [10, 15, 125, 137, 142, 283], "classifi": [10, 15, 26, 53, 82, 108, 137, 142, 152, 179, 208, 249, 284, 290, 325, 326, 334, 335, 338], "invalidpoint": [10, 15, 137, 142], "f_pve_csf": [10, 15, 137, 142], "f_pve_gm": [10, 15, 137, 142], "f_pve_wm": [10, 15, 137, 142], "stanford_pve_map": [10, 15, 137, 142, 245], "pve_csf_data": [10, 15, 137, 142], "pve_gm_data": [10, 15, 137, 142], "pve_wm_data": [10, 15, 137, 142], "_": [10, 15, 26, 46, 54, 56, 57, 58, 65, 67, 68, 71, 82, 84, 89, 137, 142, 152, 172, 180, 182, 183, 184, 191, 193, 194, 197, 208, 210, 215, 252, 277, 278, 279, 283, 285, 287, 289, 346, 347], "return_voxs": [10, 33, 44, 50, 137, 159, 170, 176, 275, 281], "dg": [10, 15, 137, 142, 329], "smith2012": [10, 15, 137, 142], "both": [10, 22, 23, 24, 25, 26, 29, 32, 41, 42, 49, 51, 52, 53, 54, 55, 57, 58, 59, 65, 66, 67, 68, 71, 74, 76, 78, 87, 93, 96, 98, 107, 125, 137, 148, 149, 150, 151, 152, 155, 158, 167, 168, 175, 177, 178, 179, 180, 181, 183, 184, 185, 191, 192, 193, 194, 197, 200, 202, 204, 213, 219, 222, 224, 250, 260, 263, 265, 267, 275, 277, 278, 282, 283, 287, 288, 289, 309, 311, 333, 335, 350], "determin": [10, 15, 34, 41, 51, 52, 53, 82, 94, 137, 142, 160, 167, 177, 178, 179, 208, 220, 231, 269, 279, 280, 285, 287, 289, 290, 301, 305, 350], "reach": [10, 15, 41, 58, 66, 76, 82, 94, 119, 137, 142, 167, 184, 192, 202, 208, 220, 230, 245, 255, 279, 283, 287, 289, 322], "invalid": [10, 15, 17, 54, 137, 142, 144, 180, 275, 277, 281, 287, 324, 328, 341], "conjunct": [10, 137], "cmc_criterion": [10, 137], "from_pv": [10, 137], "average_voxel_s": [10, 137], "pft_back_tracking_dist": [10, 137, 287], "distanc": [10, 66, 67, 68, 75, 76, 79, 80, 81, 92, 93, 192, 193, 194, 201, 202, 205, 206, 207, 218, 219, 229, 256, 275, 277, 280, 281, 283, 284, 286, 287, 288, 289, 290, 296, 311, 316, 322, 336, 340, 344, 351], "backtrack": [10, 15, 142], "wm": [10, 24, 41, 42, 53, 82, 104, 105, 150, 167, 168, 179, 208, 245, 283, 289, 325, 342], "csf": [10, 32, 49, 51, 52, 53, 58, 82, 104, 105, 158, 175, 177, 178, 179, 184, 208, 283, 289, 328], "pft_front_tracking_dist": [10, 137, 287], "event": [10, 96, 222, 277, 284, 288, 289, 326, 329], "particle_count": [10, 137, 287], "min_wm_pve_before_stop": [10, 287, 289, 322], "control": [10, 48, 59, 68, 107, 110, 174, 185, 194, 229, 235, 237, 245, 252, 277, 278, 282, 283, 284, 286, 287, 289, 335], "gm": [10, 24, 53, 58, 82, 104, 105, 150, 179, 184, 208, 277, 283, 289], "wm_pve": 10, "long": [10, 17, 50, 107, 144, 176, 234, 275, 282, 285, 287, 289, 326, 336], "particularlyuseful": 10, "interfac": [10, 64, 96, 102, 124, 127, 190, 222, 228, 243, 245, 249, 275, 277, 279, 283, 285, 289, 301, 326, 332, 336, 340, 341], "sub": [10, 14, 18, 24, 39, 48, 49, 64, 100, 141, 150, 165, 174, 175, 190, 226, 251, 265, 273, 275, 277, 281, 282, 283, 284, 289, 329], "exit": [10, 15, 94, 142, 220, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 329], "deep": [10, 42, 168, 232, 249, 251, 253, 265, 282, 289, 302, 337, 341], "pft_streamline_gen": 10, "max_cross": [10, 137, 287], "maxlen": [10, 137, 287], "1000": [10, 14, 17, 18, 24, 26, 29, 36, 44, 48, 53, 54, 59, 64, 71, 86, 104, 105, 137, 141, 144, 150, 152, 155, 162, 170, 174, 179, 180, 185, 190, 197, 212, 234, 273, 275, 277, 278, 282, 283, 285, 288, 289, 326, 346, 347], "return_al": [10, 15, 137, 142, 287], "pft_streamline_gener": [10, 137], "tractogram_pft": [10, 137], "prob_streamline_gener": [10, 137], "tractogram_probabilistic_cmc": [10, 137], "whittingstal": [10, 15, 137, 142, 245, 278, 287, 289, 322], "derich": [10, 15, 34, 104, 105, 137, 142, 160, 245, 279, 280, 283, 285, 287, 289, 300, 322, 350], "bias": [10, 15, 42, 66, 137, 142, 168, 192, 245, 277, 287, 289, 322], "98": [10, 15, 97, 137, 142, 223, 245, 249, 287, 288, 289, 322, 331], "266": [10, 15, 137, 142, 245, 287, 289, 322, 332], "278": [10, 15, 137, 142, 245, 287, 289, 322, 333], "smith": [10, 15, 31, 82, 103, 107, 123, 126, 137, 142, 157, 208, 234, 235, 236, 237, 242, 283, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 331, 350], "tournier": [10, 15, 18, 41, 53, 137, 142, 167, 179, 273, 280, 282, 283, 289, 305, 329, 350], "calamant": [10, 15, 41, 53, 137, 142, 167, 179, 280, 283, 350], "connelli": [10, 15, 41, 53, 137, 142, 167, 179, 280, 283, 350], "63": [10, 15, 24, 25, 66, 137, 142, 150, 151, 192, 331], "1924": [10, 15, 137, 142, 335], "1938": [10, 15, 137, 142, 337], "tracking_pft": [10, 137], "mr": [11, 23, 24, 25, 27, 29, 34, 47, 51, 58, 61, 82, 103, 138, 149, 150, 151, 153, 155, 160, 173, 177, 184, 187, 208, 229, 239, 240, 242, 243, 245, 247, 277, 278, 279, 283, 289, 308, 331, 346], "possibl": [11, 17, 22, 29, 40, 41, 42, 44, 45, 50, 52, 53, 61, 62, 64, 74, 81, 99, 110, 117, 124, 138, 144, 148, 155, 166, 167, 168, 170, 171, 176, 178, 179, 187, 188, 190, 200, 207, 225, 229, 230, 245, 252, 272, 275, 277, 278, 279, 280, 283, 284, 287, 289, 292, 304, 305, 306, 307, 308, 309, 310, 317, 318, 324, 328, 335, 338, 340, 341, 347], "howev": [11, 13, 17, 20, 26, 31, 42, 45, 49, 52, 53, 54, 55, 57, 58, 78, 93, 94, 96, 99, 110, 138, 140, 144, 146, 152, 157, 168, 171, 175, 178, 179, 180, 181, 183, 184, 204, 219, 220, 222, 225, 229, 233, 245, 254, 257, 266, 267, 269, 270, 277, 279, 282, 283, 284, 289, 298, 299, 350], "few": [11, 20, 63, 96, 106, 110, 138, 146, 189, 222, 233, 234, 251, 252, 263, 264, 287, 325, 326, 330, 331, 332, 333, 334, 344], "latter": [11, 43, 138, 169, 243], "cannot": [11, 39, 49, 54, 58, 138, 165, 175, 180, 184, 233, 277, 282, 287, 324, 330, 333, 335, 341, 342, 343], "neg": [11, 13, 17, 24, 28, 40, 41, 42, 52, 53, 54, 92, 138, 140, 144, 150, 154, 166, 167, 168, 178, 179, 180, 218, 265, 266, 275, 277, 278, 279, 280, 281, 283, 284, 289, 301, 305, 324, 326, 332, 337, 339, 350], "ideal": [11, 18, 28, 42, 138, 154, 168, 273, 283, 350], "strictli": [11, 13, 89, 138, 140, 215, 283, 284], "failur": [11, 108, 138, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 337, 338, 341], "sometim": [11, 20, 28, 93, 94, 110, 138, 146, 154, 219, 220, 229, 233, 335], "tractogram_probabilistic_dg_pmf": [11, 138], "disadvantag": [11, 138], "tend": [11, 28, 52, 138, 154, 178], "lot": [11, 32, 52, 94, 124, 138, 158, 178, 220, 229, 233, 252, 260, 261, 262, 282, 283], "ram": [11, 58, 138, 184, 283], "uniqu": [11, 53, 56, 57, 68, 76, 119, 138, 179, 182, 183, 194, 202, 254, 275, 277, 281, 282, 283, 284, 287, 338, 341], "81": [11, 24, 40, 47, 81, 138, 150, 166, 173, 207, 252, 278, 283, 331, 336], "106": [11, 40, 47, 138, 166, 173, 331], "76": [11, 24, 39, 40, 47, 97, 138, 150, 165, 166, 173, 223, 240, 327, 331], "181": [11, 81, 138, 207, 332, 333], "sh": [11, 53, 60, 138, 179, 186, 249, 280, 281, 282, 283, 289, 321, 329, 335, 337, 338, 341, 342, 350], "362": [11, 14, 56, 57, 59, 138, 141, 182, 183, 185, 278, 283, 333], "worri": [11, 110, 138, 235], "tractogram_probabilistic_dg_sh": [11, 138], "Not": [11, 138, 266, 324], "attribut": [11, 17, 40, 41, 42, 47, 51, 56, 81, 138, 144, 166, 167, 168, 173, 177, 182, 207, 271, 280, 281, 282, 288, 326, 328, 329, 336, 337, 339, 343], "return_sh": [11, 21, 59, 138, 147, 185, 280], "fod_coeff": [11, 138], "tractogram_probabilistic_dg_sh_pfm": [11, 138], "tracking_probabilist": [11, 138], "ptt": [12, 139, 232, 278, 342, 343], "aydogan2021": [12, 139], "pttdirectiongett": [12, 139], "ptt_dg": [12, 139], "probe_length": [12, 139], "direction_gett": [12, 139, 287], "tractogram_ptt_dg_pmf": [12, 139], "aydogan": [12, 139, 343], "db": [12, 139], "shi": [12, 139], "ieee": [12, 27, 28, 45, 50, 58, 62, 64, 65, 82, 103, 104, 105, 139, 153, 154, 171, 176, 184, 188, 190, 191, 208, 239, 250, 275, 277, 279, 283], "tran": [12, 103, 139, 277, 279, 289, 291], "med": [12, 24, 31, 49, 61, 103, 139, 150, 157, 175, 187, 240, 242, 277, 279, 280, 283, 289, 306, 310, 350], "2021": [12, 18, 57, 96, 103, 139, 183, 222, 250, 252, 273, 278, 283, 336, 339, 340, 341], "feb": [12, 104, 105, 139], "635": [12, 139, 324], "647": [12, 139, 329], "1109": [12, 58, 139, 184, 283, 326], "tmi": [12, 139, 283], "2020": [12, 28, 42, 52, 68, 75, 88, 89, 139, 154, 168, 178, 194, 201, 214, 215, 235, 250, 277, 278, 279, 282, 283, 284, 286, 289, 295, 301, 316, 336, 337, 338, 339], "3034038": [12, 139], "epub": [12, 139], "pmid": [12, 139, 277], "33104507": [12, 139], "pmcid": [12, 139, 277], "pmc7931442": [12, 139], "tracking_ptt": [12, 139], "canalesrodriguez2015": [13, 58, 140, 184], "richardson": [13, 46, 58, 84, 140, 172, 184, 210, 283], "luci": [13, 46, 58, 84, 140, 172, 184, 210, 283], "noncentr": [13, 58, 140, 184, 283, 289], "chi": [13, 32, 58, 140, 158, 184, 277, 283, 289], "reflect": [13, 58, 90, 94, 140, 184, 216, 220, 231, 275, 283, 289, 317], "transform_streamlin": [13, 14, 96, 97, 140, 141, 222, 223, 290, 342, 343], "rumbasdmodel": [13, 58, 140, 184, 290], "t1_aff": [13, 14, 140, 141], "global": [13, 31, 52, 58, 65, 75, 87, 96, 103, 104, 105, 109, 120, 140, 157, 178, 184, 191, 201, 213, 222, 236, 242, 275, 283, 284, 285, 289, 313, 316, 318, 333], "voxelwis": [13, 58, 140, 184, 283, 289, 326], "tv": [13, 58, 140, 184, 279, 283, 289, 310], "regular": [13, 52, 55, 58, 59, 61, 68, 72, 104, 105, 107, 140, 178, 181, 184, 185, 187, 194, 198, 237, 243, 249, 275, 277, 278, 279, 280, 283, 285, 288, 289, 296, 301, 309, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 350], "use_tv": [13, 58, 140, 184, 283, 289], "turn": [13, 45, 107, 110, 140, 171, 229, 230, 239, 252, 253, 281, 283, 287], "off": [13, 26, 34, 49, 55, 68, 70, 71, 82, 111, 119, 140, 152, 160, 175, 181, 194, 196, 197, 208, 237, 252, 259, 275, 289, 296, 326], "effici": [13, 58, 66, 67, 99, 103, 140, 184, 192, 193, 225, 233, 236, 244, 249, 265, 275, 277, 278, 287, 289, 318, 338], "although": [13, 24, 42, 52, 54, 55, 67, 140, 150, 168, 178, 180, 181, 193, 240, 260, 261, 263, 265, 271, 282, 283, 287], "usag": [13, 44, 140, 170, 234, 249, 282, 283, 289, 323, 333], "wm_respons": [13, 58, 140, 184, 283], "n_iter": [13, 58, 140, 184, 283, 289], "200": [13, 18, 24, 28, 41, 51, 55, 58, 72, 81, 85, 96, 104, 105, 140, 150, 154, 167, 177, 181, 184, 198, 207, 211, 222, 234, 256, 260, 263, 273, 278, 283, 289, 326, 341, 343], "rumba_fit": [13, 58, 140, 184], "fodf": [13, 48, 53, 59, 140, 174, 179, 185, 243, 282, 283, 289, 324], "f_wm": [13, 58, 140, 184, 283, 290], "establish": [13, 63, 140, 189, 275], "common": [13, 17, 31, 33, 40, 42, 52, 54, 58, 63, 66, 71, 75, 100, 102, 107, 109, 117, 140, 144, 157, 159, 166, 168, 178, 180, 184, 189, 192, 197, 201, 226, 228, 235, 242, 263, 277, 278, 281, 283, 286, 289, 331], "caution": [13, 55, 140, 181], "separ": [13, 28, 41, 51, 53, 55, 82, 102, 107, 110, 140, 154, 167, 177, 179, 181, 208, 228, 233, 243, 255, 256, 259, 272, 275, 277, 278, 281, 282, 283, 284, 285, 288, 289, 308, 319, 331, 341], "isotrop": [13, 18, 33, 49, 52, 53, 58, 71, 93, 140, 159, 175, 178, 179, 184, 197, 219, 229, 264, 266, 267, 270, 272, 273, 275, 280, 284, 285, 287, 289, 290, 291, 292, 337, 344], "bia": [13, 25, 52, 82, 140, 151, 178, 208, 277, 279, 283, 324, 330, 335], "advantag": [13, 28, 39, 50, 54, 59, 67, 87, 140, 154, 165, 176, 180, 185, 193, 213, 233, 275], "featur": [13, 18, 23, 65, 77, 79, 81, 85, 87, 104, 105, 107, 108, 109, 114, 119, 120, 140, 149, 191, 203, 205, 207, 211, 213, 232, 249, 250, 252, 267, 277, 281, 282, 283, 284, 285, 289, 307, 324, 326, 339, 342, 343], "f_wm_tracking_mask": [13, 140], "adher": [13, 140], "manipul": [13, 17, 102, 140, 144, 228, 274, 281], "list": [13, 14, 55, 64, 66, 71, 76, 78, 79, 80, 90, 93, 97, 98, 100, 102, 104, 110, 120, 123, 124, 125, 140, 141, 181, 190, 192, 197, 202, 204, 205, 206, 216, 219, 223, 224, 226, 228, 233, 238, 243, 246, 251, 252, 268, 270, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 303, 306, 307, 308, 309, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "tractogram_probabilistic_rumba": [13, 140], "canal": [13, 18, 46, 58, 84, 140, 172, 184, 210, 273, 283, 289, 331], "rodr\u00edguez": [13, 18, 58, 140, 184, 273, 283, 289], "sotiropoulo": [13, 18, 58, 140, 184, 273, 283, 289], "caruy": [13, 58, 126, 140, 184, 283, 289, 332], "aja": [13, 58, 140, 184, 283, 289], "fern\u00e1ndez": [13, 58, 140, 184, 283, 289], "radua": [13, 58, 140, 184, 283, 289], "mendizab": [13, 58, 140, 184, 283, 289], "iturria": [13, 58, 140, 184, 283, 289], "medina": [13, 58, 140, 184, 283, 289], "meli": [13, 58, 140, 184, 283, 289], "garc\u00eda": [13, 58, 140, 184, 283, 289], "l": [13, 25, 26, 28, 39, 42, 43, 48, 49, 55, 56, 58, 63, 71, 72, 73, 75, 88, 89, 103, 104, 105, 140, 151, 152, 154, 165, 168, 169, 174, 175, 181, 182, 184, 189, 197, 198, 199, 201, 214, 215, 234, 235, 244, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 298, 306, 307, 316, 333, 350], "alem\u00e1n": [13, 58, 140, 184, 283, 289], "g\u00f3mez": [13, 58, 140, 184, 283, 289], "thiran": [13, 58, 140, 184, 283, 289], "sarr\u00f3": [13, 58, 140, 184, 283, 289], "pomarol": [13, 58, 140, 184, 283, 289], "clotet": [13, 58, 140, 184, 283, 289], "salvador": [13, 58, 140, 184, 283, 289], "multichannel": [13, 58, 140, 184, 283, 289], "ONE": [13, 14, 25, 26, 28, 58, 59, 104, 105, 140, 141, 151, 152, 154, 184, 185, 279, 282, 283, 289, 298], "e0138910": [13, 58, 140, 184, 283, 289], "org": [13, 24, 26, 42, 52, 54, 56, 57, 58, 80, 96, 103, 104, 105, 124, 125, 140, 150, 152, 168, 178, 180, 182, 183, 184, 206, 222, 229, 230, 235, 236, 237, 240, 246, 274, 275, 277, 278, 279, 281, 282, 283, 287, 289, 298, 310, 332, 338], "1371": [13, 14, 25, 26, 28, 58, 59, 104, 105, 140, 141, 151, 152, 154, 184, 185, 279, 282, 283, 289, 298, 328], "pone": [13, 14, 25, 26, 28, 58, 59, 104, 105, 140, 141, 151, 152, 154, 184, 185, 279, 282, 283, 289, 298], "0138910": [13, 58, 140, 184, 283, 289], "tracking_rumba": [13, 140], "sfm": [14, 18, 59, 141, 185, 273, 290, 325, 326, 328, 334, 337, 341], "rokem2015": [14, 59, 141, 185, 283], "select_random_set_of_streamlin": [14, 17, 89, 141, 144, 215, 290], "freesurf": [14, 94, 141, 220, 278], "canon": [14, 141, 283, 287], "deconvolv": [14, 41, 46, 84, 141, 167, 172, 210, 243, 283], "symmetr": [14, 18, 48, 59, 60, 67, 69, 71, 80, 141, 174, 185, 186, 193, 195, 197, 206, 241, 249, 267, 275, 277, 281, 282, 283, 287, 289, 316, 329, 330, 333, 337, 346, 347, 350], "sf_model": [14, 59, 141, 185], "sparsefasciclemodel": [14, 59, 141, 185, 290], "l1_ratio": [14, 59, 141, 185, 283], "alpha": [14, 43, 55, 59, 68, 141, 169, 181, 185, 194, 230, 237, 275, 277, 278, 279, 283, 289, 296, 301], "001": [14, 41, 51, 53, 58, 59, 68, 141, 167, 177, 179, 184, 185, 194, 275, 277, 281, 283, 287, 289], "pnm": [14, 141], "suffici": [14, 18, 20, 58, 141, 146, 184, 273, 283, 333], "high": [14, 18, 23, 24, 28, 34, 41, 42, 48, 49, 51, 52, 53, 60, 63, 78, 86, 104, 105, 141, 149, 150, 154, 160, 167, 168, 174, 175, 177, 178, 179, 186, 189, 204, 212, 229, 255, 256, 265, 273, 275, 279, 282, 283, 284, 285, 287, 289, 296, 328], "sake": [14, 26, 53, 141, 152, 179, 260], "compon": [14, 23, 25, 26, 42, 49, 51, 52, 58, 85, 141, 149, 151, 152, 168, 175, 177, 178, 184, 211, 230, 239, 254, 258, 263, 265, 267, 275, 279, 281, 283, 285, 287, 289, 298, 299, 326, 328, 329, 335], "construct": [14, 58, 64, 107, 141, 184, 190, 257, 269, 275, 277, 278, 283, 285, 287, 335], "subject": [14, 31, 47, 49, 55, 57, 63, 67, 68, 75, 87, 96, 104, 105, 141, 157, 173, 175, 181, 183, 189, 193, 194, 201, 213, 222, 229, 233, 235, 236, 239, 242, 246, 277, 278, 282, 283, 284, 286, 289, 294, 295, 345], "anatomi": [14, 17, 75, 90, 92, 141, 144, 201, 216, 218, 232, 249, 289, 296, 311], "speed": [14, 55, 57, 78, 106, 141, 181, 183, 204, 229, 233, 249, 275, 283, 284, 287, 289, 315, 333, 334, 336], "particularli": [14, 26, 49, 54, 63, 107, 141, 152, 175, 180, 189, 262], "throughout": [14, 68, 141, 194, 275], "purpos": [14, 24, 29, 31, 36, 41, 42, 49, 52, 53, 59, 63, 65, 67, 80, 81, 85, 87, 110, 141, 150, 155, 157, 162, 167, 168, 175, 178, 179, 185, 189, 191, 193, 206, 207, 211, 213, 239, 243, 245, 247, 248, 252, 277, 278, 283, 284, 288, 289, 326, 347], "subset": [14, 141, 275, 282], "plot_streamlin": [14, 141], "tractogram_sfm": [14, 141], "tractogram_sfm_detr": [14, 141], "ariel": [14, 59, 103, 123, 126, 141, 185, 283, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "jason": [14, 59, 87, 141, 185, 213, 283, 286], "kendrick": [14, 59, 141, 185, 283], "aviv": [14, 59, 141, 185, 283], "mezer": [14, 39, 59, 103, 104, 105, 141, 165, 185, 283], "stefan": [14, 59, 123, 126, 141, 185, 283, 289, 324, 331, 332, 333, 334, 335], "van": [14, 42, 59, 103, 104, 105, 107, 123, 126, 141, 168, 185, 234, 235, 236, 237, 283, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 331, 332, 333, 334], "der": [14, 42, 59, 103, 104, 105, 107, 123, 126, 141, 168, 185, 234, 235, 236, 237, 283, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 331, 332, 333, 334], "walt": [14, 59, 103, 104, 105, 107, 123, 126, 141, 185, 234, 235, 236, 237, 283, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 331, 332, 333, 334], "brian": [14, 59, 87, 141, 185, 213, 283, 286], "accuraci": [14, 39, 41, 42, 52, 57, 59, 71, 103, 104, 105, 141, 165, 167, 168, 178, 183, 185, 197, 275, 282, 283, 284, 340], "e0123272": [14, 59, 104, 105, 141, 185, 283], "0123272": [14, 59, 104, 105, 141, 185, 283], "tracking_sfm": [14, 141], "fa": [15, 20, 26, 34, 36, 40, 41, 42, 47, 48, 49, 53, 55, 56, 57, 58, 63, 71, 87, 96, 97, 104, 105, 142, 146, 152, 160, 162, 166, 167, 168, 173, 174, 175, 179, 181, 182, 183, 184, 189, 197, 213, 222, 223, 232, 234, 235, 243, 277, 278, 281, 283, 286, 288, 289, 290, 304, 305, 306, 307, 321, 329, 331, 333, 334, 336], "endpoint": [15, 67, 80, 94, 142, 193, 206, 220, 283, 290], "outsideimag": [15, 142, 326], "trackpoint": [15, 142, 335], "2004": [15, 18, 44, 142, 170, 273, 278, 283, 285, 341], "dti": [15, 18, 26, 34, 38, 39, 41, 42, 47, 52, 53, 55, 56, 57, 63, 85, 142, 152, 160, 164, 165, 167, 168, 173, 178, 179, 181, 182, 183, 189, 211, 229, 232, 234, 235, 241, 249, 257, 273, 277, 278, 286, 289, 290, 307, 324, 325, 326, 327, 331, 332, 333, 335, 337, 338, 341, 342, 344], "fractional_anisotropi": [15, 41, 47, 48, 142, 167, 173, 174, 290], "tensormodel": [15, 34, 39, 41, 42, 47, 49, 55, 63, 142, 160, 165, 167, 168, 173, 175, 181, 189, 232, 290, 326, 331, 342], "scalar": [15, 18, 38, 44, 48, 52, 80, 97, 103, 142, 164, 170, 174, 178, 206, 223, 243, 275, 277, 282, 283, 287, 288, 324], "metric_map": [15, 142], "float": [15, 22, 45, 70, 74, 76, 107, 142, 148, 171, 196, 200, 202, 229, 234, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 296, 297, 298, 300, 301, 304, 305, 306, 307, 309, 311, 312, 314, 316, 317, 319, 321, 322, 327, 333, 337, 340, 342], "state": [15, 17, 52, 54, 57, 63, 78, 110, 124, 142, 144, 178, 180, 183, 189, 204, 249, 271, 277, 281, 282, 333, 335, 336, 338, 341, 344], "tensor_model": [15, 142], "tenfit": [15, 41, 42, 47, 55, 142, 167, 168, 173, 181, 232, 333], "eval": [15, 41, 46, 47, 58, 63, 84, 85, 142, 167, 172, 173, 184, 189, 210, 211, 234, 262, 264, 270, 283, 285, 287, 289, 290, 306, 307], "threshold_criterion": [15, 142], "mask_fa": [15, 142], "xtick": [15, 24, 26, 28, 43, 49, 54, 142, 150, 152, 154, 169, 175, 180], "ytick": [15, 24, 26, 28, 43, 49, 54, 142, 150, 152, 154, 169, 175, 180], "nearest": [15, 43, 45, 48, 51, 55, 62, 76, 94, 142, 169, 171, 174, 177, 181, 188, 202, 220, 265, 275, 277, 284, 287, 289, 317, 343], "tight_layout": [15, 55, 56, 70, 142, 181, 182, 196], "threshold_fa": [15, 142], "tractogram_probabilistic_thresh_al": [15, 142], "tractogram_deterministic_thresh_al": [15, 142], "neighborhood": [15, 75, 142, 201, 275, 289, 292], "binary_criterion": [15, 142], "white_matter_mask": [15, 142], "tractogram_deterministic_binary_al": [15, 142], "include_map": [15, 142, 287, 289, 322], "exclude_map": [15, 142, 287, 289, 322], "background": [15, 22, 24, 32, 34, 40, 42, 43, 47, 49, 54, 55, 56, 74, 92, 94, 99, 107, 142, 148, 150, 158, 160, 166, 168, 169, 173, 175, 180, 181, 182, 200, 218, 220, 225, 271, 279, 283, 288, 289, 311], "stem": [15, 142, 265], "plausibl": [15, 42, 142, 168, 283], "act_criterion": [15, 142], "121": [15, 142, 331], "122": [15, 56, 81, 142, 182, 207, 283, 331], "act_map": [15, 142], "tractogram_deterministic_act_al": [15, 142], "tractogram_deterministic_act_valid": [15, 142], "respect": [15, 34, 49, 52, 58, 61, 65, 67, 82, 94, 142, 160, 175, 178, 184, 187, 191, 193, 208, 220, 229, 233, 249, 259, 263, 265, 271, 275, 277, 278, 281, 283, 287, 288, 289, 311, 337, 338], "addition": [15, 18, 26, 47, 107, 142, 152, 173, 232, 259, 265, 268, 271, 273], "cut": [15, 142, 252, 288], "subcort": [15, 142], "tracking_stopping_criterion": [15, 142], "write": [16, 18, 36, 40, 44, 45, 50, 52, 61, 62, 96, 102, 107, 109, 110, 113, 119, 120, 121, 143, 162, 166, 170, 171, 176, 178, 187, 188, 222, 228, 233, 239, 240, 242, 261, 262, 267, 269, 275, 281, 283, 288, 289, 333, 337], "format": [17, 33, 36, 51, 53, 85, 94, 99, 104, 105, 106, 107, 109, 120, 124, 144, 159, 162, 177, 179, 211, 220, 225, 229, 233, 235, 261, 264, 266, 275, 277, 278, 281, 282, 283, 285, 289, 307, 309, 324, 326, 327, 328, 330, 333, 335, 337, 342, 344], "short": [17, 54, 65, 90, 113, 144, 180, 191, 216, 275, 285, 287, 289, 333, 346, 347], "made": [17, 41, 52, 78, 79, 100, 102, 109, 110, 119, 120, 123, 144, 167, 178, 204, 205, 226, 228, 252, 263, 264, 266, 268, 269, 271, 283, 287, 334, 346, 347, 351], "complex": [17, 90, 144, 216, 231, 249, 256, 257, 263, 265, 269, 270, 271, 283, 341, 348, 350], "convent": [17, 54, 107, 144, 180, 230, 231, 249, 271, 275, 277, 278, 281, 283, 287, 349], "frequent": [17, 107, 127, 144, 246], "ask": [17, 114, 124, 127, 144, 246, 256, 264, 268], "question": [17, 34, 87, 94, 127, 144, 160, 213, 220, 246, 255, 256, 287, 328, 337, 343, 345], "create_nifti_head": [17, 144, 290], "get_reference_info": [17, 144, 290], "is_header_compat": [17, 144, 290], "fetcher": [17, 43, 51, 55, 64, 71, 87, 96, 144, 169, 177, 181, 190, 197, 213, 222, 249, 282, 290, 325, 326, 329, 332, 333, 335, 337, 338, 340, 342], "fetch_file_format": [17, 144, 290], "get_file_format": [17, 144, 290], "cc_m_sub": [17, 144], "laf_m_sub": [17, 144], "lpt_m_sub": [17, 144], "raf_m_sub": [17, 144], "rpt_m_sub": [17, 144], "And": [17, 63, 64, 65, 71, 72, 73, 82, 87, 123, 126, 144, 189, 190, 191, 197, 198, 199, 208, 213, 233, 235, 252, 255, 258, 261, 266, 268, 270, 287, 289, 321, 322], "template0": [17, 144], "nii": [17, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 36, 47, 48, 49, 64, 65, 74, 87, 92, 94, 99, 100, 102, 144, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 173, 174, 175, 190, 191, 200, 213, 218, 220, 225, 226, 228, 229, 232, 234, 235, 239, 240, 242, 243, 244, 245, 289, 301, 311, 319, 324, 328, 337, 342], "gz": [17, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 36, 47, 48, 49, 64, 65, 74, 87, 92, 94, 99, 100, 102, 144, 148, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 173, 174, 175, 190, 191, 200, 213, 218, 220, 225, 226, 228, 232, 234, 235, 239, 240, 242, 243, 244, 245, 289, 301, 311, 319, 337, 342], "bundles_filenam": [17, 144], "ref_anat_filenam": [17, 144], "filenam": [17, 36, 42, 44, 45, 50, 51, 52, 62, 107, 144, 162, 168, 170, 171, 176, 177, 178, 188, 234, 278, 281, 288, 289, 296, 311, 318, 329], "print": [17, 20, 21, 23, 25, 26, 27, 28, 29, 32, 33, 34, 36, 39, 40, 41, 44, 45, 47, 48, 50, 51, 52, 53, 56, 58, 59, 60, 61, 62, 63, 68, 78, 79, 81, 82, 86, 89, 93, 96, 97, 122, 144, 146, 147, 149, 151, 152, 153, 154, 155, 158, 159, 160, 162, 165, 166, 167, 170, 171, 173, 174, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 194, 204, 205, 207, 208, 212, 215, 219, 222, 223, 233, 268, 275, 277, 281, 287, 289, 327, 328, 329, 336, 340, 342], "basenam": [17, 144], "reference_anatomi": [17, 144], "simpli": [17, 28, 47, 53, 55, 64, 78, 144, 154, 173, 179, 181, 190, 204, 248, 264, 275, 287], "own": [17, 29, 36, 78, 110, 114, 116, 117, 118, 119, 120, 121, 144, 155, 162, 204, 229, 236, 239, 240, 242, 243, 244, 245, 249, 269, 282, 283, 289, 333, 338, 340, 341], "written": [17, 57, 59, 107, 110, 144, 183, 185, 247, 267, 277, 283, 284, 285, 288, 335], "properli": [17, 45, 52, 60, 96, 100, 102, 107, 144, 171, 178, 186, 222, 226, 228, 255, 267, 269, 270, 281, 283, 289, 328, 331, 333, 337, 342], "technic": [17, 117, 144, 266], "cc_trk": [17, 144], "cc_sft": [17, 144], "laf_sft": [17, 144], "raf_sft": [17, 144], "onc": [17, 26, 42, 47, 50, 52, 53, 54, 55, 58, 63, 94, 97, 100, 102, 113, 124, 144, 152, 168, 173, 176, 178, 179, 180, 181, 184, 189, 220, 223, 226, 228, 229, 240, 242, 252, 268, 275, 277, 283, 284, 289, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 315, 317, 319, 321, 322, 335, 346, 347, 350], "anywai": [17, 144, 346, 347], "lpt_sft": [17, 144], "bbox_valid_check": [17, 68, 71, 75, 76, 78, 79, 80, 81, 87, 88, 144, 194, 197, 201, 202, 204, 205, 206, 207, 213, 214, 281, 284], "rpt_sft": [17, 144], "share": [17, 123, 126, 144, 246, 261, 275, 333, 345], "nifti1": [17, 144, 278, 289, 303, 312, 320], "nifti1imag": [17, 25, 26, 40, 42, 44, 45, 50, 62, 71, 144, 151, 152, 166, 168, 170, 171, 176, 188, 197, 275, 278, 281], "trkfile": [17, 144, 281], "nifti1head": [17, 144, 281], "dict": [17, 24, 144, 150, 275, 277, 278, 281, 282, 283, 285, 287, 288, 289], "reason": [17, 44, 49, 52, 63, 64, 70, 72, 79, 94, 110, 144, 170, 175, 178, 189, 190, 196, 198, 205, 220, 233, 251, 252, 259, 264, 271, 272, 278, 282, 283, 289, 309, 331, 350], "why": [17, 47, 57, 64, 110, 120, 124, 144, 173, 183, 190, 229, 243, 341], "relat": [17, 42, 52, 55, 107, 108, 110, 119, 144, 168, 178, 181, 229, 252, 272, 277, 281, 283, 285, 287, 324, 326, 329, 330, 331, 341, 350, 351], "voxel_ord": [17, 144, 281, 290], "particular": [17, 28, 39, 42, 47, 55, 59, 104, 110, 144, 154, 165, 168, 173, 181, 185, 248, 275, 277, 281, 283, 284, 287, 289], "easili": [17, 34, 36, 47, 80, 100, 102, 108, 144, 160, 162, 173, 206, 226, 228, 277, 283, 284], "verifi": [17, 28, 36, 41, 42, 72, 73, 107, 144, 154, 162, 167, 168, 198, 199, 255, 277, 281, 324, 333], "accept": [17, 144, 250, 277, 284, 331], "varieti": [17, 52, 65, 80, 144, 178, 191, 206, 243], "lost": [17, 110, 125, 144], "fake": [17, 144], "wish": [17, 58, 144, 184], "manual": [17, 21, 34, 79, 81, 110, 118, 119, 124, 144, 147, 160, 205, 207, 275, 278, 279, 282, 337], "api": [17, 87, 109, 127, 144, 213, 233, 249, 260, 275, 281, 283, 286, 324, 327, 328, 329, 331, 333, 338], "freedom": [17, 64, 144, 190, 230, 275], "action": [17, 113, 144, 249, 289, 341, 342], "beginn": [17, 144, 337], "create_tractogram_head": [17, 75, 144, 201, 290], "nifti_head": [17, 144], "self": [17, 18, 30, 32, 76, 80, 100, 102, 107, 144, 156, 158, 202, 206, 226, 228, 249, 270, 275, 277, 279, 281, 283, 284, 287, 289, 301, 307, 329, 335, 339], "lpt": [17, 144], "rpt": [17, 144], "tool": [17, 36, 41, 64, 65, 71, 72, 73, 92, 94, 117, 124, 144, 162, 167, 190, 191, 197, 198, 199, 218, 220, 233, 234, 244, 249, 283, 284, 287, 288, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], "safer": [17, 64, 144, 190], "cc": [17, 34, 39, 40, 47, 70, 73, 104, 105, 144, 160, 165, 166, 173, 196, 199, 233, 244, 271, 275, 289, 292, 319, 332], "laf": [17, 144], "raf": [17, 144], "is_bbox_in_vox_valid": [17, 144, 281, 290], "remove_invalid_streamlin": [17, 144, 281, 290], "safe": [17, 120, 144, 249, 267, 275, 281, 337], "removing_invalid_coordin": [17, 144], "to_voxmm": [17, 144, 281, 290], "to_rasmm": [17, 144, 281, 290], "subsampl": [17, 57, 144, 183, 275, 287], "everyth": [17, 96, 100, 102, 110, 123, 124, 144, 222, 226, 228, 267, 272, 331], "mi": [17, 64, 65, 144, 190, 191, 275, 281, 289, 341], "corner": [17, 65, 144, 191, 277, 281, 287, 329, 336], "prevent": [17, 42, 109, 144, 168, 275, 283, 284, 287, 289, 293], "to_corn": [17, 144, 281, 290], "cc_streamlines_vox": [17, 144], "laf_streamlines_vox": [17, 144], "raf_streamlines_vox": [17, 144], "lpt_streamlines_vox": [17, 144], "rpt_streamlines_vox": [17, 144], "re": [17, 49, 73, 94, 96, 103, 110, 113, 119, 120, 121, 144, 175, 199, 220, 222, 233, 259, 262, 267, 270, 272, 275, 282, 283, 284, 328, 336, 347, 350], "space_attribut": [17, 75, 144, 201, 281, 290], "cc_densiti": [17, 144], "laf_dens": [17, 144], "raf_dens": [17, 144], "lpt_densiti": [17, 144], "rpt_densiti": [17, 144], "explicitli": [17, 52, 144, 178, 275, 277, 282, 283, 284, 325, 326, 335], "Be": [17, 76, 144, 202, 237, 277, 287], "care": [17, 34, 44, 54, 58, 78, 144, 160, 170, 180, 184, 204, 249, 260, 270, 281, 283, 287, 289], "metadata": [17, 144, 282], "look": [17, 29, 36, 39, 41, 57, 58, 59, 63, 64, 68, 70, 75, 82, 93, 108, 110, 111, 115, 119, 123, 124, 144, 155, 162, 165, 167, 183, 184, 185, 189, 190, 194, 196, 201, 208, 219, 229, 230, 232, 233, 234, 235, 246, 251, 252, 258, 259, 260, 261, 263, 264, 265, 266, 267, 270, 271, 272, 283, 287, 325, 326, 328, 331, 333, 344], "mention": [17, 26, 42, 51, 53, 144, 152, 168, 177, 179, 235, 326], "consist": [17, 32, 55, 58, 107, 126, 144, 158, 181, 184, 249, 259, 271, 275, 278, 279, 281, 282, 283, 326, 329, 331, 335, 341], "vox": [17, 94, 144, 220, 281, 290], "cc_1000": [17, 144], "laf_1000": [17, 144], "raf_1000": [17, 144], "lpt_1000": [17, 144], "rpt_1000": [17, 144], "streamline_format": [17, 144], "correct": [18, 24, 25, 29, 30, 42, 46, 49, 57, 71, 82, 84, 94, 104, 105, 124, 127, 150, 151, 155, 156, 168, 172, 175, 183, 197, 208, 210, 220, 229, 241, 249, 258, 262, 264, 266, 267, 275, 277, 278, 279, 281, 282, 288, 289, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 341], "dwi": [18, 28, 30, 32, 34, 48, 49, 52, 54, 55, 64, 154, 156, 158, 160, 174, 175, 178, 180, 181, 190, 229, 232, 234, 239, 243, 275, 278, 279, 281, 282, 283, 284, 287, 289, 319, 337, 338, 343], "piesno": [18, 30, 156, 249, 290, 324, 325, 326, 328, 333], "nlmean": [18, 23, 30, 54, 100, 149, 156, 180, 226, 241, 289, 290, 300, 324, 325, 326, 333, 340], "supervis": [18, 30, 156, 249, 279, 289, 301, 339], "independ": [18, 30, 54, 78, 156, 180, 204, 255, 279, 283, 289, 338], "pca": [18, 28, 30, 42, 53, 54, 154, 156, 168, 179, 180, 241, 249, 279, 287, 289, 298, 299, 326, 327, 329, 335, 338, 342, 343], "empir": [18, 23, 30, 54, 149, 156, 180, 287], "soft": [18, 27, 30, 153, 156, 279], "ascm": [18, 27, 30, 153, 156], "marcenko": [18, 25, 30, 42, 151, 156, 168, 241, 279, 289, 298, 299], "pastur": [18, 25, 30, 42, 151, 156, 168, 241, 279, 289, 298, 299], "suppress": [18, 23, 26, 30, 42, 49, 52, 149, 152, 156, 168, 175, 178, 239, 241, 279, 326, 327, 328, 329], "gibb": [18, 30, 42, 127, 156, 168, 241, 249, 289, 290, 310, 335, 336, 337, 338, 340, 343], "oscil": [18, 30, 42, 52, 61, 156, 168, 178, 187, 241, 283], "overview": [18, 38, 114, 118, 164, 241, 338], "yet": [18, 36, 38, 59, 124, 162, 164, 185, 252, 262, 265, 268, 271, 275], "singl": [18, 24, 40, 41, 42, 44, 47, 48, 54, 57, 58, 59, 63, 65, 67, 68, 70, 85, 86, 87, 92, 150, 166, 167, 168, 170, 173, 174, 180, 183, 184, 185, 189, 191, 193, 194, 196, 211, 212, 213, 218, 229, 231, 234, 236, 237, 243, 249, 256, 257, 272, 273, 275, 277, 281, 282, 283, 284, 285, 287, 289, 293, 304, 305, 324, 329, 335, 338, 342, 344], "shell": [18, 24, 26, 28, 29, 32, 34, 38, 40, 42, 43, 45, 48, 52, 54, 55, 58, 61, 62, 86, 104, 105, 150, 152, 154, 155, 158, 160, 164, 166, 168, 169, 171, 174, 178, 180, 181, 184, 187, 188, 212, 233, 234, 249, 273, 278, 283, 285, 289, 312, 335, 336, 337, 338, 340, 341, 342], "multi": [18, 24, 25, 26, 28, 29, 38, 42, 43, 46, 48, 51, 52, 54, 58, 62, 64, 70, 72, 73, 84, 104, 105, 107, 150, 151, 152, 154, 155, 164, 168, 169, 172, 174, 177, 178, 180, 184, 188, 190, 196, 198, 199, 210, 234, 239, 249, 260, 267, 272, 273, 275, 278, 282, 283, 285, 289, 292, 302, 324, 325, 326, 329, 331, 332, 333, 334, 336, 337, 338, 340, 342], "paper": [18, 26, 32, 34, 42, 43, 53, 54, 55, 63, 107, 152, 158, 160, 168, 169, 179, 180, 181, 189, 234, 235, 236, 237, 249, 250, 252, 253, 255, 256, 264, 265, 266, 267, 270, 271, 273, 279, 283, 289, 296, 328, 333, 335, 337], "descript": [18, 78, 79, 90, 92, 98, 107, 110, 124, 204, 205, 216, 218, 224, 262, 273, 278, 281, 283, 289, 335], "sl": [18, 90, 216, 273, 325], "nnl": [18, 273, 277, 283], "ye": [18, 229, 252, 271, 273], "typic": [18, 42, 57, 59, 64, 94, 168, 183, 185, 190, 220, 239, 273, 281, 283, 284, 285, 286, 287, 289, 346, 347], "1200": [18, 53, 96, 98, 99, 104, 105, 179, 222, 224, 225, 234, 273, 326], "success": [18, 233, 252, 273, 281, 282, 283], "1500": [18, 27, 61, 104, 105, 153, 187, 233, 273, 277, 329], "basser": [18, 25, 47, 151, 173, 243, 273, 279, 283, 289, 307, 346], "1994": [18, 47, 173, 243, 273, 283, 289, 307, 336, 346], "fwdti": [18, 49, 175, 273, 290, 326, 327, 335], "style": [18, 108, 122, 123, 127, 273, 277, 283, 285, 325, 326, 327, 328, 329, 330, 331, 335, 336, 338, 339, 341, 342], "acquist": [18, 273], "32": [18, 27, 64, 65, 71, 153, 190, 191, 197, 271, 273, 275, 277, 282, 283, 285, 289, 324, 328, 331, 333, 334], "500mm": [18, 273], "1500mm": [18, 273], "henriqu": [18, 24, 26, 42, 49, 54, 85, 103, 126, 150, 152, 168, 175, 180, 211, 243, 249, 273, 278, 279, 283, 285, 289, 310, 324, 326, 327, 335, 336, 337, 338, 341], "2017": [18, 48, 49, 71, 75, 87, 90, 103, 104, 105, 174, 175, 197, 201, 213, 216, 233, 236, 250, 273, 275, 278, 283, 284, 287, 289, 313, 316, 318, 321, 326, 327, 328, 336], "pasternak": [18, 49, 175, 273], "2009": [18, 32, 49, 61, 71, 72, 73, 104, 105, 158, 175, 187, 197, 198, 199, 244, 273, 275, 277, 278, 279, 283, 289, 304, 336], "dual": [18, 273], "spin": [18, 51, 52, 177, 178, 229, 243, 260, 273, 278, 282, 283, 285, 289, 307, 308, 309, 346, 348], "echo": [18, 51, 177, 229, 243, 273, 278, 283, 285, 289, 307, 308, 346, 348], "epi": [18, 273], "acquir": [18, 23, 24, 25, 27, 28, 31, 32, 36, 41, 42, 43, 48, 49, 51, 54, 56, 57, 61, 85, 149, 150, 151, 153, 154, 157, 158, 162, 167, 168, 169, 174, 175, 177, 180, 182, 183, 187, 211, 229, 240, 242, 243, 273, 277, 278, 279, 283, 287, 289, 310], "2500": [18, 29, 61, 86, 104, 105, 155, 187, 212, 273, 283, 341], "suggest": [18, 42, 52, 57, 107, 113, 168, 178, 183, 233, 262, 268, 269, 273, 279, 282, 331, 333, 345], "least": [18, 28, 42, 51, 53, 54, 57, 58, 63, 64, 72, 154, 168, 177, 179, 180, 183, 184, 189, 190, 198, 233, 252, 256, 260, 265, 273, 275, 277, 280, 282, 283, 284, 287, 289, 306, 307, 337, 346, 347], "jensen": [18, 42, 43, 54, 168, 169, 180, 243, 273, 283, 289, 306], "2005": [18, 42, 48, 54, 59, 63, 168, 174, 180, 185, 189, 243, 273, 275, 283, 289, 306, 307, 336], "micro": [18, 47, 173, 243, 263, 273, 326], "wmti": [18, 38, 42, 164, 168, 273, 335], "increment": [18, 273, 277], "fiereman": [18, 24, 26, 28, 42, 43, 150, 152, 154, 168, 169, 240, 243, 273, 279, 283, 289, 298, 299], "tabesh": [18, 42, 43, 168, 169, 273, 283, 289, 306], "7t": [18, 28, 154, 273], "3000": [18, 104, 105, 234, 273, 278], "resolut": [18, 33, 46, 48, 60, 64, 71, 72, 73, 84, 86, 104, 105, 123, 159, 172, 174, 186, 190, 197, 198, 199, 210, 212, 229, 273, 275, 279, 281, 283, 284, 285, 289, 292, 315, 317, 329, 337, 341], "aganj": [18, 20, 40, 146, 166, 234, 273, 283, 285, 289, 304], "westin": [18, 56, 57, 182, 183, 273, 277, 278, 283, 332], "ivim": [18, 51, 104, 105, 177, 241, 249, 273, 278, 289, 290, 308, 326, 329, 330, 335, 336, 337, 341, 342], "lebihan": [18, 47, 173, 243, 273, 283, 289, 307, 346], "1984": [18, 75, 201, 273, 277, 336], "project": [18, 51, 55, 99, 103, 104, 105, 110, 113, 116, 117, 124, 177, 181, 225, 229, 246, 249, 251, 252, 268, 272, 273, 275, 277, 283, 287, 290, 324, 331, 333, 351], "fadnavi": [18, 28, 51, 126, 154, 177, 273, 279, 282, 283, 288, 289, 301, 302, 311, 328, 329, 330, 335, 336, 339, 340, 341, 342], "2019": [18, 51, 54, 57, 104, 105, 177, 180, 183, 250, 273, 278, 282, 283, 288, 289, 311, 330, 335, 336, 337, 350], "sdt": [18, 273, 283, 324, 325, 332, 335], "qbi": [18, 229, 273, 344, 350], "60": [18, 28, 36, 44, 46, 48, 50, 54, 58, 60, 84, 86, 89, 92, 93, 104, 105, 154, 162, 170, 172, 174, 176, 180, 184, 186, 210, 212, 215, 218, 219, 229, 273, 278, 283, 331], "64": [18, 24, 29, 40, 52, 60, 66, 70, 78, 79, 81, 86, 96, 104, 105, 150, 155, 166, 178, 186, 192, 196, 204, 205, 207, 212, 222, 233, 234, 271, 273, 278, 282, 283, 285, 325, 326, 333], "1000mm": [18, 273], "dsi": [18, 38, 44, 50, 62, 83, 104, 105, 164, 170, 176, 188, 209, 229, 249, 273, 278, 290, 324, 326, 331, 332, 333, 344], "515": [18, 29, 55, 181, 273, 278, 333], "encod": [18, 54, 56, 57, 180, 182, 183, 249, 254, 255, 256, 257, 263, 265, 271, 273, 275, 277, 278, 281, 282, 283, 346], "12": [18, 24, 26, 28, 32, 39, 49, 55, 56, 58, 65, 67, 70, 71, 72, 73, 75, 78, 79, 81, 93, 103, 127, 150, 152, 154, 158, 165, 175, 181, 182, 184, 191, 193, 196, 197, 198, 199, 201, 204, 205, 207, 219, 233, 244, 249, 250, 252, 273, 275, 277, 283, 284, 287, 289, 325, 327, 329, 330, 331, 332, 333, 334, 337, 342, 344], "subsequ": [18, 59, 185, 273, 279, 284], "studi": [18, 42, 43, 48, 52, 55, 63, 103, 104, 105, 168, 169, 174, 178, 181, 189, 273, 277, 278, 283, 337], "half": [18, 39, 56, 165, 182, 273, 277, 283], "mm2": [18, 273], "wedeen": [18, 44, 103, 170, 273, 283], "2013": [18, 25, 26, 28, 34, 42, 43, 52, 58, 61, 63, 104, 105, 151, 152, 154, 160, 168, 169, 178, 184, 187, 189, 233, 249, 250, 273, 278, 279, 283, 289, 298, 331, 332, 333, 336], "dsid": [18, 46, 84, 172, 210, 273], "203": [18, 44, 50, 104, 105, 170, 176, 273, 278, 332], "radiu": [18, 23, 25, 72, 76, 149, 151, 198, 202, 239, 273, 275, 277, 279, 283, 284, 285, 287, 289, 292, 298, 299, 301, 315, 340, 341, 346, 351], "4000mm": [18, 273], "rodriguez": [18, 46, 58, 84, 172, 184, 210, 273, 283, 331], "benefit": [18, 24, 58, 109, 125, 150, 184, 273], "23": [18, 42, 55, 168, 181, 232, 243, 250, 273, 275, 283, 331, 332, 343], "4000": [18, 104, 105, 273], "258": [18, 273], "yeh": [18, 50, 75, 88, 89, 103, 104, 105, 176, 201, 214, 215, 235, 236, 273, 283, 284, 286, 289, 295, 316, 348], "At": [18, 39, 53, 71, 110, 124, 165, 179, 197, 259, 266, 273, 275, 277], "opdt": [18, 273], "tuch": [18, 44, 170, 273, 283], "2007": [18, 41, 45, 53, 58, 62, 167, 171, 179, 184, 188, 273, 280, 283, 285, 289, 305, 337, 350], "tristan": [18, 273, 283], "vega": [18, 273, 283], "shore": [18, 38, 164, 273, 290, 329, 332, 333, 336, 341, 344], "514": [18, 46, 84, 172, 210, 273, 333], "five": [18, 273, 282, 283], "lattic": [18, 72, 198, 273, 288], "unit": [18, 47, 51, 55, 93, 109, 126, 173, 177, 181, 219, 231, 243, 265, 273, 277, 278, 283, 285, 287, 288, 289, 297, 298, 305, 307, 312, 346, 347, 348, 350], "merlet": [18, 61, 126, 187, 273, 283, 332], "\u00f6zarslan": [18, 61, 187, 273], "six": [18, 47, 61, 125, 173, 187, 243, 273, 275, 283, 332, 335], "5000": [18, 29, 54, 60, 86, 155, 180, 186, 212, 273, 277, 283], "6000": [18, 273], "19": [18, 71, 75, 76, 88, 103, 197, 201, 202, 214, 234, 249, 273, 283, 324, 331, 333, 339], "56": [18, 31, 82, 97, 157, 208, 223, 242, 273, 283, 285, 331], "87": [18, 47, 63, 173, 189, 273, 287, 331, 343], "170": [18, 51, 55, 104, 105, 177, 181, 273, 332], "olson": [18, 273], "ozarslan": [18, 32, 52, 57, 158, 178, 183, 273, 279, 283], "mapl": [18, 52, 178, 249, 273, 283, 327, 328], "wu": [18, 45, 62, 82, 171, 188, 208, 273, 283], "minn": [18, 273], "hcp": [18, 28, 52, 104, 105, 154, 178, 249, 273, 278, 283, 324, 329, 333, 341, 342], "sm": [18, 273], "mt": [18, 55, 181, 273, 277, 278], "jeurissen": [18, 24, 41, 42, 53, 58, 150, 167, 168, 179, 184, 240, 273, 283], "forecast": [18, 38, 164, 249, 273, 290, 328, 329], "alexand": [18, 48, 49, 54, 126, 174, 175, 180, 273, 278, 283], "1480": [18, 273, 328], "36": [18, 45, 56, 62, 171, 182, 188, 273, 277, 283, 331], "anderson": [18, 48, 174, 273, 282, 283], "256": [18, 51, 81, 177, 207, 234, 249, 271, 273, 275, 277, 282, 284, 289, 292, 333, 337], "qti": [18, 38, 164, 249, 252, 261, 262, 264, 266, 267, 269, 270, 272, 273, 288, 290, 342], "216": [18, 273, 332], "250": [18, 99, 225, 243, 273, 275, 283, 289], "200mm": [18, 273], "four": [18, 54, 55, 61, 85, 180, 181, 187, 211, 245, 273, 275, 277, 282, 283], "stick": [18, 54, 86, 125, 180, 212, 273, 283, 285], "prolat": [18, 41, 59, 167, 185, 273, 283, 285, 331], "plane": [18, 52, 55, 85, 96, 99, 178, 181, 211, 222, 225, 231, 243, 273, 277, 283, 287, 335, 346, 351], "120": [18, 24, 42, 64, 65, 96, 104, 105, 150, 168, 190, 191, 222, 240, 273, 275, 331], "morez": [18, 273], "2023": [18, 68, 194, 232, 237, 251, 273, 275, 289, 296, 336, 342, 343], "217": [18, 57, 183, 273, 278, 332], "herberthson": [18, 57, 183, 273, 283], "jone": [18, 29, 34, 63, 160, 189, 273, 277, 283, 289, 306, 307], "1999": [18, 29, 47, 173, 273, 329, 336], "behren": [18, 273, 283, 285], "2003": [18, 64, 65, 190, 191, 273, 275, 336], "qtau": [18, 55, 181, 249, 273, 329], "dmri": [18, 31, 33, 36, 38, 43, 47, 63, 104, 105, 123, 157, 159, 162, 164, 169, 173, 189, 229, 242, 249, 250, 273, 278, 279, 283, 329], "vari": [18, 26, 32, 51, 55, 152, 158, 177, 181, 255, 273, 279, 283], "strength": [18, 47, 55, 104, 105, 173, 181, 229, 243, 273, 275, 277, 278, 283, 285, 289, 296], "dellacqua2014": [18, 53, 179, 273], "smt": [18, 48, 54, 174, 180, 273, 283], "smt2": [18, 249, 273, 283, 338], "72": [18, 42, 43, 47, 53, 54, 104, 105, 168, 169, 173, 179, 180, 234, 249, 273, 284, 331, 341], "\u03bcm2": [18, 273], "\u03bcm": [18, 273], "24": [18, 33, 34, 78, 159, 160, 204, 250, 273, 275, 277, 283, 284, 327, 328, 329, 331, 333], "rapid": [18, 231, 273], "kurtosi": [18, 24, 26, 38, 43, 53, 85, 103, 104, 105, 150, 152, 164, 169, 179, 211, 232, 234, 241, 249, 254, 262, 266, 267, 269, 270, 272, 273, 283, 285, 289, 306, 324, 325, 338], "netohe2019": [18, 54, 180, 273], "kaden2016b": [18, 54, 180, 273], "spectrum": [18, 38, 46, 84, 164, 172, 210, 274, 283], "v": [18, 24, 38, 42, 43, 54, 56, 83, 103, 104, 105, 107, 109, 121, 150, 164, 168, 169, 180, 182, 209, 233, 235, 252, 260, 275, 277, 278, 280, 282, 283, 284, 288, 289, 302, 326, 327, 335, 337, 346, 347], "restor": [18, 38, 58, 124, 164, 184, 239, 249, 283, 289, 306, 307, 324, 326, 332, 333, 341], "free": [18, 38, 39, 47, 55, 57, 64, 65, 85, 103, 107, 164, 165, 173, 181, 183, 190, 191, 211, 229, 240, 242, 243, 246, 249, 275, 278, 283, 326, 328, 335, 338, 342], "elimin": [18, 38, 103, 164, 272, 283, 326, 335, 338], "contamin": [18, 38, 164, 283], "intravoxel": [18, 38, 164, 241, 283, 289, 308], "msdki": [18, 24, 38, 42, 150, 164, 168, 290], "qt": [18, 38, 104, 105, 164, 278, 283], "buan": [18, 68, 91, 127, 194, 217, 241, 249, 275, 288, 289, 311, 337, 338, 339], "score": [18, 39, 90, 91, 165, 216, 217, 235, 256, 284, 287, 329], "creation": [18, 80, 91, 206, 217, 232, 282, 284, 289, 324, 329, 331], "afq": [18, 91, 217, 335, 340], "outlier": [18, 42, 63, 75, 91, 168, 189, 201, 217, 275, 283, 289, 306, 307, 329], "cluster": [18, 66, 67, 75, 77, 87, 89, 91, 103, 104, 105, 107, 192, 193, 201, 203, 213, 215, 217, 234, 236, 249, 268, 275, 277, 278, 283, 287, 289, 290, 311, 313, 316, 318, 324, 326, 337, 343, 344], "confid": [18, 91, 217, 251, 277, 287], "index": [18, 44, 52, 55, 63, 91, 124, 170, 178, 181, 189, 217, 252, 256, 275, 277, 283, 284, 285, 287, 288, 326, 331, 332, 335, 341, 342], "groupwis": [18, 69, 195, 249, 275, 342], "diffeomorph": [18, 69, 71, 195, 197, 241, 249, 275, 288, 289, 292, 293, 330, 333, 338, 342], "binari": [18, 22, 55, 69, 72, 74, 94, 122, 148, 181, 195, 198, 200, 220, 233, 245, 277, 281, 282, 283, 284, 287, 288, 289, 311, 314, 315, 321, 322, 326, 329, 335, 341], "fuzzi": [18, 69, 195, 329], "nonrigid": [18, 69, 127, 195, 241, 289, 296], "bundlewarp": [18, 69, 127, 195, 232, 241, 288, 289, 290, 296, 343], "deform": [18, 64, 65, 68, 69, 70, 72, 190, 191, 194, 195, 196, 198, 241, 275, 287, 288, 289, 292, 296, 328, 336, 337], "quickbundl": [18, 66, 75, 77, 78, 79, 87, 103, 192, 201, 203, 204, 205, 213, 249, 275, 287, 290, 324, 325, 327, 328, 331, 332, 344], "classif": [18, 26, 53, 77, 152, 179, 203, 239, 249, 278, 284, 326, 337], "search": [18, 34, 75, 77, 160, 201, 203, 232, 233, 251, 283, 284, 289, 316, 341, 342, 343], "automat": [18, 21, 22, 26, 59, 63, 74, 77, 81, 107, 119, 147, 148, 152, 185, 189, 200, 203, 207, 233, 239, 249, 266, 275, 279, 282, 283, 284, 289, 298, 305, 324, 326, 327, 328, 329, 330, 335, 336, 337, 339, 340, 341, 342, 343], "advanc": [18, 24, 26, 28, 42, 54, 64, 65, 71, 72, 73, 95, 100, 102, 104, 105, 118, 150, 152, 154, 168, 180, 190, 191, 197, 198, 199, 221, 226, 228, 232, 234, 244, 257, 275, 279, 281, 283, 289, 301, 310, 327], "auto_examples_python": 18, "zip": [18, 55, 78, 79, 80, 81, 124, 181, 204, 205, 206, 207], "auto_examples_jupyt": 18, "mrm": [20, 24, 26, 28, 40, 42, 44, 49, 54, 63, 146, 150, 152, 154, 166, 168, 170, 175, 180, 189, 234, 240, 277, 278, 279, 283, 285, 289, 298, 299, 306, 307, 310], "maskdata": [20, 21, 24, 26, 40, 42, 43, 47, 54, 146, 147, 150, 152, 166, 168, 169, 173, 180], "numpass": [20, 21, 22, 24, 26, 40, 42, 43, 47, 53, 54, 58, 71, 72, 73, 74, 146, 147, 148, 150, 152, 166, 168, 169, 173, 179, 180, 184, 197, 198, 199, 200, 234, 284, 289, 315], "autocrop": [20, 21, 22, 24, 26, 40, 42, 43, 47, 54, 74, 146, 147, 148, 150, 152, 166, 168, 169, 173, 180, 200, 284, 289, 315], "dilat": [20, 21, 24, 26, 40, 42, 43, 47, 54, 94, 146, 147, 150, 152, 166, 168, 169, 173, 180, 220, 284, 289, 315], "instanti": [20, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 64, 72, 146, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 187, 188, 190, 198, 277, 283, 285, 289], "csamodel": [20, 40, 94, 146, 166, 220], "mainli": [20, 34, 40, 41, 79, 146, 160, 166, 167, 205, 243, 277, 282], "start_tim": [20, 21, 146, 147], "processor": [20, 146], "system": [20, 21, 28, 29, 58, 90, 92, 93, 94, 96, 107, 146, 147, 154, 184, 216, 218, 219, 220, 222, 232, 234, 249, 252, 275, 277, 278, 279, 280, 281, 283, 287, 288, 289, 301, 332, 337, 351], "sens": [20, 32, 52, 55, 58, 61, 70, 92, 146, 158, 178, 181, 184, 187, 196, 218, 279, 283, 289, 345, 347], "resourc": [20, 48, 116, 118, 122, 146, 174, 265, 268, 275, 278, 282, 328], "csapeaks_parallel": [20, 146], "return_odf": [20, 21, 40, 50, 146, 147, 166, 176, 280], "normalize_peak": [20, 21, 40, 50, 58, 146, 147, 166, 176, 184, 280, 283], "npeak": [20, 21, 58, 146, 147, 184, 280, 289, 335], "time_parallel": [20, 21, 146, 147], "ran": [20, 21, 146, 147, 260, 263, 265, 268, 270], "str": [20, 21, 82, 99, 125, 146, 147, 208, 225, 234, 275, 277, 278, 279, 281, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "114": [20, 21, 146, 147, 331], "333221912": [20, 146], "don": [20, 34, 53, 55, 64, 80, 94, 96, 99, 110, 112, 113, 120, 126, 146, 160, 179, 181, 190, 206, 220, 222, 225, 233, 235, 262, 263, 264, 265, 275, 277, 284, 287, 289, 316, 317, 326, 328, 331, 333, 334, 335, 342], "csapeak": [20, 40, 94, 146, 166, 220], "time_singl": [20, 21, 146, 147], "196": [20, 146, 332], "872478008": [20, 146], "speedup": [20, 21, 80, 146, 147, 206, 249, 284], "factor": [20, 21, 53, 58, 61, 64, 65, 71, 82, 94, 146, 147, 179, 184, 187, 190, 191, 197, 208, 220, 260, 263, 264, 266, 267, 269, 270, 275, 277, 279, 283, 289, 291, 292, 298, 309, 338, 346, 350], "72191839533": [20, 146], "runtim": [20, 21, 42, 52, 146, 147, 168, 178, 324, 326, 333], "frozen": [20, 21, 146, 147, 333], "main": [20, 21, 25, 26, 27, 50, 52, 54, 55, 103, 107, 119, 120, 121, 123, 124, 146, 147, 151, 152, 153, 176, 178, 180, 181, 261, 264, 275, 283, 289, 341], "__name__": [20, 21, 100, 102, 146, 147, 226, 228], "__main__": [20, 21, 100, 102, 146, 147, 226, 228], "freeze_support": [20, 21, 146, 147], "reconst_csa_parallel": [20, 146], "37": [21, 147, 331], "readi": [21, 41, 48, 72, 80, 100, 102, 110, 117, 124, 147, 167, 174, 198, 206, 226, 228, 233, 260, 278, 325], "cpu": [21, 147, 240, 268, 332], "durat": [21, 47, 55, 147, 173, 181, 229, 243, 277], "csd_peaks_parallel": [21, 147], "425682068": [21, 147], "csd_peak": [21, 41, 147, 167], "242": [21, 147, 332, 342], "772505999": [21, 147], "reconst_csd_parallel": [21, 147], "b0": [22, 24, 26, 28, 29, 34, 41, 45, 54, 58, 64, 65, 71, 72, 73, 74, 86, 104, 105, 148, 150, 152, 154, 155, 160, 167, 171, 180, 184, 190, 191, 197, 198, 199, 200, 212, 232, 234, 243, 249, 275, 277, 278, 279, 282, 283, 285, 289, 297, 298, 301, 304, 305, 306, 307, 308, 309, 312, 324, 325, 329, 333], "save_nifti": [22, 23, 27, 28, 31, 32, 33, 34, 36, 47, 71, 74, 92, 94, 148, 149, 153, 154, 157, 158, 159, 160, 162, 173, 197, 200, 218, 220, 232, 290], "scil_b0": [22, 74, 104, 105, 148, 200], "compani": [22, 74, 148, 200], "come": [22, 32, 58, 74, 107, 110, 117, 120, 148, 158, 184, 200, 250, 282, 283, 289, 331], "tesla": [22, 74, 148, 200, 278], "siemen": [22, 23, 32, 58, 74, 104, 105, 148, 149, 158, 184, 200, 229, 278, 279, 283, 284, 289], "data_fnam": [22, 74, 148, 200], "squeez": [22, 64, 65, 73, 74, 148, 190, 191, 199, 200, 264, 283, 334], "fine": [22, 65, 70, 74, 148, 191, 196, 200], "tune": [22, 74, 148, 200, 260, 263], "num_pass": [22, 74, 148, 200], "yield": [22, 32, 74, 148, 158, 200, 265], "incorrect": [22, 74, 148, 200, 326, 339], "veri": [22, 28, 32, 33, 34, 36, 42, 47, 51, 52, 59, 63, 64, 67, 68, 74, 86, 97, 100, 102, 108, 109, 113, 125, 148, 154, 158, 159, 160, 162, 168, 173, 177, 178, 185, 189, 190, 193, 194, 200, 212, 223, 226, 228, 229, 237, 243, 251, 252, 260, 264, 275, 277, 281, 283, 287, 289, 296, 350], "easi": [22, 47, 74, 94, 96, 97, 99, 117, 148, 173, 200, 220, 222, 223, 225, 229, 230, 233, 252, 264, 341, 351], "float32": [22, 47, 74, 81, 92, 148, 173, 200, 207, 218, 280, 281, 340], "fname": [22, 67, 68, 71, 74, 78, 79, 80, 81, 89, 125, 148, 193, 194, 197, 200, 204, 205, 206, 207, 215, 275, 277, 278, 281, 284, 288, 289], "se_1": [22, 74, 148, 200], "5t": [22, 23, 74, 148, 149, 200, 278, 284], "_binary_mask": [22, 74, 148, 200], "astyp": [22, 23, 27, 32, 34, 45, 47, 65, 70, 74, 92, 94, 148, 149, 153, 158, 160, 171, 173, 191, 196, 200, 218, 220, 283], "_mask": [22, 74, 148, 200], "quick": [22, 47, 51, 74, 120, 148, 173, 177, 200, 232, 283], "view": [22, 74, 92, 97, 98, 148, 200, 218, 223, 224, 277, 283, 285, 288, 324, 325, 335], "middl": [22, 23, 24, 25, 26, 28, 36, 46, 55, 64, 73, 74, 78, 84, 93, 99, 148, 149, 150, 151, 152, 154, 162, 172, 181, 190, 199, 200, 204, 210, 219, 225, 252, 259, 278, 287, 288], "histeq": [22, 74, 148, 200, 290], "crop": [22, 47, 74, 148, 173, 200, 289, 290, 315], "largest": [22, 74, 148, 200, 275, 280, 283, 289], "significantli": [22, 74, 87, 148, 200, 213, 261], "smaller": [22, 23, 41, 51, 52, 55, 57, 74, 75, 85, 88, 148, 149, 167, 177, 178, 181, 183, 200, 201, 211, 214, 229, 275, 277, 279, 283, 284, 287, 288, 289, 298, 311], "auto": [22, 53, 74, 75, 148, 179, 200, 201, 255, 277, 282, 289, 315, 326, 333, 335, 337, 343], "activ": [22, 74, 117, 148, 200, 233, 259, 282, 288, 289, 311], "b0_mask_crop": [22, 74, 148, 200], "mask_crop": [22, 74, 148, 200], "_binary_mask_crop": [22, 74, 148, 200], "_mask_crop": [22, 74, 148, 200], "brain_extraction_dwi": [22, 148], "coupe11": [23, 27, 149, 153, 239, 279], "better": [23, 24, 39, 42, 43, 49, 55, 64, 110, 116, 120, 149, 150, 165, 168, 169, 175, 181, 190, 247, 249, 262, 263, 265, 283, 326, 328, 334, 336, 337, 338, 341], "degre": [23, 42, 46, 47, 54, 64, 84, 149, 168, 172, 173, 180, 190, 210, 230, 243, 252, 275, 277, 278, 283, 284, 285, 287, 350], "sharp": [23, 149, 283], "easiest": [23, 120, 124, 149, 233], "non_local_mean": [23, 27, 149, 153, 290, 335], "radii": [23, 41, 149, 167, 277, 283, 285, 289, 305, 329, 337], "involv": [23, 25, 41, 42, 53, 149, 151, 167, 168, 179, 239, 243, 244, 251, 261, 269, 275, 289, 346], "wavelet": [23, 149, 290], "decomposit": [23, 149, 270, 279, 283, 289, 298, 299, 341, 346, 347], "frequenc": [23, 24, 42, 149, 150, 168], "noise_estim": [23, 27, 32, 63, 149, 153, 158, 189, 290], "estimate_sigma": [23, 27, 63, 149, 153, 189, 290, 324, 333], "adaptive_soft_match": [23, 149, 290, 343], "dwi_fnam": [23, 25, 26, 31, 32, 149, 151, 152, 157, 158], "dwi_bval_fnam": [23, 25, 26, 31, 32, 149, 151, 152, 157, 158], "dwi_bvec_fnam": [23, 25, 26, 31, 32, 149, 151, 152, 157, 158], "sherbrooke_3shel": [23, 31, 32, 36, 104, 105, 149, 157, 158, 162, 238, 239, 242], "pre": [23, 28, 42, 43, 49, 54, 67, 68, 73, 89, 110, 124, 149, 154, 168, 169, 175, 180, 193, 194, 199, 215, 256, 260, 275, 282, 283, 289, 292, 326, 328, 329, 330, 337, 338], "sherbrook": [23, 104, 105, 126, 149, 278], "coil": [23, 27, 32, 58, 149, 153, 158, 184, 279, 283, 289], "sigma": [23, 25, 26, 27, 32, 34, 42, 43, 63, 64, 65, 70, 71, 149, 151, 152, 153, 158, 160, 168, 169, 189, 190, 191, 196, 197, 239, 275, 279, 283, 285, 289, 291, 298, 299, 300, 306, 307, 326, 341], "sharper": [23, 46, 84, 149, 172, 210, 283], "den_smal": [23, 149], "patch_radiu": [23, 25, 26, 27, 53, 149, 151, 152, 153, 179, 239, 279, 289, 298, 299, 300, 301, 337], "block_radiu": [23, 27, 149, 153, 279, 289, 300], "den_larg": [23, 149], "varianc": [23, 25, 26, 47, 52, 55, 149, 151, 152, 173, 178, 181, 239, 243, 271, 275, 283, 289, 306, 307, 333, 335, 340], "itself": [23, 55, 57, 80, 149, 181, 183, 206, 233, 235, 270, 278, 282, 283], "den_fin": [23, 149], "plot": [23, 24, 25, 26, 27, 39, 42, 43, 49, 51, 52, 54, 55, 57, 59, 68, 72, 73, 82, 85, 86, 87, 93, 106, 149, 150, 151, 152, 153, 165, 168, 169, 175, 177, 178, 180, 181, 183, 185, 194, 198, 199, 208, 211, 212, 213, 219, 235, 260, 271, 272, 275, 283, 289, 290, 326, 328, 331, 333, 335], "axial_middl": [23, 27, 36, 149, 153, 162], "final_output": [23, 149], "ab": [23, 24, 27, 49, 65, 149, 150, 153, 175, 191, 277, 283, 331], "set_titl": [23, 24, 25, 26, 27, 28, 32, 49, 51, 54, 55, 56, 58, 65, 70, 82, 149, 150, 151, 152, 153, 154, 158, 175, 177, 180, 181, 182, 184, 191, 196, 208], "denoised_ascm": [23, 149], "bbox_inch": [23, 25, 27, 32, 34, 36, 44, 48, 65, 82, 149, 151, 153, 158, 160, 162, 170, 174, 191, 208], "tight": [23, 25, 27, 32, 34, 36, 44, 48, 65, 82, 149, 151, 153, 158, 160, 162, 170, 174, 191, 208], "realli": [23, 44, 124, 149, 170, 252, 263, 272, 339], "dictat": [23, 57, 149, 183], "ascm_comparison": [23, 149], "outperform": [23, 149], "pierrick": [23, 27, 149, 153, 239, 279], "coup": [23, 25, 26, 27, 28, 149, 151, 152, 153, 154, 239, 279, 284, 289, 298], "jose": [23, 27, 149, 153, 239, 277, 279], "manjon": [23, 25, 26, 27, 28, 149, 151, 152, 153, 154, 239, 279, 289, 298], "montserrat": [23, 27, 149, 153, 239, 279], "robl": [23, 27, 149, 153, 239, 279], "loui": [23, 27, 149, 153, 239, 278, 279], "collin": [23, 25, 26, 27, 28, 104, 105, 149, 151, 152, 153, 154, 239, 278, 279, 289, 298], "multiresolut": [23, 27, 149, 153, 239, 279], "iet": [23, 27, 149, 153, 239, 279], "institut": [23, 27, 126, 149, 153, 232, 239, 278, 279, 329], "engin": [23, 27, 42, 58, 149, 153, 168, 184, 232, 239, 252, 279, 283], "technologi": [23, 27, 126, 149, 153, 239, 252, 279, 283, 344], "00645538": [23, 149], "denoise_ascm": [23, 149], "magnet": [24, 26, 27, 28, 29, 40, 42, 43, 44, 45, 48, 51, 53, 54, 58, 62, 150, 152, 153, 154, 166, 168, 169, 170, 171, 174, 177, 179, 180, 184, 188, 229, 234, 239, 240, 243, 278, 279, 282, 283, 284, 285, 288, 289, 298, 299, 306, 307, 311, 348], "reson": [24, 26, 27, 28, 29, 40, 42, 43, 44, 45, 48, 49, 51, 53, 54, 58, 61, 62, 103, 150, 152, 153, 154, 166, 168, 169, 170, 171, 174, 175, 177, 179, 180, 184, 187, 188, 234, 239, 240, 243, 279, 280, 282, 283, 284, 285, 288, 289, 298, 299, 306, 307, 310, 311, 350], "fourier": [24, 52, 150, 178, 240, 283, 346], "finit": [24, 55, 150, 181, 240, 277], "corrupt": [24, 42, 49, 52, 54, 63, 150, 168, 175, 178, 180, 189, 240, 283], "artefact": [24, 28, 42, 49, 54, 150, 154, 168, 175, 180, 240, 242, 279, 283, 336], "manifest": [24, 150, 240, 333], "intens": [24, 32, 85, 150, 158, 211, 240, 271, 275, 279, 282, 283, 284, 287, 288, 289, 301, 326], "adjac": [24, 58, 80, 150, 184, 206, 240, 283, 284], "edg": [24, 42, 150, 168, 233, 240, 277, 278, 283, 287, 290, 331, 333], "affect": [24, 26, 55, 108, 110, 150, 152, 181, 240, 282], "context": [24, 80, 82, 92, 150, 206, 208, 218, 240, 251, 257, 282], "magnifi": [24, 150, 240], "chapter": [24, 150], "cite": [24, 49, 107, 127, 150, 175, 234, 235, 236, 237, 278, 279], "gibbs_remov": [24, 150, 290, 338, 343], "t1_denoised_fnam": [24, 150], "ap_fnam": [24, 150], "tissue_data": [24, 82, 104, 105, 150, 208, 240], "axial_slic": [24, 43, 54, 150, 169, 180], "88": [24, 66, 81, 94, 150, 192, 207, 220, 283, 331], "t1_slice": [24, 150], "figsiz": [24, 26, 28, 43, 45, 48, 49, 54, 55, 56, 58, 62, 70, 150, 152, 154, 169, 171, 174, 175, 180, 181, 182, 184, 188, 196], "wspace": [24, 26, 28, 49, 54, 150, 152, 154, 175, 180], "vmin": [24, 26, 42, 43, 49, 52, 54, 56, 62, 92, 150, 152, 168, 169, 175, 178, 180, 182, 188, 218, 288], "vmax": [24, 26, 42, 43, 49, 52, 54, 56, 92, 150, 152, 168, 169, 175, 178, 180, 182, 218, 288], "400": [24, 51, 82, 104, 105, 150, 177, 208, 234, 265, 278, 283, 284, 289, 329], "due": [24, 25, 42, 49, 51, 54, 58, 63, 150, 151, 168, 175, 177, 180, 184, 189, 233, 252, 256, 259, 270, 279, 332, 337, 338, 350], "evid": [24, 150, 335], "artifici": [24, 63, 85, 150, 189, 211], "c": [24, 27, 28, 32, 34, 40, 41, 43, 49, 50, 55, 56, 57, 58, 63, 65, 71, 72, 73, 82, 103, 104, 105, 109, 110, 111, 120, 124, 150, 153, 154, 158, 160, 166, 167, 169, 175, 176, 181, 182, 183, 184, 189, 191, 197, 198, 199, 208, 229, 233, 234, 235, 236, 239, 244, 264, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 306, 307, 327, 330, 332, 333, 334, 335], "fft": [24, 150, 283, 338], "fft2": [24, 150], "fftshift": [24, 150], "c_crop": [24, 150], "192": [24, 26, 42, 53, 54, 150, 152, 168, 179, 180, 278, 335], "t1_gibb": [24, 150], "ifft2": [24, 150], "t1_unr": [24, 150], "inplac": [24, 124, 150, 233, 279, 338, 343], "fig1": [24, 26, 28, 43, 49, 54, 150, 152, 154, 169, 175, 180], "subplot_kw": [24, 26, 28, 43, 49, 54, 150, 152, 154, 169, 175, 180], "annot": [24, 124, 150], "ring": [24, 42, 150, 168, 240, 249, 279, 289, 310, 336, 340], "fontsiz": [24, 55, 150, 181], "xy": [24, 47, 150, 173, 243, 277, 335, 346, 347], "70": [24, 39, 45, 57, 62, 81, 85, 150, 165, 171, 183, 188, 207, 211, 243, 278, 282, 328, 331], "xycoord": [24, 150], "xytext": [24, 150], "textcoord": [24, 150], "offset": [24, 68, 71, 150, 194, 197, 275, 277, 283, 285, 287, 288], "arrowprop": [24, 150], "arrowstyl": [24, 150], "75": [24, 81, 96, 99, 150, 207, 222, 225, 249, 277, 287, 331, 342], "gibbs_suppression_structur": [24, 150], "uncorrect": [24, 150], "panel": [24, 25, 26, 42, 43, 49, 54, 96, 99, 150, 151, 152, 168, 169, 175, 180, 222, 225, 290], "characterist": [24, 34, 150, 160, 237, 277], "appreci": [24, 26, 150, 152], "arrow": [24, 150], "artefactu": [24, 42, 150, 168], "compromis": [24, 26, 150, 152], "contrast": [24, 42, 43, 45, 47, 51, 52, 53, 54, 71, 93, 104, 105, 150, 168, 169, 171, 173, 177, 178, 179, 180, 197, 219, 234, 239, 265, 278, 283], "grei": [24, 53, 55, 58, 94, 150, 179, 181, 184, 220, 245, 283, 289, 322], "highlight": [24, 150, 235, 289, 311, 329, 333, 338], "kindli": [24, 26, 42, 43, 53, 54, 150, 152, 168, 169, 179, 180, 234, 351], "suppli": [24, 150, 278], "romain": [24, 150], "valabr\u00e8gu": [24, 150], "cenir": [24, 104, 105, 150, 278, 324, 325, 328, 341], "icm": [24, 82, 150, 208, 284], "pari": [24, 150], "read_cenir_multib": [24, 150, 290], "asarrai": [24, 48, 49, 71, 78, 150, 174, 175, 197, 204], "data_slic": [24, 51, 150, 177], "data_correct": [24, 31, 150, 157], "slice_axi": [24, 150, 279, 289, 310], "dimension": [24, 25, 52, 55, 61, 80, 103, 150, 151, 178, 181, 187, 206, 231, 239, 275, 277, 282, 283, 284, 285, 287, 289, 307, 324, 326, 333], "axi": [24, 26, 28, 29, 34, 44, 45, 49, 50, 52, 55, 61, 62, 65, 70, 71, 82, 85, 86, 109, 150, 152, 154, 155, 160, 170, 171, 175, 176, 178, 181, 187, 188, 191, 196, 197, 208, 211, 212, 230, 231, 243, 275, 277, 279, 281, 283, 284, 285, 287, 288, 289, 310, 315, 329, 331, 335, 338, 346, 351], "fig2": [24, 26, 54, 150, 152, 180], "10000": [24, 51, 64, 150, 177, 190, 275, 283, 288, 289, 330, 335], "gibbs_suppression_b0": [24, 150], "hard": [24, 42, 110, 150, 168, 283, 338], "unnecessari": [24, 42, 49, 54, 150, 168, 175, 180, 277, 282, 326, 329, 341, 342], "dki_model": [24, 54, 150, 180], "meandiffusionkurtosismodel": [24, 54, 150, 180, 290], "dki_fit": [24, 54, 150, 180], "mskini": [24, 150], "msk": [24, 54, 150, 180, 283, 290], "mskgib": [24, 150], "fig3": [24, 26, 54, 150, 152, 180], "59": [24, 47, 58, 150, 173, 184, 331], "gibbs_suppression_msdki": [24, 150], "black": [24, 56, 97, 150, 182, 223, 263, 288, 333, 337], "ventricl": [24, 49, 65, 150, 175, 191], "seem": [24, 54, 150, 180, 251, 263, 270, 271, 283, 327, 328, 331, 333], "veraart": [24, 26, 28, 42, 150, 152, 154, 168, 240, 279, 283, 289, 298, 299], "jelescu": [24, 150, 240], "knoll": [24, 28, 150, 154, 240], "novikov": [24, 26, 28, 43, 150, 152, 154, 169, 240, 279, 289, 298, 299], "magn": [24, 49, 150, 175, 240, 279, 280, 283, 289, 290, 306, 307, 310, 350], "301": [24, 59, 150, 185, 240, 283, 333], "314": [24, 150, 240, 333], "1002": [24, 26, 28, 40, 42, 49, 54, 150, 152, 154, 166, 168, 175, 180, 234, 240, 279, 283, 287, 289, 298, 299, 310, 326], "25866": [24, 150, 240], "perron": [24, 42, 150, 168, 240, 283], "aelterman": [24, 42, 150, 168, 240], "piz": [24, 42, 150, 168, 240], "urica": [24, 42, 150, 168, 240], "philip": [24, 42, 58, 104, 105, 150, 168, 184, 240, 278, 279, 283, 284, 289], "leeman": [24, 41, 42, 58, 150, 167, 168, 184, 240, 277, 283], "artifact": [24, 42, 150, 168, 240, 263, 275, 278, 279, 289], "441": [24, 27, 28, 42, 150, 153, 154, 168, 239, 240, 279, 283], "455": [24, 42, 150, 168, 240, 333], "1016": [24, 26, 42, 49, 56, 57, 58, 104, 105, 150, 152, 168, 175, 182, 183, 184, 240, 277, 278, 279, 283, 289, 298, 299, 326], "06": [24, 42, 51, 150, 168, 177, 240, 277, 283, 326, 327, 334, 336, 341], "068": [24, 42, 150, 168, 240], "kellner": [24, 150, 279, 289, 310], "dhital": [24, 150, 279, 289, 310], "kiselev": [24, 150, 279, 289, 310], "reisert": [24, 150, 279, 289, 310, 338], "subvoxel": [24, 150, 279, 289, 310], "1574": [24, 150, 329], "1581": [24, 150, 329], "26054": [24, 150, 279, 289, 310], "neto": [24, 42, 54, 85, 103, 126, 150, 168, 180, 211, 243, 279, 283, 285, 289, 310, 324, 326, 327, 335, 336, 337, 338, 341], "healthi": [24, 26, 42, 48, 54, 57, 82, 150, 152, 168, 174, 180, 183, 208, 235, 249, 271, 278, 279, 283, 289, 310], "ag": [24, 26, 42, 49, 54, 104, 105, 150, 152, 168, 175, 180, 253, 278, 279, 283, 289, 310], "doctor": [24, 26, 42, 54, 150, 152, 168, 180, 279, 283, 289, 310], "17863": [24, 26, 42, 54, 150, 152, 168, 180, 279, 283, 289, 310], "cam": [24, 26, 42, 54, 150, 152, 168, 180, 279, 283, 289, 310], "29356": [24, 26, 42, 54, 150, 152, 168, 180, 279, 283, 289, 310], "retriev": [24, 93, 100, 104, 150, 219, 226, 283, 284], "digit": [24, 150, 260, 278, 287], "washington": [24, 126, 150, 232, 278], "edu": [24, 124, 150, 277, 278, 287], "researchwork": [24, 150, 278], "1773": [24, 150, 278], "33311": [24, 150, 278], "denoise_gibb": [24, 150], "explor": [25, 42, 43, 53, 54, 85, 104, 105, 151, 168, 169, 179, 180, 211, 234, 239, 243, 251, 252, 253, 256, 283, 285], "manjon2013": [25, 26, 28, 151, 152, 154, 289, 298], "around": [25, 34, 41, 51, 151, 160, 167, 177, 230, 239, 251, 252, 263, 265, 277, 279, 283, 288, 289, 298, 299, 301, 324, 333, 350], "eigenvalu": [25, 41, 47, 58, 59, 85, 86, 151, 167, 173, 184, 185, 211, 212, 239, 262, 264, 275, 279, 283, 285, 287, 289, 298, 299, 306, 307, 329, 346], "isbi2013_2shel": [25, 61, 104, 105, 151, 187], "koai": [25, 32, 49, 151, 158, 175, 279, 283], "koay2006": [25, 151], "correct_bia": [25, 151, 279], "lowest": [25, 34, 151, 160, 235, 283], "relationship": [25, 55, 94, 151, 181, 220, 252, 257, 258, 279, 283, 287, 289, 298, 346, 347], "tau_factor": [25, 151, 279, 289, 298, 338], "accord": [25, 43, 51, 54, 78, 79, 80, 85, 151, 169, 177, 180, 204, 205, 206, 211, 243, 249, 261, 270, 275, 277, 278, 279, 283, 285, 286, 287, 289, 317, 324, 325, 337], "denoised_arr": [25, 26, 28, 53, 151, 152, 154, 179, 279], "taken": [25, 26, 68, 85, 151, 152, 194, 211, 275, 277, 278, 279, 283, 289, 298, 299, 301, 350], "slow": [25, 51, 78, 151, 177, 204, 229, 243, 260, 329], "gra": [25, 26, 28, 151, 152, 154], "orig": [25, 26, 28, 151, 152, 154], "den": [25, 26, 27, 28, 151, 152, 153, 154], "rms_diff": [25, 26, 28, 151, 152, 154], "denoised_localpca": [25, 151], "jv": [25, 26, 28, 151, 152, 154, 279, 289, 298], "concha": [25, 26, 28, 151, 152, 154, 279, 289, 298], "buad": [25, 26, 28, 151, 152, 154, 279, 289, 298], "dl": [25, 26, 28, 151, 152, 154, 278, 279, 289, 298], "overcomplet": [25, 26, 28, 151, 152, 154, 241, 279, 289, 298], "e73021": [25, 26, 28, 151, 152, 154, 279, 289, 298], "0073021": [25, 26, 28, 151, 152, 154, 279, 289, 298], "cg": [25, 97, 151, 223, 275, 277, 279], "pj": [25, 47, 151, 173, 243, 279], "2006": [25, 58, 63, 151, 184, 189, 277, 279, 283, 289, 307, 336], "magnitud": [25, 58, 68, 151, 184, 194, 275, 277, 279, 283, 287, 288], "jmr": [25, 32, 151, 158], "179": [25, 151, 279, 332], "317": [25, 151, 279, 333], "322": [25, 151, 327], "denoise_localpca": [25, 26, 151, 152], "exploit": [26, 152, 240], "across": [26, 28, 32, 47, 51, 54, 58, 75, 88, 89, 107, 152, 154, 158, 173, 177, 180, 184, 201, 214, 215, 230, 241, 243, 251, 255, 265, 271, 277, 282, 283, 284, 286, 289, 329, 345, 346, 347], "veraart2016a": [26, 152], "loss": [26, 28, 43, 59, 78, 152, 154, 169, 185, 204, 256, 260, 265, 271, 277, 278, 282, 284, 289], "henri2018": [26, 152], "behind": [26, 107, 117, 152, 233, 239, 254, 257, 351], "princip": [26, 47, 55, 85, 86, 152, 173, 181, 211, 212, 239, 277, 279, 283, 285, 287, 289, 298, 299], "veraa2016a": [26, 28, 152, 154], "veraa2016b": [26, 152], "mppca": [26, 53, 152, 179, 239, 249, 290, 336], "auxiliari": [26, 152], "hansen": [26, 42, 43, 53, 54, 104, 105, 152, 168, 169, 179, 180, 234, 249, 282, 283], "jespersen": [26, 42, 43, 53, 54, 104, 105, 152, 168, 169, 179, 180, 234, 283], "hansen2016": [26, 42, 43, 53, 54, 152, 168, 169, 179, 180, 234], "mbyte": [26, 42, 44, 47, 52, 53, 54, 63, 152, 168, 170, 173, 178, 179, 180, 189], "cfin_multib": [26, 42, 43, 52, 53, 54, 104, 105, 152, 168, 169, 178, 179, 180, 234, 239, 243], "simplic": [26, 53, 80, 152, 179, 206], "sel_b": [26, 53, 152, 179], "logical_or": [26, 41, 53, 152, 167, 179], "67": [26, 41, 53, 58, 103, 152, 167, 179, 184, 333, 343], "mp": [26, 42, 53, 152, 168, 179, 230, 249, 287, 340], "slide": [26, 152], "compris": [26, 57, 152, 183, 254, 287], "assess": [26, 42, 152, 168, 283, 288, 289, 291, 335], "hspace": [26, 28, 49, 54, 152, 154, 175, 180], "denoised_mppca": [26, 152], "dkimodel": [26, 42, 43, 152, 168, 169], "diffusionkurtosismodel": [26, 42, 43, 54, 152, 168, 169, 180, 290], "dki_orig": [26, 152], "dki_den": [26, 152], "md": [26, 41, 42, 47, 48, 49, 53, 54, 56, 152, 167, 168, 173, 174, 175, 179, 180, 182, 234, 235, 243, 277, 283, 285, 286, 289, 290, 306, 307, 325, 326, 328, 336, 337], "mk": [26, 42, 43, 54, 56, 152, 168, 169, 180, 182, 283, 289, 290], "fa_orig": [26, 152], "fa_den": [26, 152], "md_orig": [26, 152], "md_den": [26, 152], "mk_orig": [26, 152], "mk_den": [26, 152], "03": [26, 73, 75, 76, 88, 152, 199, 201, 202, 214, 237, 277, 283, 324, 325, 330, 331, 332, 334, 335, 339, 340, 341, 342], "0e": [26, 58, 152, 184, 277, 283, 285], "denoised_dki": [26, 152], "upper": [26, 39, 41, 42, 49, 51, 54, 70, 152, 165, 167, 168, 175, 177, 180, 196, 275, 277, 281, 282, 283, 284, 289, 314, 326], "std": [26, 32, 34, 42, 55, 99, 152, 158, 160, 168, 181, 225, 275, 283, 288, 289, 292, 306, 307, 324, 333], "return_sigma": [26, 152, 279, 289, 299], "pca_sigma": [26, 152], "level": [26, 51, 55, 56, 57, 64, 66, 70, 72, 73, 123, 152, 177, 181, 182, 183, 190, 192, 196, 198, 199, 229, 235, 237, 243, 275, 277, 279, 281, 282, 283, 284, 285, 288, 289, 292, 325, 331, 335, 336], "mean_sigma": [26, 152], "nomin": [26, 152, 277], "theori": [26, 28, 45, 62, 127, 152, 154, 171, 188, 254, 257, 277, 279, 283, 284, 289, 298, 299, 342], "26059": [26, 28, 152, 154, 279, 289, 298, 299], "christiaen": [26, 152, 279, 289, 298, 299], "aron": [26, 152, 279, 289, 298, 299], "sijber": [26, 42, 152, 168, 279, 283, 289, 298, 299], "142": [26, 81, 152, 207, 234, 279, 284, 289, 298, 299, 331], "394": [26, 152, 279, 289, 298, 299, 326], "406": [26, 152, 279, 289, 298, 299, 333], "08": [26, 41, 58, 152, 167, 184, 279, 283, 289, 298, 299, 335, 336, 337], "016": [26, 152, 279, 289, 298, 299], "denoise_mppca": [26, 152], "coupe08": [27, 28, 153, 154, 239, 279], "boost": [27, 153, 345], "decid": [27, 31, 52, 75, 96, 153, 157, 178, 201, 222, 251, 260, 262, 263, 264, 265, 266, 267, 270, 284], "3t": [27, 153, 278, 283, 284], "ge": [27, 32, 58, 104, 105, 153, 158, 184, 278, 279, 283, 284, 289], "yger": [27, 28, 153, 154, 239, 279], "prima": [27, 28, 153, 154, 239, 279, 289], "hellier": [27, 28, 153, 154, 239, 279], "kervrann": [27, 28, 153, 154, 239, 279], "barillot": [27, 28, 153, 154, 239, 279, 289, 300], "blockwis": [27, 28, 153, 154, 239, 279], "transact": [27, 28, 45, 50, 58, 62, 64, 65, 82, 104, 105, 153, 154, 171, 176, 184, 188, 190, 191, 208, 239, 275, 279, 283], "medic": [27, 28, 34, 45, 50, 58, 61, 62, 64, 65, 68, 82, 104, 105, 126, 153, 154, 160, 171, 176, 184, 187, 188, 190, 191, 194, 208, 232, 234, 239, 249, 265, 271, 275, 278, 279, 283, 284, 288, 289, 311, 312, 326, 327, 329, 350], "27": [27, 28, 45, 48, 62, 104, 105, 124, 153, 154, 171, 174, 188, 239, 278, 279, 283, 327, 331, 337], "425": [27, 28, 153, 154, 239, 279, 333], "denoise_nlmean": [27, 153], "fadnavis20": [28, 154, 279, 289, 301], "rank": [28, 56, 154, 182, 239, 275, 283, 335, 346, 347], "oversampl": [28, 154, 239], "explicit": [28, 125, 154, 331], "classic": [28, 34, 72, 154, 160, 198, 229, 346, 347, 348], "knoll11": [28, 154], "etc": [28, 63, 96, 107, 108, 154, 189, 222, 229, 239, 252, 255, 260, 269, 274, 275, 277, 282, 283, 285, 289, 317, 331, 334], "certain": [28, 34, 42, 63, 107, 154, 160, 168, 189, 269, 283], "assumpt": [28, 32, 51, 52, 55, 67, 154, 158, 177, 178, 181, 193, 283, 338], "fact": [28, 108, 154, 231, 243, 254, 256, 270, 272], "fluctuat": [28, 154], "bodi": [28, 107, 154, 244, 248, 289, 291], "regressor": [28, 154, 277], "phase": [28, 58, 154, 184, 279, 282, 283, 284], "train": [28, 154, 255, 256, 260, 265, 268, 271, 282], "rest": [28, 52, 53, 110, 119, 126, 154, 178, 179, 252, 259, 260, 266, 275], "mathcal": [28, 154, 283, 284], "phi_": [28, 154, 283], "ight": [28, 56, 57, 154, 182, 183, 283], "y_": [28, 154, 350], "fed": [28, 154, 289], "phi": [28, 29, 54, 60, 85, 86, 154, 155, 180, 186, 211, 212, 275, 277, 278, 283, 290, 331, 350, 351], "built": [28, 58, 64, 124, 154, 184, 190, 275, 281, 282], "held": [28, 39, 154, 165], "mere": [28, 154, 234], "nor": [28, 154, 263, 277, 284], "kind": [28, 39, 55, 63, 94, 108, 154, 165, 181, 189, 220, 252, 266, 275, 283, 287, 333], "loadtxt": [28, 46, 84, 154, 172, 210, 278, 328], "shift_intens": [28, 154, 279, 289, 301], "clip_negative_v": [28, 154, 279, 289, 301], "ordinari": [28, 42, 154, 168, 283, 289, 306, 307], "regress": [28, 154, 255, 279, 283, 289, 301, 325], "littl": [28, 110, 117, 154, 255, 257, 260, 338], "slower": [28, 57, 154, 183, 244, 277, 289], "switch": [28, 72, 120, 154, 198, 275, 283, 326, 329, 330, 333, 342], "hamper": [28, 154], "exhibit": [28, 34, 42, 154, 160, 168], "attenu": [28, 34, 85, 154, 160, 211, 283, 285, 329], "skip": [28, 154, 233, 275, 277, 278, 279, 280, 283, 285, 289, 301, 326, 331, 333, 335, 342], "b0_denois": [28, 154, 279, 289, 301], "greater": [28, 51, 75, 107, 154, 177, 201, 229, 243, 275, 277, 280, 284, 288, 289, 311, 316, 318], "higher": [28, 41, 42, 46, 49, 52, 59, 68, 84, 89, 99, 106, 154, 167, 168, 172, 175, 178, 185, 194, 210, 215, 225, 229, 237, 263, 265, 275, 277, 283, 284, 289, 315], "accordingli": [28, 75, 154, 201, 234, 267, 268, 275], "pick": [28, 99, 110, 124, 154, 225, 233, 252, 268, 327], "denoised_patch2self": [28, 154], "inspect": [28, 72, 100, 102, 154, 198, 226, 228, 289, 328], "underli": [28, 34, 41, 55, 90, 94, 154, 160, 167, 181, 216, 220, 243, 247, 279, 283, 289, 301, 333], "got": [28, 110, 119, 154, 251, 252, 260, 263, 268], "rid": [28, 154], "lastli": [28, 100, 102, 154, 226, 228], "batch": [28, 154, 260, 265, 271, 282], "300": [28, 29, 46, 48, 60, 84, 86, 96, 104, 105, 154, 155, 172, 174, 186, 210, 212, 222, 260, 263, 271, 278, 288, 333], "split": [28, 154, 243, 275, 279, 282, 283, 287, 289, 308, 310, 317, 320, 326, 335], "denoised_batch1": [28, 154], "denoised_batch2": [28, 154], "merg": [28, 114, 117, 119, 121, 124, 154, 232, 249, 252, 284, 289, 326, 328, 329, 332, 333, 335, 343], "denoised_p2": [28, 154], "concaten": [28, 46, 84, 85, 154, 172, 210, 211, 252, 259, 284, 285, 289], "batson": [28, 154, 279, 289, 301], "neural": [28, 154, 249, 279, 282, 283, 289, 301], "bredi": [28, 154], "pock": [28, 154], "stollberg": [28, 154], "tgv": [28, 154], "pp": [28, 41, 53, 104, 105, 154, 167, 179, 283, 285], "480": [28, 154, 333], "491": [28, 55, 154, 181, 278, 333, 337], "denoise_patch2self": [28, 154], "usual": [29, 33, 36, 65, 99, 100, 102, 107, 110, 155, 159, 162, 191, 225, 226, 228, 233, 252, 283, 284, 287], "saw": [29, 155], "disk": [29, 36, 96, 124, 155, 162, 222, 229, 277, 278, 281, 286, 288, 289, 294, 295, 341], "sai": [29, 34, 55, 67, 110, 119, 124, 155, 160, 181, 193, 233, 236, 237, 252, 267, 277, 282, 283, 332, 346, 347], "physicist": [29, 155], "scientist": [29, 123, 155, 250], "who": [29, 36, 109, 119, 120, 123, 124, 155, 162, 275, 277, 283], "specif": [29, 36, 44, 48, 50, 52, 53, 54, 55, 58, 66, 78, 85, 86, 93, 96, 100, 102, 106, 107, 113, 155, 162, 170, 174, 176, 178, 179, 180, 181, 184, 192, 204, 211, 212, 219, 222, 226, 228, 229, 233, 234, 238, 239, 241, 252, 265, 277, 278, 281, 282, 283, 284, 287, 288, 327, 329, 330, 331, 341, 344], "disperse_charg": [29, 54, 60, 86, 155, 180, 186, 212, 290, 326, 332, 336], "jones1999": [29, 155], "polar": [29, 60, 85, 86, 155, 186, 211, 212, 277, 283, 285, 351], "n_pt": [29, 54, 60, 86, 93, 155, 180, 186, 212, 219], "theta": [29, 54, 60, 65, 85, 86, 155, 180, 186, 191, 211, 212, 231, 277, 278, 279, 283, 287, 331, 350, 351], "pi": [29, 54, 55, 60, 80, 86, 93, 155, 180, 181, 186, 206, 212, 219, 229, 230, 277, 283, 285, 287, 346, 348, 350], "rand": [29, 54, 60, 86, 88, 97, 155, 180, 186, 212, 214, 223, 277, 288], "hsph_initi": [29, 54, 60, 86, 155, 180, 186, 212], "potenti": [29, 42, 54, 58, 60, 86, 90, 155, 168, 180, 184, 186, 212, 216, 253, 277, 283, 327, 329], "energi": [29, 51, 60, 86, 155, 177, 186, 212, 243, 252, 275, 283, 289, 292], "minim": [29, 52, 60, 67, 70, 86, 155, 178, 186, 193, 196, 212, 265, 275, 277, 282, 283, 329, 341], "hsph_updat": [29, 54, 60, 86, 155, 180, 186, 212], "nice": [29, 60, 109, 117, 120, 155, 186, 285, 289], "setbackground": [29, 60, 67, 75, 76, 78, 79, 80, 81, 88, 89, 93, 155, 186, 193, 201, 202, 204, 205, 206, 207, 214, 215, 219], "point_radiu": [29, 78, 155, 204], "initial_vs_upd": [29, 155], "becom": [29, 55, 67, 93, 99, 155, 181, 193, 219, 225, 230, 251, 277, 283], "sph": [29, 155, 332, 337], "full_spher": [29, 155], "fill": [29, 155, 275, 277, 283, 285, 289, 317, 324, 346, 347], "stack": [29, 65, 86, 155, 191, 212, 252, 337], "discuss": [29, 71, 86, 109, 155, 197, 212, 255, 256, 259, 277, 283, 351], "hstack": [29, 54, 86, 155, 180, 212, 252], "insert": [29, 86, 97, 110, 155, 212, 223], "80451777": [29, 155], "16877559": [29, 155], "56944355": [29, 155], "32822557": [29, 155], "94355999": [29, 155], "04430036": [29, 155], "23584135": [29, 155], "96241331": [29, 155], "13468285": [29, 155], "39207424": [29, 155], "73505312": [29, 155], "55314981": [29, 155], "32539386": [29, 155], "16751384": [29, 155], "93062235": [29, 155], "82043195": [29, 155], "39411534": [29, 155], "41420347": [29, 155], "65741493": [29, 155], "74947875": [29, 155], "07802061": [29, 155], "88853765": [29, 155], "45303621": [29, 155], "07251925": [29, 155], "39638642": [29, 155], "15185138": [29, 155], "90543855": [29, 155], "10175269": [29, 155], "08197111": [29, 155], "99142681": [29, 155], "50577702": [29, 155], "37862345": [29, 155], "77513476": [29, 155], "42845026": [29, 155], "40155296": [29, 155], "80943535": [29, 155], "26939707": [29, 155], "81103868": [29, 155], "51927014": [29, 155], "48938584": [29, 155], "43780086": [29, 155], "75420946": [29, 155], "gradientt": [29, 36, 40, 42, 44, 45, 47, 50, 51, 52, 54, 61, 62, 85, 86, 107, 155, 162, 166, 168, 170, 171, 173, 176, 177, 178, 180, 187, 188, 211, 212, 275, 278, 282, 283, 285, 287, 290, 325, 326, 331, 333, 337, 340], "cyan": [29, 155], "colors_b1000": [29, 155], "colors_b2500": [29, 155], "ascontiguousarrai": [29, 93, 155, 219], "dk": [29, 63, 189, 283, 289, 306, 307], "strategi": [29, 34, 41, 42, 43, 52, 53, 54, 58, 63, 64, 65, 71, 87, 100, 102, 104, 105, 124, 160, 167, 168, 169, 178, 179, 180, 184, 189, 190, 191, 197, 213, 226, 228, 234, 253, 260, 275, 283, 289, 321], "anisotrop": [29, 41, 44, 47, 50, 52, 53, 92, 167, 170, 173, 176, 178, 179, 218, 229, 249, 266, 267, 272, 275, 278, 283, 337, 344], "525": [29, 333], "gradients_spher": [29, 155, 328], "inevit": [31, 157, 242], "misalign": [31, 65, 157, 191, 242, 275], "issu": [31, 42, 49, 54, 89, 96, 103, 104, 105, 110, 124, 157, 168, 175, 180, 215, 222, 232, 242, 249, 252, 256, 260, 265, 267, 277, 283, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "jenkinsonsmith01": [31, 157, 242], "preprocess": [31, 48, 80, 157, 174, 206, 242, 253, 263, 271, 278], "essenti": [31, 52, 65, 107, 157, 178, 191, 257, 347], "motion_correct": [31, 157, 290], "193": [31, 36, 104, 105, 157, 162], "bvals_smal": [31, 157], "bvecs_smal": [31, 157], "reg_affin": [31, 64, 65, 157, 190, 191], "jenkinson": [31, 157, 242], "2001": [31, 75, 82, 157, 201, 208, 242, 337], "optimis": [31, 157, 242, 333], "anal": [31, 157, 242], "143": [31, 81, 157, 207, 242, 283, 331], "often": [32, 33, 47, 58, 63, 92, 93, 94, 110, 124, 125, 158, 159, 173, 184, 189, 218, 219, 220, 231, 277, 283], "identif": [32, 103, 158, 279], "koay2009": [32, 158], "detect": [32, 58, 63, 119, 158, 184, 189, 233, 275, 277, 283, 287], "channel": [32, 72, 73, 158, 198, 199, 260, 265, 271, 275, 277, 281, 282, 283, 284, 288, 345], "grappa": [32, 158, 279], "intuit": [32, 55, 90, 158, 181, 216, 231, 289], "fourth": [32, 42, 51, 56, 57, 158, 168, 177, 182, 183, 254, 277, 283, 285], "quit": [32, 52, 93, 110, 158, 178, 219, 266, 283], "central": [32, 45, 62, 158, 171, 188, 275, 277, 286, 287], "tim": [32, 158], "trio": [32, 104, 105, 158, 278, 346, 347], "receiv": [32, 72, 158, 198, 275, 279, 283], "distinct": [32, 158], "had": [32, 36, 110, 158, 162, 252, 258, 261, 262, 265, 266, 268, 269, 270], "even": [32, 44, 54, 57, 64, 70, 78, 80, 110, 120, 158, 170, 180, 183, 190, 196, 204, 206, 233, 239, 252, 267, 271, 272, 275, 277, 283, 284, 287, 289, 309, 350], "return_mask": [32, 158, 279], "axial_piesno": [32, 158], "mask_piesno": [32, 158], "uint8": [32, 34, 47, 94, 158, 160, 173, 220, 281], "pierpaoli": [32, 47, 63, 158, 173, 189, 279, 283, 289, 306, 307], "199": [32, 110, 158, 279, 332], "94": [32, 158, 249, 279, 285, 324, 331, 337], "103": [32, 49, 53, 158, 175, 179, 249, 279, 283, 289, 307, 330, 331], "especi": [33, 125, 159, 287], "facilit": [33, 159, 255, 281, 282], "principl": [33, 107, 159, 283, 285], "fimg": [33, 85, 159, 211, 278, 285], "aniso_vox": [33, 159, 275, 278], "58": [33, 34, 42, 43, 159, 160, 168, 169, 234, 243, 275, 280, 283, 284, 285, 331, 350], "new_voxel_s": [33, 159], "data2": [33, 71, 159, 197, 275], "affine2": [33, 71, 159, 197, 275], "77": [33, 81, 159, 207, 275, 277, 282, 331], "iso_vox": [33, 159], "analyz": [33, 44, 56, 159, 170, 182, 246, 264, 267, 271, 277, 283, 286, 287, 336], "img3": [33, 159], "spm2analyzeimag": [33, 159], "realiz": [33, 159, 262, 264, 266, 267, 269, 270, 279], "problem": [33, 51, 52, 53, 57, 63, 64, 67, 72, 93, 110, 159, 177, 178, 179, 183, 189, 190, 193, 198, 219, 229, 244, 249, 252, 264, 266, 269, 270, 272, 275, 277, 283, 287, 325, 326, 328, 329, 333, 338, 341, 342], "reslice_dataset": [33, 159], "divid": [34, 39, 45, 55, 67, 80, 88, 160, 165, 171, 181, 193, 206, 214, 260, 262, 266, 275, 277, 283, 284, 286, 289, 294, 295, 327, 328, 335], "worst": [34, 160], "sever": [34, 49, 52, 56, 57, 94, 116, 120, 124, 160, 175, 178, 182, 183, 220, 245, 252, 257, 258, 262, 275, 287, 350], "cst": [34, 87, 88, 92, 96, 97, 160, 213, 214, 218, 222, 223, 278, 329, 340], "longitudin": [34, 107, 160, 283], "fasciculu": [34, 68, 75, 76, 96, 107, 160, 194, 201, 202, 222, 235, 236, 237, 278], "slf": [34, 107, 160], "cfa": [34, 47, 160, 173, 284], "being": [34, 55, 58, 107, 160, 181, 184, 229, 233, 235, 245, 263, 264, 266, 269, 270, 271, 275, 277, 281, 283, 284, 286, 287, 288, 289, 293, 326, 327, 330, 335, 340, 344, 350], "adopt": [34, 107, 160, 265], "recent": [34, 55, 115, 160, 181, 233, 268, 278, 287, 326, 332, 342, 344], "descoteaux2011": [34, 45, 62, 160, 171, 188], "jones2013": [34, 160], "explan": [34, 107, 110, 111, 160, 265, 283, 329], "tenmodel": [34, 41, 42, 47, 160, 167, 168, 173, 232, 333], "tensorfit": [34, 47, 160, 173, 284, 290, 331], "just": [34, 36, 44, 45, 47, 50, 51, 52, 59, 62, 64, 68, 70, 71, 97, 100, 102, 110, 111, 112, 113, 116, 119, 120, 121, 123, 124, 160, 162, 170, 171, 173, 176, 177, 178, 185, 188, 190, 194, 196, 197, 223, 226, 228, 229, 233, 242, 252, 275, 281, 282, 283, 287, 288, 289, 311, 324, 334, 335, 344], "could": [34, 41, 42, 54, 55, 57, 70, 78, 80, 82, 92, 93, 160, 167, 168, 180, 181, 183, 196, 204, 206, 208, 218, 219, 251, 252, 254, 257, 264, 266, 267, 268, 269, 270, 271, 275, 277, 283, 285, 289, 296, 310, 315, 325, 335, 337], "unless": [34, 78, 107, 160, 204, 275, 277, 283, 285, 287, 342], "best": [34, 41, 52, 120, 160, 167, 178, 229, 244, 252, 260, 263, 265, 271, 275, 277, 283, 287, 338], "segment_from_cfa": [34, 160, 290], "bounding_box": [34, 160, 283, 290, 337], "cc_box": [34, 160], "zeros_lik": [34, 65, 160, 191, 287], "diff": [34, 109, 110, 111, 117, 119, 160, 275], "bounds_min": [34, 160], "bounds_max": [34, 160], "mask_cc_part": [34, 160], "return_cfa": [34, 160, 284], "cfa_cc_part": [34, 160], "255": [34, 47, 94, 99, 160, 173, 220, 225, 281, 332], "titl": [34, 45, 48, 55, 62, 76, 110, 160, 171, 174, 181, 188, 202, 251, 288, 289, 290, 324, 337], "cc_segment": [34, 160], "catch": [34, 160, 324, 327], "warn": [34, 42, 52, 160, 168, 178, 233, 279, 281, 282, 283, 324, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 340, 341, 342], "manufactur": [34, 160], "ndimag": [34, 42, 43, 94, 160, 168, 169, 220, 341], "binary_dil": [34, 94, 160, 220], "mask_nois": [34, 160, 289], "noise_std": [34, 160], "li": [34, 39, 160, 165, 243, 275, 289], "null": [34, 160, 277, 279, 289, 298, 341], "idx": [34, 58, 160, 184, 277, 282], "inf": [34, 51, 87, 160, 177, 213, 275, 282, 283, 289], "axis_x": [34, 160], "argmin": [34, 57, 67, 160, 183, 193, 287], "axis_i": [34, 160], "axis_z": [34, 160], "els": [34, 76, 96, 110, 120, 160, 202, 222, 229, 266, 275, 277, 281, 283, 285, 287, 288], "98875": [34, 160], "1177": [34, 160, 326], "09229": [34, 160], "46995373635": [34, 160], "126": [34, 81, 160, 207, 249, 331], "11825": [34, 160], "039925": [34, 160], "99218": [34, 160], "9965694823": [34, 160], "perpendicular": [34, 48, 52, 55, 58, 160, 174, 178, 181, 184, 243, 252, 267, 277, 283, 285, 289, 309, 324], "henc": [34, 51, 107, 160, 177, 233, 244, 266, 269, 270, 283, 284, 287, 347], "le": [34, 51, 160, 177, 243, 277, 283, 287, 289, 308], "bihan": [34, 51, 160, 177, 243, 283, 289, 308], "mangin": [34, 160], "poupon": [34, 160], "603": [34, 45, 62, 160, 171, 188, 283, 334], "knosch": [34, 160], "turner": [34, 160], "count": [34, 63, 93, 94, 160, 189, 219, 220, 284, 287, 288, 332], "fallaci": [34, 160], "73": [34, 42, 160, 168, 331], "239": [34, 160, 332], "snr_in_cc": [34, 160, 329, 335], "publicli": [36, 162, 278, 331], "haven": [36, 93, 124, 162, 219, 233], "With": [36, 50, 52, 58, 66, 96, 124, 162, 176, 178, 184, 192, 222, 251, 275, 277, 283, 284, 287, 329, 344], "fetch_sherbrooke_3shel": [36, 162, 290], "folder": [36, 64, 65, 87, 104, 107, 162, 190, 191, 213, 234, 235, 236, 238, 248, 278, 289, 293, 295, 303, 325, 330, 335], "home": [36, 109, 113, 162, 233, 247, 260, 278], "directori": [36, 100, 102, 107, 109, 110, 112, 121, 124, 162, 226, 228, 233, 235, 238, 239, 240, 242, 243, 244, 245, 260, 278, 280, 286, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 329, 331, 332, 339], "expandus": [36, 99, 162, 225], "dname": [36, 162], "fdwi": [36, 162, 232], "hardi193": [36, 162, 239, 242], "fbval": [36, 42, 43, 44, 45, 50, 51, 52, 53, 54, 56, 61, 62, 85, 162, 168, 169, 170, 171, 176, 177, 178, 179, 180, 182, 187, 188, 211, 232, 275, 278, 281, 285], "fbvec": [36, 42, 43, 44, 45, 50, 51, 52, 53, 54, 56, 61, 62, 85, 162, 168, 169, 170, 171, 176, 177, 178, 179, 180, 182, 187, 188, 211, 232, 275, 278, 281, 285], "usernam": [36, 124, 162], "librari": [36, 57, 63, 96, 103, 106, 162, 183, 189, 222, 229, 232, 233, 234, 235, 236, 237, 249, 262, 277, 283, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 333, 342], "last": [36, 47, 51, 55, 63, 78, 81, 94, 99, 100, 110, 124, 162, 173, 177, 181, 189, 204, 207, 220, 225, 226, 229, 233, 235, 243, 249, 253, 259, 260, 263, 265, 267, 268, 270, 275, 277, 278, 279, 281, 282, 283, 284, 287, 289, 307, 327, 330, 342], "128": [36, 81, 82, 97, 162, 207, 208, 223, 263, 271, 282, 331, 341], "get_zoom": [36, 71, 162, 197], "quickli": [36, 162, 253, 260, 271, 283, 330], "info": [36, 66, 124, 162, 192, 234, 277, 281, 282, 289, 290, 324, 329, 330, 333, 338, 340], "000000": [36, 45, 62, 162, 171, 188], "3500": [36, 104, 105, 162], "964050": [36, 162], "999992": [36, 162], "999979": [36, 162], "00504001": [36, 162], "00402795": [36, 162], "00398794": [36, 162], "0257055": [36, 162], "653861": [36, 162], "756178": [36, 162], "589518": [36, 162], "769236": [36, 162], "246462": [36, 162], "235785": [36, 162], "529095": [36, 162], "815147": [36, 162], "893578": [36, 162], "263559": [36, 162], "363394": [36, 162], "79784": [36, 162], "133726": [36, 162], "587851": [36, 162], "232937": [36, 162], "931884": [36, 162], "278087": [36, 162], "93672": [36, 162], "144139": [36, 162], "31903": [36, 162], "tell": [36, 78, 80, 109, 120, 121, 162, 204, 206, 284, 286, 289], "fun": [36, 162, 252, 277], "hardi193_s0": [36, 162], "quick_start": [36, 162, 329], "tracking_introduction_eudx": [37, 163], "pattern": [39, 82, 165, 208, 277], "hand": [39, 42, 124, 165, 168, 250, 252, 254, 260, 275], "nest": [39, 99, 165, 225, 229, 275, 277, 281, 282, 283, 284, 287], "log": [39, 42, 43, 58, 66, 94, 100, 102, 110, 113, 117, 119, 124, 165, 168, 169, 184, 192, 220, 226, 228, 252, 275, 277, 278, 281, 282, 283, 284, 289, 326, 336, 346, 347], "likelihood": [39, 58, 82, 165, 184, 208, 256, 283], "hastie2008": [39, 165], "rokem2014": [39, 59, 165, 185, 283], "imprevi": [39, 165], "conduct": [39, 47, 165, 173, 243, 253, 255, 260, 283, 330, 340], "cross_valid": [39, 165, 290, 333], "dpd": [39, 59, 63, 87, 165, 185, 189, 213, 283], "xval": [39, 165, 333], "centrum": [39, 59, 165, 185], "semioval": [39, 59, 165, 185], "cso": [39, 165], "popul": [39, 41, 42, 47, 54, 58, 66, 75, 85, 88, 89, 104, 105, 165, 167, 168, 173, 180, 184, 192, 201, 211, 214, 215, 236, 241, 243, 283, 284, 286, 289], "cc_vox": [39, 165], "38": [39, 41, 47, 58, 59, 63, 66, 72, 96, 165, 167, 173, 184, 185, 189, 192, 198, 222, 283, 331], "cso_vox": [39, 165], "dti_model": [39, 165], "dti_cc": [39, 165], "kfold_xval": [39, 165, 290], "csd_cc": [39, 165], "dti_cso": [39, 165], "csd_cso": [39, 165], "scatter": [39, 51, 165, 177], "focus": [39, 165, 250, 252, 261], "set_size_inch": [39, 165], "legend": [39, 51, 54, 55, 63, 85, 86, 93, 165, 177, 180, 181, 189, 211, 212, 219], "loc": [39, 51, 54, 165, 177, 180], "this_ax": [39, 165], "cc_dti_r2": [39, 165], "pearsonr": [39, 165], "cc_csd_r2": [39, 165], "cso_dti_r2": [39, 165], "cso_csd_r2": [39, 165], "r2": [39, 165, 283, 332], "782881752597": [39, 165], "805764364116": [39, 165], "431921832012": [39, 165], "604806420501": [39, 165], "pretti": [39, 109, 165, 271], "hasti": [39, 59, 165, 185, 283], "tibshirani": [39, 165], "friedman": [39, 165], "mine": [39, 165], "springer": [39, 165, 283], "verlag": [39, 165], "berlin": [39, 165], "chan": [39, 126, 165, 283, 332], "aganj2010": [40, 166, 234], "160": [40, 47, 55, 104, 105, 166, 173, 181, 278, 332], "apart": [40, 166, 255, 277, 278, 346], "peak_indic": [40, 50, 166, 176, 280], "maxima": [40, 41, 166, 167, 280, 283, 331], "enough": [40, 166, 233, 277, 287], "rectangular": [40, 47, 67, 166, 173, 193, 346, 347], "splenium": [40, 47, 166, 173], "13": [40, 47, 55, 57, 81, 103, 127, 166, 173, 181, 183, 207, 249, 250, 283, 288, 328, 331, 335, 337, 338, 339, 340, 344], "43": [40, 47, 166, 173, 283, 333], "74": [40, 47, 81, 166, 173, 207, 331], "csaodf": [40, 166], "csa_odfs_actor": [40, 166], "plasma": [40, 41, 46, 48, 52, 53, 58, 59, 61, 84, 86, 166, 167, 172, 174, 178, 179, 184, 185, 187, 210, 212], "csa_odf": [40, 166], "lenglet": [40, 166, 234, 283], "sapiro": [40, 166, 234, 283], "yacoub": [40, 166, 234, 283], "ugurbil": [40, 166, 234, 283], "harel": [40, 166, 234, 283], "aug": [40, 166, 234], "554": [40, 166, 234, 283, 285, 334], "66": [40, 52, 81, 110, 166, 178, 207, 234, 283, 331], "22365": [40, 166, 234, 283], "reconst_csa": [40, 166, 328], "tournier2007": [41, 53, 167, 179], "proce": [41, 59, 167, 185, 283], "There": [41, 53, 58, 75, 80, 107, 110, 115, 116, 117, 124, 125, 167, 179, 184, 201, 206, 229, 235, 245, 275, 277, 278, 281, 282, 283, 284, 285, 346, 351], "cuboid": [41, 53, 167, 179, 283, 289, 305], "mask_for_response_ssst": [41, 167, 290], "meet": [41, 43, 53, 68, 103, 104, 105, 167, 169, 179, 194, 250, 253, 255, 266, 278, 282, 335, 336, 337, 338, 339, 341], "ident": [41, 47, 50, 55, 64, 67, 167, 173, 176, 181, 190, 193, 230, 231, 275, 281, 283, 287, 288, 290, 324, 337, 341], "nvoxel": [41, 167], "tupl": [41, 64, 88, 167, 190, 214, 275, 277, 278, 281, 282, 283, 284, 285, 287, 288, 289, 329, 332, 351], "0014": [41, 59, 167, 185], "00029": [41, 59, 167, 185], "416": [41, 58, 59, 167, 184, 185, 333], "206": [41, 59, 104, 105, 167, 185, 332], "radial": [41, 42, 52, 54, 59, 61, 167, 168, 178, 180, 185, 187, 249, 267, 269, 270, 283, 287, 289, 306, 307, 331, 351], "21197": [41, 167], "doubl": [41, 107, 167, 229, 268, 279, 284, 285, 324, 330, 338], "single_tensor_odf": [41, 58, 167, 184, 290], "evec": [41, 47, 58, 63, 85, 167, 173, 184, 189, 211, 234, 262, 264, 283, 285, 289, 290, 306, 307], "response_odf": [41, 58, 167, 184], "1d": [41, 58, 79, 167, 184, 205, 232, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 289, 315, 343], "response_actor": [41, 58, 167, 184], "csd_respons": [41, 167], "driven": [41, 58, 167, 184, 283], "calibr": [41, 58, 75, 167, 184, 201, 243, 249, 283, 289, 304, 305, 334], "eigenvector": [41, 52, 85, 167, 178, 211, 264, 270, 275, 283, 285, 287, 289, 306, 307, 324, 329, 346], "tax2014": [41, 58, 167, 184], "fat": [41, 58, 167, 184, 283], "converg": [41, 42, 51, 52, 58, 64, 82, 167, 168, 177, 178, 184, 190, 208, 265, 271, 275, 277, 279, 283, 284], "recursive_respons": [41, 58, 167, 184, 290], "shorten": [41, 58, 109, 167, 184], "mean_diffus": [41, 47, 48, 167, 173, 174, 290, 326], "wm_mask": [41, 57, 167, 183], "logical_and": [41, 167], "0011": [41, 167], "peak_thr": [41, 58, 167, 184, 283], "init_fa": [41, 58, 167, 184, 283], "init_trac": [41, 58, 167, 184, 283], "0021": [41, 58, 167, 184, 283], "pancak": [41, 58, 167, 184], "response_sign": [41, 167], "on_spher": [41, 58, 167, 184, 283, 290], "csd_recursive_respons": [41, 167], "recurs": [41, 58, 167, 184, 249, 275, 277, 283], "portion": [41, 51, 58, 167, 177, 184, 283], "55": [41, 47, 55, 58, 59, 63, 96, 99, 167, 173, 181, 184, 185, 189, 222, 225, 283, 325, 331], "85": [41, 42, 47, 54, 58, 59, 63, 66, 81, 85, 167, 168, 173, 180, 184, 185, 189, 192, 207, 211, 243, 277, 283, 285, 331, 338], "csd_odf": [41, 167], "30x30": [41, 167], "fodf_peak": [41, 58, 59, 167, 184, 185], "getproperti": [41, 59, 167, 185], "setopac": [41, 59, 167, 185], "csd_both": [41, 167], "fibr": [41, 53, 167, 179, 278, 280, 283, 289, 305, 350], "super": [41, 53, 80, 167, 179, 206, 249, 252, 280, 283, 289, 305, 350], "resolv": [41, 42, 46, 53, 84, 110, 167, 168, 172, 179, 210, 243, 266, 268, 280, 283, 289, 305, 329, 330, 343, 350], "1459": [41, 53, 167, 179, 280, 283, 328, 350], "1472": [41, 53, 167, 179, 280, 283, 328, 350], "tax": [41, 42, 58, 126, 167, 168, 184, 283, 334], "vo": [41, 58, 167, 184], "viergev": [41, 42, 58, 167, 168, 184], "86": [41, 58, 81, 167, 184, 207, 331], "reconst_csd": [41, 167, 328], "expans": [42, 52, 56, 57, 168, 178, 182, 183, 243, 254, 277, 283, 285], "dt": [42, 43, 85, 87, 168, 169, 211, 213, 243, 281, 283, 285, 286, 346], "biolog": [42, 51, 55, 168, 177, 181, 243, 283], "kt": [42, 43, 85, 168, 169, 211, 243, 283, 285, 290], "jensen2005": [42, 54, 168, 180, 243], "character": [42, 43, 47, 49, 54, 168, 169, 173, 175, 180, 243, 254, 283, 285], "microstructur": [42, 43, 48, 49, 51, 52, 54, 56, 57, 168, 169, 174, 175, 177, 178, 180, 182, 183, 243, 249, 257, 265, 269, 270, 271, 282, 283, 289, 307, 326], "heterogen": [42, 85, 168, 211, 243, 277], "jensen2010": [42, 168, 243], "moreov": [42, 49, 54, 80, 168, 175, 180, 206, 243, 265, 350], "concret": [42, 43, 168, 169, 243, 289], "biophys": [42, 43, 47, 54, 55, 168, 169, 173, 180, 181, 243, 283, 287], "axon": [42, 43, 47, 48, 52, 54, 55, 85, 168, 169, 173, 174, 178, 180, 181, 211, 243, 283, 335], "tortuos": [42, 43, 168, 169, 243, 290, 326], "fierem2011": [42, 43, 168, 169, 243], "netohe2015": [42, 54, 168, 180, 243], "express": [42, 49, 51, 59, 60, 168, 175, 177, 185, 186, 230, 231, 254, 277, 278, 283, 284, 287, 289, 329, 350], "s_": [42, 51, 67, 168, 177, 193, 283, 285], "bd": [42, 51, 168, 177, 283, 285], "mathbf": [42, 47, 49, 51, 56, 57, 67, 168, 173, 175, 177, 182, 183, 193, 229, 231, 243, 283, 287, 346, 347, 348], "s_0": [42, 47, 49, 51, 56, 57, 168, 173, 175, 177, 182, 183, 243, 283, 285], "absenc": [42, 51, 168, 177], "sensit": [42, 43, 51, 52, 54, 63, 71, 168, 169, 177, 178, 180, 189, 197, 229, 283, 333], "sum_": [42, 57, 59, 67, 168, 183, 185, 193, 277, 283, 350], "d_": [42, 47, 49, 67, 168, 173, 175, 193, 243, 283, 346, 347], "ij": [42, 168, 283, 346, 347], "w_": [42, 168, 283], "ijkl": [42, 168, 283], "antipod": [42, 47, 168, 173, 243, 277, 278, 283, 331], "symmetri": [42, 47, 168, 173, 243, 277, 278, 283, 350], "wijkl": [42, 168, 285], "xxxx": [42, 168, 283], "yyyi": [42, 168, 283], "zzzz": [42, 168, 283], "xxxy": [42, 168, 283], "xxxz": [42, 168, 283], "xyyi": [42, 168, 283], "yyyz": [42, 168, 283], "xzzz": [42, 168, 283], "yzzz": [42, 168, 283], "xxyi": [42, 168, 283], "xxzz": [42, 168, 283], "yyzz": [42, 168, 283], "xxyz": [42, 168, 283], "xyyz": [42, 168, 283], "xyzz": [42, 168, 283], "compare_map": [42, 52, 168, 178, 290], "gaussian_filt": [42, 43, 168, 169], "fraw": [42, 43, 44, 45, 50, 51, 52, 53, 54, 61, 62, 168, 169, 170, 171, 176, 177, 178, 179, 180, 187, 188], "taxcmw2015": [42, 168], "netohe2012": [42, 168], "might": [42, 52, 53, 63, 76, 94, 108, 109, 114, 124, 125, 168, 178, 179, 189, 202, 220, 233, 235, 264, 266, 272, 275, 277, 279, 281, 282, 283, 284, 289, 298, 299, 329, 337], "favor": [42, 168], "fwhm": [42, 43, 168, 169], "pioneer": [42, 168], "gauss_std": [42, 43, 168, 169], "data_smooth": [42, 43, 168, 169], "dkifit": [42, 43, 168, 169], "diffusionkurtosisfit": [42, 168, 290], "rd": [42, 168, 234, 235, 283, 289, 290, 306, 307], "diffusionkurtosisifit": [42, 168], "Of": [42, 109, 168], "cours": [42, 50, 55, 109, 117, 123, 168, 176, 181, 250, 252, 346], "analog": [42, 43, 168, 169, 275], "theoret": [42, 57, 61, 67, 107, 127, 168, 183, 187, 193, 283], "decoupl": [42, 54, 168, 180], "veraar2011": [42, 168], "fit_label": [42, 52, 168, 178, 288], "map_kwarg": [42, 52, 168, 178, 288], "2e": [42, 58, 168, 184, 260, 263, 283], "diffusion_tensor_measures_from_dti_and_dki": [42, 168], "underestim": [42, 49, 168, 175], "ak": [42, 168, 277, 283, 289, 290], "rk": [42, 168, 283, 289, 290], "kurtosis_tensor_standard_measur": [42, 168], "behaviour": [42, 78, 126, 168, 204, 283, 287, 331], "confin": [42, 168, 277, 283], "compartment": [42, 49, 54, 85, 168, 175, 180, 211, 283], "myelin": [42, 43, 47, 168, 169, 173], "sheath": [42, 168], "pronounc": [42, 168], "perpendicularli": [42, 168], "amplitud": [42, 49, 168, 175, 229, 283, 346], "band": [42, 168, 283], "dark": [42, 168], "captur": [42, 54, 71, 85, 168, 180, 197, 211, 229, 252, 255, 257, 263, 265, 271, 282], "decai": [42, 51, 168, 177, 266, 283, 346], "consequ": [42, 51, 63, 85, 168, 177, 189, 211, 243, 265, 270], "tendenc": [42, 168, 286], "inadequ": [42, 168], "sign": [42, 71, 107, 168, 197, 266, 275, 277, 287, 333, 337, 347, 350], "parametr": [42, 104, 105, 168, 229, 275, 278, 283, 284, 331], "perron2015": [42, 168], "netohe2018": [42, 54, 168, 180], "unring": [42, 127, 168, 241, 249], "overcom": [42, 54, 87, 168, 180, 213, 253, 265, 283], "powder": [42, 54, 168, 180], "physic": [42, 51, 52, 57, 63, 168, 177, 178, 183, 189, 230, 243, 275, 277, 283, 285, 288, 289, 308, 349], "delaha2020": [42, 168], "section": [42, 51, 80, 100, 107, 109, 110, 119, 124, 168, 177, 206, 226, 235, 249, 252, 254, 257, 277, 278, 283, 285, 330, 332, 334, 337, 338], "though": [42, 70, 168, 196, 252, 267, 268, 272, 275, 283, 287, 346, 347], "fit_method": [42, 51, 57, 63, 168, 177, 183, 189, 283, 289, 306, 307, 341], "cl": [42, 43, 168, 169, 270, 283], "cwl": [42, 168, 270, 283], "unconstrain": [42, 57, 168, 183, 277], "unplaus": [42, 168], "mosek": [42, 52, 57, 168, 178, 183], "solver": [42, 52, 57, 168, 178, 183, 275, 277, 283, 329], "www": [42, 52, 57, 103, 168, 178, 183, 229, 230, 277, 281, 283, 287], "com": [42, 52, 57, 68, 104, 105, 109, 110, 112, 113, 119, 120, 121, 125, 168, 178, 183, 194, 229, 233, 235, 236, 237, 244, 252, 277, 287, 289, 291], "cvxpy_solv": [42, 52, 57, 168, 178, 183, 283], "greatli": [42, 52, 168, 178], "solut": [42, 44, 52, 64, 82, 96, 168, 170, 178, 190, 208, 222, 234, 249, 270, 275, 277, 283, 287], "atyp": [42, 168], "scenario": [42, 70, 168, 196, 254], "counterpart": [42, 168], "unexpect": [42, 49, 168, 175, 260, 328], "qualit": [42, 168, 256, 263, 265, 271, 335], "dkimodel_plu": [42, 168], "dkifit_plu": [42, 168], "pure": [42, 168, 231, 252, 271, 279], "kurtosis_tensor_standard_measures_plu": [42, 168], "obviat": [42, 168], "dkifit_noisi": [42, 168], "dkifit_noisy_plu": [42, 168], "kurtosis_tensor_standard_measures_noisi": [42, 168], "unsmooth": [42, 168], "hansen2013": [42, 168], "glennr2015": [42, 168], "mkt": [42, 168, 283, 290], "kfa": [42, 168, 283, 290, 337, 341], "measures_from_kurtosis_tensor_onli": [42, 168], "report": [42, 51, 168, 177, 271, 272, 283, 326, 333, 340], "jh": [42, 43, 54, 168, 169, 180, 243, 283], "helpern": [42, 43, 54, 168, 169, 180, 243, 283, 289, 306], "ja": [42, 43, 54, 168, 169, 180, 243, 283], "ramani": [42, 54, 168, 180, 243, 289, 306], "lu": [42, 54, 63, 168, 180, 189, 243, 283, 289, 306, 307], "h": [42, 43, 54, 58, 59, 64, 65, 100, 102, 109, 168, 169, 180, 184, 185, 190, 191, 226, 228, 234, 242, 243, 275, 277, 279, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 333], "kaczynski": [42, 54, 168, 180, 243, 289, 306], "diffusion": [42, 54, 103, 168, 180, 243, 283, 289, 306], "quantif": [42, 54, 87, 168, 180, 213, 243, 283, 286, 289, 306], "non_gaussian": [42, 54, 168, 180, 243], "53": [42, 54, 63, 168, 180, 189, 232, 243, 283, 289, 306, 307, 333, 343], "1432": [42, 54, 168, 180, 243, 289, 306, 335], "1440": [42, 54, 168, 180, 243, 328], "nmr": [42, 58, 168, 184, 243, 277, 283, 289, 307], "biomedicin": [42, 168, 243, 283], "698": [42, 168, 243, 283, 324], "710": [42, 168, 243, 283, 324], "177": [42, 43, 168, 169, 243, 283, 333], "188": [42, 43, 168, 169, 243, 283], "poot": [42, 168], "dh": [42, 168], "heck": [42, 168, 252], "blockx": [42, 168], "linden": [42, 168], "verhoy": [42, 168], "138": [42, 168, 234, 324, 331], "145": [42, 168, 328, 331], "ferreira": [42, 54, 168, 180, 243, 283], "correia": [42, 49, 54, 103, 168, 175, 180, 243, 278, 283], "master": [42, 109, 111, 114, 119, 120, 121, 124, 168, 251, 324, 326, 329, 331, 333, 336], "dissert": [42, 168], "bachelor": [42, 168], "programin": [42, 168], "biomed": [42, 104, 105, 168, 232, 283], "faculti": [42, 168], "scienc": [42, 126, 168, 232, 252, 277], "repositorio": [42, 168], "ul": [42, 168], "pt": [42, 93, 126, 168, 219, 287, 335], "bitstream": [42, 168], "10451": [42, 168], "8511": [42, 168], "ulfc104137_tm_rafael_henriqu": [42, 168], "pdf": [42, 44, 45, 64, 125, 168, 170, 171, 190, 230, 275, 283, 285, 289, 290, 291, 333, 342], "lund": [42, 168, 283], "te": [42, 168], "sangil": [42, 168, 283], "sn": [42, 43, 53, 54, 168, 169, 179, 180, 234, 252, 277, 283], "experiment": [42, 168, 249, 283, 285], "computationally393fast": [42, 168], "69": [42, 55, 66, 168, 181, 192, 331], "1754": [42, 168, 283, 330], "1760": [42, 168, 283, 335], "394doi": [42, 168], "24743": [42, 168, 283], "glenn": [42, 168, 249, 283], "gr": [42, 126, 168], "diffusional387kurtosi": [42, 168], "biomedicine28": [42, 168], "448": [42, 168, 283, 333], "459": [42, 168, 283, 324], "nbm": [42, 168, 283], "3271": [42, 168, 283], "nune": [42, 54, 168, 180, 243, 283], "rg": [42, 54, 168, 180, 243, 283], "geometri": [42, 54, 85, 168, 180, 211, 243, 274, 283, 285, 287, 290, 328, 333], "novel": [42, 43, 52, 54, 85, 103, 168, 169, 178, 180, 211, 243, 283, 285], "biomark": [42, 54, 85, 168, 180, 211, 243, 283, 285], "99": [42, 54, 66, 85, 168, 180, 192, 211, 243, 277, 283, 285, 331], "cmw": [42, 168], "ott": [42, 168], "ma": [42, 92, 126, 168, 218], "dijkhuizen": [42, 168], "rekindl": [42, 168], "794": [42, 168, 325], "808": [42, 168, 325], "scientif": [42, 43, 48, 51, 53, 54, 96, 106, 107, 168, 169, 174, 177, 179, 180, 222, 233, 234, 278, 283], "160072": [42, 43, 53, 54, 104, 105, 168, 169, 179, 180, 234], "sdata": [42, 43, 53, 54, 104, 105, 168, 169, 179, 180, 234, 278], "dela": [42, 52, 57, 168, 178, 183, 277, 278, 283, 342, 343], "haij": [42, 52, 57, 168, 178, 183, 277, 278, 283, 342, 343], "program": [42, 52, 57, 168, 178, 183, 229, 232, 252, 277, 278, 283, 289, 312], "209": [42, 52, 168, 178, 277, 278, 283, 289, 307, 332], "116405": [42, 52, 168, 178, 277, 278, 283], "reconst_dki": [42, 168, 326], "hinder": [43, 52, 169, 178, 283, 285], "fierem2013": [43, 169], "influenc": [43, 49, 169, 175, 278], "intra": [43, 54, 85, 104, 105, 169, 180, 211, 283, 289, 308], "extra": [43, 49, 54, 65, 85, 100, 102, 106, 169, 175, 180, 191, 211, 226, 228, 230, 256, 270, 275, 277, 281, 283, 284, 288], "cellular": [43, 54, 85, 169, 180, 211, 283], "fierem2012": [43, 169], "distinguish": [43, 169, 277, 287, 288, 289, 311, 312], "degener": [43, 169, 277], "dki_micro": [43, 169, 290], "kurtosismicrostructuremodel": [43, 169, 290], "dki_micro_model": [43, 169], "meaning": [43, 52, 108, 169, 178, 283], "fieremans2011": [43, 169], "planar": [43, 56, 57, 169, 182, 183, 277, 278, 287, 290], "criteria": [43, 169, 287], "articl": [43, 49, 56, 57, 68, 103, 104, 105, 169, 175, 182, 183, 194, 235, 236, 237, 277, 279, 283], "publish": [43, 49, 57, 169, 175, 183, 283, 335], "nevertheless": [43, 169], "predefin": [43, 169, 279, 284], "well_aligned_mask": [43, 169], "cp": [43, 169, 245, 289, 321], "isnan": [43, 47, 169, 173, 331], "dki_micro_fit": [43, 169], "kurtosismicrostructurefit": [43, 169], "awf": [43, 169, 283, 290], "tort": [43, 169, 277, 284, 289], "im0": [43, 54, 169, 180], "im1": [43, 54, 169, 180], "kurtosis_microstructural_measur": [43, 169], "overlaid": [43, 59, 169, 185, 288], "kim": [43, 169], "grossman": [43, 71, 72, 73, 169, 197, 198, 199, 244], "ri": [43, 169], "ingles": [43, 169], "demyelin": [43, 169], "proceed": [43, 51, 53, 169, 177, 179, 283, 284, 288, 289, 311], "20th": [43, 169], "annual": [43, 103, 104, 105, 169, 278, 283], "societi": [43, 51, 53, 58, 169, 177, 179, 184, 277, 283, 284, 288, 289, 311], "melbourn": [43, 169], "australia": [43, 169], "benitez": [43, 169], "falangola": [43, 169], "deardorff": [43, 169], "spampinato": [43, 169], "babb": [43, 169], "ferri": [43, 169], "alzheim": [43, 169], "diseas": [43, 169, 235], "progress": [43, 55, 58, 75, 110, 120, 169, 181, 184, 201, 235, 244, 249, 263, 275, 279, 282, 289, 291, 301, 318, 326, 338, 341], "ajnr": [43, 169], "am": [43, 110, 120, 124, 169, 251, 252], "neuroradiol": [43, 169], "34": [43, 169, 232, 283, 285, 331, 338, 343], "2105": [43, 169, 337], "2112": [43, 169, 337], "3174": [43, 169], "a3553": [43, 169], "reconst_dki_micro": [43, 169], "wedeen08": [44, 170], "keyhol": [44, 170, 283], "diffusionspectrummodel": [44, 45, 46, 84, 170, 171, 172, 210, 290, 325], "taiwan_ntu_dsi": [44, 45, 50, 62, 104, 105, 170, 171, 176, 188], "96": [44, 50, 170, 176, 234, 331], "dsmodel": [44, 45, 170, 171], "dataslic": [44, 45, 50, 62, 170, 171, 176, 188], "dsfit": [44, 170, 283], "724": [44, 50, 170, 176, 287, 324, 329], "fashion": [44, 51, 170, 177, 243, 275, 282, 287], "17": [44, 51, 55, 61, 170, 177, 181, 187, 277, 282, 283, 331, 335], "345": [44, 56, 57, 170, 182, 183, 283, 333], "ndindex": [44, 58, 170, 184, 290, 331, 333], "disc": [44, 170, 277], "memmap": [44, 170], "mind": [44, 81, 93, 107, 170, 207, 219, 255, 266, 269, 283], "gbyte": [44, 170], "tuch04": [44, 170], "fig_hist": [44, 63, 93, 170, 189, 219], "dsi_gfa": [44, 170], "41": [44, 71, 72, 73, 81, 170, 197, 198, 199, 207, 244, 249, 279, 330, 331, 342], "1267": [44, 170, 326], "1277": [44, 170, 327], "52": [44, 97, 170, 223, 285, 331, 336], "1358": [44, 170, 328], "1372": [44, 170], "reconst_dsi": [44, 170], "rtop": [45, 52, 55, 62, 171, 178, 181, 188, 283, 285, 288, 289, 290, 309, 324], "displac": [45, 51, 52, 55, 62, 68, 171, 177, 178, 181, 188, 194, 229, 243, 244, 275, 283, 285, 287, 288, 289, 292, 293, 346], "msd": [45, 52, 54, 55, 62, 171, 178, 180, 181, 188, 283, 285, 289, 290, 309], "wu2007": [45, 62, 171, 188], "wu2008": [45, 62, 171, 188], "qgrid_siz": [45, 171, 283], "filter_width": [45, 171, 283], "rtop_sign": [45, 62, 171, 188, 283, 290], "rtop_pdf": [45, 62, 171, 188, 283, 290], "mse": [45, 62, 171, 188], "leav": [45, 120, 124, 171, 277, 279, 283, 285], "rtop_pdf_norm": [45, 171], "msd_norm": [45, 171], "msd_discret": [45, 171, 283, 290], "ax1": [45, 48, 58, 62, 87, 171, 174, 184, 188, 213], "add_subplot": [45, 48, 62, 82, 171, 174, 188, 208], "ind": [45, 48, 62, 171, 174, 188, 283, 286], "ax2": [45, 48, 62, 87, 171, 174, 188, 213], "ax3": [45, 48, 62, 171, 174, 188], "621": [45, 62, 171, 188, 283, 324], "hybrid": [45, 52, 62, 171, 178, 188, 283], "617": [45, 62, 171, 188, 283, 324], "629": [45, 62, 171, 188, 283, 324], "858": [45, 62, 171, 188, 283, 325], "865": [45, 62, 171, 188, 283, 326], "reconst_dsi_metr": [45, 171], "canales10": [46, 84, 172, 210], "goal": [46, 84, 172, 210, 234, 244], "ground": [46, 54, 57, 84, 172, 180, 183, 210, 264, 266, 267, 270, 288], "truth": [46, 54, 57, 84, 172, 180, 183, 210, 264, 266, 267, 270, 288], "multi_tensor_odf": [46, 60, 84, 86, 172, 186, 210, 212, 290], "diffusionspectrumdeconvmodel": [46, 84, 172, 210, 290], "btabl": [46, 84, 172, 210], "dsi515btabl": [46, 84, 172, 210], "0015": [46, 60, 84, 86, 172, 186, 210, 212, 271, 283, 285], "0003": [46, 60, 84, 86, 172, 186, 210, 212, 283, 285], "subdivid": [46, 60, 84, 86, 172, 186, 210, 212, 277, 289, 290, 331], "odf_gt": [46, 84, 172, 210], "dsi_model": [46, 84, 172, 210], "dsi_odf": [46, 84, 172, 210], "dsid_model": [46, 84, 172, 210], "dsid_odf": [46, 84, 172, 210], "odf_actor": [46, 47, 48, 60, 84, 86, 172, 173, 174, 186, 210, 212], "rotatex": [46, 52, 60, 61, 67, 84, 86, 89, 172, 178, 186, 187, 193, 210, 212, 215], "90": [46, 51, 52, 54, 58, 60, 61, 67, 84, 85, 86, 89, 172, 177, 178, 180, 184, 186, 187, 193, 210, 211, 212, 215, 280, 283, 285, 289, 321, 322, 331], "136": [46, 84, 172, 210, 283, 331], "149": [46, 84, 172, 210], "reconst_dsid": [46, 172, 326], "colleagu": [47, 173, 243], "basser1994": [47, 173, 243], "influenti": [47, 173, 243], "commonli": [47, 173, 243], "bmathbf": [47, 173], "definit": [47, 57, 59, 65, 107, 173, 183, 185, 191, 231, 243, 249, 251, 268, 271, 277, 283, 326, 329, 331, 333, 338, 341, 350], "quadrat": [47, 173, 243, 283], "pmatrix": [47, 56, 57, 173, 182, 183, 243, 283, 346, 347], "xx": [47, 173, 243, 346, 347], "xz": [47, 173, 243, 346, 347], "yx": [47, 173, 243, 346, 347], "yy": [47, 173, 243, 346, 347], "yz": [47, 173, 243, 346, 347], "zx": [47, 173, 243], "zy": [47, 173, 243], "zz": [47, 173, 243, 346, 347], "covari": [47, 56, 57, 173, 182, 183, 243, 261, 262, 264, 266, 267, 270, 272, 283], "diagon": [47, 173, 235, 243, 283, 289, 316], "numer": [47, 52, 106, 173, 178, 229, 249, 275, 277, 283, 285, 338, 340, 346], "recov": [47, 55, 63, 76, 173, 181, 189, 202, 282, 283, 347, 350], "triangular": [47, 173, 277, 278, 281, 283], "dxx": [47, 173, 243, 264, 283, 289, 307], "dxy": [47, 173, 243, 283, 289, 307], "dyi": [47, 173, 243, 264, 283, 289, 307], "dxz": [47, 173, 243, 283, 289, 307], "dyz": [47, 173, 243, 283, 289, 307], "dzz": [47, 173, 243, 264, 283, 289, 307], "tensor_v": [47, 173], "lower_triangular": [47, 173, 290], "quadratic_form": [47, 173, 283, 290], "eigen": [47, 173, 262, 270, 283, 285], "That": [47, 51, 173, 177, 230, 231, 252, 275, 283], "whether": [47, 80, 124, 125, 173, 206, 233, 243, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 304, 305, 307], "unrestrict": [47, 173], "mathemat": [47, 57, 67, 106, 173, 183, 193, 256, 265, 275, 283, 287, 329, 349, 350], "frac": [47, 67, 173, 193, 229, 231, 243, 277, 283, 285, 350, 351], "lambda_1": [47, 173, 283, 346, 347], "lambda_2": [47, 173, 283, 346, 347], "lambda_3": [47, 173, 283, 346, 347], "carefulli": [47, 173, 239], "pack": [47, 173], "wrap": [47, 100, 102, 125, 173, 226, 228, 271, 275, 282, 283, 287, 289, 298, 299, 300, 315, 317, 324, 334], "decreas": [47, 52, 55, 66, 70, 173, 178, 181, 192, 196, 259, 326, 329], "fan": [47, 67, 173, 193], "color_fa": [47, 63, 173, 189, 232, 290], "possibli": [47, 110, 173, 254, 275, 286, 324], "tensor_fa": [47, 173], "viewer": [47, 99, 173, 225, 230, 351], "tensor_evec": [47, 173], "complimentari": [47, 173], "md1": [47, 173], "tensors_md": [47, 173], "md2": [47, 173], "obvious": [47, 124, 173], "quantiti": [47, 52, 55, 173, 178, 181, 283], "pajevic1999": [47, 173], "tensor_rgb": [47, 173], "ellipsoid": [47, 63, 173, 189, 277, 328], "increas": [47, 51, 52, 55, 75, 107, 173, 177, 178, 181, 201, 249, 252, 259, 266, 271, 275, 282, 283, 287, 329, 333, 335, 338], "tensor_slic": [47, 63, 173, 189, 268], "scalar_color": [47, 63, 173, 189], "tensor_ellipsoid": [47, 173], "did": [47, 63, 73, 110, 173, 189, 199, 244, 249, 277, 282, 340], "tensor_odf": [47, 173], "reliabl": [47, 173], "drawback": [47, 173], "intermedi": [47, 117, 173, 271, 283, 287], "mislead": [47, 173, 326, 337], "lead": [47, 63, 71, 123, 173, 189, 197, 230, 256, 277, 283, 346], "fortun": [47, 60, 173, 186, 251], "mattielo": [47, 173, 243], "spectroscopi": [47, 173, 243, 346], "pajev": [47, 173], "reconst_dti": [47, 173, 326], "anderson2005": [48, 174], "kaden2016": [48, 174], "zucchelli2017": [48, 174], "forecastmodel": [48, 174, 290], "fetch_hbn": [48, 49, 174, 175, 290], "op": [48, 49, 87, 174, 175, 213, 333, 351], "network": [48, 51, 71, 104, 105, 110, 174, 177, 197, 235, 236, 243, 249, 256, 265, 278, 282], "alexander2017": [48, 174], "hbn": [48, 174, 249], "pod2": [48, 174, 278], "richiehalford2022": [48, 174], "data_path": [48, 49, 174, 175], "ndaraa948vfh": [48, 49, 174, 175, 278], "dwi_path": [48, 49, 174, 175], "qsiprep": [48, 49, 174, 175], "hbnsiteru": [48, 49, 174, 175], "ndaraa948vfh_s": [48, 49, 174, 175], "hbnsiteru_acq": [48, 49, 174, 175], "64dir_spac": [48, 49, 174, 175], "t1w_desc": [48, 49, 174, 175], "preproc_dwi": [48, 49, 174, 175], "mask_img": [48, 49, 57, 174, 175, 183, 278], "brain_mask": [48, 49, 174, 175, 234, 243, 289], "51": [48, 49, 52, 66, 174, 175, 178, 192, 277, 331], "mask_smal": [48, 49, 174, 175], "dec_alg": [48, 174, 283], "fm": [48, 174, 283], "f_fit": [48, 174, 283], "d_par": [48, 174, 283], "dpar": [48, 174, 283, 290], "d_perp": [48, 174, 283], "dperp": [48, 174, 283, 290], "forecast_indic": [48, 174], "shrink": [48, 174], "ax4": [48, 174], "dpi": [48, 174, 288], "magnif": [48, 174], "kaden": [48, 54, 174, 180, 283], "zucchelli": [48, 126, 174, 283, 324, 328, 332, 333], "miccai": [48, 61, 174, 187, 279, 283, 289, 300], "cdmri": [48, 174, 283], "lm": [48, 174, 278], "escalera": [48, 174, 278], "ai": [48, 174, 251, 277, 278], "transdiagnost": [48, 174, 278], "research": [48, 126, 174, 229, 247, 251, 252, 255, 256, 260, 264, 268, 272, 278, 337], "pediatr": [48, 104, 105, 174, 278], "mental": [48, 174, 278], "health": [48, 174, 278], "disord": [48, 174, 278], "sci": [48, 75, 88, 89, 104, 105, 174, 201, 214, 215, 235, 278, 284, 286, 289, 295, 316], "170181": [48, 174, 278], "richi": [48, 174, 278, 335], "halford": [48, 174, 278, 335], "cieslak": [48, 71, 126, 174, 197, 278, 329, 335], "2022": [48, 66, 76, 174, 192, 202, 232, 278, 282, 284, 289, 302, 336, 341, 342], "reconst_forecast": [48, 174, 328], "parenchyma": [49, 175], "cerebr": [49, 51, 175, 177], "spinal": [49, 51, 92, 175, 177, 218, 279], "morphologi": [49, 175, 278], "enlarg": [49, 175], "atrophi": [49, 175], "pathologi": [49, 175], "expand": [49, 58, 117, 175, 184, 275, 326, 340], "pasternak2009": [49, 175], "s_0fe": [49, 175], "thebdiffus": [49, 175], "hoy2014": [49, 175], "henriques2017": [49, 175], "freewatertensormodel": [49, 175, 290], "fwdtimodel": [49, 175], "fwdtifit": [49, 175], "freewatertensorfit": [49, 175, 290], "dtimodel": [49, 175], "dtifit": [49, 175, 346, 347], "dti_fa": [49, 175], "dti_md": [49, 175], "fadiff": [49, 175], "5e": [49, 56, 175, 182, 277, 283, 285], "mddiff": [49, 175], "in_vivo_free_water_dti_and_standard_dti_measur": [49, 175], "vivo": [49, 54, 175, 180], "periventricular": [49, 175], "abl": [49, 52, 96, 99, 100, 102, 107, 109, 119, 175, 178, 222, 225, 226, 228, 233, 243, 252, 260, 261, 266, 267, 269, 270, 271, 272, 283, 326, 331], "problemat": [49, 175], "reproduc": [49, 55, 56, 90, 175, 181, 182, 216, 241, 277, 278, 282, 284, 287, 289, 329, 333, 337], "inflat": [49, 90, 175, 216], "in_vivo_free_water_dti_and_standard_dti_correct": [49, 175], "dismiss": [49, 175], "sochen": [49, 175], "gur": [49, 175], "intrat": [49, 175], "assaf": [49, 175, 285], "62": [49, 58, 175, 184, 234, 282, 283, 330, 331], "717": [49, 175, 341], "22055": [49, 175], "hoi": [49, 175], "kecskemeti": [49, 175], "323": [49, 175, 277, 283, 285, 333], "333": [49, 175, 333], "09": [49, 104, 105, 175, 278, 283, 337, 338], "053": [49, 175], "jean": [49, 103, 126, 175, 283, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337], "peterson": [49, 103, 104, 105, 175, 283, 326], "rescienc": [49, 103, 175, 283], "reconst_fwdti": [49, 175, 327], "yeh2010": [50, 176], "think": [50, 90, 110, 120, 176, 216, 229, 272, 283, 285, 346], "generalizedqsamplingmodel": [50, 176, 290], "gqmodel": [50, 176], "sampling_length": [50, 176, 283], "gqfit": [50, 176], "gqpeak": [50, 176], "gqpeak_valu": [50, 176], "gqpeak_indic": [50, 176], "reconst_gqi": [50, 176, 326], "perfus": [51, 177, 232, 243, 249, 283, 289, 308], "sequenc": [51, 67, 79, 80, 177, 193, 205, 206, 229, 230, 231, 243, 275, 277, 278, 282, 284, 285, 287, 288, 289, 291, 337, 346, 347, 348], "understood": [51, 177, 243, 253, 287], "stejskal": [51, 177, 229, 243, 285, 289, 308, 346, 347, 348], "tanner": [51, 177, 229, 235, 243, 285, 289, 308, 346, 347, 348], "stejskal65": [51, 177, 243, 289, 308], "lebihan84": [51, 177, 243, 289, 308], "brownian": [51, 177, 243], "thermal": [51, 63, 177, 189, 243], "vascular": [51, 177, 243], "blood": [51, 177, 243], "pressur": [51, 177, 243], "pseudo": [51, 53, 177, 179, 243, 277, 283, 288, 289, 308], "laid": [51, 177, 243, 283], "macroscop": [51, 177, 243, 283], "fe": [51, 177], "weigh": [51, 177], "ivimmodel": [51, 177, 283], "read_ivim": [51, 177, 290], "21": [51, 56, 57, 104, 105, 177, 182, 183, 250, 283, 325, 326, 331, 343], "regist": [51, 64, 65, 66, 67, 68, 71, 72, 73, 75, 96, 124, 177, 190, 191, 192, 193, 194, 197, 198, 199, 201, 222, 236, 237, 244, 275, 281, 289, 290, 296, 329, 330, 337], "bvalu": [51, 53, 54, 85, 177, 179, 180, 211, 277, 281, 283, 289, 297, 298, 304, 305, 306, 307, 308], "54": [51, 55, 58, 94, 104, 105, 177, 181, 184, 220, 278, 283, 332], "midwai": [51, 177], "axhlin": [51, 177], "axvlin": [51, 177], "ivim_data_slic": [51, 177], "heat": [51, 177], "hair": [51, 177], "medial": [51, 177], "mixtur": [51, 177, 275], "x1": [51, 177, 283], "x2": [51, 177, 283], "y1": [51, 177, 277], "y2": [51, 177, 277], "csf_slice": [51, 177], "exponenti": [51, 177, 283, 333], "pass": [51, 64, 94, 100, 124, 177, 190, 220, 226, 256, 260, 262, 264, 269, 272, 275, 277, 281, 282, 283, 284, 286, 287, 288, 289, 300, 315, 330], "trr": [51, 177, 283], "stage": [51, 64, 72, 110, 177, 190, 198, 243, 277, 283, 289, 308], "guess": [51, 177, 275, 277, 283], "split_b_d": [51, 177, 243, 283, 289, 308], "mono": [51, 177, 275, 283], "logarithm": [51, 57, 177, 183, 283], "split_b_s0": [51, 177, 283, 289, 308], "s0_": [51, 177], "d_star": [51, 177, 283, 289, 290, 308], "two_stag": [51, 177, 283], "flag": [51, 75, 94, 110, 120, 177, 201, 220, 234, 249, 275, 277, 283, 285, 289, 293, 327, 328, 333, 341], "ivimfit": [51, 177, 290], "model_param": [51, 177, 283, 326], "arrang": [51, 177, 262, 278, 285, 287], "ivimparam": [51, 177], "20x20": [51, 177], "height": [51, 177, 328], "estimated_param": [51, 177], "heatmap": [51, 58, 177, 184], "def": [51, 55, 65, 67, 70, 71, 72, 78, 79, 80, 89, 93, 96, 99, 100, 102, 177, 181, 191, 193, 196, 197, 198, 204, 205, 206, 215, 219, 222, 225, 226, 228, 275, 277, 281, 283, 285, 333], "plot_map": [51, 177], "raw_data": [51, 177], "clim": [51, 177], "page": [51, 78, 79, 104, 105, 107, 110, 113, 115, 116, 118, 119, 124, 177, 204, 205, 235, 277, 324, 326, 329, 333, 335, 342], "s0_predict": [51, 177, 283, 289, 290, 308], "predicted_s0": [51, 177], "measured_s0": [51, 177], "perfusion_fract": [51, 177, 283, 289, 290, 308], "perfusion_coeff": [51, 177], "diffusion_coeff": [51, 177], "refin": [51, 64, 75, 177, 190, 201, 275, 283, 284, 289, 290, 316], "varpro": [51, 177, 283, 335, 336, 342], "mix": [51, 177, 235, 249, 254, 282, 283, 289, 293, 294, 327, 328, 330], "farooq16": [51, 177], "convex": [51, 52, 64, 177, 178, 190, 283], "basin": [51, 177], "fadnavis19": [51, 177], "ivimmodel_vp": [51, 177], "ivimfit_vp": [51, 177], "ivim_trr_predict": [51, 177], "s0_est": [51, 177], "f_est": [51, 177], "d_star_est": [51, 177], "d_est": [51, 177], "text_fit": [51, 177], "param": [51, 100, 102, 177, 226, 228, 270, 275, 283, 287, 289, 324, 329, 333, 343], "3f": [51, 177], "4f": [51, 177, 277], "5f": [51, 177], "gca": [51, 177], "ivim_predict_vp": [51, 177], "ivim_voxel_plot": [51, 177], "januari": [51, 104, 105, 177, 232, 243, 250, 289, 308], "1965": [51, 177, 243, 285, 287, 289, 308, 336], "presenc": [51, 57, 63, 177, 183, 189, 243, 285, 289, 308, 350], "chemic": [51, 177, 243, 285, 289, 308], "288": [51, 177, 243, 285, 289, 308, 332], "bibcod": [51, 177, 243, 289, 308], "1965jchph": [51, 177, 243, 289, 308], "1695690": [51, 177, 243, 289, 308], "deni": [51, 177, 243, 283, 289, 308], "radiologi": [51, 177, 243, 283, 289, 308], "168": [51, 177, 243, 283, 289, 308, 332], "1988": [51, 177, 243, 277, 283, 289, 308, 336, 346], "497": [51, 177, 243, 280, 283, 285, 289, 308, 333, 350], "505": [51, 177, 243, 283, 289, 308, 333], "shreya": [51, 126, 177, 283, 328, 329, 330, 335, 336, 339, 340, 341, 342], "microlearn": [51, 177, 283, 330], "machin": [51, 117, 124, 177, 232, 251, 265, 283, 324], "montreal": [51, 126, 177, 250, 278, 283, 288, 289, 311], "canada": [51, 61, 177, 187, 250, 283, 288, 289, 311], "farooq": [51, 177, 283], "hamza": [51, 177, 283], "reconst_ivim": [51, 177], "ozarslan2013": [52, 55, 178, 181], "qiv": [52, 55, 178, 181, 283, 289, 290, 309], "teturn": [52, 178], "ng": [52, 178, 283, 289, 290, 309, 328], "interestingli": [52, 178], "rtap": [52, 55, 178, 181, 243, 283, 289, 290, 309, 324], "rtpp": [52, 55, 178, 181, 243, 283, 289, 290, 309, 324], "delahaije2020": [52, 178], "laplacian": [52, 55, 178, 181, 249, 283, 289, 309, 326], "fick2016a": [52, 178], "mapmri": [52, 55, 178, 181, 243, 289, 290, 309, 324, 326, 327, 328, 329, 330, 337, 344], "187": [52, 178], "big_delta": [52, 55, 178, 181, 277, 283, 289, 309, 327], "small_delta": [52, 55, 178, 181, 277, 283, 289, 309, 327], "0365": [52, 178, 243], "0157": [52, 178, 243], "radial_ord": [52, 55, 61, 178, 181, 187, 283, 289, 309], "anisotropic_sc": [52, 178, 283], "laplacian_regular": [52, 55, 178, 181, 283, 337], "regularization_weight": [52, 178], "gcv": [52, 55, 178, 181, 283, 335], "craven1978": [52, 178], "omit": [52, 178, 275, 283, 287], "custom": [52, 53, 178, 179, 260, 275, 282, 283, 289, 291, 326, 338], "positivity_constraint": [52, 178, 283], "exist": [52, 78, 79, 80, 85, 107, 123, 124, 178, 204, 205, 206, 211, 252, 253, 257, 265, 271, 278, 281, 282, 283, 284, 288, 289, 313, 324, 325, 328, 329, 333, 334, 338], "global_constraint": [52, 178, 283], "everywher": [52, 125, 178, 249, 283], "pos_grid": [52, 178, 283], "pos_radiu": [52, 178, 283], "job": [52, 178, 229, 251, 260, 263, 265, 268, 269, 329], "viabl": [52, 178], "impos": [52, 55, 57, 178, 181, 183, 283], "extrapol": [52, 55, 178, 181, 283, 287], "beyond": [52, 55, 107, 178, 181], "desir": [52, 75, 80, 92, 178, 201, 206, 218, 258, 259, 263, 265, 272, 275, 277, 283, 284, 285], "cvxpy": [52, 57, 106, 178, 183, 249, 277, 283, 327, 328, 329, 330, 337, 338], "map_model_laplacian_aniso": [52, 178], "mapmrimodel": [52, 178, 290], "laplacian_weight": [52, 55, 178, 181, 283, 289, 309], "map_model_positivity_aniso": [52, 178], "map_model_both_aniso": [52, 178], "map_model_plus_aniso": [52, 178], "preset": [52, 55, 178, 181, 283], "faster": [52, 75, 78, 178, 201, 204, 233, 249, 256, 265, 271, 275, 279, 282, 283, 284, 287, 289, 298, 299, 325, 326, 331, 333, 345], "mapfit_laplacian_aniso": [52, 178, 328], "mapfit_positivity_aniso": [52, 178], "mapfit_both_aniso": [52, 178], "mapfit_plus_aniso": [52, 178], "cmapl": [52, 178], "map_label": [52, 178, 288], "mapmri_rtop": [52, 178], "appear": [52, 96, 119, 124, 178, 222, 248, 270, 278], "smoother": [52, 178, 275, 283, 284, 289, 292], "norm_of_laplacian_sign": [52, 178, 283, 290], "mapmri_norm_laplacian": [52, 178], "mapmri_map": [52, 178], "proton": [52, 178, 229, 348], "said": [52, 178], "hosseinbor2013": [52, 178], "composit": [52, 178, 275], "fick2016b": [52, 178], "puls": [52, 55, 178, 181, 229, 277, 278, 283, 285, 346, 348], "appar": [52, 178, 239, 241, 249, 269, 270, 279, 283], "diamet": [52, 178], "under": [52, 53, 67, 72, 73, 107, 178, 179, 193, 198, 199, 252, 260, 261, 275, 277, 278, 283, 288, 289, 292, 335, 336, 340, 344], "strong": [52, 178], "protocol": [52, 110, 178], "pore": [52, 178, 283], "realist": [52, 178, 258], "map_model_both_ng": [52, 178], "bval_threshold": [52, 178, 283, 289, 309], "map_model_plus_ng": [52, 178], "mapfit_both_ng": [52, 178], "mapfit_plus_ng": [52, 178], "ng_perpendicular": [52, 178, 283, 290], "ng_parallel": [52, 178, 283, 290], "mapmri_ng": [52, 178], "clue": [52, 178], "map_model_both_iso": [52, 178], "mapfit_both_iso": [52, 178], "noisier": [52, 178], "sfu": [52, 61, 178, 187], "rutger": [52, 126, 178, 278, 283, 326, 327, 329], "hj": [52, 178, 278, 283], "craven": [52, 178, 283], "spline": [52, 178, 275, 283, 290], "1978": [52, 178, 283, 336], "377": [52, 178, 234, 283, 333], "403": [52, 178, 283, 333], "hosseinbor": [52, 178, 283], "bessel": [52, 178, 283], "bfor": [52, 178, 283], "650": [52, 178, 283, 324], "670": [52, 178, 283, 326], "dispers": [52, 54, 178, 180], "isbi": [52, 61, 104, 105, 178, 187, 250, 278, 283, 331], "reconst_mapmri": [52, 178, 328], "msmt": [53, 179, 249, 283, 335, 336, 338], "jeurissen2014": [53, 179], "cerebrospin": [53, 58, 104, 105, 179, 184, 245, 289, 322], "overestim": [53, 179, 283], "ssst": [53, 179, 283], "otsu": [53, 179, 243, 290, 326, 332], "powermap": [53, 179], "unavail": [53, 179], "dp": [53, 108, 179, 287, 341], "unique_bvals_toler": [53, 179, 283, 290], "auto_response_msmt": [53, 179, 290], "mask_for_response_msmt": [53, 179, 290], "response_from_mask_msmt": [53, 179, 290, 339], "multishelldeconvmodel": [53, 179, 290], "qball_model": [53, 179], "qballmodel": [53, 179, 290], "ap": [53, 179, 283, 287], "anisotropic_pow": [53, 179, 290, 326], "anisotropic_power_map": [53, 179], "treat": [53, 179, 275, 277, 278, 283, 289], "hidden": [53, 82, 179, 208, 275, 278, 282, 328, 337], "markov": [53, 82, 179, 208, 284, 331, 332], "hmrf": [53, 82, 179, 208], "nclass": [53, 82, 179, 208, 284], "initial_segment": [53, 82, 179, 208, 284], "final_segment": [53, 82, 179, 208, 284], "precis": [53, 54, 80, 179, 180, 206, 229, 270, 277, 282, 283, 326, 328, 333, 334], "mask_wm": [53, 179, 283], "mask_gm": [53, 179, 283], "mask_csf": [53, 179, 283], "wm_fa_thr": [53, 179, 283], "gm_fa_thr": [53, 179, 283], "csf_fa_thr": [53, 179, 283], "gm_md_thr": [53, 179, 283], "csf_md_thr": [53, 179, 283], "0032": [53, 179, 283], "nvoxels_wm": [53, 179], "nvoxels_gm": [53, 179], "nvoxels_csf": [53, 179], "precalcul": [53, 179, 289, 296], "response_wm": [53, 179, 283], "response_gm": [53, 179, 283], "response_csf": [53, 179, 283], "auto_response_wm": [53, 179], "auto_response_gm": [53, 179], "auto_response_csf": [53, 179], "multishellrespons": [53, 179, 290], "ubval": [53, 179, 277, 283], "response_mcsd": [53, 179], "wm_rf": [53, 179, 283], "gm_rf": [53, 179, 283], "csf_rf": [53, 179, 283], "mcsd_model_simple_respons": [53, 179], "mcsd_model": [53, 179], "mcsd_fit": [53, 179], "all_shm_coeff": [53, 179, 283, 290], "vf": [53, 179], "volume_fract": [53, 179, 283, 290], "sh_coeff": [53, 60, 179, 186, 283, 290], "csf_sh_coeff": [53, 179], "gm_sh_coeff": [53, 179], "wm_sh_coeff": [53, 179], "mcsd_pred": [53, 179], "mcsd_odf": [53, 179], "reset_camera_tight": [53, 179], "msdodf": [53, 179], "411": [53, 179, 283, 333], "426": [53, 179, 333], "dell": [53, 58, 179, 184, 283], "acqua": [53, 58, 179, 184, 283], "reveal": [53, 54, 85, 179, 180, 211, 268, 282, 283], "milan": [53, 179, 283], "itali": [53, 179, 283], "reconst_mcsd": [53, 179], "implaus": [54, 180], "mesoscop": [54, 180], "contrari": [54, 78, 180, 204], "confound": [54, 63, 180, 189], "secondli": [54, 180, 251], "meval": [54, 60, 85, 86, 180, 186, 211, 212, 266, 283, 285], "00099": [54, 85, 180, 211, 285], "00226": [54, 85, 180, 211, 285], "00087": [54, 85, 180, 211, 285], "loop": [54, 58, 82, 99, 100, 102, 180, 184, 208, 225, 226, 228, 229, 277, 283, 284, 287, 329, 335, 341], "linspac": [54, 55, 93, 180, 181, 219, 285, 287], "num": [54, 180, 277, 325], "ang": [54, 180], "91": [54, 55, 66, 180, 181, 192, 278, 282, 331], "f_i": [54, 180], "individu": [54, 66, 67, 87, 89, 126, 180, 192, 193, 213, 215, 267, 271, 277, 282, 283, 285, 287, 326, 342], "a_i": [54, 180], "msdki_model": [54, 180], "msdki_fit": [54, 180], "nrow": [54, 55, 107, 180, 181, 288], "ncol": [54, 55, 70, 180, 181, 196, 288], "bbox_to_anchor": [54, 180], "msdki_simul": [54, 180], "curv": [54, 180, 252, 263, 265, 271, 287], "art": [54, 180, 249, 271, 344], "im2": [54, 180], "im3": [54, 180], "msdki_invivo": [54, 180], "insur": [54, 180, 283, 326], "intris": [54, 180, 283], "di": [54, 180, 341], "microscop": [54, 56, 180, 182, 267, 277, 283], "smt2f": [54, 180, 283, 290], "smt2di": [54, 180, 283, 290], "ufa2": [54, 180], "smt2ufa": [54, 180, 283, 290], "ufa": [54, 56, 57, 180, 182, 183, 283, 288, 290], "msdki_smt2_invivo": [54, 180], "confirm": [54, 56, 66, 180, 182, 192, 252], "rescal": [54, 180], "real": [54, 87, 93, 100, 102, 110, 180, 213, 219, 226, 228, 229, 231, 249, 267, 269, 270, 272, 275, 277, 283, 285, 287, 350], "rn": [54, 103, 180], "down": [54, 78, 93, 99, 110, 112, 180, 204, 219, 225, 230, 251, 252, 270, 277, 282, 283, 290, 333, 339, 346, 347], "colleg": [54, 180, 251, 252, 283], "shemesh": [54, 180, 283], "misestim": [54, 180, 283], "press": [54, 180, 283], "27606": [54, 180, 283], "kelm": [54, 180, 283], "carson": [54, 180, 283], "rp": [54, 180, 268, 283], "dc": [54, 180], "139": [54, 81, 180, 207, 283, 331], "346": [54, 180, 283, 333], "359": [54, 180, 271, 283, 333], "reconst_msdki": [54, 180], "sought": [55, 181], "unsolv": [55, 181], "fick2017": [55, 181], "terminologi": [55, 181], "au": [55, 181, 278, 287], "graphnet": [55, 104, 105, 181, 278, 283], "sparsiti": [55, 59, 181, 185, 277, 283], "drastic": [55, 181, 260], "nervou": [55, 181, 251, 252], "mous": [55, 99, 181, 225], "fetch_qtdmri_test_retest_2subject": [55, 181, 290], "read_qtdmri_test_retest_2subject": [55, 181, 290], "qtdmri": [55, 181, 290], "retest": [55, 104, 105, 181, 278], "mice": [55, 104, 105, 181, 278], "freeli": [55, 181], "citeabl": [55, 181], "wassermann2017": [55, 181], "cc_mask": [55, 181, 278], "5m": [55, 181, 265, 278], "visualise_gradient_table_g_delta_rainbow": [55, 181, 290], "dmri_acquisition_schem": [55, 181], "isolin": [55, 181, 283], "architectur": [55, 181, 260, 263, 265, 268, 283, 335], "subplot_titl": [55, 181], "subject1": [55, 181], "subject2": [55, 181], "data_": [55, 181], "mask_": [55, 181], "gtab_": [55, 181, 283], "enumer": [55, 56, 67, 89, 90, 93, 181, 182, 193, 215, 216, 219], "data_middle_slic": [55, 181], "mask_middle_slic": [55, 181], "tenmod": [55, 181], "overlai": [55, 72, 181, 198], "mask_templ": [55, 181], "greys_r": [55, 181], "dmri_datasets_fa_with_ccmask": [55, 181], "tau_min": [55, 181], "tau_max": [55, 181], "qtdmri_fit": [55, 181], "cc_voxel": [55, 181], "time_ord": [55, 181, 283], "l1": [55, 59, 181, 185, 283, 284], "cv": [55, 181, 283], "qtdmri_mod": [55, 181], "qtdmrimodel": [55, 181, 290], "l1_regular": [55, 181, 283], "l1_weight": [55, 181, 283], "5th": [55, 181, 283, 289, 307], "trend": [55, 181], "topic": [55, 111, 181, 252], "commun": [55, 107, 117, 181, 249, 283, 334, 340, 345], "plot_mean_with_std": [55, 181], "ind1": [55, 181], "plotcolor": [55, 181], "std_mult": [55, 181], "lw": [55, 181], "fill_between": [55, 181], "005": [55, 181, 285], "msd_": [55, 181], "4e": [55, 181], "10e": [55, 181], "delta_grid": [55, 181], "msd_grid": [55, 181], "meshgrid": [55, 181], "d_grid": [55, 181], "d_level": [55, 181], "1e": [55, 56, 61, 181, 182, 187, 275, 277, 279, 280, 281, 283, 284, 289, 335], "contourf": [55, 181], "1e3": [55, 181], "1e5": [55, 181], "dashdot": [55, 181], "marker": [55, 181, 235], "clarifi": [55, 107, 181, 249, 332, 333, 335, 338, 341], "0091": [55, 181], "14e": [55, 181], "set_ylim": [55, 181], "set_xlim": [55, 181], "009": [55, 181], "0185": [55, 181], "cb": [55, 181, 275], "set_label": [55, 181], "qt_indices_msd": [55, 181], "slowli": [55, 181], "nearli": [55, 181], "perfectli": [55, 68, 181, 194, 264, 270, 280], "slightli": [55, 65, 108, 181, 191, 275, 283, 350], "eas": [55, 107, 181], "rtxp_": [55, 181], "rtxp_grid": [55, 181], "d_color": [55, 181], "162": [55, 181, 332], "3e": [55, 56, 181, 182, 283], "22": [55, 61, 64, 65, 181, 187, 190, 191, 250, 275, 279, 283, 331, 334, 336, 341], "140": [55, 66, 67, 96, 104, 105, 181, 192, 193, 222, 236, 244, 275, 278, 289, 318, 331], "113": [55, 97, 181, 223, 234, 331], "6e": [55, 181], "16": [55, 58, 61, 125, 127, 181, 184, 187, 232, 249, 250, 282, 283, 287, 288, 324, 325, 326, 332, 333, 335, 343, 344], "qt_indices_rtop": [55, 181], "experienc": [55, 181], "odd": [55, 181, 283, 338, 350], "arriv": [55, 181], "notic": [55, 67, 94, 110, 181, 193, 220, 230, 239, 252, 261, 266, 277, 278, 284, 289], "experi": [55, 72, 100, 181, 198, 226, 235, 248, 252, 253, 255, 256, 259, 263, 265, 267, 268, 278], "qt_indices_rtap": [55, 181], "9e": [55, 181], "15e": [55, 181], "qt_indices_rtpp": [55, 181], "bigger": [55, 181, 277], "asid": [55, 181], "sharpening_factor": [55, 181], "conclud": [55, 181], "help": [55, 65, 75, 100, 102, 107, 108, 110, 113, 115, 117, 123, 126, 181, 191, 201, 226, 228, 242, 246, 251, 252, 253, 255, 260, 264, 265, 268, 269, 270, 271, 275, 277, 283, 284, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 329, 333, 344, 345, 348], "tempor": [55, 181, 229, 283, 346, 347], "reconst_qtdmri": [55, 181], "briefli": [56, 57, 182, 183], "summar": [56, 57, 182, 183, 260, 286], "dtd": [56, 57, 182, 183, 266, 267, 272, 283], "langl": [56, 57, 182, 183, 283], "otim": [56, 57, 182, 183, 283], "outer": [56, 57, 109, 182, 183, 265, 271, 283], "product": [56, 57, 182, 183, 275, 277, 283, 284, 289], "cumul": [56, 57, 182, 183, 254, 283, 287], "pprox": [56, 57, 182, 183], "exp": [56, 57, 182, 183, 283, 348], "inner": [56, 57, 182, 183, 265, 271, 275, 277, 283, 287], "eta": [56, 182], "ln": [56, 57, 182, 183], "s_1": [56, 57, 182, 183], "s_n": [56, 57, 182, 183], "ext": [56, 57, 182, 183, 283], "_1": [56, 57, 182, 183, 283, 346, 347], "_n": [56, 57, 182, 183, 283], "_i": [56, 57, 59, 182, 183, 185, 283], "voigt": [56, 57, 182, 183, 266, 270, 283], "notat": [56, 57, 182, 183, 266, 270, 283, 330], "qte": [56, 182, 278], "fdata": [56, 182], "fmask": [56, 182], "qte_lte_pt": [56, 182], "bten": [56, 182, 252, 277, 283, 285, 337, 338, 339], "lte": [56, 182, 277], "61": [56, 110, 182, 249, 277, 283, 284, 331, 340], "pte": [56, 182, 277], "matrix_rank": [56, 182], "qtimodel": [56, 57, 182, 183, 290], "qtifit": [56, 57, 182, 183, 290], "\u03bcfa": [56, 182], "v_md": [56, 182, 283, 290], "v_shear": [56, 182, 283, 290], "shear": [56, 64, 94, 182, 190, 220, 231, 244, 275, 277, 283, 284, 287, 289, 291, 326], "v_iso": [56, 182, 283, 290], "c_md": [56, 182, 283, 290], "c_mu": [56, 182, 283, 290], "\u03bc": [56, 182], "c_m": [56, 182, 283, 290], "c_c": [56, 182, 283, 290], "k_bulk": [56, 182, 269, 270, 283, 290], "bulk": [56, 182, 283], "k_shear": [56, 182, 269, 270, 283, 290], "k_mu": [56, 182, 283, 290], "carl": [56, 57, 182, 183, 283], "fredrik": [56, 57, 182, 183, 283], "multidimension": [56, 57, 182, 183, 277, 283, 285, 337], "135": [56, 57, 81, 182, 183, 207, 283, 331], "039": [56, 57, 182, 183, 283], "reconst_qti": [56, 182], "heteroskedast": [57, 183], "mathrm": [57, 183, 277, 283, 287, 346], "s_k": [57, 183], "ldot": [57, 67, 183, 193], "ddot": [57, 183], "semi": [57, 183, 277, 287], "succeq": [57, 183], "violat": [57, 183], "unreli": [57, 183, 282], "enfoc": [57, 183], "semidefinit": [57, 183, 278, 283], "sdp": [57, 183, 283], "instruct": [57, 72, 73, 107, 110, 112, 113, 115, 119, 121, 124, 125, 183, 198, 199, 233, 324, 327, 329, 330, 333, 335, 338], "sc": [57, 183, 283], "readili": [57, 183], "licenc": [57, 183], "latest": [57, 118, 122, 183, 233, 249, 325, 341, 350], "html": [57, 107, 124, 125, 183, 229, 233, 277, 281, 326, 328, 338], "routin": [57, 125, 183, 283, 287, 288, 342], "read_dib_217_lte_pte_st": [57, 183, 290], "read_dib_70_lte_pte_st": [57, 183, 290], "showcas": [57, 58, 183, 184, 239, 240, 242, 243, 245, 337], "richer": [57, 183], "emul": [57, 183], "shorter": [57, 90, 183, 216, 287, 289], "scan": [57, 183, 282], "patient": [57, 63, 183, 189, 235, 278, 286, 289], "clinic": [57, 183, 277, 283], "filip": [57, 183], "szczepankiewicz": [57, 183, 278], "szczepankiewicz_dib_2019": [57, 183], "mark": [57, 70, 183, 196, 283, 287, 328], "_217": [57, 183], "suffix": [57, 183], "data_img": [57, 183, 278], "gtab_217": [57, 183], "data_217": [57, 183], "downsampl": [57, 81, 93, 183, 207, 219, 256, 259, 263, 265, 290, 331, 341], "_70": [57, 183], "gtab_70": [57, 183], "data_70": [57, 183], "consider": [57, 67, 93, 183, 193, 219, 262, 264, 266, 267, 269, 270, 283, 289, 304], "qtimodel_217": [57, 183], "qtifit_217": [57, 183], "qtimodel_unconstrain": [57, 183], "qtifit_unconstrain": [57, 183], "sdpdc": [57, 183, 283], "qtimodel_constrain": [57, 183], "qtifit_constrain": [57, 183], "\u00b5fa": [57, 183], "compare_qti_map": [57, 183, 290], "clearli": [57, 183, 247, 265], "fall": [57, 183, 275, 287, 289, 292, 336, 339], "sound": [57, 67, 110, 183, 193], "rich": [57, 183, 255], "despit": [57, 183, 268, 271], "cost": [57, 59, 67, 183, 185, 193, 275, 283, 284], "dens": [57, 76, 183, 202, 275, 277, 282, 342], "boito": [57, 183, 283, 342], "feragen": [57, 183, 283], "238": [57, 183, 283, 335], "118198": [57, 183], "hoge": [57, 183, 278], "waveform": [57, 183, 278], "oil": [57, 183, 278], "liquid": [57, 183, 278], "crystal": [57, 183, 278], "brief": [57, 78, 79, 183, 204, 205, 278], "dib": [57, 183, 278], "104208": [57, 183, 278], "reconst_qtiplu": [57, 183], "priori": [58, 82, 184, 208, 258, 283], "rl": [58, 184], "richardson1972": [58, 184], "constantinides1997": [58, 184], "promot": [58, 125, 184, 277, 283, 284, 328, 333], "rudin1992": [58, 184], "abil": [58, 68, 99, 110, 184, 194, 225, 240, 249, 336], "wise": [58, 90, 104, 105, 184, 216, 283, 285, 287, 289], "symmetric362": [58, 184, 278, 283], "constructor": [58, 184, 275, 277, 283, 285, 328, 336], "7e": [58, 184, 283], "csf_respons": [58, 184, 283, 289], "gm_respons": [58, 184, 283, 289], "8e": [58, 184, 283], "adequ": [58, 184, 283], "impuls": [58, 184, 283], "imprecis": [58, 184, 283], "acqua2007": [58, 184], "0017": [58, 184, 283], "0002": [58, 120, 184, 283], "003": [58, 184, 283, 289], "0008": [58, 184, 283, 289], "default_respons": [58, 184], "auto_response_sst": [58, 184], "00139919": [58, 184], "0003007": [58, 184], "7372408293461": [58, 184], "estimated_respons": [58, 184], "arang": [58, 78, 79, 80, 81, 184, 204, 205, 206, 207, 285], "rec_respons": [58, 184], "rec_response_sign": [58, 184], "doesn": [58, 110, 124, 184, 246, 255, 257, 277, 324, 325, 326, 328, 333, 342], "verbos": [58, 66, 75, 107, 184, 192, 201, 275, 279, 281, 282, 283, 284, 289, 301, 325, 333], "bear": [58, 184], "recon_typ": [58, 184, 283, 289], "n_coil": [58, 184, 283, 289], "suitabl": [58, 184, 278, 283, 346, 347], "smf": [58, 184, 283, 289], "isn": [58, 184, 229, 257, 264, 266, 277], "ipat": [58, 184, 283, 289], "asset": [58, 184, 283, 289], "cover": [58, 65, 94, 184, 191, 220, 281, 326], "wherein": [58, 184], "sequenti": [58, 80, 184, 206, 268, 284], "inclus": [58, 184, 275, 287], "neither": [58, 184, 277, 284], "f_iso": [58, 184, 283, 290], "ax0": [58, 184], "wm_iso_partit": [58, 184], "rumbafit": [58, 184, 290], "combined_odf_iso": [58, 184, 283, 290], "rumba_odf": [58, 184], "rumba_peak": [58, 184], "exchang": [58, 184, 283], "demand": [58, 184], "gb": [58, 184, 283], "singleton": [58, 184, 283, 289, 325, 328], "data_tv": [58, 184], "rumba_global_odf": [58, 184], "peak_direct": [58, 184, 290, 335, 343], "pk": [58, 184], "rumba_global_peak": [58, 184], "1972": [58, 184, 336], "bayesian": [58, 82, 184, 208, 249, 326], "josa": [58, 184], "1364": [58, 184, 337], "000055": [58, 184], "constantinid": [58, 184, 283], "atalar": [58, 184, 283], "mcveigh": [58, 184, 283], "1997": [58, 184, 283, 329, 336], "offici": [58, 184, 249, 250, 252, 256, 259, 283], "852": [58, 184, 283, 326, 329], "857": [58, 184, 283, 325], "rudin": [58, 184, 283], "osher": [58, 184, 283], "fatemi": [58, 184, 283], "1992": [58, 184, 283, 336], "nonlinear": [58, 68, 104, 105, 184, 194, 232, 237, 275, 278, 283, 289, 296, 340, 343], "physica": [58, 184, 283], "phenomena": [58, 184, 283], "259": [58, 184, 283, 332], "268": [58, 184, 283, 332], "0167": [58, 184, 277, 283], "2789": [58, 184, 283], "90242": [58, 184, 283], "dellacqua2007": [58, 184], "rizzo": [58, 184, 283], "scifo": [58, 184, 283], "clark": [58, 184, 283], "scotti": [58, 184, 283], "fazio": [58, 184, 283], "bio": [58, 184, 283], "462": [58, 184, 283, 333], "472": [58, 184, 283, 333], "tbme": [58, 184, 283], "888830": [58, 184, 283], "07": [58, 104, 105, 184, 277, 278, 280, 283], "067": [58, 184, 234], "reconst_rumba": [58, 184], "dpp": [59, 185, 341], "guid": [59, 80, 117, 122, 127, 185, 206, 277, 282, 328, 335, 338], "examin": [59, 70, 185, 196, 270, 277, 283, 285, 344], "elast": [59, 185, 283], "net": [59, 185, 256, 259, 277, 282, 283, 289, 302, 332], "zou2005": [59, 185, 283], "y_i": [59, 185, 281, 350], "hat": [59, 107, 185, 231, 290], "lambda": [59, 80, 185, 206, 275, 283, 324], "w_j": [59, 185], "2_j": [59, 185], "balanc": [59, 185, 283], "l2": [59, 185, 231, 255, 256, 277, 283, 284], "autom": [59, 71, 72, 73, 87, 124, 185, 197, 198, 199, 213, 244, 286, 326], "entri": [59, 124, 185, 277, 283, 287, 324, 346], "put": [59, 100, 102, 107, 125, 185, 226, 228, 251, 252, 259, 262, 269, 275, 283, 289, 333], "sf_fit": [59, 185], "sf_odf": [59, 185], "sf_peak": [59, 185], "sf_both": [59, 185], "zou": [59, 185, 283], "soc": [59, 61, 103, 185, 187, 277, 283], "320": [59, 185, 283, 333], "reconst_sfm": [59, 185], "sf": [60, 186, 277, 280, 283, 329], "00015": [60, 186], "symm_sign": [60, 186], "seri": [60, 65, 100, 102, 111, 117, 124, 186, 191, 226, 228, 275, 285, 329, 333, 336, 337, 350], "sh_basi": [60, 186, 283], "reproject": [60, 186], "high_res_sph": [60, 186], "symm_reconst": [60, 186], "fail": [60, 65, 108, 124, 186, 191, 247, 275, 281, 283, 324, 325, 326, 328, 329, 333, 334, 335, 337, 338, 341, 342], "asymmetr": [60, 186, 232, 275, 289, 316, 341, 343, 350], "odf2": [60, 186], "n_pts_hemispher": [60, 186], "int": [60, 96, 107, 186, 222, 234, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 295, 296, 298, 299, 300, 301, 304, 305, 308, 309, 310, 311, 315, 316, 317, 318, 320, 321, 322, 326, 340, 342, 346, 348], "asym_odf": [60, 186], "asym_sign": [60, 186], "asym_reconst": [60, 186], "deal": [60, 63, 186, 189, 265, 284, 340, 341, 344], "full_basi": [60, 186, 283], "asym_reconst_ful": [60, 186], "reconst_sh": [60, 186, 341], "merlet2013": [61, 187], "\u00f6zarslan2008": [61, 187], "\u00f6zarslan2009": [61, 187], "shoremodel": [61, 62, 187, 188, 290], "fetch_isbi2013_2shel": [61, 187, 290], "contest": [61, 187], "xmin": [61, 187], "xmax": [61, 187], "ymin": [61, 187], "ymax": [61, 187], "zmin": [61, 187], "zmax": [61, 187], "zeta": [61, 187, 283], "lambdan": [61, 187, 283], "lambdal": [61, 187, 283], "cheng2011": [61, 187], "700": [61, 104, 105, 187, 283, 324], "asm": [61, 62, 187, 188, 283], "asmfit": [61, 62, 187, 188, 283], "proc": [61, 103, 187, 277, 283], "intl": [61, 103, 187, 283], "mag": [61, 103, 187, 283], "toronto": [61, 187], "honolulu": [61, 187], "hi": [61, 187, 277, 283], "eap": [61, 187, 277, 283], "compress": [61, 93, 187, 219, 256, 281, 283, 287, 289, 304, 305, 324], "cheng": [61, 187, 282, 283, 285], "insight": [61, 187, 255, 283], "unifi": [61, 187, 277, 283, 288, 289, 311], "reconst_shor": [61, 187], "shore_map": [62, 188], "ON": [62, 188, 277, 283, 284, 289], "reconst_shore_metr": [62, 188], "physiolog": [63, 189, 283, 289, 307], "pernici": [63, 189], "wrong": [63, 110, 189, 264, 277, 283, 325, 326, 327, 329, 331, 333, 334, 341], "particip": [63, 189, 251, 284], "young": [63, 189], "children": [63, 126, 189, 275, 277, 279, 283, 289, 290, 310, 317], "prone": [63, 107, 189], "actual": [63, 93, 102, 109, 110, 189, 219, 228, 248, 252, 264, 266, 270, 275, 277, 283, 284, 285, 325, 326, 346, 347], "yendiki": [63, 189], "yendiki2013": [63, 189], "refit": [63, 189], "chang2005": [63, 189, 283], "intermitt": [63, 189, 329, 335, 341], "ne": [63, 189], "fetch_stanford_hardi": [63, 64, 65, 189, 190, 191, 290], "dti_wl": [63, 189], "roi_idx": [63, 189], "fit_wl": [63, 189], "fa1": [63, 189], "evals1": [63, 189], "evecs1": [63, 189], "cfa1": [63, 189], "tensor_ellipsoids_wl": [63, 189], "noisy_data": [63, 189], "noisy_idx": [63, 189], "fit_wls_noisi": [63, 189], "fa2": [63, 189], "evals2": [63, 189], "evecs2": [63, 189], "cfa2": [63, 189], "tensor_ellipsoids_wls_noisi": [63, 189], "distort": [63, 189, 239, 282], "dti_restor": [63, 189], "fit_restore_noisi": [63, 189], "fa3": [63, 189], "evals3": [63, 189], "evecs3": [63, 189], "cfa3": [63, 189], "tensor_ellipsoids_restore_noisi": [63, 189], "convinc": [63, 189, 263, 271], "ourselv": [63, 189, 230, 267], "chung2006": [63, 189], "ravel": [63, 78, 80, 189, 204, 206, 331], "dti_fa_distribut": [63, 189], "resembl": [63, 189, 258, 260, 269, 271, 278], "importantli": [63, 189], "believ": [63, 189], "koldewynb": [63, 189], "kakunooria": [63, 189], "kanwish": [63, 189], "fischl": [63, 189], "reject": [63, 189, 283, 289, 306, 307], "1088": [63, 189, 283, 289, 306, 307, 326], "chung": [63, 189, 283, 338], "sw": [63, 189, 283, 289, 307], "henri": [63, 90, 189, 216, 283, 289, 307], "uncertainti": [63, 189, 229, 255, 283, 289, 307], "531": [63, 189, 283, 289, 307, 333], "541": [63, 189, 283, 289, 307, 333], "restore_dti": [63, 189, 326], "maxim": [64, 65, 67, 70, 71, 82, 126, 190, 191, 193, 196, 197, 208, 244, 256, 275, 277, 279, 280, 283, 284, 289, 290, 292, 300, 304, 305, 310, 317, 318, 324, 331, 332, 333, 334], "mutual": [64, 65, 190, 191, 244, 275, 289, 291], "mattes03": [64, 65, 190, 191, 275], "ant": [64, 65, 71, 72, 73, 82, 190, 191, 197, 198, 199, 208, 244, 275], "avants11": [64, 65, 71, 72, 73, 190, 191, 197, 198, 199, 244], "twice": [64, 190, 230, 277, 287, 326, 329], "simplifi": [64, 81, 190, 207, 230, 249, 275, 281, 283, 287, 328, 332, 338, 344], "regtool": [64, 65, 70, 71, 72, 73, 190, 191, 196, 197, 198, 199, 290, 333, 334, 337], "fetch_syn_data": [64, 190, 290], "transform_centers_of_mass": [64, 190, 290], "mutualinformationmetr": [64, 65, 71, 190, 191, 197, 290], "affineregistr": [64, 65, 71, 190, 191, 197, 290, 325, 341], "translationtransform3d": [64, 65, 71, 190, 191, 197], "rigidtransform3d": [64, 65, 71, 190, 191, 197], "affinetransform3d": [64, 71, 190, 197], "static_data": [64, 65, 190, 191], "static_affin": [64, 65, 71, 73, 190, 191, 197, 199, 275], "static_img": [64, 65, 190, 191], "hardi150": [64, 65, 190, 191, 239, 243], "static_grid2world": [64, 65, 190, 191, 275], "folder2": [64, 190], "moving_data": [64, 190], "moving_affin": [64, 65, 71, 73, 190, 191, 197, 199, 275], "moving_img": [64, 190], "moving_grid2world": [64, 65, 190, 191, 275], "affine_map": [64, 65, 71, 73, 190, 191, 197, 199, 275], "overlay_slic": [64, 65, 71, 73, 190, 191, 197, 199, 290], "resampled_0": [64, 190], "resampled_1": [64, 190], "resampled_2": [64, 190], "rough": [64, 67, 190, 193], "c_of_mass": [64, 190], "occupi": [64, 190, 277, 283, 285], "roughli": [64, 71, 73, 87, 190, 197, 199, 213, 275, 284], "transformed_com_0": [64, 190], "transformed_com_1": [64, 190], "transformed_com_2": [64, 190], "translat": [64, 65, 71, 94, 190, 191, 197, 220, 231, 244, 277, 284, 287, 289, 290, 291, 316, 335], "joint": [64, 190, 275, 289, 291, 348], "margin": [64, 190, 275, 289, 291], "integ": [64, 94, 125, 190, 220, 229, 275, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 324, 326, 333, 337, 340], "consum": [64, 190, 261], "nbin": [64, 65, 71, 190, 191, 197, 275, 284, 289, 291], "sampling_prop": [64, 65, 71, 190, 191, 197, 289, 291], "stuck": [64, 110, 190], "optima": [64, 190], "pyramid": [64, 72, 73, 190, 198, 199, 275, 289, 292], "flexibl": [64, 80, 190, 206, 283, 326, 350], "indirectli": [64, 190], "coarsest": [64, 190, 275, 289, 291], "medium": [64, 85, 190, 211, 289, 316], "finest": [64, 72, 73, 190, 198, 199, 275, 289, 291], "level_it": [64, 65, 70, 71, 72, 73, 190, 191, 196, 197, 198, 199, 275, 289, 291, 292], "request": [64, 107, 109, 110, 119, 190, 232, 249, 260, 268, 275, 278, 288, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347], "configur": [64, 70, 72, 107, 110, 114, 118, 190, 196, 198, 233, 249, 268, 282, 283, 336, 340], "nx": [64, 190, 277], "ny": [64, 110, 126, 190, 277], "nz": [64, 190, 277], "ahead": [64, 96, 110, 190, 222, 251, 265, 327], "affreg": [64, 65, 190, 191], "dictionari": [64, 96, 122, 190, 222, 275, 277, 278, 281, 282, 283, 285, 289, 321, 322, 329], "regtransform": [64, 190], "params0": [64, 71, 190, 197, 275], "starting_affin": [64, 65, 71, 190, 191, 197, 275, 289, 341], "transformed_trans_0": [64, 190], "transformed_trans_1": [64, 190], "transformed_trans_2": [64, 190], "rigid": [64, 65, 67, 68, 71, 190, 191, 193, 194, 197, 244, 284, 289, 290, 291, 296, 316, 318, 329, 335, 338, 341], "slight": [64, 190, 230, 264, 271], "transformed_rigid_0": [64, 190], "transformed_rigid_1": [64, 190], "transformed_rigid_2": [64, 190], "transformed_affine_0": [64, 190], "transformed_affine_1": [64, 190], "transformed_affine_2": [64, 190], "affine_registr": [64, 65, 190, 191, 290], "register_dwi_to_templ": [64, 190, 290], "center_of_mass": [64, 190, 290], "string": [64, 100, 102, 122, 190, 226, 228, 234, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 329, 330, 337, 338], "rigid_isosc": [64, 190, 289, 290, 291], "rigid_sc": [64, 190, 289, 290, 291], "xformed_img": [64, 65, 190, 191], "xformed_affine_0": [64, 190], "xformed_affine_1": [64, 190], "xformed_affine_2": [64, 190], "bvals_fil": [64, 190, 289, 309, 319], "bvecs_fil": [64, 190, 289, 309, 319], "opposit": [64, 87, 190, 213, 275, 283, 328], "revers": [64, 80, 190, 206, 256, 282, 284, 351], "xformed_dwi": [64, 190], "templat": [64, 70, 71, 104, 105, 190, 196, 197, 253, 275, 278, 283, 324, 326, 337], "reg_method": [64, 190, 275], "aff": [64, 66, 190, 192, 275], "xformed_dwi_0": [64, 190], "xformed_dwi_1": [64, 190], "xformed_dwi_2": [64, 190], "dwi_to_templ": [64, 190], "matt": [64, 65, 126, 190, 191, 275, 327, 329, 335], "haynor": [64, 65, 190, 191, 275], "vessel": [64, 65, 190, 191, 275], "lewellen": [64, 65, 190, 191, 275], "eubank": [64, 65, 190, 191, 275], "pet": [64, 65, 190, 191, 275], "ct": [64, 65, 190, 191, 275, 341], "chest": [64, 65, 190, 191, 275], "avant": [64, 65, 71, 72, 73, 82, 190, 191, 197, 198, 199, 208, 244, 275], "tustison": [64, 65, 71, 72, 73, 82, 190, 191, 197, 198, 199, 208, 244], "song": [64, 65, 71, 72, 73, 190, 191, 197, 198, 199, 244], "affine_registration_3d": [64, 190], "pixel": [65, 70, 191, 196, 239, 256, 263, 265, 267, 271, 275, 279, 284, 287, 288], "circumst": [65, 191], "cardiac": [65, 191], "priorit": [65, 191], "heart": [65, 126, 191], "register_seri": [65, 191, 290], "pad_bi": [65, 191], "mode": [65, 82, 120, 191, 208, 233, 234, 243, 255, 275, 277, 281, 282, 284, 285, 287, 288, 289, 290, 306, 307, 311, 317, 324, 327, 332, 333], "constant_valu": [65, 191], "affmat": [65, 191], "co": [65, 93, 109, 124, 191, 219, 230, 275, 277, 285, 287, 350, 351], "sin": [65, 191, 230, 277, 285, 287, 351], "deregist": [65, 191], "centr": [65, 126, 191, 229, 277, 278], "transl": [65, 191], "static_mask": [65, 191, 275], "moving_mask": [65, 191, 275], "conveni": [65, 100, 102, 117, 191, 226, 228, 289], "reg_func": [65, 191], "fignam": [65, 191], "scope": [65, 191], "except": [65, 107, 109, 122, 191, 235, 265, 275, 277, 278, 282, 283, 284, 289, 328, 332, 334], "hopefulli": [65, 191, 266, 271], "transformed_pipelin": [65, 191], "border": [65, 99, 191, 225, 333], "troublesom": [65, 191], "sz": [65, 191], "pd": [65, 191], "val": [65, 104, 105, 191, 283, 288, 325, 342], "squares_st": [65, 191], "int32": [65, 191], "squares_mv": [65, 191], "deregistered_squar": [65, 191], "masked_stat": [65, 191], "transformed_squar": [65, 191], "pin": [65, 191, 335, 342], "attempt": [65, 108, 191, 272, 283, 336], "transformed_squares_mask": [65, 191], "transformed_squares_mask_2": [65, 191], "transformed_squares_mask_3": [65, 191], "xform": [65, 191, 275], "series_affin": [65, 191, 275], "series_mask_1": [65, 191], "series_mask_2": [65, 191], "affine_registration_mask": [65, 191], "coregist": [66, 192], "atla": [66, 75, 76, 87, 88, 104, 105, 192, 201, 202, 213, 214, 235, 236, 278, 284, 286], "garyfallidis15": [66, 67, 75, 192, 193, 201, 236, 244, 275, 289, 318], "shuffl": [66, 192, 265, 282], "pair": [66, 94, 192, 220, 271, 275, 277, 281, 287, 288, 289, 296], "pairwis": [66, 67, 90, 192, 193, 216, 275], "centroid": [66, 75, 78, 80, 81, 87, 89, 192, 201, 204, 206, 207, 213, 215, 275, 284, 286, 289, 290, 318], "streamlinear": [66, 67, 75, 192, 193, 201, 290, 329, 333], "groupwise_slr": [66, 192, 290], "read_five_af_bundl": [66, 192, 290], "show_bundl": [66, 192, 290], "basicconfig": [66, 192], "arcuat": [66, 75, 76, 88, 96, 192, 201, 202, 214, 222, 235, 236, 278], "fasciculi": [66, 192], "57": [66, 104, 105, 192, 283, 331], "save_a": [66, 192, 288], "before_group_registr": [66, 192], "nativ": [66, 67, 93, 96, 97, 192, 193, 219, 222, 223, 234, 235, 236, 275, 281, 288, 289, 311, 318], "bundles_reg": [66, 192], "after_group_registr": [66, 192], "117": [66, 67, 81, 192, 193, 207, 236, 244, 275, 278, 285, 289, 318, 331], "124": [66, 67, 81, 192, 193, 207, 236, 244, 275, 278, 289, 318, 331], "simplif": [66, 67, 78, 79, 80, 81, 87, 103, 192, 193, 204, 205, 206, 207, 213, 284, 287], "frontier": [66, 78, 79, 80, 81, 87, 103, 107, 192, 204, 205, 206, 207, 213, 234, 235, 236, 237, 249, 250, 284, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "neurosci": [66, 71, 78, 79, 80, 81, 87, 103, 126, 192, 197, 204, 205, 206, 207, 213, 248, 284, 287], "175": [66, 78, 79, 80, 81, 87, 103, 192, 204, 205, 206, 207, 213, 284, 287], "romerobascones22": [66, 192], "romero": [66, 192, 340, 341, 342], "bascon": [66, 192, 340, 341, 342], "bundleatlas": [66, 192], "atlas": [66, 104, 105, 192, 275, 278], "bundle_group_registr": [66, 192], "garyfallidis14": [67, 193, 234, 235, 236, 237, 275, 289, 318], "concept": [67, 68, 89, 117, 127, 193, 194, 215, 252, 265, 347], "cingulum": [67, 89, 97, 193, 215, 223, 278], "sleep": [67, 193], "two_cingulum_bundl": [67, 89, 193, 215, 290], "cb_subj1": [67, 89, 193, 215], "cb_subj2": [67, 193], "streamlinelinearregistr": [67, 193, 290], "set_number_of_point": [67, 68, 78, 79, 93, 193, 194, 204, 205, 219, 287, 324, 326, 327, 329, 333], "srr": [67, 193], "srm": [67, 193], "finish": [67, 72, 110, 120, 193, 198, 233, 254, 257, 270, 272, 282, 333], "cb_subj2_align": [67, 193], "show_both_bundl": [67, 89, 193, 215], "lines_actor": [67, 71, 193, 197], "rotatez": [67, 89, 193, 215], "orang": [67, 71, 97, 193, 197, 223], "before_registr": [67, 193], "after_registr": [67, 193], "stai": [67, 80, 193, 206, 346, 347], "bmd": [67, 193, 275], "operatornam": [67, 193, 230, 348, 351], "flip": [67, 71, 75, 193, 197, 201, 284, 327, 337, 350], "mdf": [67, 68, 75, 78, 81, 193, 194, 201, 204, 207, 275, 287, 289, 290, 296, 316, 337], "eq": [67, 193, 275, 277, 283, 327], "row": [67, 76, 80, 93, 94, 99, 193, 202, 206, 219, 220, 225, 231, 265, 271, 275, 277, 278, 281, 283, 284, 285, 287, 288, 335], "primarili": [67, 193, 283], "visser": [67, 193], "intact": [67, 193, 260, 275], "x_": [67, 193], "prove": [67, 193, 265], "nonneg": [67, 193, 283], "satisfi": [67, 193, 277, 287], "inequ": [67, 193, 277, 283], "formul": [67, 82, 193, 208, 277, 283, 346, 348], "underset": [67, 193], "compos": [67, 193, 275, 277, 283, 289], "bundle_registr": [67, 193], "nonlinearli": [68, 194, 237, 275, 289, 296], "chandio23": [68, 194, 237], "chandio20": [68, 194, 235], "uncin": [68, 194, 235, 237], "streamwarp": [68, 194, 290], "bundlewarp_vector_fil": [68, 194, 290], "bundlewarp_shape_analysi": [68, 194, 290], "fetch_bundle_warp_dataset": [68, 194, 290], "unlist_streamlin": [68, 194, 275, 290], "viz_two_bundl": [68, 194, 290], "viz_vector_field": [68, 194, 290], "viz_displacement_mag": [68, 194, 290], "loaf": [68, 194], "uf_l": [68, 194, 235], "figshar": [68, 104, 105, 194, 235, 236, 237], "test_bundles_for_dipi": [68, 194, 237], "22557733": [68, 194, 237], "bundle_warp_fil": [68, 194], "s_uf_l_path": [68, 194], "s_uf_l": [68, 194, 237], "m_uf_l_path": [68, 194], "m_uf_l": [68, 194, 237], "uf_subj1": [68, 194], "uf_subj2": [68, 194], "static_and_mov": [68, 194], "trade": [68, 194, 237, 275, 289, 296], "deformed_bundl": [68, 194, 275], "moving_align": [68, 194, 275], "match_pair": [68, 194], "warp_map": [68, 194], "max_it": [68, 194, 275, 284, 289, 296], "warp": [68, 70, 71, 72, 73, 194, 196, 197, 198, 199, 237, 244, 275, 278, 288, 289, 292, 296, 340], "static_and_partially_deform": [68, 194], "linearli": [68, 194, 275, 289, 296], "linearly_and_nonlinearly_mov": [68, 194], "c1": [68, 194, 278, 288], "points_align": [68, 194, 288], "partially_vectorfield": [68, 194], "partially_vectorfield_over_linearly_mov": [68, 194], "partially_deformation_magnitude_over_linearly_mov": [68, 194], "new_tractogram": [68, 194], "partially_deformed_bundl": [68, 194], "deformed_bundle2": [68, 194], "dist": [68, 80, 124, 194, 206, 275, 277, 284, 287, 289, 290, 296], "static_and_fully_deform": [68, 194], "fully_vectorfield": [68, 194], "fully_vectorfield_over_linearly_mov": [68, 194], "fully_deformation_magnitude_over_linearly_mov": [68, 194], "no_disk": [68, 194, 275, 286, 289, 294, 295], "fully_deformed_bundl": [68, 194], "chandio": [68, 75, 88, 89, 126, 194, 201, 214, 215, 235, 237, 275, 284, 286, 288, 289, 295, 296, 311, 316, 340], "biorxiv": [68, 92, 194, 218, 237, 275, 289, 296], "stnd": [68, 194], "neurip": [68, 194], "bundlewarp_registr": [68, 194], "skimag": [70, 196, 284, 324, 326], "imwarp": [70, 71, 72, 73, 196, 197, 198, 199, 290, 326], "symmetricdiffeomorphicregistr": [70, 71, 72, 73, 196, 197, 198, 199, 290], "ssdmetric": [70, 72, 196, 198, 290], "ellips": [70, 196, 277], "draw_ellips": [70, 196], "rr": [70, 196], "img_ref": [70, 196], "img_in": [70, 196], "show_imag": [70, 196], "img_warp": [70, 196], "fig_nam": [70, 196], "axarr": [70, 196], "ssd": [70, 72, 196, 198, 244, 275, 283, 289, 292], "02f": [70, 196], "step_length": [70, 196, 275, 289, 292], "sdr": [70, 71, 72, 73, 196, 197, 198, 199, 328, 329, 342], "ndim": [70, 72, 196, 198, 277, 283, 285, 335], "inv_it": [70, 72, 196, 198, 275, 289, 292], "ss_sigma_factor": [70, 196, 275, 289, 292], "opt_tol": [70, 196, 275, 289, 292], "plot_2d_diffeomorphic_map": [70, 72, 196, 198, 290, 333], "register_binary_fuzzi": [70, 196], "greene17": [71, 197], "ra": [71, 96, 197, 222, 234, 277, 281, 284], "vox_siz": [71, 197, 281], "t2": [71, 104, 105, 197, 278, 279, 324], "mni": [71, 75, 104, 105, 197, 201, 235, 236, 278, 324, 326], "2x2x2": [71, 197], "fetch_mni_templ": [71, 197, 290], "read_mni_templ": [71, 197, 290], "img_t2_mni": [71, 197], "new_zoom": [71, 197, 275], "b0_idx_stanford": [71, 197], "b0_data_stanford": [71, 197], "skull": [71, 72, 73, 82, 197, 198, 199, 208, 253, 271], "b0_masked_stanford": [71, 197], "mean_b0_masked_stanford": [71, 197], "rigidli": [71, 197], "appropri": [71, 72, 96, 99, 104, 105, 107, 197, 198, 222, 225, 240, 254, 257, 261, 277, 278, 281, 288, 341], "eventu": [71, 197, 260, 268], "syn": [71, 72, 73, 82, 104, 105, 197, 198, 199, 208, 244, 275, 324, 326, 341], "transform_origin": [71, 197, 290], "mismatch": [71, 197, 252, 326, 329], "affine_reg": [71, 197, 244], "rigid_map": [71, 197], "bump": [71, 124, 197, 341], "highres_map": [71, 197], "avants09": [71, 72, 73, 197, 198, 199, 244], "ccmetric": [71, 72, 73, 197, 198, 199, 290, 326, 335], "warped_mov": [71, 72, 73, 197, 198, 199, 244, 275, 289], "transformed_sagitt": [71, 197], "transformed_coron": [71, 197], "transformed_axi": [71, 197], "whose": [71, 197, 275, 289], "extent": [71, 197], "isocent": [71, 197], "target_isocent": [71, 197], "diag": [71, 197, 277, 283], "origin_affin": [71, 197], "fov": [71, 197], "mirror": [71, 114, 197, 231, 277, 290], "zoom": [71, 96, 99, 197, 222, 225, 239, 240, 275, 281, 329], "implicitli": [71, 197], "mni_streamlin": [71, 197], "deform_field": [71, 197, 287], "get_forward_field": [71, 197, 275, 290], "stream_to_current_grid": [71, 197, 287], "current_grid_to_world": [71, 197, 287], "stream_to_ref_grid": [71, 197, 287], "ref_grid_to_world": [71, 197, 287], "show_template_bundl": [71, 197], "template_actor": [71, 197], "streamlines_dsn_mni": [71, 197], "epstein": [71, 72, 73, 197, 198, 199, 244], "gee": [71, 72, 73, 82, 197, 198, 199, 208, 244], "correl": [71, 72, 73, 197, 198, 199, 239, 244, 249, 275, 277, 289, 292, 326], "elderli": [71, 72, 73, 197, 198, 199, 244], "neurodegen": [71, 72, 73, 197, 198, 199, 244], "grafton": [71, 197], "streamline_registr": [71, 197, 290], "fname_mov": [72, 198], "reg_o": [72, 198, 278], "fname_stat": [72, 198], "reg_c": [72, 198, 278], "overlay_imag": [72, 198, 290], "input_imag": [72, 198], "letter": [72, 107, 198, 287], "decis": [72, 198, 267], "dim": [72, 198, 249, 275, 328, 342], "n_0": [72, 73, 198, 199], "n_1": [72, 73, 198, 199], "n_k": [72, 73, 198, 199, 283], "diffeomorphicmap": [72, 73, 198, 199, 288, 290, 338, 342], "forth": [72, 73, 198, 199], "diffeomorphic_map": [72, 198], "direct_warp_result": [72, 198], "warped_stat": [72, 73, 198, 199], "inverse_warp_result": [72, 198], "callback_cc": [72, 198], "statu": [72, 109, 110, 117, 120, 198, 251, 275, 324, 336, 341], "react": [72, 198, 328], "registrationstag": [72, 198, 290], "scale_end": [72, 198], "wmove": [72, 198], "moving_imag": [72, 198, 275], "wstatic": [72, 198], "static_imag": [72, 198, 275], "t1_name": [72, 198], "b0_name": [72, 198], "syn_data": [72, 73, 104, 105, 198, 199], "sigma_diff": [72, 198, 275, 341], "callback": [72, 96, 99, 198, 222, 225, 275, 277, 282, 288], "t1_slices_input": [72, 198], "t1_slices_r": [72, 198], "inv_warp": [72, 198], "t1_slices_res2": [72, 198], "diffeomorphic_map_b0": [72, 198], "syn_registration_2d": [72, 198], "modal": [73, 199, 255, 256, 275, 289, 292], "stanford_b0": [73, 199], "stanford_b0_affin": [73, 199], "b0_fname": [73, 199], "syn_b0": [73, 199], "syn_b0_affin": [73, 199], "stanford_b0_mask": [73, 199], "syn_b0_mask": [73, 199], "suppos": [73, 110, 199, 252, 333], "pre_align": [73, 199], "02783543e": [73, 199], "00": [73, 97, 199, 223], "83019053e": [73, 199], "07735639e": [73, 199], "57654118e": [73, 199], "34051706e": [73, 199], "41918267e": [73, 199], "66525861e": [73, 199], "23579799e": [73, 199], "34288908e": [73, 199], "90262026e": [73, 199], "80820307e": [73, 199], "46216651e": [73, 199], "00000000e": [73, 199], "input_3d": [73, 199], "syn_registration_3d": [73, 199, 324], "brain_extraction_dwi_1": [74, 200], "garyfallidis17": [75, 87, 201, 213, 236, 275, 284, 289, 313, 316, 318], "whole_brain_slr": [75, 201], "get_two_hcp842_bundl": [75, 76, 87, 88, 201, 202, 213, 214, 290], "fetch_target_tractogram_hcp": [75, 76, 201, 202, 290], "fetch_bundle_atlas_hcp842": [75, 76, 88, 201, 202, 214, 290], "get_bundle_atlas_hcp842": [75, 201, 290], "get_target_tractogram_hcp": [75, 76, 201, 202, 290], "target_fil": [75, 201], "target_fold": [75, 201], "atlas_fil": [75, 88, 201, 214], "atlas_fold": [75, 88, 201, 214], "all_bundles_fil": [75, 201], "sft_atla": [75, 201], "atlas_head": [75, 201], "sft_target": [75, 201], "target_head": [75, 201], "tractograms_initi": [75, 76, 201, 202], "qb_centroids1": [75, 201], "qb_centroids2": [75, 201], "x0": [75, 201, 275, 277, 284, 289, 318, 335], "rng": [75, 89, 201, 215, 275, 284, 287, 290, 337], "randomst": [75, 89, 201, 215, 275, 282, 284, 287], "slr_transform": [75, 201, 289, 316], "npy": [75, 201, 229, 235, 236, 281, 289, 324], "tractograms_after_registr": [75, 201], "tri": [75, 201, 252, 260, 264, 269, 270, 288], "kei": [75, 96, 104, 107, 113, 201, 222, 237, 275, 277, 278, 281, 283, 286, 287, 289, 321, 322, 329, 330, 331, 333, 341], "millimet": [75, 93, 201, 219, 229, 275, 283, 284], "model_clust_thr": [75, 201, 284, 289, 316], "reduction_thr": [75, 201, 284, 289, 316], "pruning_thr": [75, 201, 284, 289, 316], "reduction_dist": [75, 201, 284, 289, 316], "pruning_dist": [75, 201, 284, 289, 316], "diferect": [75, 201], "mam": [75, 201, 284, 289, 316, 336], "neighbour": [75, 201, 279, 289, 310], "model_af_l_fil": [75, 76, 87, 88, 201, 202, 213, 214], "model_cst_l_fil": [75, 76, 87, 88, 201, 202, 213, 214], "sft_af_l": [75, 76, 88, 201, 202, 214], "model_af_l": [75, 76, 87, 88, 201, 202, 213, 214], "17281532": [75, 76, 88, 201, 202, 214], "55606842": [75, 76, 88, 201, 202, 214], "92485857": [75, 76, 88, 201, 202, 214], "360": [75, 76, 88, 201, 202, 214, 333], "46": [75, 76, 88, 109, 201, 202, 214, 265, 283, 331], "028": [75, 76, 88, 201, 202, 214], "89": [75, 76, 81, 82, 88, 201, 202, 207, 208, 214, 234, 283, 325, 331, 340], "af_l_model_bundl": [75, 76, 201, 202], "rb": [75, 125, 201, 284, 339], "recognized_af_l": [75, 76, 201, 202], "af_l_label": [75, 201], "recogn": [75, 76, 124, 201, 202, 284, 289, 290, 313, 316], "model_bundl": [75, 201, 284, 286], "af_l_recognized_bundl": [75, 76, 201, 202], "reco_af_l": [75, 201], "af_l_rec_1": [75, 201], "af_l_org_1": [75, 201], "af_l_recognized_bundle2": [75, 201], "af_l_rec_2": [75, 201], "af_l_org_2": [75, 201], "af_l_recognized_bundle3": [75, 201], "af_l_rec_3": [75, 201], "af_l_org_3": [75, 201], "rule": [75, 107, 117, 201, 249, 271, 275, 282, 324], "thumb": [75, 117, 201], "r_recognized_af_l": [75, 201], "r_af_l_label": [75, 201], "pruned_streamlin": [75, 201, 284], "af_l_refine_recognized_bundl": [75, 201], "af_l_rec_refin": [75, 201], "af_l_org_refin": [75, 201], "sft_cst_l": [75, 201], "model_cst_l": [75, 87, 201, 213], "cst_l_model_bundl": [75, 201], "recognized_cst_l": [75, 201], "cst_l_label": [75, 201], "cst_l_recognized_bundl": [75, 201], "reco_cst_l": [75, 201], "cst_l_rec_1": [75, 201], "cst_l_org_1": [75, 201], "cst_l_recognized_bundle2": [75, 201], "cst_l_rec_2": [75, 201], "cst_l_org_2": [75, 201], "cst_l_recognized_bundle3": [75, 201], "cst_l_rec_3": [75, 201], "cst_l_org_3": [75, 201], "r_recognized_cst_l": [75, 201], "r_cst_l_label": [75, 201], "cst_l_refine_recognized_bundl": [75, 201], "cst_l_rec_refin": [75, 201], "cst_l_org_refin": [75, 201], "recognit": [75, 87, 103, 104, 105, 201, 213, 236, 275, 284, 289, 313, 316, 318, 328], "chandio2020": [75, 88, 89, 201, 214, 215, 284, 286, 289, 295, 316], "risach": [75, 88, 89, 201, 214, 215, 235, 284, 286, 289, 295, 316], "bullock": [75, 88, 89, 201, 214, 215, 235, 284, 286, 289, 295, 316, 341], "fc": [75, 88, 89, 201, 214, 215, 235, 284, 286, 289, 295, 316], "koudoro": [75, 88, 89, 96, 126, 201, 214, 215, 222, 235, 284, 286, 288, 289, 295, 311, 316, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 343], "harezlak": [75, 88, 89, 201, 214, 215, 235, 284, 286, 289, 295, 316], "investig": [75, 88, 89, 121, 201, 214, 215, 235, 237, 283, 284, 286, 289], "rep": [75, 88, 89, 201, 214, 215, 235, 284, 286, 289, 295, 316], "17149": [75, 88, 89, 201, 214, 215, 235, 284, 286, 289, 295, 316], "bundle_extract": [75, 201, 329, 336], "stonge2022": [76, 202, 284], "fss": [76, 202, 290], "faststreamlinesearch": [76, 202, 290], "nearest_from_matrix_row": [76, 202, 290], "hcp_file": [76, 202], "faststreamlinessearch": [76, 202], "ref_streamlin": [76, 202, 284], "tree": [76, 112, 202, 233, 284, 289], "max_radiu": [76, 202, 284], "radius_search": [76, 202, 284, 290], "cautiou": [76, 202], "fs_tree_af": [76, 202], "coo_mdist_mtx": [76, 202], "ids_": [76, 202], "ids_ref": [76, 202], "col": [76, 99, 202, 225], "af": [76, 87, 88, 96, 202, 213, 214, 222, 277, 278], "nn_": [76, 202], "nn_ref": [76, 202], "nn_dist": [76, 202], "colormap_lookup_t": [76, 90, 97, 99, 202, 216, 223, 225], "scale_rang": [76, 90, 97, 99, 202, 216, 223, 225], "lookup_colormap": [76, 90, 97, 99, 202, 216, 223, 225], "scalar_bar": [76, 90, 97, 202, 216, 223], "af_l_recognized_bundle_dist": [76, 202], "ref_color": [76, 202], "af_l_model_bundle_reach": [76, 202], "neuroinformat": [76, 82, 103, 107, 126, 202, 208, 232, 234, 235, 236, 237, 249, 250, 284, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "fast_streamline_search": [76, 202], "familiar": [78, 79, 204, 205, 253], "get_streamlin": [78, 79, 204, 205], "fornix": [78, 79, 80, 81, 204, 205, 206, 207, 249, 278, 284], "identityfeatur": [78, 79, 204, 205], "unalt": [78, 204], "averagepointwiseeuclideanmetr": [78, 79, 87, 204, 205, 213, 284], "nb_point": [78, 79, 87, 204, 205, 213, 284, 326], "qb": [78, 79, 80, 81, 87, 204, 205, 206, 207, 213, 284, 328], "nb": [78, 79, 81, 204, 205, 207, 283], "191": [78, 79, 81, 204, 205, 207, 284, 332], "47": [78, 81, 104, 105, 204, 207, 249, 278, 284, 331, 339], "predetermin": [78, 204, 256], "fly": [78, 79, 110, 204, 205, 230], "perman": [78, 204], "centerofmassfeatur": [78, 204], "graviti": [78, 204, 275], "wiki": [78, 79, 80, 204, 205, 206, 230, 277, 278, 283], "euclideanmetr": [78, 204], "belong": [78, 79, 80, 94, 204, 205, 206, 220, 235, 286, 289], "create_colormap": [78, 79, 80, 81, 204, 205, 206, 207], "colormap_ful": [78, 79, 80, 81, 204, 205, 206, 207], "center_of_mass_featur": [78, 204], "midpointfeatur": [78, 204], "halfwai": [78, 204, 275], "midpoint_featur": [78, 204], "arclengthfeatur": [78, 80, 204, 206], "arclength_featur": [78, 204], "vectorofendpointsfeatur": [78, 79, 80, 204, 205, 206], "extrem": [78, 80, 89, 204, 206, 215, 275, 289, 296], "ambigu": [78, 204], "cosinemetr": [78, 79, 80, 204, 205, 206], "vector_of_endpoints_featur": [78, 204], "segment_clustering_featur": [78, 204], "won": [79, 87, 205, 213, 270, 329, 335, 337], "sumpointwiseeuclideanmetr": [79, 80, 205, 206], "cosine_metr": [79, 205], "segment_clustering_metr": [79, 205], "datum": [80, 107, 206], "n_i": [80, 93, 206, 219, 283], "modular": [80, 206, 288, 289, 311], "subclass": [80, 206, 283, 284], "capabl": [80, 96, 206, 222, 253, 255, 263, 271, 277, 283, 337], "hierarch": [80, 206, 281], "clustermap": [80, 81, 206, 207, 290], "arc": [80, 206], "redefin": [80, 206], "infer_shap": [80, 206], "__init__": [80, 206, 275, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 326], "is_order_invari": [80, 206], "educ": [80, 81, 206, 207], "neuroanatomi": [80, 81, 206, 207], "fornix_clusters_arclength": [80, 206], "cosin": [80, 93, 206, 219, 277], "minu": [80, 206, 275, 277, 279, 280, 283, 284, 289, 304, 305, 310, 317, 318], "en": [80, 126, 206, 230, 277, 283, 289, 329], "wikipedia": [80, 206, 230, 231, 277, 283, 351], "cosine_similar": [80, 206, 282], "are_compat": [80, 206, 281, 284, 290, 341], "shape1": [80, 206, 284], "shape2": [80, 206, 284], "v2": [80, 206, 277], "cos_theta": [80, 206], "arccosin": [80, 206], "arcco": [80, 206, 277, 330, 351], "fornix_clusters_cosin": [80, 206], "segment_extending_clustering_framework": [80, 206], "pickl": [81, 207, 229, 290, 326], "save_pickl": [81, 207, 229, 290], "10mm": [81, 207, 284], "upsampl": [81, 207, 259, 265, 284], "101": [81, 207, 278, 331], "105": [81, 207, 331], "115": [81, 207, 327], "116": [81, 207, 283, 331, 342, 350], "119": [81, 207, 279, 331, 339], "123": [81, 207, 277, 331], "129": [81, 207, 249, 331], "144": [81, 207, 283, 325, 331], "148": [81, 207], "151": [81, 207], "159": [81, 207, 332], "167": [81, 207, 332], "180": [81, 104, 105, 207, 332], "185": [81, 207, 332], "208": [81, 207, 332], "210": [81, 207, 332], "224": [81, 207], "237": [81, 207, 332], "246": [81, 207], "249": [81, 207, 332], "251": [81, 94, 207, 220, 332], "267": [81, 207, 332], "270": [81, 207, 332], "280": [81, 207], "284": [81, 207, 338], "293": [81, 207], "296": [81, 207], "297": [81, 104, 105, 207], "299": [81, 207, 333], "84": [81, 207, 331, 332], "83773804": [81, 207], "92590332": [81, 207], "32278442": [81, 207], "10850525": [81, 207], "84362793": [81, 207], "91885376": [81, 207], "40357208": [81, 207], "112": [81, 207, 260, 331], "25676727": [81, 207], "72930145": [81, 207], "48336792": [81, 207], "107": [81, 207, 331], "60327911": [81, 207], "13782501": [81, 207], "23897552": [81, 207], "102": [81, 207, 278, 331], "5100708": [81, 207], "29447174": [81, 207], "04563904": [81, 207], "97": [81, 207, 283, 285, 331, 335, 343], "46020508": [81, 207], "54240417": [81, 207], "82": [81, 207, 331], "60240173": [81, 207], "93": [81, 207, 249, 325, 329], "14851379": [81, 207], "84208679": [81, 207], "78": [81, 207, 331], "98937225": [81, 207], "57682037": [81, 207], "63652039": [81, 207], "72344208": [81, 207], "60827637": [81, 207], "9391861": [81, 207], "40846252": [81, 207], "15874481": [81, 207], "4484024": [81, 207], "74534607": [81, 207], "00262451": [81, 207], "82582092": [81, 207], "02451324": [81, 207], "43942261": [81, 207], "0697403": [81, 207], "fornix_initi": [81, 207], "fornix_centroid": [81, 207], "fornix_clust": [81, 207], "pkl": [81, 207], "video": [81, 117, 123, 207, 249, 252, 255, 257], "segment_quickbundl": [81, 207, 324, 328, 332], "mrf": [82, 208, 249, 326], "zhang": [82, 208], "zhang2001": [82, 208], "avants2011": [82, 208], "fsl": [82, 208, 278, 289, 307, 337, 346, 347], "atropo": [82, 208], "strip": [82, 208, 271, 335], "coron": [82, 208, 288, 335], "img_ax": [82, 208], "imgplot": [82, 208], "img_cor": [82, 208], "t1_imag": [82, 208], "pad_inch": [82, 208], "adult": [82, 208], "100th": [82, 208], "task": [82, 110, 208, 252, 254, 256, 264, 266, 267, 269, 287], "t0": [82, 208, 277], "total_tim": [82, 208], "final_seg": [82, 208], "yellow": [82, 94, 109, 208, 220, 235], "light": [82, 208], "bradi": [82, 208], "cook": [82, 208], "multivari": [82, 208], "public": [82, 110, 123, 124, 127, 208, 230, 249, 271, 278, 283, 326], "381": [82, 208, 333], "tissue_classif": [82, 208], "reconst_dsid_1": [84, 210], "barrier": [85, 211], "media": [85, 211], "rnh2015": [85, 211], "multi_tensor_dki": [85, 211, 290], "decompose_tensor": [85, 211, 264, 290], "from_lower_triangular": [85, 211, 264, 290], "small_64d": [85, 211, 278, 285], "circ": [85, 211, 283], "fie": [85, 211], "signal_dki": [85, 211], "signal_noisi": [85, 86, 211, 212], "decompos": [85, 211, 270], "dt_eval": [85, 211], "dt_evec": [85, 211], "signal_dti": [85, 211], "simulated_dki_sign": [85, 211], "simulate_dki": [85, 211], "someon": [86, 110, 119, 212], "simulated_sign": [86, 212], "cach": [86, 212, 287, 290, 331], "multi_tensor_simul": [86, 212], "simulate_multi_tensor": [86, 212], "diverg": [87, 213], "yeatman2012": [87, 213, 286], "dsa": [87, 213], "metricspe": [87, 213, 284], "grab": [87, 213, 252, 278], "bundles_path": [87, 213], "fetch_bundles_2_subject": [87, 96, 97, 99, 213, 222, 223, 225, 290], "bundles_fold": [87, 213], "cst_l_file": [87, 213], "bundles_2_subject": [87, 99, 104, 105, 213, 225, 278], "subj_2": [87, 213, 278], "bundles_cst": [87, 213], "af_l_fil": [87, 213], "bundles_af": [87, 213], "cst_l": [87, 213, 235, 340], "af_l": [87, 88, 213, 214, 235, 236, 278, 284, 289], "pull": [87, 109, 110, 112, 117, 119, 120, 213, 232, 249, 252, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "cluster_cst_l": [87, 213], "standard_cst_l": [87, 213], "cluster_af_l": [87, 213], "standard_af_l": [87, 213], "oriented_cst_l": [87, 213], "orient_by_streamlin": [87, 213, 286, 290], "oriented_af_l": [87, 213], "volumetr": [87, 213, 263, 271], "fetch_bundle_fa_hcp": [87, 104, 213, 290], "fa_affin": [87, 213], "hcp_bundle_fa": [87, 213], "w_cst_l": [87, 213], "gaussian_weight": [87, 213, 290], "w_af_l": [87, 213], "profile_cst_l": [87, 213], "profile_af_l": [87, 213], "tract_profil": [87, 213], "robert": [87, 213, 286, 342], "dougherti": [87, 213, 286], "nathaniel": [87, 213, 286], "myall": [87, 213, 286], "heidi": [87, 213, 286], "feldman": [87, 213, 286], "e49790": [87, 213, 286], "afq_tract_profil": [87, 213], "assignment_map": [88, 214, 290], "fasiculu": [88, 214], "fake_tub": [88, 214], "af_l_before_assignment_map": [88, 214], "indx": [88, 214], "si": [88, 214], "disks_color": [88, 214], "af_l_after_assignment_map": [88, 214], "bundle_assignment_map": [88, 214], "whatsoev": [89, 215], "dissimilar": [89, 215], "bundle_shape_similar": [89, 215, 290, 338], "bundle1": [89, 97, 215, 223, 284, 287], "bundle2": [89, 97, 215, 223, 284, 287], "streamtube_actor": [89, 215], "two_bundl": [89, 215], "cluster_thr": [89, 215, 234, 288, 289, 311], "clust_thr": [89, 215, 284, 289, 316], "ba_scor": [89, 215], "lenient": [89, 215], "jordan_2018_plm": [90, 92, 216, 218], "cluster_confid": [90, 216, 290], "40mm": [90, 216], "cci": [90, 216, 287], "long_streamlin": [90, 216], "hue": [90, 97, 216, 223], "satur": [90, 97, 216, 223], "lut_cmap": [90, 97, 216, 223], "hue_rang": [90, 97, 99, 216, 223, 225], "saturation_rang": [90, 97, 99, 216, 223, 225], "bar3": [90, 97, 216, 223], "stream_actor": [90, 96, 97, 216, 222, 223], "pop": [90, 92, 98, 216, 218, 224, 260], "cci_streamlin": [90, 216], "landscap": [90, 216], "probe": [90, 216], "stabl": [90, 216, 256, 271, 283, 333, 341], "phenomenon": [90, 216, 265], "lone": [90, 216], "vote": [90, 216], "lend": [90, 216], "cci_histogram": [90, 216], "histogram": [90, 93, 216, 219, 275, 277, 284, 288], "keep_streamlin": [90, 216], "keep_streamlines_actor": [90, 216], "filtered_cci_streamlin": [90, 216], "jordan": [90, 92, 126, 216, 218, 287, 326, 328, 329, 330, 333], "keshavan": [90, 216], "therapi": [92, 218], "shortest": [92, 218, 277, 287], "treatment": [92, 218, 230], "gross": [92, 218], "tumor": [92, 218, 341], "gtv": [92, 218], "mpl": [92, 218, 288, 326, 333], "lesion": [92, 218], "electrod": [92, 218], "surface_opac": [92, 98, 218, 224], "surface_color": [92, 98, 218, 224], "seedroi_actor": [92, 98, 218, 224], "plm_roi_sl": [92, 218], "transpar": [92, 98, 218, 224, 288, 289, 311], "hypothesi": [92, 218], "motor": [92, 218], "cortico": [92, 218], "path_length_map_base_roi": [92, 218], "wmpl": [92, 218], "example_cc_path_length_map": [92, 218], "ignor": [92, 218, 277, 282, 283, 284, 286, 329, 333, 337], "wmpl_show": [92, 218], "masked_wher": [92, 218], "slx": [92, 218], "sly": [92, 218], "slz": [92, 218], "cool": [92, 110, 119, 218], "path_length_map": [92, 218], "plan": [92, 218, 231, 267, 329, 335, 346, 347], "neuro": [92, 218], "oncologi": [92, 218], "preprint": [92, 218, 282], "approx_polygon_track": [93, 219, 341], "simulated_bundl": [93, 219], "no_streamlin": [93, 219], "randint": [93, 219, 324, 330], "burlywood": [93, 219], "length_histogram": [93, 219], "2mm": [93, 219], "bundle_downsampl": [93, 219], "n_pts_d": [93, 219], "curvi": [93, 219], "bundle_downsampled2": [93, 219], "n_pts_ds2": [93, 219], "thought": [93, 110, 219, 231, 267], "lossi": [93, 219], "bundle_actor": [93, 219], "bundle_actor2": [93, 219], "bundle_actor3": [93, 219], "simulated_cosine_bundl": [93, 219], "equidist": [93, 219], "obviou": [93, 219], "great": [93, 219, 260, 277], "n_pts_histogram": [93, 219], "lengths_downsampl": [93, 219], "lengths_downsampled2": [93, 219], "id": [93, 219, 277, 284, 288, 289], "lengths_plot": [93, 219], "streamline_length": [93, 219], "meant": [94, 220, 252, 268, 277, 282, 283], "labels_img": [94, 220], "cc_streamlin": [94, 220], "other_streamlin": [94, 220], "assert": [94, 109, 220, 270, 328, 333, 338], "cc_streamlines_actor": [94, 220], "corpuscallosum_axi": [94, 220], "corpuscallosum_sagitt": [94, 220], "return_map": [94, 220, 277, 287], "mapping_as_streamlin": [94, 220, 287], "log1p": [94, 220], "gyru": [94, 220], "surpris": [94, 220], "anyon": [94, 110, 220], "tricki": [94, 220], "literatur": [94, 220, 253, 283, 350], "lr_superiorfrontal_track": [94, 220], "dm": [94, 220, 260, 263], "int16": [94, 220, 234, 277, 281, 283, 285], "lr_sf_trk": [94, 220], "footnot": [94, 220], "aparc": [94, 220, 278, 337], "aseg": [94, 220], "mgz": [94, 220], "remain": [94, 110, 220, 272, 275, 277, 278, 283, 346], "lie": [94, 220, 277, 287], "label_info": [94, 220], "txt": [94, 102, 107, 220, 228, 244, 281, 289, 291, 293, 325, 333, 337], "4x4": [94, 220, 275, 277, 281, 288], "thin": [96, 222], "tailor": [96, 116, 222], "screenshot": [96, 99, 222, 225], "dialog": [96, 222], "snapshot": [96, 222, 235], "primit": [96, 222], "button": [96, 99, 110, 113, 222, 225, 326, 335], "slider": [96, 222, 288, 326, 328, 329, 341], "lineslider2d": [96, 222], "read_bundles_2_subject": [96, 97, 222, 223, 290, 326], "subj_1": [96, 97, 99, 222, 223, 225, 278], "cc_1": [96, 222, 278], "1mm": [96, 222, 284], "world_coord": [96, 222, 288], "image_actor_z": [96, 222], "slicer_opac": [96, 222], "display_ext": [96, 222], "image_actor_x": [96, 222], "x_midpoint": [96, 222], "round": [96, 222, 277, 282, 283, 325, 328, 333, 334], "image_actor_i": [96, 222], "y_midpoint": [96, 222], "image_actor": [96, 222], "showmanag": [96, 99, 222, 225, 288], "show_m": [96, 99, 222, 225], "line_slider_z": [96, 222], "min_valu": [96, 222], "max_valu": [96, 222, 283], "initial_valu": [96, 222], "text_templ": [96, 222], "0f": [96, 222], "line_slider_x": [96, 222], "line_slider_i": [96, 222], "opacity_slid": [96, 222], "change_slice_z": [96, 222], "change_slice_x": [96, 222], "change_slice_i": [96, 222], "change_opac": [96, 222], "on_chang": [96, 222], "build_label": [96, 222, 290], "textblock2d": [96, 99, 222, 225, 288, 328], "messag": [96, 99, 110, 120, 122, 123, 127, 222, 225, 275, 277, 283, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 327, 329, 335, 336, 338, 341, 342], "font_siz": [96, 222, 288], "font_famili": [96, 222], "arial": [96, 222], "justif": [96, 222], "bold": [96, 107, 109, 222, 288], "ital": [96, 222], "shadow": [96, 222], "background_color": [96, 222], "line_slider_label_z": [96, 222], "line_slider_label_x": [96, 222], "line_slider_label_i": [96, 222], "opacity_slider_label": [96, 222], "panel2d": [96, 99, 222, 225, 328], "1030": [96, 222, 326], "add_el": [96, 99, 222, 225], "screen": [96, 222, 230, 278], "re_align": [96, 222], "getsiz": [96, 222], "win_callback": [96, 222], "obj": [96, 99, 110, 125, 222, 225, 275, 278, 281, 284, 289, 337], "size_old": [96, 222], "size_chang": [96, 222], "reset_clipping_rang": [96, 222], "add_window_callback": [96, 222], "bundles_and_3_slic": [96, 222], "del": [96, 222], "garyfallidis2021": [96, 222], "eleftherio": [96, 103, 123, 124, 126, 222, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "serg": [96, 126, 222, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 343], "javier": [96, 126, 222, 329, 341, 343], "guaj": [96, 126, 222, 288, 289, 311, 329, 341, 343], "marc": [96, 126, 222, 324, 325, 326, 327, 328, 329, 333, 334, 335], "alexandr": [96, 126, 222, 324, 325, 326, 327, 328, 329, 333, 334, 335], "c\u00f4t\u00e9": [96, 126, 222, 283, 324, 325, 326, 327, 328, 329, 334, 335], "soham": [96, 222], "biswa": [96, 222], "david": [96, 222, 283, 324, 326, 327, 328, 329, 340, 341, 342], "reagan": [96, 222, 288, 289, 311, 326, 327, 328, 329], "nasim": [96, 222, 340, 341], "anousheh": [96, 222, 340, 341], "filipi": [96, 222], "silva": [96, 222], "geoffrei": [96, 222], "fox": [96, 222], "contributor": [96, 103, 107, 123, 124, 126, 222, 277, 284, 324, 326], "3384": [96, 222], "21105": [96, 222], "joss": [96, 222, 335], "03384": [96, 222], "viz_advanc": [96, 222, 329], "dix": [97, 223, 278, 281], "subj_id": [97, 223, 278], "bundle_n": [97, 223], "176": [97, 223, 234, 332], "118": [97, 223, 331], "wonder": [97, 126, 223, 251], "knew": [97, 223, 251], "camera": [97, 223], "camera_info": [97, 223], "focal": [97, 223], "stream_actor2": [97, 223], "bar": [97, 107, 223, 249, 282, 283, 288, 326, 329, 338, 341], "stream_actor3": [97, 223], "bar2": [97, 223], "bundle3": [97, 223], "stream_actor4": [97, 223], "bundle4": [97, 223], "stream_actor5": [97, 223], "bundle5": [97, 223], "stream_actor6": [97, 223], "bundle6": [97, 223], "summari": [97, 108, 109, 114, 118, 123, 124, 223, 249, 281, 282, 290, 335], "viz_bundl": [97, 223], "decim": [98, 224, 327], "contour_from_roi_tutori": [98, 224], "viz_roi_contour": [98, 224], "fname_t1": [99, 225], "exp_bundles_and_map": [99, 225], "t1_warp": [99, 225], "value_rang": [99, 225, 338], "slice_actor": [99, 225, 288, 290], "slice_actor2": [99, 225], "hsv": [99, 225], "fname_fa": [99, 225], "fa_1x1x1": [99, 225], "lut": [99, 225], "fa_actor": [99, 225], "slices_lut": [99, 225], "label_posit": [99, 225], "label_valu": [99, 225], "result_posit": [99, 225], "result_valu": [99, 225], "panel_pick": [99, 225], "left_click_callback": [99, 225], "ev": [99, 225], "event_po": [99, 225], "iren": [99, 225, 288], "geteventposit": [99, 225], "picker": [99, 225, 329], "getpointijk": [99, 225], "8f": [99, 225], "setinterpol": [99, 225], "addobserv": [99, 225], "leftbuttonpressev": [99, 225], "perspect": [99, 225, 269, 270, 277], "show_m_mosa": [99, 225], "left_click_callback_mosa": [99, 225], "cnt": [99, 107, 225], "slice_mosa": [99, 225], "drag": [99, 225], "scroll": [99, 225, 329], "wheel": [99, 124, 225, 328, 329, 338, 340, 341, 342], "combinedworkflow": [100, 226, 290], "organ": [100, 103, 104, 105, 110, 226, 232, 251, 252, 265, 275, 277, 278, 281, 282, 283, 284], "combined_workflow": [100, 226, 290], "nlmeansflow": [100, 226, 290], "medianotsuflow": [100, 226, 290], "denoiseandseg": [100, 226], "_get_sub_flow": [100, 226], "commandlin": [100, 226, 235, 289], "input_fil": [100, 102, 226, 228, 234, 289, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 317, 320], "out_dir": [100, 102, 104, 226, 228, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 278, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "out_fil": [100, 102, 226, 228, 289, 293, 319], "wildcard": [100, 102, 226, 228, 240, 242, 289, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 315, 317, 319, 321, 322], "out_": [100, 102, 226, 228], "front": [100, 102, 103, 107, 226, 228, 251, 333, 335], "document": [100, 102, 108, 122, 123, 124, 226, 228, 232, 246, 248, 249, 254, 257, 260, 269, 271, 275, 277, 278, 281, 284, 287, 289, 324, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "parser": [100, 102, 226, 228, 289], "io_it": [100, 102, 226, 228], "get_io_iter": [100, 102, 226, 228, 289, 290, 329], "in_fil": [100, 102, 226, 228], "nl_flow": [100, 226], "run_sub_flow": [100, 226, 289, 290], "last_generated_output": [100, 226], "out_denois": [100, 226, 289, 298, 299, 300, 301], "me_flow": [100, 226], "ioiter": [100, 102, 226, 228, 290], "globbin": [100, 226], "bit": [100, 102, 226, 228, 233, 252, 255, 257, 260, 262, 277, 325, 326, 328, 329, 333, 334, 346], "flow_runn": [100, 102, 226, 228, 290], "run_flow": [100, 102, 226, 228, 290], "argpars": [100, 102, 226, 228, 289], "combined_workflow_cr": [100, 226], "forc": [100, 102, 119, 124, 226, 228, 234, 236, 237, 277, 289, 341], "overwrit": [100, 102, 226, 228, 282, 338], "wrote": [100, 102, 226, 228, 267, 269], "callabl": [102, 228, 275, 277, 278, 280, 283, 286, 333, 337], "anywher": [102, 126, 228, 267, 283], "t1_denois": [102, 228], "my_workflow": [102, 228], "shutil": [102, 228], "Will": [102, 228, 278, 281, 282, 283], "appendtextflow": [102, 228], "text_to_append": [102, 228], "myfil": [102, 228], "glob": [102, 228], "anyth": [102, 110, 120, 228, 251, 275, 277, 333, 340], "newli": [102, 228], "comment": [102, 107, 228, 324, 328, 331, 335, 337], "workflow_cr": [102, 228], "text_fil": [102, 228], "brett": [103, 107, 109, 123, 124, 126, 234, 235, 236, 237, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 333, 334], "nimmo": [103, 107, 123, 126, 234, 235, 236, 237, 283, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 331], "16th": 103, "tsiara": 103, "vogiatzi": 103, "william": [103, 283], "chamberlain": 103, "sr": [103, 277], "hampshir": 103, "menzi": 103, "la": [103, 234], "grant": [103, 278], "je": 103, "odlaug": 103, "bl": 103, "craig": 103, "fineberg": 103, "sahakian": 103, "bj": 103, "trichotillomania": 103, "arch": 103, "gen": 103, "psychiatri": 103, "965": [103, 285, 326], "71": [103, 331], "nguyen": [103, 126], "olivetti": [103, 126, 331], "halchenko": [103, 111, 326, 331, 343], "17th": 103, "vj": 103, "tseng": 103, "wy": 103, "cote": [103, 288, 289, 311, 333], "rheault": [103, 104, 105, 329, 330, 335, 336, 337, 341, 342, 343], "sidhu": 103, "hau": 103, "petit": 103, "fortin": 103, "cunann": 103, "ocegueda": [103, 126, 278, 324, 325, 326, 333, 334, 342], "wassermann": [103, 104, 105, 126, 278, 329, 333], "jd": 103, "kn": 103, "dalmau": 103, "rivera": 103, "rectangl": 103, "arbitrari": [103, 121, 275, 277, 281, 282, 283, 284, 287, 333, 347], "rafael": [103, 126, 249, 324, 326, 327, 329, 335, 336, 337, 338, 341], "samuel": [103, 126, 324, 325, 326, 331, 332, 333, 334], "eric": [103, 104, 105, 126, 326, 336, 338, 341, 342], "thoma": 103, "marta": 103, "morgado": 103, "marral": 103, "hum": 103, "390": [103, 324], "frontiersin": 103, "3389": 103, "fnhum": 103, "675433": 103, "citat": [103, 104, 105, 324, 326, 327, 333, 338, 339, 341], "synthet": [104, 105, 232, 248, 251, 252, 254, 278, 283], "phantom": [104, 105, 274, 278, 290], "anim": [104, 105, 288, 289, 311], "bundle_file_formats_exampl": [104, 105], "zenodo": [104, 105, 278], "5281": [104, 105, 278], "3352379": [104, 105], "202": [104, 105, 283, 332, 350], "204": [104, 105, 332], "eddi": [104, 105, 278, 328], "cenir_multib": [104, 105, 336], "cfin": [104, 105, 278, 328], "1400": [104, 105, 234, 328], "1600": [104, 105, 233, 234, 329], "1800": [104, 105, 233, 234, 335], "2200": [104, 105, 234, 337], "2400": [104, 105, 234], "2600": [104, 105, 234, 342], "2800": [104, 105, 234], "496": [104, 105, 234, 333, 343], "gold": [104, 105, 278], "gold_standard_io": [104, 105], "2651349": [104, 105], "hcp842": [104, 105, 278], "bundle_atlas_hcp842": [104, 105], "283": [104, 105, 335], "macroscal": [104, 105, 235, 236], "topologi": [104, 105, 235, 236], "178": [104, 105, 332], "68": [104, 105, 331], "advanced_atlas_of_80_bundles_in_mni_spac": [104, 105], "7375883": [104, 105], "bundle_fa_hcp": [104, 105], "target_tractogram_hcp": [104, 105], "recoveri": [104, 105, 110], "384": [104, 105, 333], "399": [104, 105, 333], "fetch_ivim": [104, 105, 290], "ivim_dataset": [104, 105], "3395704": [104, 105], "2009a": [104, 105, 278], "2009c": [104, 105, 278, 326], "mni_templ": [104, 105], "fonov": [104, 105, 278], "evan": [104, 105, 278], "botteron": [104, 105, 278], "almli": [104, 105, 278], "mckinstri": [104, 105, 278], "bdcg": [104, 105, 278], "issn": [104, 105, 277], "1053": [104, 105, 278, 327], "8119": [104, 105, 278], "033": [104, 105, 278], "birth": [104, 105, 278], "adulthood": [104, 105, 278], "supplement": [104, 105, 277], "juli": [104, 105, 278], "s102": [104, 105, 278], "s1053": [104, 105, 278], "70884": [104, 105, 278], "icbm": [104, 105], "152": [104, 105], "c57bl6": [104, 105, 278], "qtdmri_test_retest_2subject": [104, 105], "santin": [104, 105], "philipp": [104, 105, 337, 338, 339], "leherici": [104, 105], "petiet": [104, 105], "996889": [104, 105, 278], "scil": [104, 105, 278, 329], "lab": [104, 105, 335, 336, 337, 338], "snail": [104, 105, 278], "discoveri": [104, 105], "mr750": [104, 105], "fetch_stanford_pve_map": [104, 105, 290], "taiwan": [104, 105, 278], "ntu": [104, 105, 278], "308": [104, 105, 333], "615": [104, 105, 324], "923": [104, 105, 329], "1231": [104, 105, 326], "1538": [104, 105, 329], "1846": [104, 105, 335], "2462": [104, 105], "2769": [104, 105], "3077": [104, 105], "3385": [104, 105, 235], "3692": [104, 105], "nation": [104, 105, 126, 232], "hospit": [104, 105, 126], "fetchflow": [104, 249, 290, 335, 336], "available_data": [104, 289], "get_fetcher_datanam": [104, 289, 290], "fetch_flow": 104, "temporarydirectori": [104, 342], "languag": [106, 107, 229, 328, 333, 336], "cython": [106, 122, 229, 233, 249, 277, 283, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343], "h5py": [106, 107, 229, 233, 249, 281, 327, 329], "piec": [107, 275], "systemat": [107, 277], "stabil": [107, 256, 283], "readabl": [107, 110, 264, 266], "toolkit": 107, "obscur": 107, "member": [107, 252, 342], "decod": [107, 255, 256, 265, 278], "effort": [107, 257, 260, 261], "english": 107, "spell": [107, 337], "abid": 107, "pep8": [107, 108, 123, 264, 266, 324, 325, 326, 327, 334, 338], "conform": [107, 108, 283, 338], "syntax": [107, 125, 260, 283, 330, 338], "push": [107, 110, 117, 120, 121, 124, 251], "complianc": 107, "editor": [107, 110, 229], "aspect": [107, 255, 283], "shorthand": [107, 330], "npt": [107, 338], "sp": [107, 287, 337], "alia": [107, 109, 110, 277, 283, 285, 341], "cimport": 107, "prefix": [107, 108, 289], "cnp": [107, 340], "symbol": [107, 283], "cdef": 107, "cpdef": 107, "ctypedef": 107, "statement": [107, 125, 127, 268, 326, 333, 336, 337, 341], "char": 107, "xf": 107, "clustermapcentroid": [107, 290], "pyarray_data": [107, 340], "npy_intp": [107, 326, 340], "pstr": 107, "qa": [107, 283, 286], "stride": [107, 259, 277, 282, 283, 285], "tmp": [107, 110, 288, 289, 332, 333], "ftmp": [107, 333], "get_direction_c": 107, "bad": [107, 229, 326, 328, 329, 332, 336], "void": 107, "estimate_kernel_s": 107, "kernelmax": 107, "k2": 107, "libc": 107, "stdlib": 107, "calloc": 107, "realloc": 107, "side": [107, 275, 283, 289, 324], "colon": [107, 110], "c_extract": 107, "data2d": 107, "nogil": [107, 283], "awai": [107, 125, 230, 265, 328], "whitespac": [107, 108, 329], "websit": [107, 124, 236, 237, 253, 278, 324, 325, 328, 329, 330, 331, 333, 334, 336, 339, 345], "interleav": 107, "block": [107, 124, 248, 249, 259, 263, 279, 283, 289, 290, 298, 299, 300, 327, 330], "intermix": 107, "former": [107, 233, 265], "rational": 107, "edit": [107, 109, 114, 117, 120, 124, 233, 248, 266], "valid_exampl": 107, "restructuredtext": [107, 328, 338], "rst": [107, 257, 326, 327, 328, 329, 332, 333, 337], "markup": [107, 328], "pars": [107, 289, 340], "content": [107, 109, 114, 118, 122, 326, 327, 331, 336, 349], "compil": [107, 124, 233, 260, 282, 283, 290, 324, 325, 328, 333, 334, 342], "web": [107, 124, 278, 331, 333, 337], "enrich": 107, "encourag": [107, 126, 239], "acronym": 107, "referenc": [107, 275, 278, 283, 284, 333], "comma": [107, 289, 319, 341], "nameyear": 107, "garyfallidis2014": 107, "_specific_filenam": 107, "specific_filenam": 107, "cap": 107, "capit": 107, "lowercas": [107, 336, 337], "customari": 107, "underscor": 107, "font": [107, 338], "caption": 107, "face": [107, 277, 278, 283, 285, 290, 331, 333], "backquot": 107, "inlin": [107, 324, 328], "devel": [107, 233, 336], "enclos": 107, "categori": [108, 283], "bf": [108, 120, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343], "rf": [108, 229, 283, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 348], "refactor": [108, 110, 249, 324, 325, 328, 329, 331, 332, 333, 334, 335, 337, 338], "nf": [108, 109, 110, 232, 249, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "bw": [108, 326], "address": [108, 109, 253, 265, 327, 330], "bk": 108, "pl": [108, 126], "pylint": 108, "happier": 108, "relax": [108, 325, 333], "habit": [108, 123], "glanc": 108, "person": [109, 259], "gitconfig": 109, "yourdomain": [109, 120], "ci": [109, 124, 249, 325, 326, 329, 335, 336, 337, 338, 343], "commit": [109, 111, 117, 120, 122, 123, 124, 127, 252, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "checkout": [109, 110, 117, 119, 120, 124], "br": 109, "branch": [109, 111, 114, 117, 119, 120, 121, 124, 252, 284, 325, 326, 336], "wdiff": 109, "vim": [109, 124, 229], "config": [109, 117, 120, 289, 324, 329, 333, 334, 343], "simplest": [109, 120, 252], "lg": [109, 110], "graph": [109, 110, 111, 119, 290, 335], "cred": 109, "creset": 109, "cgreen": 109, "cr": [109, 278], "abbrev": 109, "date": [109, 281, 325, 326], "6d8e1e": 109, "my": [109, 110, 119, 229, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 272, 325, 326, 331, 337, 341], "ago": 109, "matthew": [109, 123, 124, 126, 324, 325, 326, 328, 329, 331, 332, 333, 334], "d304a73": 109, "placehold": [109, 275], "48": [109, 278, 326, 331], "hhuuggoo": 109, "week": 109, "jonathan": 109, "terhorst": 109, "4aff2a8": 109, "test_bugfix": 109, "hugo": 109, "a7ff2e5": 109, "summit": 109, "corran": 109, "webster": 109, "68f6752": 109, "axisindex": 109, "index_bi": 109, "sketchi": 109, "corr": 109, "376adbd": 109, "b605216": 109, "joshu": 109, "2e991e8": 109, "ufunc": [109, 324, 341], "7beda5a": 109, "throw": [109, 328, 335], "65af65": 109, "956fbab": 109, "remot": [109, 110, 117, 119, 120, 121, 260, 278], "upstream": [109, 110, 117, 119, 120, 124], "thank": [109, 111, 120, 124, 248, 283], "yuri": 109, "zaytsev": 109, "post": [109, 117, 251, 256, 263, 275, 277, 345], "fork": [110, 114, 118, 120, 331], "git": [110, 111, 112, 116, 118, 119, 120, 121, 122, 124, 233, 252, 328], "bugfix": [110, 324], "databas": 110, "yourself": [110, 113, 121], "mail": [110, 120, 124, 126, 233, 246, 277, 324, 345], "linux": [110, 117, 124, 234, 329, 334, 338, 339, 344], "strang": [110, 329, 338], "confus": [110, 283, 333, 341], "link": [110, 117, 119, 124, 235, 258, 277, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 341, 342], "repo": [110, 119, 120, 124, 333, 337, 340], "branchnam": 110, "remind": [110, 119, 230, 329], "hack": [110, 120], "my_new_fil": 110, "readm": [110, 124, 324, 325, 326, 327, 328, 329, 333, 335, 336, 337, 341], "untrack": 110, "new_file_nam": 110, "faith": [110, 120], "tangl": 110, "url": [110, 121, 278, 326, 333, 337], "dropdown": 110, "menu": [110, 329], "attent": [110, 259], "complic": 110, "happi": [110, 123, 126, 251, 324, 333, 345], "preliminari": [110, 283], "unwant": 110, "stuff": [110, 116, 119, 122, 252, 331, 333, 335, 340], "clone": [110, 112, 117, 120, 124, 233], "githhub": 110, "rememb": [110, 119, 124, 125], "ssh": [110, 113, 124], "enh": [110, 324, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 340, 341, 342, 343], "graphic": 110, "gitk": 110, "fanci": [110, 252], "mayb": [110, 124, 253, 257, 336], "meantim": 110, "sternli": 110, "advis": [110, 258, 277, 283, 284, 289], "messi": 110, "situat": [110, 230, 267, 270], "replai": [110, 288], "tear": 110, "backup": 110, "succinctli": 110, "conflict": [110, 124, 233, 289, 328], "man": 110, "luckili": 110, "straightforward": [110, 282], "mistak": [110, 229, 281, 335, 337], "abort": [110, 329], "reset": [110, 277, 289, 290], "forgot": 110, "reflog": 110, "8630830": 110, "immedi": [110, 230, 233, 269, 270], "278dd2a": 110, "11ee694744f2552d": 110, "26aa21a": 110, "seek_gzip_factori": 110, "leak": [110, 324, 333], "gzip": 110, "botch": 110, "embarrass": 110, "typo": [110, 264, 266, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343], "perhap": [110, 338], "poster": 110, "onelin": [110, 119], "eadc391": 110, "a815645": 110, "2dec1ac": 110, "13d7934": 110, "6ad92e5": 110, "maskedconst": 110, "29001ed": 110, "nep": [110, 338], "copul": 110, "structured_array_extens": 110, "sensibl": [110, 119], "reword": [110, 332], "amend": 110, "squash": [110, 252, 283, 331], "meld": 110, "fixup": [110, 331], "THAT": 110, "WILL": 110, "BE": [110, 126, 277, 284, 289], "ii": [110, 277], "collaps": [110, 230, 253, 255, 256], "revis": [110, 124], "detach": 110, "721fc64": 110, "foo": 110, "0f22701": 110, "79": [110, 331], "successfulli": [110, 251, 266, 269, 350], "sophist": 110, "went": [110, 252, 262], "yarik": 111, "imagin": [111, 230, 234, 277, 283], "repositori": [112, 119, 120, 123, 233, 265], "cd": [112, 120, 121, 124, 233, 234], "paus": 113, "hardcor": 113, "trunk": [114, 121, 124], "review": [114, 124, 252, 341], "debian": [115, 333], "ubuntu": [115, 252, 266, 326, 329, 337, 341], "sudo": [115, 124, 233], "apt": [115, 233], "fedora": 115, "yum": [115, 233], "msysgit": 115, "osx": [115, 124, 249, 324, 326, 329, 336, 338], "comprehens": 116, "host": 116, "servic": [116, 124, 277, 284, 289], "quicker": 116, "excel": [117, 120, 277], "pro": [117, 325], "book": [117, 328], "depth": [117, 258, 275, 277, 281, 282, 283, 284, 288, 289, 311], "cheat": 117, "sheet": 117, "cast": [117, 281, 282, 289, 324, 326], "snippet": [117, 232, 330], "tos": 117, "magic": 117, "parabl": 117, "foundat": [117, 232, 252], "fernando": 117, "perez": 117, "tip": [117, 230, 338], "svn": 117, "crash": [117, 326, 328, 329, 335], "subvers": 117, "linu": 117, "torvald": 117, "histori": [117, 252, 277, 282, 333], "onlin": [118, 268, 325, 332, 344], "peopl": [119, 252, 347], "Being": 119, "scari": 119, "rw": [119, 124], "incorpor": [119, 267, 275], "rebas": [119, 124, 252, 326, 327, 328, 329, 330, 332], "ff": [119, 284], "rejoin": 119, "compact": [119, 231], "discov": 120, "quickest": 120, "email": [120, 252, 324], "somewher": [120, 264], "test_my_bug": 120, "funni": 120, "send": [120, 123, 126, 233, 246, 252], "warmli": 120, "unmodifi": 120, "0001": [120, 283], "refresh": 120, "pointer": 120, "accident": [121, 325], "deliber": [121, 277], "satisfact": 121, "checklist": 122, "upload": [122, 326, 328, 343], "guidelin": [122, 123, 127, 246, 249, 327, 328, 330, 341], "futur": [122, 124, 255, 271, 281, 335, 337], "divis": [122, 266, 283, 326, 329, 333], "xrang": 122, "seek": 123, "courag": [123, 251], "willing": 123, "ian": [123, 126, 331], "bago": [123, 126, 324, 325, 326, 328, 331, 332, 333, 334], "primari": [123, 283], "nipi": [123, 124, 233, 247, 277, 326, 331, 332, 337, 340, 345], "pitch": [123, 230, 277], "feedback": 123, "hope": [123, 233, 247, 251, 252], "enjoi": [123, 251], "apologi": 123, "outstand": 124, "delai": [124, 281], "travi": [124, 324, 325, 326, 327, 328, 329, 330, 333, 336, 337, 338], "inde": 124, "pr": [124, 252, 283, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "changelog": [124, 324, 333, 334, 337], "shortlog": 124, "tag": [124, 283, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "opportun": [124, 229], "mailmap": 124, "duplic": [124, 277, 278, 283, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 340, 341, 342, 343], "author": [124, 255, 264, 265, 266, 278, 284, 289, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "copyright": [124, 275, 277, 278, 284, 289, 325, 326, 329, 333], "conf": [124, 277, 326], "licens": [124, 275, 278, 333], "pyx": [124, 277, 326, 327, 332, 333, 340], "doctest": [124, 277, 325, 327, 331, 332], "doctest_extmod": 124, "buildbot": [124, 324, 326, 332, 333, 334, 338, 344], "long_descript": 124, "diffthi": 124, "distclean": 124, "fxd": [124, 233], "build_ext": [124, 233], "sv": [124, 277, 278], "moment": [124, 252, 270, 283], "autodoc": 124, "builder": 124, "yml": [124, 326], "appveyor": [124, 249, 329, 336, 337], "trigger": [124, 277, 331], "macpython": 124, "privileg": 124, "trick": [124, 283, 289], "pypi": 124, "_version_extra": 124, "setuptool": [124, 233, 343], "intro": [124, 281, 329], "sdist": [124, 342], "gztar": 124, "pypirc": 124, "server": [124, 260], "password": 124, "login": [124, 252, 260], "mainten": [124, 325, 338], "maint": [124, 324, 326, 332, 333, 335, 336, 337, 339, 341, 342], "dev": [124, 233, 275, 289, 292, 325, 326, 327, 329, 333, 334], "_version_micro": 124, "_version_minor": 124, "bdist32": 124, "ex": [124, 283, 287, 289, 319], "bic": 124, "berkelei": [124, 126, 250], "win32": [124, 333], "admin": 124, "python26": 124, "bdist_egg": 124, "bdist_wininst": 124, "bdist": 124, "mpkg": [124, 332], "egg": 124, "dmg": [124, 332], "permiss": [124, 277, 278, 284], "build_dmg": 124, "box": [124, 281, 284, 289, 315, 319, 328], "bdist_mpkg": 124, "reown_mpkg": 124, "announc": [124, 329], "fear": 124, "trembl": 124, "advic": [125, 277, 329], "howto": 125, "pyport": 125, "python3port": 125, "ptgmedia": 125, "pearsoncmg": 125, "imprint_download": 125, "informit": 125, "python2python3": 125, "__future__": [125, 337], "print_funct": 125, "absolute_import": 125, "configpars": 125, "python3": [125, 326, 327, 336], "builtin": 125, "namespac": [125, 275, 277, 281, 282, 283, 284, 289, 337], "functool": 125, "unicod": 125, "my_str": 125, "byte": [125, 277, 283, 285, 290, 331, 335], "rt": [125, 283, 289, 307], "stringio": 125, "bytesio": 125, "basestr": 125, "string_typ": 125, "isinst": 125, "a_vari": 125, "meanwhil": [125, 244], "gone": 125, "__next__": 125, "valueerror": [125, 252, 277, 287, 324, 333, 335, 343], "err": 125, "has_kei": 125, "hello": 125, "item": [125, 277, 278, 281, 283, 285, 287, 341], "iteritem": 125, "team": [126, 250, 284], "indiana": [126, 232], "IN": [126, 277, 283, 284, 289], "usa": 126, "birmingham": 126, "uk": [126, 277], "databrick": 126, "san": [126, 277, 289, 321], "francisco": [126, 289, 321], "ca": [126, 250, 283], "omar": [126, 324, 325, 326, 333, 334, 342], "googl": [126, 229, 232, 233, 249, 252, 336], "microsoft": 126, "qc": 126, "gabriel": [126, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 337, 340, 341, 343], "swiss": 126, "feder": 126, "epfl": 126, "lausann": 126, "ch": 126, "matthieu": [126, 325, 326, 327, 332, 333], "dumont": [126, 325, 326, 327, 332, 333], "imeka": 126, "ranveer": [126, 326, 327], "aggarw": [126, 288, 289, 311, 326, 327], "hyderabad": 126, "telangana": 126, "india": 126, "retir": [126, 324, 329], "formerli": 126, "mrc": 126, "cognit": 126, "california": [126, 289, 321], "christoph": [126, 277, 324, 325, 326, 328, 329, 330, 332, 333, 335, 337], "houd": [126, 287, 324, 325, 326, 328, 329, 330, 332, 333, 335, 337], "francoi": [126, 329, 330, 335, 336, 337, 341, 342, 343], "rh\u00e9ault": 126, "utrecht": 126, "nl": [126, 270, 283], "michael": [126, 324, 331, 333], "paquett": [126, 324, 331, 333], "planck": 126, "leipzig": 126, "de": 126, "massachusett": 126, "emanuel": [126, 331], "laboratori": 126, "nilab": 126, "trento": 126, "IT": [126, 268], "yaroslav": [126, 326, 331, 343], "halchenco": 126, "pb": 126, "depart": [126, 232], "dartmouth": 126, "nh": 126, "emmanuel": [126, 332, 342], "recherch": 126, "informatiqu": 126, "syst\u00e8m": 126, "al\u00e9atoir": 126, "irisa": 126, "renn": 126, "fr": [126, 283], "sylvain": [126, 279, 289, 300, 332], "inria": [126, 283], "sophia": [126, 283, 285], "antipoli": [126, 283, 285], "erick": 126, "ziegler": [126, 332], "universit\u00e9": 126, "li\u00e8g": 126, "kimberli": [126, 283, 332], "chantal": [126, 334], "cardiff": 126, "demian": [126, 278, 329, 333], "mauro": [126, 324, 328, 332, 333], "franc": 126, "gregori": [126, 325, 326, 333, 337, 338], "lee": [126, 283, 325, 326, 333, 337, 338], "cincinnati": 126, "oh": 126, "endolith": [126, 331], "york": 126, "matthia": [126, 332, 333], "ekman": [126, 332, 333], "donder": 126, "nijmegen": 126, "andrew": [126, 235, 333], "lawrenc": [126, 333, 336], "kesshi": [126, 326, 328, 329, 330, 333], "maria": [126, 331], "luisa": [126, 331], "mandelli": [126, 331], "adam": [126, 260, 263, 282, 335], "rybinski": 126, "jagiellonian": 126, "krakow": 126, "qiyuan": [126, 334], "tian": [126, 334], "jon": [126, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 341, 342], "haitz": [126, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 341, 342], "legarreta": [126, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 341, 342], "gorro\u00f1o": [126, 327, 328, 329, 330, 335, 336, 337, 338, 339, 341, 342], "champalimaud": 126, "programm": 126, "lisbon": 126, "stephan": [126, 325, 326], "eindhoven": 126, "himanshu": [126, 325], "mishra": [126, 325], "indian": 126, "karaghpur": 126, "gauvin": [126, 324, 326], "oscar": [126, 324], "esteban": [126, 324], "bishakh": [126, 325, 326], "ghosh": [126, 325, 326], "durgapur": 126, "dimitri": [126, 324], "rozaki": [126, 324], "tomotech": 126, "athen": 126, "rohan": [126, 324], "prinja": [126, 324], "bombai": 126, "sagun": [126, 325], "pai": [126, 325], "vatsala": [126, 325], "swaroop": [126, 325], "mombai": 126, "shahnawaz": [126, 326], "ahm": [126, 326], "birla": 126, "pilani": 126, "goa": 126, "nil": [126, 326, 328], "goyett": [126, 326, 328], "scott": [126, 335], "trinkl": [126, 335], "chicago": 126, "il": 126, "kevin": [126, 335], "sitek": [126, 335], "mit": [126, 275], "mcgovern": 126, "derek": [126, 336, 337, 341], "pisner": [126, 336, 337, 341], "texa": 126, "austin": 126, "ross": [126, 336], "john": [126, 340], "hopkin": 126, "larson": [126, 336, 338, 341, 342], "jakob": [126, 329], "wasserth": [126, 329], "german": 126, "cancer": 126, "bramsh": [126, 329, 330, 337, 338, 339, 340, 343], "qamar": [126, 329, 330, 337, 338, 339, 340, 343], "pennsylvania": 126, "sven": [126, 326], "dorkenwald": [126, 326], "princeton": 126, "boundless": 126, "everyon": 126, "mission": 127, "boot": [127, 274, 290, 326], "nn": [127, 249, 265, 283, 290, 341], "dipy_align_affin": [127, 244, 323], "dipy_align_syn": [127, 244, 323, 338], "dipy_apply_transform": [127, 244, 323], "dipy_buan_lmm": [127, 235, 323], "dipy_buan_profil": [127, 235, 323], "dipy_bundlewarp": [127, 237, 323], "dipy_correct_mot": [127, 242, 323], "dipy_denoise_lpca": [127, 239, 323], "dipy_denoise_mppca": [127, 239, 323], "dipy_denoise_patch2self": [127, 323], "dipy_evac_plu": [127, 323], "dipy_fetch": [127, 234, 238, 323, 336], "dipy_fit_csa": [127, 234, 243, 323, 335], "dipy_fit_csd": [127, 243, 323, 335], "dipy_fit_dki": [127, 243, 323], "dipy_fit_dti": [127, 234, 243, 323, 335, 342], "dipy_fit_ivim": [127, 243, 323], "dipy_fit_mapmri": [127, 243, 323], "dipy_gibbs_ring": [127, 240, 323], "dipy_horizon": [127, 234, 235, 236, 237, 323, 335, 338, 341], "dipy_info": [127, 234, 323], "dipy_labelsbundl": [127, 236, 323], "dipy_mask": [127, 234, 245, 323], "dipy_median_otsu": [127, 234, 243, 323], "dipy_recobundl": [127, 236, 323], "dipy_reslic": [127, 323], "dipy_slr": [127, 236, 244, 249, 323], "dipy_snr_in_cc": [127, 323], "dipy_split": [127, 323], "dipy_track_pft": [127, 245, 323], "footcit": 155, "paradigm": [229, 260, 265, 346], "bloch": 229, "torrei": 229, "pgse": [229, 346, 347, 348], "readout": 229, "gamma": [229, 230, 279, 283, 346], "gyromagnet": [229, 346], "width": [229, 259, 275, 283, 288, 346], "wave": [229, 278, 283, 348], "proport": [229, 275, 282], "stand": [229, 282], "gather": [229, 289, 291], "mobil": 229, "molecul": 229, "movement": 229, "counterintuit": 229, "dephas": 229, "dwmri": 229, "speak": 229, "plenti": 229, "nonisotrop": [229, 333], "textrm": [229, 283], "batteri": 229, "painless": 229, "noth": [229, 268, 275, 335], "ever": 229, "consol": [229, 233], "dicom": [229, 335], "npz": [229, 278, 329], "pydicom": 229, "v4": 229, "v6": 229, "v7": 229, "loadmat": 229, "pytabl": [229, 249, 326, 327], "hdf5": [229, 249, 281, 282, 326, 336], "serial": [229, 283], "load_pickl": [229, 290], "huge": [229, 289, 316, 344], "pycharm": 229, "sublim": 229, "aptana": 229, "emac": 229, "eclips": 229, "pydev": 229, "chri": [229, 235, 329], "rorden": 229, "dcm2nii": 229, "cabiatl": 229, "mricro": 229, "mricron": 229, "reader": [229, 290], "openli": 229, "grade": 229, "fcon_1000": 229, "nitrc": 229, "humanconnectom": [229, 278], "openneuro": 229, "gimbal_lock": [230, 337], "euler": [230, 231, 277, 337], "defici": 230, "indistinguish": 230, "spitfir": 230, "aircraft": 230, "tail": 230, "wing": 230, "roll": [230, 277], "tilt": 230, "violent": 230, "straight": [230, 287], "wait": 230, "pm": [230, 283, 346, 347], "radian": [230, 277, 287, 346], "smallmatrix": 230, "pm1": 230, "proof": 230, "mathworld": [230, 231, 277, 351], "rewrit": 230, "v_": [230, 277, 283], "v_1": 230, "v_2": 230, "conclus": [230, 255, 264], "gregslabaugh": 230, "homogen": [231, 275, 277, 283, 285], "theorem": 231, "boldsymbol": 231, "x_1": 231, "x_n": 231, "pythagora": 231, "gimbal": 231, "lock": [231, 283], "quaternion": 231, "suffer": [231, 283], "orthogon": [231, 283, 350, 351], "transpos": [231, 275, 277, 283, 285, 288], "synonym": 231, "paragon": 232, "special": [232, 252, 275, 277, 282, 283, 284, 289], "synb0": [232, 278, 290, 343], "cnn": [232, 290, 343], "horizon": [232, 249, 289, 290, 311, 330, 335, 336, 337, 338, 341, 343], "older": [232, 268, 283, 326, 328, 329, 331, 333], "april": [232, 250], "march": [232, 250], "past": 232, "dec": [232, 234, 281, 329], "colorfa": [232, 331], "exercis": 232, "filepath": [232, 282], "acknowledg": [232, 335], "intellig": 232, "bioengin": 232, "nih": [232, 281, 330], "gordon": 232, "betti": 232, "moor": [232, 283], "alfr": 232, "sloan": [232, 283], "escienc": 232, "summer": [232, 249, 250, 251, 336], "facil": 232, "gotten": [233, 252], "greatest": 233, "bleed": 233, "platform": [233, 240, 333], "conda": [233, 324, 326, 327, 329, 334], "forg": 233, "appl": [233, 277], "xcode": 233, "mint": 233, "neurodebian": 233, "mac": [233, 234, 325, 329, 338, 342, 344], "big": [233, 243, 256, 260, 277, 283, 289, 309, 327, 333, 335], "uninstal": 233, "__file__": 233, "canopi": 233, "pythonxi": 233, "64bit": [233, 249], "alloc": [233, 275, 277, 283, 285, 290], "chunk": [233, 283], "32bit": [233, 334], "okai": 233, "among": [233, 287], "temporari": [233, 275, 280, 281, 283, 342], "old": [233, 249, 329, 331, 333, 337, 338], "pythonpath": 233, "bashrc": 233, "bash_profil": 233, "retyp": 233, "export": [233, 288], "user_dir": 233, "restart": 233, "cmd": [233, 329], "powershel": 233, "python_compil": 233, "msc": 233, "1900": [233, 336], "amd64": 233, "visualstudiobuildtool": 233, "msc_ver": 233, "1700": [233, 330], "1910": [233, 335], "unabl": [233, 283, 326, 333, 338], "vcvarsal": 233, "bat": 233, "reinstal": 233, "multithread": [233, 249], "gcc": 233, "clang": 233, "brew": 233, "multilib": 233, "bash": 233, "usr": 233, "cellar": 233, "omp": [233, 326], "hombrew": 233, "hour": [233, 252, 278], "encount": [233, 269], "build_modref_templ": 233, "docgen_cmd": 233, "reference_cmd": 233, "examples_built": 233, "make_exampl": 233, "traceback": [233, 278, 287], "modulenotfounderror": [233, 336], "virtual": [233, 260], "sphinxbuild": 233, "path_to_sphinx": 233, "mkdir": [234, 235, 236, 238, 239, 240, 242, 243, 244, 245], "data_fold": [234, 238], "__dti_ax_ep2d_2_5_iso_33d_20141015095334_4": [234, 239, 243], "mv": 234, "uint16": [234, 324], "888": [234, 326], "avg": [234, 287], "940581408413976": 234, "percentil": [234, 288], "98th": 234, "psr": 234, "569": [234, 334], "451": [234, 333], "131": [234, 331], "289": [234, 249, 332, 335], "1257": [234, 326], "62918037280702": 234, "234": [234, 332], "498": [234, 333], "084": 234, "641": [234, 329], "069": 234, "488": [234, 333], "104": [234, 331], "082": 234, "486": [234, 333], "504": [234, 333], "elef": 234, "b0_thr": 234, "out_work": 234, "ga": [234, 283, 289, 290, 306, 307], "fastest": 234, "out_mask": [234, 289, 302, 314, 315], "pam5": [234, 235, 245, 249, 281, 289, 336], "out_tractogram": [234, 289, 321, 322], "tracks_from_peak": 234, "tracking_method": [234, 245, 289, 321], "random_color": [234, 236, 237, 288, 289, 311, 341], "length_gt": [234, 288, 289, 311], "length_lt": [234, 288, 289, 311], "clusters_gt": [234, 288, 289, 311], "clusters_lt": [234, 288, 289, 311], "native_coord": [234, 289, 311], "stealth": [234, 288, 289, 311], "emergency_head": [234, 289, 311], "bg_color": [234, 288, 289, 311], "disable_order_transpar": [234, 289, 311], "out_stealth_png": [234, 289, 311], "out_strat": 234, "mix_nam": [234, 236, 289], "log_level": [234, 281, 282], "log_fil": 234, "stretch": [234, 271], "nonetheless": [234, 263], "parkinson": 235, "ppmi": 235, "marek11": 235, "yeh18": [235, 236], "atlas_of_30_human_brain_bundles_in_mni_spac": [235, 236], "12089652": [235, 236], "35092": 235, "yhjc": 235, "12098397": 235, "h5": [235, 281], "subjects_smal": 235, "af_r": 235, "ccmid": 235, "cc_forcepsmajor": [235, 278], "cc_forcepsminor": 235, "cst_r": [235, 278], "emc_l": 235, "emc_r": 235, "fpt_l": 235, "fpt_r": 235, "ifof_l": 235, "ifof_r": 235, "ilf_l": 235, "ilf_r": 235, "mlf_l": 235, "mlf_r": 235, "ml_l": 235, "ml_r": 235, "mdlf_l": 235, "mdlf_r": 235, "opt_l": 235, "opt_r": 235, "or_l": 235, "or_r": 235, "stt_l": 235, "stt_r": 235, "uf_r": 235, "3805": 235, "anatomical_measur": [235, 290], "org_bundl": 235, "rec_bundl": 235, "3806": 235, "3809": 235, "3850": 235, "3851": 235, "3383": 235, "3387": 235, "3392": 235, "3552": 235, "streamlines_moved_af_l__labels__recognized_orig": 235, "streamlines_moved_af_r__labels__recognized_orig": 235, "streamlines_moved_ccmid__labels__recognized_orig": 235, "streamlines_moved_uf_l__labels__recognized_orig": 235, "streamlines_moved_uf_r__labels__recognized_orig": 235, "streamlines_moved_v__labels__recognized_orig": 235, "moved_af_l__recogn": 235, "moved_af_r__recogn": 235, "moved_ccmid__recogn": 235, "moved_uf_l__recogn": 235, "moved_uf_r__recogn": 235, "moved_v__recogn": 235, "overridden": 235, "eg": [235, 284, 286, 289, 332, 343], "bundle_profil": 235, "lmm": [235, 289], "lmm_plot": 235, "buan_thr": [235, 289, 311], "buan_highlight": [235, 289, 311], "af_l_fa_pvalu": 235, "pvalu": [235, 289, 311], "cst_l_fa_pvalu": 235, "sm_plot": 235, "dipy_buan_shap": [235, 337], "12033390": 235, "marek": 235, "kenneth": 235, "jen": [235, 289, 306], "danna": 235, "lasch": 235, "shirlei": 235, "siderowf": 235, "carolin": 235, "simuni": 235, "tanya": 235, "coffei": 235, "kieburtz": 235, "karl": 235, "flagg": 235, "emili": 235, "chowdhuri": 235, "sohini": 235, "neurobiologi": 235, "panesar": [235, 236], "fernand": [235, 236], "meola": [235, 236], "yoshino": [235, 236], "fernandez": [235, 236], "miranda": [235, 236], "vettel": [235, 236], "verstynen": [235, 236], "hcp_tractogram_zip": 236, "7013003": 236, "whole_brain_mni": 236, "rb_output": 236, "pink": [236, 237], "org_output": 236, "visit": [236, 237, 274, 284], "chandio2023": [237, 275, 289, 296], "hhttp": [], "m_uf": 237, "s_uf_li": 237, "capac": 237, "\u03bb": [237, 289, 296], "requirs": 237, "nonlinearly_mov": [237, 289], "caustiou": 237, "destin": 238, "specific_dataset": 238, "specific_data_out_fold": 238, "eigenspectrum": 239, "lpca": [239, 249, 289, 298, 335, 336, 341], "ow": [239, 265], "denoise_lpca_output": 239, "suffic": [239, 240, 242], "dwi_lpca": [239, 289], "subtl": 239, "hardli": 239, "visibl": [239, 328, 331, 335, 339], "denoise_mppca_output": 239, "textur": 239, "denoise_nlmeans_output": 239, "lcpa": 239, "veraart15": 240, "perrone15": 240, "gibbs_ringing_output": 240, "t1_brain_denois": 240, "motion_output": 242, "recons_csd_output": 243, "stanford_hardi_mask": 243, "recons_mapmri_output": 243, "recons_dti_output": 243, "save_metr": [243, 289, 291, 306, 307, 308, 309], "out_tensor": [243, 289, 307], "dti_tensor": [243, 289], "recons_dki_output": 243, "cfin_multib_mask": 243, "recons_csa_output": 243, "pam": [243, 280, 281, 288, 289, 304, 305, 321, 322, 329], "extract_pam_valu": [243, 289, 304, 305], "recons_ivim_output": 243, "ivim_mask": 243, "sort": [244, 263, 278, 280, 283, 287, 288, 289, 311, 333], "image_reg_output": 244, "path_to_static_fil": 244, "path_to_moving_fil": 244, "affine_reg_output": 244, "out_affin": [244, 289, 291, 297, 318], "syn_reg_output": 244, "out_warp": [244, 289, 292], "em": [244, 275, 289, 292], "syn_reg_warp": 244, "transform_typ": [244, 289, 293], "transform_reg_output": 244, "path_to_transform_map_fil": 244, "nb_pt": [244, 275, 284, 289, 318], "sl_reg_output": 244, "stop_fil": 245, "seed_dens": [245, 289, 321, 322], "recon": [245, 326, 335], "pve_wm": 245, "eudx_tracking_output": 245, "det_tracking_output": 245, "det": [245, 277, 283, 289, 321, 327, 328], "prob_tracking_output": 245, "prob": [245, 289, 321, 335], "closest_peaks_output": 245, "prematur": 245, "pft_output": 245, "pve_gm": 245, "pve_csf": 245, "expertis": 246, "didn": [246, 252, 254, 257, 258, 262, 264, 265, 266, 267, 269, 271, 272], "depict": [246, 265], "replic": [248, 277], "tripl": [248, 330], "quot": [248, 330, 333], "alter": [248, 287], "pymvpa": 248, "dtiflow": 249, "lpcaflow": [249, 290], "rumbaflow": 249, "vtp": [249, 281, 341, 342], "resdnn": [249, 278, 282, 341], "dkiflow": 249, "imageregistrationflow": [249, 290], "motioncorrectionflow": [249, 290], "parallelis": 249, "govern": [249, 283, 340], "cli": [249, 335, 337, 338, 339, 340, 341, 342], "10x": 249, "multiplatform": [249, 344], "134": [249, 331, 338], "vtk9": [249, 337], "typographi": 249, "tensorflow": [249, 253, 256, 260, 265, 282, 336], "smarter": 249, "critic": [249, 252, 281, 282], "mtm": [249, 335], "quickbundlesx": [249, 275, 288, 289, 290, 311, 318, 328], "tractometri": [249, 274, 330], "almost": [249, 267, 283, 331], "287": [249, 324, 329], "cvxopt": [249, 327, 333, 335], "reorient": [249, 277, 287, 324, 325, 329], "cleaner": 249, "exhibitor": [249, 250], "ohbm": [249, 250], "massiv": 249, "geodes": [249, 283, 289, 306, 307, 334], "robustli": 249, "novemb": [250, 277], "septemb": 250, "august": 250, "decemb": [250, 277], "octob": [250, 275], "june": [250, 277], "februari": 250, "magazin": 250, "nov": [250, 283, 350], "22nd": 250, "3x": 250, "teach": 250, "fundament": 250, "seminar": 250, "neuroscientist": 250, "qbin": 250, "dont": 250, "creator": 250, "attend": 250, "hbm": [250, 324, 333], "0dev": 250, "win": 250, "took": [250, 252, 255, 259, 262, 269], "mia": 250, "school": [250, 251], "mcgill": [250, 278], "3rd": [250, 252, 287], "sprint": 250, "me": [251, 252, 253, 254, 256, 260, 262, 266, 268, 269, 325], "optimist": 251, "competit": [251, 252, 278], "myself": [251, 253], "necess": 251, "comfort": 251, "zone": [251, 283], "ventur": 251, "student": 251, "nyu": 251, "graduat": 251, "healthcar": 251, "pursu": 251, "career": 251, "came": [251, 264, 282], "senior": 251, "linkedin": 251, "mentor": [251, 252, 253, 262, 264, 268, 269], "prompt": [251, 260], "heard": [251, 252], "undergrad": [251, 252], "never": [251, 275, 287], "muster": 251, "leap": 251, "narrow": [251, 346, 348], "firstli": [251, 270], "knowledg": [251, 252, 283], "ml": [251, 252, 275, 289, 296], "hook": 251, "thoroughli": 251, "began": 251, "soon": [251, 272], "submit": [251, 252, 272], "interview": [251, 252], "voila": 251, "passion": 251, "hei": 252, "shilpi": [252, 343], "dayananda": 252, "sagar": 252, "bangalor": 252, "2024": [252, 337], "dirti": 252, "awesom": 252, "coursera": 252, "tick": 252, "tech": 252, "excit": 252, "intimid": 252, "thrill": 252, "serious": 252, "kaggl": [252, 337], "absolut": [252, 275, 277, 282, 283, 289, 326, 330, 337, 350], "love": 252, "curiou": 252, "stumbl": 252, "upon": [252, 268, 269, 270, 275, 283, 287, 289, 331, 332], "tardi": 252, "1825": [252, 335], "intend": [252, 254, 257, 261, 262, 264, 265, 267, 270, 272, 275, 282, 288, 289, 309, 342], "fire": [252, 277], "folk": 252, "tackl": 252, "gave": [252, 264, 269], "skill": 252, "psf": [252, 283], "dive": 252, "breez": 252, "introductori": 252, "gpt": 252, "understand": [252, 254, 258, 267, 271, 283, 348], "2749": [252, 343], "wasn": [252, 264, 266, 333], "room": [252, 325], "honestli": 252, "feel": 252, "latecom": 252, "ton": [252, 260], "plu": 252, "submiss": [252, 278], "period": [252, 253, 275, 277, 281, 282, 283, 284, 337], "begun": 252, "polish": 252, "4th": 252, "woke": 252, "wreck": 252, "couldn": [252, 259, 268, 270], "45pm": 252, "threw": 252, "battl": 252, "distract": 252, "30am": 252, "rush": 252, "calm": 252, "shot": 252, "dashboard": [252, 272], "phone": 252, "hadn": 252, "whoop": 252, "roomi": 252, "felt": [252, 266, 269, 277], "undilut": 252, "joi": 252, "surprisingli": 252, "told": 252, "congratul": 252, "majorli": [252, 269], "spent": [252, 254, 260, 270], "cti": [252, 254, 258, 261, 262, 266, 267, 269, 270, 278], "blog": [252, 253, 255, 256, 260, 263, 268], "mostli": [252, 261, 277, 283, 287, 324, 331, 334], "gtab1": [252, 267], "gtab2": [252, 267], "btensor": [252, 257, 338], "strengthen": 252, "hint": 252, "bunch": [252, 256, 258, 287, 290], "mess": [252, 329], "formula_": 252, "spend": 252, "broadcast": [252, 277, 283, 284, 335, 342], "indexerror": [252, 287, 335], "gsoc": [253, 272, 329, 330], "chalk": 253, "agenda": 253, "pytorch": [253, 265], "vq": [253, 259, 260], "vae": [253, 259, 260, 271], "posterior": [253, 255, 256, 271, 277, 281], "tradit": [253, 255], "latent": [253, 255, 256, 260, 265], "blurrier": [253, 263], "earli": [253, 272], "understad": 253, "ixi": 253, "exploratori": 253, "sex": 253, "survei": 253, "dde": [254, 278], "q1": 254, "q2": 254, "permit": [254, 257, 260, 277, 283, 284, 289], "resum": [254, 257], "impress": 255, "audio": 255, "bypass": 255, "therebi": 255, "embed": [255, 265], "categor": [255, 256], "truli": 255, "pixelcnn": [255, 256], "deliv": [255, 256, 265, 271], "lightn": 255, "autoregress": [255, 256], "mnist": [255, 256, 260, 263, 265], "layer": [255, 256, 259, 265, 268, 282, 283, 284, 289, 302, 337], "tfp": [255, 256], "distrubutionallambda": 255, "collat": [255, 259], "cifar": 255, "brush": 255, "dig": 255, "kera": [255, 256, 259, 260, 268, 282], "weekli": [255, 339], "efficaci": 256, "answer": [256, 287], "distributionlambda": 256, "alon": [256, 265, 271, 282], "breakthrough": 256, "ddpm": [256, 259, 271], "nonequilibrium": 256, "thermodynam": 256, "schedul": [256, 275, 289, 292, 326], "reparametr": 256, "needl": 256, "scalabl": 256, "trainabl": [256, 265], "nvidia": [256, 260], "a100": 256, "gpu": [256, 260, 265], "difficult": 256, "dai": [256, 259], "instabl": [256, 277], "multimod": 256, "impercept": 256, "perceptu": 256, "hpc": [256, 260, 268], "youtub": 257, "wherea": [257, 259, 260, 263, 265, 271, 277, 283, 289], "cti_test": [257, 258], "convers": [257, 264, 266, 269, 283, 335, 351], "outcom": [258, 289], "crucial": [258, 282], "gain": [258, 283, 285], "deeper": 258, "stablediffus": 259, "uncondit": [259, 260], "constitut": 259, "residualblock": 259, "attentionblock": 259, "timestep": [259, 260], "ddim": 259, "upsampling2d": 259, "conv2d": 259, "groupnorm": [259, 268], "swish": 259, "cifar10": 259, "nfb": [259, 271], "iu": [260, 268], "slate": 260, "jong": [260, 343], "slurm": 260, "x11": 260, "firefox": 260, "browser": 260, "friendli": [260, 337], "vain": 260, "resort": 260, "train_step": 260, "tf": [260, 282, 287], "reduce_mean": 260, "unreduc": 260, "ala": 260, "led": 260, "tweak": 260, "mirroredstrategi": 260, "prod": 260, "v100": 260, "rate": [260, 265, 284], "epoch": [260, 263, 282], "108": [260, 279, 331], "conv": 260, "hyperparamet": 260, "fid": 260, "impart": 260, "compli": 261, "cti_pr": 261, "rearrang": 262, "wouldn": [262, 288], "600k": 263, "affine_transform": [263, 271], "minmax": [263, 271], "batch_siz": [263, 265, 271, 282], "suit": [263, 331, 333], "blurri": [263, 271], "outlin": [263, 286], "outlook": 263, "hitch": 263, "perfect": [263, 275], "theme": 263, "checkerboard": 263, "anyhow": 263, "plai": [263, 265, 283], "hyper": 263, "alongsid": [263, 283, 287], "cti_design_matrix": 264, "weren": [264, 267], "d_flat": 264, "from_3x3_to_6x1": [264, 270, 290], "ccti": [264, 266, 267], "talk": [264, 266], "contact": [264, 266], "root2": [264, 266, 267], "dki_test": 264, "unsatisfactori": 265, "proven": 265, "brat": 265, "predomin": 265, "vectorquant": 265, "scratch": [265, 283, 326, 335], "quantiz": [265, 275, 289, 292], "resiz": [265, 271], "3r": 265, "reshuffl": 265, "icnr": 265, "24hr": 265, "checkpoint": 265, "0037": 265, "blob": 265, "curvatur": [265, 287, 341, 343], "0067": 265, "0031": 265, "0013": [265, 271], "bn": 265, "lesser": 265, "implicit": [265, 335], "learner": 265, "ldm": [265, 271], "spyder": 266, "ongo": 266, "hasn": 266, "vex": 266, "accomplish": [267, 275, 283, 289], "ls_fit_cti": [267, 269, 270], "cls_fit_cti": 267, "split_cti_param": 267, "vital": 267, "cti_pred_sign": 267, "test_fit": 267, "test_split_cti_param": [267, 270], "test_cti_fit": [267, 269, 270, 272], "test_cti": 267, "b1": [267, 277, 288, 336], "b2": [267, 283, 288], "bloomington": 268, "dedic": 268, "sbatch": 268, "debug": [268, 271, 275, 277, 281, 282, 326], "dataload": 268, "distributionstrategi": 268, "miss": [268, 324, 326, 327, 328, 329, 331, 333, 335, 336, 338, 340, 342], "personnel": 268, "deeplearn": 268, "downgrad": 268, "batchnorm": 268, "datagener": 268, "accommod": [268, 270], "input_shap": [268, 282], "hahahah": 268, "scarciti": 268, "glad": 268, "k_aniso": [269, 270], "k_iso": [269, 270], "from_a_6x6_to_21x1": 269, "common_fit_method": 270, "multi_tensor_fit": 270, "multi_voxel_fit": [270, 290, 341], "decor": [270, 277, 283, 324, 326, 328, 329, 331, 336, 342], "cti_return": 270, "cti_param": 270, "broken": [270, 325, 326, 327, 328, 329, 330, 333, 335, 336, 337, 343], "allclos": [270, 277, 287, 331], "1059": [270, 326], "anymor": [270, 325, 329, 331, 333, 338, 342], "draft": 270, "overflow": [270, 324, 329, 333], "monai": 271, "vqvae": 271, "cc359": 271, "calgari": 271, "campina": 271, "transform_img": [271, 290], "foreground": 271, "purpl": 271, "dataset_us": 271, "b12": 271, "anterior": [271, 277, 281], "topdown": 271, "ventral": 271, "dorsal": 271, "b5": 271, "kl": 271, "num_res_channel": 271, "vqave": 271, "b10": 271, "prioriti": 271, "dm3d": 271, "erron": 271, "gui": 274, "unittest": [274, 333], "__version__": 274, "pycpd": 275, "siavashk": 275, "encapsul": 275, "codomain": 275, "parzenjointhistogram": 275, "parzen": 275, "parzen62": 275, "cubic": [275, 283, 287, 289, 292], "annal": 275, "1065": [275, 326], "1076": [275, 326], "1962": [275, 336], "kwd": 275, "enum": [275, 281], "diagnos": 275, "prealign": 275, "metric_kwarg": 275, "ride": [275, 281], "ndarrai": [275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 338], "dwi_affin": 275, "template_affin": 275, "reg_kwarg": 275, "warped_b0": 275, "fist": 275, "disp": [275, 277], "domain_img": 275, "codomain_img": 275, "between_affin": 275, "ret_metr": 275, "gradual": 275, "boolean": [275, 277, 279, 282, 283, 287, 288, 289], "sampling_proport": 275, "interv": 275, "xopt": [275, 277, 281, 290], "fopt": [275, 277, 281, 290], "isosc": [275, 338, 341], "kwarg": [275, 277, 278, 281, 282, 283, 284, 289, 324, 338, 342], "ref_affin": 275, "b0_ref": 275, "xform_img": 275, "affine_arrai": 275, "n_point": [275, 279, 286, 287, 289, 310, 337], "native_resampl": 275, "sigma2": 275, "low_rank": 275, "num_eig": 275, "max_iter": 275, "arg": [275, 277, 278, 281, 282, 283, 284, 289, 330], "cloud": 275, "nxd": 275, "mxd": 275, "ty": 275, "consecut": [275, 335], "span": [275, 277, 283], "exclus": [275, 287], "mxn": 275, "pt1": 275, "nx1": 275, "p1": 275, "mx1": 275, "likelihoo": 275, "lowrank": 275, "get_registration_paramet": [275, 290], "registration_paramet": 275, "transform_point_cloud": [275, 290], "update_transform": [275, 290], "arxiv": [275, 282, 283], "0905": 275, "2635": [275, 342], "update_vari": [275, 290], "eig_fgt": 275, "gauss": [275, 289, 292], "domain_grid_shap": 275, "domain_grid2world": 275, "codomain_grid_shap": 275, "codomain_grid2world": 275, "domain_grid": 275, "codomain_grid": 275, "stream": 275, "get_affin": [275, 290, 326], "set_affin": [275, 290], "affine_inv": 275, "unchang": [275, 277, 283, 285, 287], "image_grid2world": 275, "sampling_grid_shap": 275, "sampling_grid2world": 275, "resample_onli": 275, "domain_shap": 275, "codomain_shap": 275, "drive": 275, "neg_mi": 275, "distance_and_gradi": [275, 290], "neg_mi_grad": 275, "grad": [275, 287], "bfg": [275, 277, 284, 333], "newton": [275, 277, 282, 341], "dogleg": [275, 277], "trust": [275, 277, 283], "ncg": [275, 277], "n_scale": [275, 289, 292], "docstring_addendum": [275, 290], "disp_shap": 275, "disp_grid2world": 275, "compute_inversion_error": [275, 290], "comp": [275, 283], "dinv": 275, "expand_field": [275, 290], "expand_factor": 275, "new_shap": 275, "get_backward_field": [275, 290], "is_invers": 275, "get_simplified_transform": [275, 290], "diffeomorh": 275, "interpret_matrix": [275, 290], "shallow_copi": [275, 290], "shallow": 275, "new_map": 275, "image_world2grid": 275, "out_shap": 275, "out_grid2world": 275, "_warp_forward": 275, "_warp_backward": 275, "transform_point": [275, 290], "coord2world": 275, "world2coord": 275, "transform_points_invers": [275, 290], "warp_endomorph": [275, 290], "endomorph": 275, "inherit": [275, 279, 283, 289, 301], "costli": 275, "computation": [275, 283], "simpler": [275, 331], "abstract": [275, 277, 283, 284, 288, 289], "get_map": [275, 290, 338], "set_level_it": [275, 290], "inv_tol": [275, 289, 292], "static_to_ref": 275, "current_displac": 275, "new_displac": 275, "disp_world2grid": 275, "time_sc": 275, "d2": [275, 281, 283], "d1": [275, 283], "mean_norm": 275, "csv": [275, 277, 281, 282, 283, 284], "xl": [275, 277, 281, 282, 283, 284], "gnumer": [275, 277, 281, 282, 283, 284], "cater": [275, 277, 281, 282, 283, 284], "hierarchi": [275, 277, 281, 282, 283, 284], "java": [275, 277, 281, 282, 283, 284], "gnu": [275, 277, 281, 282, 283, 284], "charg": [275, 277], "compute_backward": [275, 290], "compute_forward": [275, 290], "free_iter": [275, 290], "registrationoptim": 275, "get_energi": [275, 290], "initialize_iter": [275, 290], "unpract": 275, "set_levels_abov": [275, 290], "set_levels_below": [275, 290], "set_moving_imag": [275, 290], "moving_spac": 275, "moving_direct": 275, "set_static_imag": [275, 290], "static_spac": 275, "static_direct": 275, "use_moving_image_dynam": [275, 290], "original_moving_imag": 275, "diffeomorficmap": 275, "use_static_image_dynam": [275, 290], "original_static_imag": 275, "inner_it": 275, "q_level": 275, "double_gradi": 275, "step_typ": 275, "gauss_newton": [275, 289, 292], "transfer": [275, 330], "seidel": [275, 289, 292], "demon": [275, 289, 292, 328, 329], "compute_demons_step": [275, 290], "forward_step": 275, "compute_gauss_newton_step": [275, 290], "bruhn": 275, "weickert": 275, "bruhn05": 275, "andr": 275, "joachim": 275, "ultim": 275, "iccv": 275, "use_double_gradi": 275, "dynam": 275, "originalstaticimag": 275, "vercauteren": 275, "vercauteren09": 275, "tom": [275, 326, 342, 343], "xavier": 275, "pennec": [275, 283], "aymer": 275, "perchant": 275, "nichola": 275, "ayach": [275, 283], "delta_field": 275, "sigma_sq_field": 275, "gradient_field": 275, "lambda_param": 275, "coarser": 275, "infinit": [275, 285, 287, 335], "sigmafield": 275, "cval": [275, 289, 317], "pool": [275, 279, 282, 283, 289, 310, 317, 332], "f_name": 275, "num_level": 275, "input_spac": 275, "sigma_factor": 275, "mask0": 275, "weaker": 275, "from_level": 275, "get_affine_inv": [275, 290], "get_domain_shap": [275, 290], "get_expand_factor": [275, 290], "to_level": 275, "get_imag": [275, 290], "get_scal": [275, 290], "get_sigma": [275, 290], "get_spac": [275, 290], "print_level": [275, 290], "aka": 275, "hungri": [275, 325], "l_bfgs_b": [275, 284], "powel": [275, 277, 284], "mat": [275, 277, 283, 287, 332], "matopt": 275, "matopt_histori": 275, "func": [275, 277, 283, 285, 289], "optimum": [275, 277, 283], "matrix_histori": 275, "matrix1": 275, "matrix2": 275, "block_siz": 275, "min_siz": [275, 284], "default_bound": 275, "rm_small_clust": [275, 289, 318, 343], "maxit": [275, 277, 283], "select_random": 275, "greater_than": [275, 284, 289, 316, 318], "less_than": [275, 283, 284, 289, 316, 318], "qbx_thr": [275, 289, 318], "n_bundl": 275, "lst": 275, "unmatch": 275, "precomput": [275, 283], "matched_pair": [275, 289], "unitari": [275, 288], "shape_profilen": 275, "stdv": 275, "dipycor": 277, "bench": [277, 283, 284, 287], "svv": [277, 283, 284, 287], "ini": [277, 283, 284, 287], "algebra": 277, "descriptor": 277, "reserv": [277, 282, 284], "redistribut": [277, 284, 289], "met": [277, 284, 289], "retain": [277, 284, 288, 289], "disclaim": [277, 284, 289], "materi": [277, 284, 289], "endors": [277, 284], "BY": [277, 284, 289], "THE": [277, 284, 289], "holder": 277, "AND": [277, 281, 284, 289], "AS": [277, 284, 289], "OR": [277, 284, 289], "warranti": [277, 278, 284, 289], "BUT": [277, 284, 289], "TO": [277, 284, 289], "OF": [277, 284, 289], "merchant": [277, 284, 289], "FOR": [277, 284, 289], "NO": [277, 284, 289], "shall": [277, 284, 289], "owner": 277, "liabl": [277, 284, 289], "indirect": [277, 284, 289], "incident": [277, 284, 289], "exemplari": [277, 284, 289], "consequenti": [277, 284, 289], "damag": [277, 278, 284, 289], "procur": [277, 284, 289], "substitut": [277, 283, 284, 289], "profit": [277, 284, 289], "busi": [277, 284, 289], "interrupt": [277, 284, 289], "liabil": [277, 284, 289], "contract": [277, 284, 289], "strict": [277, 278, 281, 284, 289], "neglig": [277, 284, 289], "aris": [277, 284, 289], "IF": [277, 284, 289], "SUCH": [277, 284, 289], "declar": [277, 282, 330, 331, 335], "overhead": [277, 283], "untrigg": 277, "raymond": 277, "hetting": 277, "rcn": 277, "htm": 277, "datamodel": 277, "octahedron": [277, 331], "modulu": 277, "singular": [277, 279, 289, 298, 299, 347], "lon": 277, "lat": 277, "parameter": [277, 342], "duration_in_second": [277, 290], "init_hemispher": 277, "num_iter": 277, "init_pointset": 277, "inclin": [277, 278, 351], "azimuth": [277, 278, 283, 351], "south": [277, 351], "north": [277, 351], "west": [277, 351], "east": [277, 351], "zenith": [277, 351], "counter": 277, "clockwis": 277, "geograph": 277, "nomenclatur": [277, 336], "latitud": [277, 351], "longitud": [277, 351], "array_lik": [277, 278, 283, 286, 287], "cartes": [], "spherical_coordinate_system": 277, "wolfram": 277, "sphericalcoordin": 277, "hypotenus": 277, "sph2cart": [277, 351], "unusu": [277, 335], "trivial": [277, 330], "vec": [277, 283], "nvec": 277, "l2n": 277, "keepdim": 277, "flatten": [277, 283, 285], "taylor": [277, 285], "tetha": 277, "teta2": 277, "theta2": 277, "ur": 277, "rad2deg": 277, "npd": 277, "niethamm": 277, "estepar": 277, "bouix": 277, "shenton": 277, "cf": [277, 283, 332], "eng": 277, "biol": 277, "2622": [277, 342], "pubm": 277, "17946125": 277, "pmc2791793": 277, "pts1": 277, "pts2": 277, "check_radiu": 277, "5708": 277, "7124": 277, "vecs1": 277, "vecs2": 277, "v_co": 277, "vco": 277, "lambert": 277, "mardia": 277, "jupp": 277, "161": [277, 332], "y_1": 277, "y_2": 277, "annulu": 277, "vice": [277, 337], "versa": [277, 337], "aj": 277, "sxyz": 277, "gohlk": 277, "lfd": 277, "uci": 277, "yaw": 277, "syxz": 277, "34786452": 277, "383436184": 277, "_axes2tupl": 277, "partit": 277, "persp": 277, "m0": 277, "smallest": [277, 283, 284, 287], "collinear": [277, 324], "furthest": 277, "3x3": [277, 279, 283], "ru": 277, "mat1": 277, "mat2": 277, "matn": 277, "circumfer": 277, "otherw": 277, "psampl": 277, "frame": [277, 287, 289], "third": [277, 279, 283, 289, 310], "a_": [277, 283], "gsoc2015dipydki": 277, "blogspot": 277, "rnh": 277, "is_hemi": 277, "pole": [277, 283, 287], "rstudio": 277, "pub": 277, "s3": [277, 278], "amazonaw": 277, "27121_a22e51b47c544980bad594d5e0bb2d04": 277, "noqa": [277, 278], "qval": [277, 283, 290], "ie": [277, 283], "immut": 277, "factori": [277, 328], "gradient_strength": [277, 290], "bmag": [277, 283], "rbval": 277, "expireddeprecationerror": [277, 281, 283, 287], "log_": [277, 283], "atol": [277, 281], "bo_threshold": 277, "ste": 277, "cte": 277, "cigar": 277, "30m": 277, "10m": 277, "sq2": 277, "gt": [277, 284, 288], "03e": 277, "compens": 277, "leemans2009": 277, "1336": [277, 327], "1349": [277, 327], "bvector": [277, 283, 289, 297, 298, 304, 305, 307, 325], "bmagmax": 277, "bmaxmag": 277, "gap": [277, 283], "regroup": 277, "n_bval": 277, "non_zero": 277, "ztol": 277, "trace": [277, 290, 346], "asymmetri": 277, "bdelta": 277, "b_eta": 277, "topgaard": 277, "valiullin": 277, "ed": 277, "porou": 277, "royal": 277, "chemistri": 277, "ornt1": [277, 281], "ornt2": [277, 281], "orn1": [277, 281], "orn2": [277, 281], "current_ornt": [277, 281], "new_ornt": [277, 281], "stort": [277, 281], "lp": [277, 281], "inferior": [277, 281], "string_ornt": [277, 281], "ornt": [277, 281], "add_nod": [277, 290], "add_edg": [277, 290], "up_short": [277, 290], "wp": 277, "attr": [277, 326], "all_path": [277, 290], "del_nod": [277, 290], "del_node_and_edg": [277, 290], "down_short": [277, 290], "shortest_path": [277, 290], "arr": [277, 279, 283, 287], "num_bin": 277, "janeriksolem": 277, "mixin": 277, "offer": [277, 350], "accessor": 277, "uniformtimeseri": 277, "sampling_r": 277, "sampling_interv": 277, "lose": [277, 340], "circular": [277, 285, 326, 327], "chain": 277, "_no_reset": 277, "protect": 277, "caveat": 277, "emptor": 277, "recomput": 277, "afterward": 277, "magicprop": 277, "__dict__": 277, "jac": [277, 283], "hess": 277, "hessp": 277, "jacobian": [277, 283], "hessian": 277, "nelder": 277, "mead": 277, "anneal": 277, "tnc": 277, "cobyla": 277, "slsqp": 277, "ineq": 277, "xk": 277, "show_opt": 277, "nfev": [277, 290], "nit": [277, 290, 333], "print_summari": [277, 290], "sklearn": [277, 279, 283, 289, 301, 336, 341], "signatur": [277, 283, 334, 343], "coef_": 277, "y_hat": 277, "n_sampl": 277, "n_featur": 277, "a_0": 277, "h_i": 277, "s_j": 277, "slack": 277, "polynomi": [277, 283, 350], "design_matrix": [277, 290, 338], "pipermail": 277, "027700": 277, "momentum": 277, "non_neg": [277, 283], "check_error_it": 277, "max_error_check": 277, "converge_on_ss": 277, "xh": 277, "descent": 277, "persist": [277, 326], "sse": [277, 283], "h_best": 277, "caller": 277, "print_stat": [277, 290], "prin": 277, "1000000": [277, 284, 289], "src": 277, "profiling_tutori": 277, "line_profil": 277, "pstat": 277, "slowest": 277, "function_nam": 277, "ix": 277, "100001": 277, "200002": 277, "iz": 277, "300003": 277, "400004": 277, "wichmann": 277, "hill": 277, "1614": [277, 329], "1622": [277, 329], "9473": 277, "csda": 277, "019": 277, "sciencedirect": 277, "b6v8v": 277, "4k7f86w": 277, "a3a33291b8264e4c882a8f21b6e43351": 277, "r_number": 277, "uniformli": 277, "183": [277, 332], "1982": [277, 336], "rectangularli": 277, "95e": 277, "claim": 277, "30000": 277, "arithmet": 277, "5212632": 277, "s1": [277, 284], "s2": [277, 284], "ecuy": 277, "portabl": 277, "742": [277, 325, 329], "749": [277, 324], "774": 277, "30584e": 277, "unspecifi": [277, 278, 288], "delaunai": [277, 278, 331], "triangul": [277, 278, 288], "find_closest": [277, 290], "vertex": [277, 283, 287, 333], "____": 277, "subdivis": 277, "new_spher": 277, "remap": [277, 278, 335], "classmethod": [277, 289], "from_spher": [277, 290], "__________": 277, "return_invers": 277, "hemi": 277, "const": 277, "unstabl": [277, 329], "reimplement": 277, "fmin_slsqp": 277, "number_of_edg": 277, "buffer": [277, 278, 283, 285, 326], "__new__": [277, 283, 285], "expos": [277, 278, 283, 285], "fortran": [277, 283, 285], "c_contigu": [277, 283, 285], "owndata": [277, 283, 285], "writeabl": [277, 283, 285, 333], "flatit": [277, 283, 285], "todo": [277, 283, 285, 326], "imaginari": [277, 283, 285, 350], "items": [277, 283, 285], "nbyte": [277, 283, 285, 290], "contigu": [277, 283, 285], "jump": [277, 283, 285], "ctype": [277, 283, 285], "garbag": [277, 283, 285], "coord": [277, 325], "spherepointpick": 277, "fisher": 277, "lewi": 277, "embleton": 277, "coverag": [277, 326, 333, 335, 340, 341], "max_mean_cosin": 277, "max_cosine_dist": 277, "7071067811865475": 277, "unimport": 277, "12f": 277, "707106781187": 277, "recursion_level": 277, "n1": [277, 287], "n2": 277, "n3": [277, 330], "shife": [], "perm": 277, "permut": [277, 283], "bank": 277, "n1xn2xn2": 277, "ni": [277, 324, 330], "lowpass": 277, "highpass": 277, "lo": 277, "subband": 277, "synthesi": 277, "n1xn2xn3": 277, "sf1": 277, "sf2": 277, "sf3": 277, "sfi": 277, "af1": 277, "af2": 277, "af3": 277, "afi": 277, "cell": [277, 324], "byte_data": 278, "bytes_or_buff": 278, "handler": 278, "__str__": [278, 340], "repr": [278, 328], "sy": [278, 289], "getdefaultencod": 278, "fib1": 278, "fib0": 278, "fib2": 278, "sv2": 278, "skeleton": [278, 334], "lsc": 278, "c3": 278, "symmetric642": 278, "repulsion100": [278, 283], "repulsion200": 278, "vert": [278, 288], "720": [278, 326, 335, 343], "func_coef": 278, "func_discret": 278, "dwi2sh": 278, "maptlotlib": 278, "model_nam": 278, "unsign": [278, 283, 289, 337], "sdp_constraint": 278, "id_constraint_ord": 278, "fsrc": 278, "fdst": 278, "total_length": 278, "16384": 278, "stored_md5": 278, "md5": [278, 289, 303, 326, 332], "data_s": 278, "checksum": [278, 289, 303], "mb": 278, "fetchererror": 278, "site": [278, 333, 336], "3shell": 278, "nath": [278, 282], "schill": [278, 282], "evac": [278, 289, 290, 302, 343], "park": [278, 282, 289, 302, 343], "session": 278, "rc": [278, 324], "1993": [278, 336], "mcconnel": 278, "neurolog": 278, "fee": 278, "herebi": 278, "equip": 278, "injuri": 278, "misus": [278, 326], "oneof": 278, "small_101d": [278, 285], "pittsburgh": 278, "gqi_vector": [278, 334], "small_25": 278, "10x8x2": 278, "test_piesno": 278, "cb_2": 278, "wild": 278, "bruker": 278, "80x160x5": 278, "110x110x500\u03bcm": 278, "spread": 278, "drawn": [278, 288], "subject1_test": 278, "subject1_retest": 278, "subject2_test": 278, "subject2_retest": 278, "with_raw": 278, "meta": 278, "uw": 278, "exp_bundles_map": 278, "renauld": [278, 342], "bernier": 278, "thalamu": 278, "eeg": [278, 330], "bundles_list": 278, "ref_anat": 278, "file1": 278, "file2": 278, "arraysequ": [278, 281, 287, 326, 327, 343], "dataset_descript": 278, "json": [278, 289], "bidsvers": 278, "dump": [278, 343], "bid": 278, "hcp_bucket": 278, "openaccess": 278, "profile_nam": 278, "hcp_1200": 278, "aws_access_key_id": 278, "aws_secret_access_kei": 278, "bucket": 278, "aw": 278, "credenti": 278, "xxxxxxxxxxxxxxxx": 278, "publicdata": 278, "gorgolewski": [278, 329], "160044": 278, "ndarek918ec2": 278, "ima": [279, 287], "fimau": 279, "fimao": 279, "5x5": 279, "fima": 279, "vg": [279, 289, 310], "pca_method": [279, 289, 298, 299], "eig": [279, 289, 298, 299], "out_dtyp": 279, "suppress_warn": 279, "svd": [279, 289, 298, 299, 326, 327], "occasion": [279, 289, 298, 299], "tau_": [279, 289, 298], "patch_siz": [279, 342], "patch_radius_sigma": 279, "descoteaux08": [279, 289, 300], "wiest": [279, 289, 300], "daessl\u00e9": [279, 289, 300], "nicola": [279, 289, 300], "christian": [279, 283, 289, 300], "rachid": [279, 289, 300], "itermax": 279, "ep": [279, 283, 287], "realis": 279, "fmri": 279, "repetit": 279, "cord": 279, "floor": 279, "197": [279, 333], "disable_background_mask": 279, "ok": 279, "oversmooth": 279, "un": [279, 328, 333], "inaccuraci": 279, "nonloc": 279, "1x1x1": [279, 284, 289, 315], "lasso": [279, 283, 289, 301], "sklearnlinearsolv": [279, 283, 289, 290, 301], "scikit": [279, 283, 284, 289, 301], "linear_model": [279, 283, 289, 301, 336], "linearregress": [279, 289, 301], "regressormixin": [279, 283, 289, 301], "sphere_ev": 280, "xtol": [280, 283], "finder": [280, 331], "is_symmetr": 280, "descend": [280, 283], "gfa_thr": 280, "sh_basis_typ": 280, "invb": [280, 283], "tempfil": [280, 281, 342], "tempdir": [280, 333], "subprocess": [280, 283, 289, 304, 305], "cpu_count": [280, 283, 289, 304, 305], "angelino": [280, 283, 285, 350], "fitzgibbon": [280, 283, 285, 350], "510": [280, 283, 285, 333, 350], "fibernavig": [280, 326], "hdfgroup": 281, "storag": [281, 287], "mkstemp": 281, "temp": [281, 332], "dpy_exampl": 281, "fd": 281, "dpw": 281, "write_track": [281, 290], "dpr": 281, "read_track": [281, 290], "read_tracksi": [281, 290], "as_ndarrai": 281, "arrayproxi": 281, "return_coord": 281, "aff2axcod": 281, "hdr": 281, "peaksandmetr": [281, 288, 290, 326], "fname_shm": 281, "fname_dir": 281, "fname_valu": 281, "fname_indic": 281, "fname_gfa": 281, "reshape_dir": 281, "attach": 281, "fh": 281, "neat": 281, "voxmm": [281, 284, 287, 290], "data_per_point": [281, 290, 341], "data_per_streamlin": [281, 289, 290, 321, 322], "awar": [281, 347], "verif": 281, "sft_1": 281, "sft_2": 281, "compute_bounding_box": [281, 290], "dtype_dict": [281, 290], "from_sft": [281, 290], "get_data_per_point_kei": [281, 290], "get_data_per_streamline_kei": [281, 290], "get_streamlines_copi": [281, 290], "epsilon": [281, 337], "indices_to_remov": 281, "indices_to_keep": 281, "to_cent": [281, 290], "to_origin": [281, 290], "target_origin": 281, "to_spac": [281, 290], "target_spac": 281, "trk_header_check": 281, "ttype": 281, "loader": 281, "saver": 281, "image_data": 281, "intent": 281, "img_orig": 281, "compliant": 281, "incom": 281, "nimh": 281, "gov": 281, "nifti1field": 281, "nifti1fields_pag": 281, "reference_1": 281, "reference_2": 281, "tractogram_typ": 281, "datafram": [281, 286], "panda": 281, "helper": [281, 282, 283, 287], "file_nam": [281, 288], "ply": 281, "stl": 281, "xml": 281, "vtkpolydata": 281, "color_array_nam": 281, "to_lp": 281, "mitkdiffus": 281, "advers": 282, "speech": 282, "relu": 282, "vinci": 282, "booher": 282, "wang": 282, "caron": 282, "wen": 282, "newman": 282, "e0274396": 282, "0274396": 282, "histolog": 282, "sig_length": 282, "mean_squared_error": 282, "loss_weight": 282, "sgd": 282, "rmsprop": 282, "adagrad": 282, "adadelta": 282, "mean_absolute_error": 282, "mean_absolute_percentage_error": 282, "mean_squared_logarithmic_error": 282, "squared_hing": 282, "hing": 282, "categorical_hing": 282, "logcosh": 282, "categorical_crossentropi": 282, "sparse_categorical_crossentropi": 282, "binary_crossentropi": 282, "kullback_leibler_diverg": 282, "poisson": 282, "binary_accuraci": 282, "categorical_accuraci": 282, "top_k_categorical_accuraci": 282, "sparse_categorical_accuraci": 282, "sparse_top_k_categorical_accuraci": 282, "max_queue_s": 282, "worker": [282, 283], "use_multiprocess": 282, "return_dict": 282, "silent": 282, "queue": [282, 337], "validation_split": 282, "validation_data": 282, "initial_epoch": 282, "steps_per_epoch": 282, "validation_step": 282, "validation_batch_s": 282, "validation_freq": 282, "x_val": 282, "y_val": 282, "Its": [282, 283, 285], "load_weight": [282, 290], "save_weight": [282, 290], "textual": 282, "nonetyp": 282, "train_test_split": [282, 290], "test_siz": 282, "train_siz": 282, "random_st": 282, "stratifi": 282, "complement": 282, "glossari": 282, "x_train": 282, "x_test": 282, "y_train": 282, "y_test": 282, "out_channel": 282, "kernel_s": 282, "drop_r": 282, "n_layer": 282, "layer_typ": 282, "invoc": [282, 332, 333], "init_scop": 282, "input_spec": 282, "savedmodel": 282, "ecosystem": 282, "tfmot": 282, "tflite": 282, "crf": [282, 289], "fetch_default_weight": [282, 290], "load_model_weight": [282, 290], "weights_path": 282, "voxsiz": 282, "return_affin": 282, "return_prob": 282, "wrapper": [282, 283, 331], "ndarri": [282, 283], "pred_output": 282, "input_data": 282, "model_scal": 282, "basis_typ": [282, 283], "histologi": 282, "resdnn_model": 282, "fetch_model_weights_path": 282, "histo_resdnn_weight": 282, "mimick": 282, "parvathaneni": 282, "hainlin": 282, "huo": 282, "stepniewska": 282, "untap": 282, "220": [282, 333], "227": [282, 332], "bermudez": 282, "st\u0119pniewska": 282, "1911": [282, 335], "07927": 282, "chunk_siz": 282, "assembl": 282, "nonzero": [282, 284], "pred_sh_coef": 282, "num_hidden": 282, "act_hidden": 282, "dropout": 282, "num_out": 282, "act_out": 282, "softmax": 282, "perceptron": 282, "batchsiz": 282, "testsiz": 282, "outputs": 282, "disco": 282, "blaber": 282, "landman": 282, "synthes": 282, "cai": 282, "roger": 282, "e0236418": 282, "min_v": 282, "max_v": 282, "new_min": 282, "new_max": 282, "norm_min": 282, "norm_max": 282, "init_shap": 282, "voxelspac": 282, "transformed_img": 282, "ori_shap": 282, "recovered_img": 282, "reus": [17, 283], "dire": 283, "summat": 283, "methodologi": 283, "funk": 283, "radon": 283, "bx": 283, "plug": 283, "rewritten": 283, "sh_coef": 283, "mymodel": 283, "mymodelfit": 283, "cache_get": [283, 290], "odf_basis_matrix": 283, "_compute_basis_matrix": 283, "cache_set": [283, 290], "cache_clear": [283, 290], "compute_expensive_matrix": 283, "expens": 283, "expensive_matrix": 283, "cod": 283, "coefficient_of_determin": 283, "model_arg": 283, "model_kwarg": 283, "dwi_respons": 283, "reg_spher": 283, "inject": 283, "tractomet": 283, "pred_sig": 283, "sdtmodel": 283, "csdmodel": 283, "opppos": 283, "roi_cent": [283, 289, 305], "roi_radiu": 283, "fa_cal": 283, "return_number_of_voxel": 283, "fa_oper": [283, 327], "versu": 283, "r2_term": 283, "frt": 283, "dwsignal": 283, "b_reg": 283, "r_rh": 283, "fodf_sh": 283, "num_it": 283, "minimis": 283, "f_n": 283, "xf_n": 283, "h_": 283, "b_": [283, 346, 347], "reg": 283, "hf_": 283, "rightarrow": 283, "2x": 283, "th_": 283, "tx": 283, "regularis": 283, "superresolut": 283, "mu": 283, "qf_n": 283, "choleski": [283, 334], "l_y": 283, "tf_n": 283, "rankn": 283, "f_0": 283, "pf_0": 283, "l_": 283, "h_n": 283, "f_": 283, "donald": 283, "odf_sh": [283, 290], "odfs_sh": 283, "odfdeconv": [283, 333], "20x20x20": 283, "ull": [283, 289, 306], "wll": 283, "uwll": [283, 289, 306], "lmi": 283, "ardekani": [283, 289, 306], "823": [283, 289, 306], "836": [283, 289, 306, 325], "multi_fit": [283, 290], "dki_param": 283, "fifteen": 283, "min_kurtosi": 283, "42857142857142855": 283, "e1": [283, 285], "1111": [283, 329], "analogi": 283, "barmpouti": 283, "zhuo": 283, "8th": 283, "symposium": 283, "nano": [283, 289, 316], "macro": 283, "262": [283, 332], "265": [283, 332], "5872402": 283, "akc": [283, 290], "adc": [283, 290, 332], "equiv": 283, "_f": 283, "frobeniu": 283, "kmax": [283, 290], "gtol": 283, "4pi": 283, "domega_mathbf": 283, "f_1": 283, "2222": [283, 338], "3333": 283, "f_2": 283, "2233": [283, 338], "1133": 283, "1122": [283, 326], "lambda_2lambda_3": 283, "r_f": 283, "3lambda_1": 283, "lambda_1lambda_2": 283, "lambda_1lambda_3": 283, "r_d": 283, "2lambda_1": 283, "3sqrt": 283, "carlson": 283, "hardin": 283, "1996": [283, 289, 307, 337, 340], "mclaren": 283, "snub": 283, "429": [283, 333], "omega_": 283, "mathnbf": 283, "n_j": 283, "n_l": 283, "tr": 283, "2w_": 283, "medicine69": 283, "388": [283, 333], "2pi": 283, "domega": 283, "_mathbf": 283, "k_": 283, "bot": [283, 324, 328, 329, 333, 335], "g_1": 283, "g_2": 283, "errtol": 283, "incomplet": [283, 324, 326, 327, 328, 329, 330, 335, 336, 337, 339, 340, 341, 342, 343], "infti": [283, 350], "9409227": 283, "min_diffus": [283, 331], "adv": 283, "biologicali": 283, "pluasibl": 283, "advc": 283, "eingenvalu": 283, "max_dir": 283, "inverse_design_matrix": 283, "sunaert": 283, "pitfal": 283, "335": [283, 333], "positivedefiniteleastsquar": [283, 290], "wrot": 283, "hui": 283, "cheung": 283, "qi": 283, "indi": 283, "indj": 283, "indk": 283, "indl": 283, "wre": 283, "ind_i": [283, 285], "ind_j": [283, 285], "ind_k": [283, 285], "ind_l": [283, 285], "k_element": 283, "eigval": 283, "eigvec": 283, "columnar": 283, "kurtosismicrostruturemodel": 283, "ols_fit_dki": 283, "wls_fit_dki": 283, "006": 283, "awf_onli": 283, "optiom": 283, "kurtosismicrostructur": 283, "axonal_diffus": [283, 290], "hindered_ad": [283, 290], "hindered_ev": [283, 290], "hindered_rd": [283, 290], "adc_": 283, "restricted_ev": [283, 290], "rde": 283, "edt": 283, "idt": 283, "r_start": 283, "r_end": 283, "r_step": 283, "nowrap": 283, "eqnarrai": 283, "i2pimathbf": 283, "cdotmathbf": 283, "dmathbf": 283, "sit": 283, "q_space": 283, "han": 283, "dsi_voxel": [283, 290], "gqrid_siz": 283, "generalizedqsampl": 283, "dr_x": 283, "dr_y": 283, "dr_z": 283, "psi_": 283, "rhat": 283, "dr": 283, "2002": [283, 336], "truncat": [283, 350], "p_": [283, 348], "iiintlimits_": 283, "q_": 283, "bigg": 283, "1766": [283, 335], "1775": [283, 335], "qspace": 283, "qgrid": 283, "qtabl": 283, "premultipli": 283, "rradiu": 283, "interp_coord": 283, "diffusionspectrum": 283, "new_data": 283, "new_gtab": 283, "estimated_snr": 283, "qgrid_sampl": 283, "siz_x": 283, "siz_i": 283, "siz_z": 283, "ifft": 283, "prop": 283, "numit": 283, "acc_factor": 283, "return_s0_hat": 283, "nll": [283, 289, 307, 336], "min_sign": [283, 333, 335], "consumpt": 283, "1e4": 283, "mattiello": [283, 289, 307], "247": [283, 289, 307, 332], "254": [283, 289, 307], "elucid": [283, 289, 307], "219": [283, 289, 307, 332], "lin": [283, 289, 307], "ching": [283, 289, 307], "1095": [283, 289, 307], "cutoff": 283, "dti_param": 283, "model_s0": 283, "s0_hat": [283, 290], "ec": 283, "columnwis": 283, "pele": 283, "gubjartsson": 283, "kikini": 283, "jolesz": 283, "dodf": 283, "566": [283, 285, 334], "ftp": 283, "sop": 283, "athena": [283, 326], "descoteaux_thesi": 283, "heta": 283, "infin": 283, "lambda_i": [283, 346, 347], "quad": 283, "lambda_1lambda_2lambda_3": 283, "denomin": 283, "appendix": 283, "batchelor": 283, "moakher": 283, "atkinson": 283, "rigor": 283, "calculu": 283, "221": [283, 332], "225": [283, 331, 332], "newcomb": 283, "1103": [283, 326], "1115": [283, 326], "etal": 283, "thompson": 283, "monozygot": 283, "dizygot": 283, "twin": 283, "943": [283, 326], "946": [283, 326], "arsigni": 283, "fillard": 283, "medecin": 283, "421": [283, 333], "q_form": 283, "a_hat": 283, "daniel": [283, 329], "enni": 283, "kindlmann": 283, "146": [283, 331], "a_squiggl": 283, "widetild": 283, "mo": 283, "orthotropi": 283, "fit_tensor": [283, 324, 326], "counteract": 283, "heteroscedast": 283, "return_lower_triangular": 283, "fail_is_nan": 283, "npar": 283, "gmm": 283, "geman": 283, "mclure": 283, "nlls_param": 283, "n_direct": 283, "5267": [283, 289, 306, 307], "background_nois": [283, 289, 306, 307], "num_vox": 283, "restore_param": 283, "sixth": 283, "dummi": 283, "1994a": 283, "hermitian": 283, "bxx": 283, "byi": 283, "bzz": 283, "bxy": 283, "bxz": 283, "byz": 283, "odf_vertic": [283, 333], "lambda_lb": 283, "lambda_csd": 283, "rho": [283, 346, 348], "po": [283, 332], "tessel": 283, "get_3shell_gtab": [283, 290], "descoteaux07_legacy_msg": 283, "catch_warn": 283, "filterwarn": 283, "pendingdeprecationwarn": 283, "analyticalmodel": 283, "clip_neg": 283, "b_uniqu": 283, "data_norm": 283, "lb_matrix": 283, "fwdti_param": 283, "diso": 283, "sig": 283, "mdreg": 283, "0027": 283, "piter": 283, "md_reg": 283, "inter": 283, "fw_param": 283, "f_transform": 283, "ft": 283, "arcsin": 283, "tensor_el": 283, "cholesky_el": 283, "r0": 283, "r1": 283, "r3": 283, "r4": 283, "r5": 283, "carew": 283, "meyerand": 283, "anomal": 283, "930": [283, 326], "936": [283, 342], "20832": 283, "pg": 283, "1628": [283, 329], "subdivide_octahedron": [283, 290], "create_unit_spher": [283, 290], "gq": 283, "voxel_sign": 283, "max_qa": 283, "nqa": 283, "equatori": 283, "conjug": [283, 350], "cone": 283, "x_scale": 283, "ftol": 283, "extracellular": 283, "fill_na": 283, "least_squar": 283, "federau": 283, "874": [283, 326], "881": [283, 326, 327], "estimate_f_d_star": [283, 290], "params_f_d_star": 283, "estimate_linear_fit": [283, 290], "split_b": 283, "intercept": 283, "ivim_param": 283, "ivim_sign": 283, "cvx_fit": [283, 290], "f1": 283, "f2": 283, "ivim_mix_cost_on": [283, 290], "stoc_search_cost": [283, 290], "penros": 283, "thorough": 283, "nlls_cost": [283, 290], "x_f": 283, "stationari": 283, "exp_phi1": 283, "x_and_f_to_x_f": [283, 290], "x_f_to_x_and_f": [283, 290], "selector": [283, 327], "eigenvalue_threshold": 283, "dti_scale_estim": 283, "static_diffus": 283, "0007": [283, 285], "eapoc": 283, "ensembl": [283, 285], "ph": 283, "avram": 283, "feasibl": 283, "posiv": 283, "vastli": 283, "golden_direct": 283, "map_model": 283, "mapfit": 283, "mapmri_coef": 283, "lopt": 283, "errorcod": 283, "linalgerror": [283, 325, 329], "fitted_sign": [283, 290], "mapmri_r": [283, 290], "mapmri_coeff": [283, 290], "mapmri_mu": [283, 290], "c13": 283, "gaussiann": 283, "act": [283, 326, 334], "c8": 283, "r_point": 283, "recalcul": 283, "qvals_or_gtab": 283, "qvalu": [283, 333], "c14": 283, "44a": 283, "c11": 283, "mu_squar": 283, "u0": 283, "index_matrix": 283, "q_gradient": 283, "rgrad": 283, "psi": 283, "binomi": 283, "odf_mat": 283, "n_vertic": 283, "n_mapmri_coef": 283, "odf_sh_mat": 283, "n_sh_coef": 283, "c7": 283, "n_coef": 283, "ind_mat": 283, "gridsiz": 283, "radius_max": 283, "tab": [283, 290, 331, 333, 343], "phi_n": 283, "phi_m": 283, "submatric": 283, "s_mat": 283, "t_mat": 283, "u_mat": 283, "weights_arrai": 283, "ncoef": 283, "n_of_weight": 283, "gcv_startpoint": 283, "startpoint": [283, 290], "optimal_lambda": 283, "coeff": 283, "setter": 283, "warm": 283, "qp": 283, "iso_comp": 283, "osqp": 283, "primal": 283, "002": 283, "multishel": [283, 341], "msdki_param": 283, "diffusit": 283, "intrins": 283, "msignal": 283, "nub": 283, "fit_arrai": 283, "single_voxel_fit": 283, "sum_i": 283, "psi_i": 283, "bracket": 283, "cohen": 283, "adad": 283, "wald": 283, "jmri": 283, "1194": [283, 326], "1208": [283, 326], "ndrrai": 283, "constrain_q0": 283, "10000000000": 283, "eco": 283, "textbf": 283, "sum_k": 283, "ik": 283, "phi_i": 283, "t_k": 283, "c_i": 283, "q0": 283, "uniti": 283, "cham": 283, "qtdmri_coef": 283, "ut": 283, "tau_scal": 283, "cvxpy_solution_optim": 283, "rt_point": 283, "qtdmri_to_mapmri_coef": [283, 290], "depen": 283, "sparsity_ab": [283, 290], "sparsity_dens": [283, 290], "part1_ut_precomp": 283, "part23_ut_precomp": 283, "part4_ut_precomp": 283, "part1_uq_iso_precomp": 283, "c4": 283, "0005": 283, "grid_size_r": 283, "max_radius_r": 283, "grid_size_tau": 283, "min_radius_tau": 283, "max_radius_tau": 283, "weight_arrai": 283, "04": [283, 343], "big_delta_start": 283, "big_delta_end": 283, "g_start": 283, "g_end": 283, "bval_isolin": 283, "7500": 283, "14000": 283, "alpha_shad": 283, "shade": 283, "_ols_fit": 283, "_wls_fit": 283, "_sdpdc_fit": 283, "c_": 283, "d_sq": [283, 290], "mean_d_sq": [283, 290], "themselv": 283, "bmatrix": 283, "ig": 283, "bmat": 283, "otimesmathbf": 283, "_notimesmathbf": 283, "f_csf": [283, 290], "f_gm": [283, 290], "fit_vec": 283, "s_i": 283, "f_j": 283, "b_i": 283, "_j": 283, "b_id_": 283, "v_i": 283, "d_j": 283, "hf": 283, "modern": 283, "prod_": 283, "i_": 283, "i_n": 283, "t_n": 283, "gautschi": 283, "slavik": 283, "875": [283, 326], "1090": [283, 326], "s0025": 283, "5718": 283, "0470267": 283, "discontinu": 283, "global_fit": 283, "elsewher": 283, "alpha_": 283, "div": 283, "triangledown": 283, "lvert": 283, "rvert": 283, "biggr": 283, "rvert_": 283, "discrep": [283, 326, 333, 338], "chambol": 283, "boil": 283, "n_vox": 283, "elasticnet": 283, "parallel_backend": 283, "joblib": [283, 341], "parallelbackendbas": 283, "backend": 283, "loki": 283, "bottleneck": 283, "gil": 283, "tensor_matrix": 283, "behrens2007": 283, "stick_matrix": 283, "tej": [283, 326], "berg": 283, "jbabdi": 283, "rushworth": 283, "mf": [283, 285], "woolrich": 283, "mw": 283, "sampling_matrix": [283, 290], "assume_norm": 283, "qball": [283, 331], "shm_coef": 283, "999": [283, 326], "signal_object": 283, "where_dwi": 283, "residualbootstrapwapp": 283, "rh": 283, "r_sh": 283, "legaci": [283, 327, 328, 335, 341, 343, 350], "dirac": [283, 342], "colatitudin": 283, "use_scipi": 283, "y_mn": 283, "m_n": 283, "sph_harm": [283, 324], "onward": 283, "interchang": 283, "agre": [283, 350], "0_n": 283, "mrtrix3": [283, 335, 350], "real_sh": 283, "raffelt": [283, 350], "tabbara": [283, 350], "dholland": [283, 350], "pietsch": [283, 350], "137": [283, 331, 350], "gadian": 283, "1176": [283, 326, 333], "1185": [283, 326], "m_list": 283, "n_list": 283, "kx1": 283, "lazi": 283, "where_b0": 283, "leverag": 283, "hd": 283, "lcr": 283, "ruturn": 283, "haroon": 283, "return_inv": 283, "n_coeff": 283, "rarrow": 283, "2n": 283, "3l": 283, "8n": 283, "norm_factor": 283, "rectifi": 283, "log_ap": 283, "ixjxkxc": 283, "2l": [283, 350], "ixjxkx6": 283, "lacerda": 283, "catani": 283, "simmon": 283, "full_sh_coeff": 283, "out_sh_coeff": 283, "025330295910584444": [283, 285], "constrain_e0": 283, "positive_constraint": 283, "amongst": 283, "rathi": 283, "20e": 283, "get_isbi2013_2shell_gtab": [283, 290], "shore_coef": 283, "pdf_grid": [283, 290], "shore_coeff": [283, 290], "qtextbf": 283, "nlm": 283, "biggl": 283, "dfrac": 283, "expbiggl": 283, "2zeta": 283, "y_l": [283, 350], "rtab": 283, "sphere_vertic": 283, "bxxxx": 283, "byyyi": 283, "bzzzz": 283, "bxxxy": 283, "bxxxz": 283, "bxyyi": 283, "byyyz": 283, "bxzzz": 283, "byzzz": 283, "bxxyi": 283, "bxxzz": 283, "byyzz": 283, "bxxyz": 283, "bxyyz": 283, "bxyzz": 283, "blogs0": 283, "dipyseg": 284, "features1": 284, "features2": 284, "cluster_map": 284, "evaluate_result": [284, 290], "slr_select": 284, "neirborhood": 284, "ba_valu": 284, "prune": [284, 289, 316], "bmd_valu": 284, "slr_metric": [284, 289, 316], "slr_x0": 284, "slr_bound": 284, "slr_method": 284, "bundlemindistancemetr": [284, 290], "recognized_transf": 284, "recognized_label": 284, "lt": 284, "dtracks0": 284, "dtracks1": 284, "ba": 284, "recognized_bundl": 284, "expert_bundl": 284, "select_randomli": 284, "500000": 284, "refdata": [284, 290], "id_datum": 284, "add_clust": [284, 290], "clusters_s": [284, 290], "get_large_clust": [284, 290], "get_small_clust": [284, 290], "max_siz": 284, "remove_clust": [284, 290], "mdf_12point": 284, "max_nb_clust": 284, "2147483647": 284, "nk": 284, "farther": 284, "exceed": 284, "tradeoff": [284, 287], "garyfallidis16": 284, "million": 284, "singapor": 284, "4187": 284, "quickbundlex": 284, "child": [284, 289], "is_leaf": [284, 290], "return_indic": [284, 290], "get_clust": [284, 290], "wanted_level": 284, "iter_preord": [284, 290], "traverse_postord": [284, 290], "nb_mpt": 284, "bin_siz": 284, "bidirect": 284, "barycent": 284, "use_neg": 284, "nb_sline": 284, "nb_slines_ref": 284, "coo_matrix": 284, "non_zero_id": 284, "nb_non_empty_row": 284, "sline": 284, "nearest_id": 284, "nearest_dist": 284, "nb_non_empty_col": 284, "masked_vol": 284, "npmin": 284, "npmax": 284, "input_volum": [284, 289, 315], "bet": 284, "maskedvolum": 284, "tensor_fit": 284, "r_min": 284, "r_max": 284, "g_min": 284, "g_max": 284, "b_min": 284, "b_max": 284, "coars": 284, "new_cc_mask": 284, "manhattan": 284, "upperbound": 284, "upper_bound": 284, "save_histori": 284, "posteriori": 284, "rice": 285, "rayleigh": 285, "gudbjartson": 285, "patz": 285, "910": [285, 325], "914": [285, 325], "signal_w_nois": 285, "dx": 285, "dy": 285, "dz": 285, "0004": 285, "00628947": 285, "01257895": 285, "01886842": 285, "0251579": 285, "03144737": 285, "03773685": 285, "04402632": 285, "0503158": 285, "05660527": 285, "06289475": 285, "06918422": 285, "0754737": 285, "08176317": 285, "08805265": 285, "09434212": 285, "1006316": 285, "10692107": 285, "11321055": 285, "11950002": 285, "1257895": 285, "13207897": 285, "13836845": 285, "14465792": 285, "15094739": 285, "15723687": 285, "16352634": 285, "16981582": 285, "17610529": 285, "18239477": 285, "18868424": 285, "19497372": 285, "20126319": 285, "20755267": 285, "21384214": 285, "22013162": 285, "22642109": 285, "23271057": 285, "23900004": 285, "24528952": 285, "25157899": 285, "25786847": 285, "26415794": 285, "27044742": 285, "27673689": 285, "28302637": 285, "28931584": 285, "29560531": 285, "30189479": 285, "30818426": 285, "31447374": 285, "32076321": 285, "32705269": 285, "33334216": 285, "33963164": 285, "34592111": 285, "35221059": 285, "35850006": 285, "36478954": 285, "37107901": 285, "37736849": 285, "38365796": 285, "38994744": 285, "39623691": 285, "40252639": 285, "40881586": 285, "41510534": 285, "42139481": 285, "42768429": 285, "43397376": 285, "44026323": 285, "44655271": 285, "45284218": 285, "45913166": 285, "46542113": 285, "47171061": 285, "47800008": 285, "48428956": 285, "49057903": 285, "49686851": 285, "50315798": 285, "50944746": 285, "51573693": 285, "52202641": 285, "52831588": 285, "53460536": 285, "54089483": 285, "54718431": 285, "55347378": 285, "55976326": 285, "56605273": 285, "57234221": 285, "57863168": 285, "58492115": 285, "59121063": 285, "5975001": 285, "60378958": 285, "61007905": 285, "61636853": 285, "622658": 285, "62894748": 285, "63523695": 285, "64152643": 285, "6478159": 285, "65410538": 285, "66039485": 285, "66668433": 285, "6729738": 285, "67926328": 285, "68555275": 285, "69184223": 285, "6981317": 285, "70442118": 285, "71071065": 285, "71700013": 285, "7232896": 285, "72957907": 285, "73586855": 285, "74215802": 285, "7484475": 285, "75473697": 285, "76102645": 285, "76731592": 285, "7736054": 285, "77989487": 285, "78618435": 285, "79247382": 285, "7987633": 285, "80505277": 285, "81134225": 285, "81763172": 285, "8239212": 285, "83021067": 285, "83650015": 285, "84278962": 285, "8490791": 285, "85536857": 285, "86165805": 285, "86794752": 285, "87423699": 285, "88052647": 285, "88681594": 285, "89310542": 285, "89939489": 285, "90568437": 285, "91197384": 285, "91826332": 285, "92455279": 285, "93084227": 285, "93713174": 285, "94342122": 285, "94971069": 285, "95600017": 285, "96228964": 285, "96857912": 285, "97486859": 285, "98115807": 285, "98744754": 285, "99373702": 285, "00002649": 285, "00631597": 285, "01260544": 285, "01889491": 285, "02518439": 285, "03147386": 285, "03776334": 285, "04405281": 285, "05034229": 285, "05663176": 285, "06292124": 285, "06921071": 285, "07550019": 285, "08178966": 285, "08807914": 285, "09436861": 285, "10065809": 285, "10694756": 285, "11323704": 285, "11952651": 285, "12581599": 285, "13210546": 285, "13839494": 285, "14468441": 285, "15097389": 285, "15726336": 285, "16355283": 285, "16984231": 285, "17613178": 285, "18242126": 285, "18871073": 285, "19500021": 285, "20128968": 285, "20757916": 285, "21386863": 285, "22015811": 285, "22644758": 285, "23273706": 285, "23902653": 285, "24531601": 285, "25160548": 285, "25789496": 285, "26418443": 285, "27047391": 285, "27676338": 285, "28305286": 285, "28934233": 285, "29563181": 285, "30192128": 285, "30821075": 285, "31450023": 285, "3207897": 285, "32707918": 285, "33336865": 285, "33965813": 285, "3459476": 285, "35223708": 285, "35852655": 285, "36481603": 285, "3711055": 285, "37739498": 285, "38368445": 285, "38997393": 285, "3962634": 285, "40255288": 285, "40884235": 285, "41513183": 285, "4214213": 285, "42771078": 285, "43400025": 285, "44028973": 285, "4465792": 285, "45286867": 285, "45915815": 285, "46544762": 285, "4717371": 285, "47802657": 285, "48431605": 285, "49060552": 285, "496895": 285, "50318447": 285, "50947395": 285, "51576342": 285, "5220529": 285, "52834237": 285, "53463185": 285, "54092132": 285, "5472108": 285, "55350027": 285, "55978975": 285, "56607922": 285, "5723687": 285, "57865817": 285, "58494765": 285, "59123712": 285, "59752659": 285, "60381607": 285, "61010554": 285, "61639502": 285, "62268449": 285, "62897397": 285, "63526344": 285, "64155292": 285, "64784239": 285, "65413187": 285, "66042134": 285, "66671082": 285, "67300029": 285, "67928977": 285, "68557924": 285, "69186872": 285, "69815819": 285, "70444767": 285, "71073714": 285, "71702662": 285, "72331609": 285, "72960557": 285, "73589504": 285, "74218451": 285, "74847399": 285, "75476346": 285, "76105294": 285, "76734241": 285, "77363189": 285, "77992136": 285, "78621084": 285, "79250031": 285, "79878979": 285, "80507926": 285, "81136874": 285, "81765821": 285, "82394769": 285, "83023716": 285, "83652664": 285, "84281611": 285, "84910559": 285, "85539506": 285, "86168454": 285, "86797401": 285, "87426349": 285, "88055296": 285, "88684243": 285, "89313191": 285, "89942138": 285, "90571086": 285, "91200033": 285, "91828981": 285, "92457928": 285, "93086876": 285, "93715823": 285, "94344771": 285, "94973718": 285, "95602666": 285, "96231613": 285, "96860561": 285, "97489508": 285, "98118456": 285, "98747403": 285, "99376351": 285, "00005298": 285, "00634246": 285, "01263193": 285, "01892141": 285, "02521088": 285, "03150035": 285, "03778983": 285, "0440793": 285, "05036878": 285, "05665825": 285, "06294773": 285, "0692372": 285, "07552668": 285, "08181615": 285, "08810563": 285, "0943951": 285, "10068458": 285, "10697405": 285, "11326353": 285, "119553": 285, "12584248": 285, "13213195": 285, "13842143": 285, "1447109": 285, "15100038": 285, "15728985": 285, "16357932": 285, "1698688": 285, "17615827": 285, "18244775": 285, "18873722": 285, "1950267": 285, "20131617": 285, "20760565": 285, "21389512": 285, "2201846": 285, "22647407": 285, "23276355": 285, "23905302": 285, "2453425": 285, "25163197": 285, "25792145": 285, "26421092": 285, "2705004": 285, "27678987": 285, "28307935": 285, "28936882": 285, "2956583": 285, "30194777": 285, "30823724": 285, "31452672": 285, "32081619": 285, "32710567": 285, "33339514": 285, "33968462": 285, "34597409": 285, "35226357": 285, "35855304": 285, "36484252": 285, "37113199": 285, "37742147": 285, "38371094": 285, "39000042": 285, "39628989": 285, "40257937": 285, "40886884": 285, "41515832": 285, "42144779": 285, "42773727": 285, "43402674": 285, "44031622": 285, "44660569": 285, "45289516": 285, "45918464": 285, "46547411": 285, "47176359": 285, "47805306": 285, "48434254": 285, "49063201": 285, "49692149": 285, "50321096": 285, "50950044": 285, "51578991": 285, "52207939": 285, "52836886": 285, "53465834": 285, "54094781": 285, "54723729": 285, "55352676": 285, "55981624": 285, "56610571": 285, "57239519": 285, "57868466": 285, "58497414": 285, "59126361": 285, "59755308": 285, "60384256": 285, "61013203": 285, "61642151": 285, "62271098": 285, "62900046": 285, "63528993": 285, "64157941": 285, "64786888": 285, "65415836": 285, "66044783": 285, "66673731": 285, "67302678": 285, "67931626": 285, "68560573": 285, "69189521": 285, "69818468": 285, "70447416": 285, "71076363": 285, "71705311": 285, "72334258": 285, "72963206": 285, "73592153": 285, "742211": 285, "74850048": 285, "75478995": 285, "76107943": 285, "7673689": 285, "77365838": 285, "77994785": 285, "78623733": 285, "7925268": 285, "79881628": 285, "80510575": 285, "81139523": 285, "8176847": 285, "82397418": 285, "83026365": 285, "83655313": 285, "8428426": 285, "84913208": 285, "85542155": 285, "86171103": 285, "8680005": 285, "87428998": 285, "88057945": 285, "88686892": 285, "8931584": 285, "89944787": 285, "90573735": 285, "91202682": 285, "9183163": 285, "92460577": 285, "93089525": 285, "93718472": 285, "9434742": 285, "94976367": 285, "95605315": 285, "96234262": 285, "9686321": 285, "97492157": 285, "98121105": 285, "98750052": 285, "99379": 285, "00007947": 285, "00636895": 285, "01265842": 285, "0189479": 285, "02523737": 285, "03152684": 285, "03781632": 285, "04410579": 285, "05039527": 285, "05668474": 285, "06297422": 285, "06926369": 285, "07555317": 285, "08184264": 285, "08813212": 285, "09442159": 285, "10071107": 285, "10700054": 285, "11329002": 285, "11957949": 285, "12586897": 285, "13215844": 285, "13844792": 285, "14473739": 285, "15102687": 285, "15731634": 285, "16360582": 285, "16989529": 285, "17618476": 285, "18247424": 285, "18876371": 285, "19505319": 285, "20134266": 285, "20763214": 285, "21392161": 285, "22021109": 285, "22650056": 285, "23279004": 285, "23907951": 285, "24536899": 285, "25165846": 285, "25794794": 285, "26423741": 285, "27052689": 285, "27681636": 285, "28310584": 285, "28939531": 285, "29568479": 285, "30197426": 285, "30826374": 285, "31455321": 285, "32084268": 285, "32713216": 285, "33342163": 285, "33971111": 285, "34600058": 285, "35229006": 285, "35857953": 285, "36486901": 285, "37115848": 285, "37744796": 285, "38373743": 285, "39002691": 285, "39631638": 285, "40260586": 285, "40889533": 285, "41518481": 285, "42147428": 285, "42776376": 285, "43405323": 285, "44034271": 285, "44663218": 285, "45292166": 285, "45921113": 285, "4655006": 285, "47179008": 285, "47807955": 285, "48436903": 285, "4906585": 285, "49694798": 285, "50323745": 285, "50952693": 285, "5158164": 285, "52210588": 285, "52839535": 285, "53468483": 285, "5409743": 285, "54726378": 285, "55355325": 285, "55984273": 285, "5661322": 285, "57242168": 285, "57871115": 285, "58500063": 285, "5912901": 285, "59757958": 285, "60386905": 285, "61015852": 285, "616448": 285, "62273747": 285, "62902695": 285, "63531642": 285, "6416059": 285, "64789537": 285, "65418485": 285, "66047432": 285, "6667638": 285, "67305327": 285, "67934275": 285, "68563222": 285, "6919217": 285, "69821117": 285, "70450065": 285, "71079012": 285, "7170796": 285, "72336907": 285, "72965855": 285, "73594802": 285, "7422375": 285, "74852697": 285, "75481644": 285, "76110592": 285, "76739539": 285, "77368487": 285, "77997434": 285, "78626382": 285, "79255329": 285, "79884277": 285, "80513224": 285, "81142172": 285, "81771119": 285, "82400067": 285, "83029014": 285, "83657962": 285, "84286909": 285, "84915857": 285, "85544804": 285, "86173752": 285, "86802699": 285, "87431647": 285, "88060594": 285, "88689542": 285, "89318489": 285, "89947436": 285, "90576384": 285, "91205331": 285, "91834279": 285, "92463226": 285, "93092174": 285, "93721121": 285, "94350069": 285, "94979016": 285, "95607964": 285, "96236911": 285, "96865859": 285, "97494806": 285, "98123754": 285, "98752701": 285, "99381649": 285, "00010596": 285, "00639544": 285, "01268491": 285, "01897439": 285, "02526386": 285, "03155334": 285, "03784281": 285, "04413228": 285, "05042176": 285, "05671123": 285, "06300071": 285, "06929018": 285, "07557966": 285, "08186913": 285, "08815861": 285, "09444808": 285, "10073756": 285, "10702703": 285, "11331651": 285, "11960598": 285, "12589546": 285, "13218493": 285, "13847441": 285, "14476388": 285, "15105336": 285, "15734283": 285, "16363231": 285, "16992178": 285, "17621126": 285, "18250073": 285, "1887902": 285, "19507968": 285, "20136915": 285, "20765863": 285, "2139481": 285, "22023758": 285, "22652705": 285, "23281653": 285, "239106": 285, "24539548": 285, "25168495": 285, "25797443": 285, "2642639": 285, "27055338": 285, "27684285": 285, "28313233": 285, "2894218": 285, "29571128": 285, "30200075": 285, "30829023": 285, "3145797": 285, "32086918": 285, "32715865": 285, "33344812": 285, "3397376": 285, "34602707": 285, "35231655": 285, "35860602": 285, "3648955": 285, "37118497": 285, "37747445": 285, "38376392": 285, "3900534": 285, "39634287": 285, "40263235": 285, "40892182": 285, "4152113": 285, "42150077": 285, "42779025": 285, "43407972": 285, "4403692": 285, "44665867": 285, "45294815": 285, "45923762": 285, "4655271": 285, "47181657": 285, "47810604": 285, "48439552": 285, "49068499": 285, "49697447": 285, "50326394": 285, "50955342": 285, "51584289": 285, "52213237": 285, "52842184": 285, "53471132": 285, "54100079": 285, "54729027": 285, "55357974": 285, "55986922": 285, "56615869": 285, "57244817": 285, "57873764": 285, "58502712": 285, "59131659": 285, "59760607": 285, "60389554": 285, "61018502": 285, "61647449": 285, "62276396": 285, "62905344": 285, "63534291": 285, "64163239": 285, "64792186": 285, "65421134": 285, "66050081": 285, "66679029": 285, "67307976": 285, "67936924": 285, "68565871": 285, "69194819": 285, "69823766": 285, "70452714": 285, "71081661": 285, "71710609": 285, "72339556": 285, "72968504": 285, "73597451": 285, "74226399": 285, "74855346": 285, "75484294": 285, "76113241": 285, "76742188": 285, "77371136": 285, "78000083": 285, "78629031": 285, "79257978": 285, "79886926": 285, "80515873": 285, "81144821": 285, "81773768": 285, "82402716": 285, "83031663": 285, "83660611": 285, "84289558": 285, "84918506": 285, "85547453": 285, "86176401": 285, "86805348": 285, "87434296": 285, "88063243": 285, "88692191": 285, "89321138": 285, "89950086": 285, "90579033": 285, "9120798": 285, "91836928": 285, "92465875": 285, "93094823": 285, "9372377": 285, "94352718": 285, "94981665": 285, "95610613": 285, "9623956": 285, "96868508": 285, "97497455": 285, "98126403": 285, "9875535": 285, "99384298": 285, "00013245": 285, "00642193": 285, "0127114": 285, "01900088": 285, "02529035": 285, "03157983": 285, "0378693": 285, "04415878": 285, "05044825": 285, "05673772": 285, "0630272": 285, "06931667": 285, "07560615": 285, "08189562": 285, "0881851": 285, "09447457": 285, "10076405": 285, "10705352": 285, "113343": 285, "11963247": 285, "12592195": 285, "13221142": 285, "1385009": 285, "14479037": 285, "15107985": 285, "15736932": 285, "1636588": 285, "16994827": 285, "17623775": 285, "18252722": 285, "1888167": 285, "19510617": 285, "20139564": 285, "20768512": 285, "21397459": 285, "22026407": 285, "22655354": 285, "23284302": 285, "23913249": 285, "24542197": 285, "25171144": 285, "25800092": 285, "26429039": 285, "27057987": 285, "27686934": 285, "28315882": 285, "28944829": 285, "29573777": 285, "30202724": 285, "30831672": 285, "31460619": 285, "32089567": 285, "32718514": 285, "33347462": 285, "33976409": 285, "34605356": 285, "35234304": 285, "35863251": 285, "36492199": 285, "37121146": 285, "37750094": 285, "38379041": 285, "39007989": 285, "39636936": 285, "40265884": 285, "40894831": 285, "41523779": 285, "42152726": 285, "42781674": 285, "43410621": 285, "44039569": 285, "44668516": 285, "45297464": 285, "45926411": 285, "46555359": 285, "47184306": 285, "47813254": 285, "48442201": 285, "49071148": 285, "49700096": 285, "50329043": 285, "50957991": 285, "51586938": 285, "52215886": 285, "52844833": 285, "53473781": 285, "54102728": 285, "54731676": 285, "55360623": 285, "55989571": 285, "56618518": 285, "57247466": 285, "57876413": 285, "58505361": 285, "59134308": 285, "59763256": 285, "60392203": 285, "61021151": 285, "61650098": 285, "62279046": 285, "62907993": 285, "6353694": 285, "64165888": 285, "64794835": 285, "65423783": 285, "6605273": 285, "66681678": 285, "67310625": 285, "67939573": 285, "6856852": 285, "69197468": 285, "69826415": 285, "70455363": 285, "7108431": 285, "71713258": 285, "72342205": 285, "72971153": 285, "736001": 285, "74229048": 285, "74857995": 285, "75486943": 285, "7611589": 285, "76744838": 285, "77373785": 285, "78002732": 285, "7863168": 285, "79260627": 285, "79889575": 285, "80518522": 285, "8114747": 285, "81776417": 285, "82405365": 285, "83034312": 285, "8366326": 285, "84292207": 285, "84921155": 285, "85550102": 285, "8617905": 285, "86807997": 285, "87436945": 285, "88065892": 285, "8869484": 285, "89323787": 285, "89952735": 285, "90581682": 285, "9121063": 285, "91839577": 285, "92468524": 285, "93097472": 285, "93726419": 285, "94355367": 285, "94984314": 285, "95613262": 285, "96242209": 285, "96871157": 285, "97500104": 285, "98129052": 285, "98757999": 285, "99386947": 285, "00015894": 285, "00644842": 285, "01273789": 285, "01902737": 285, "02531684": 285, "03160632": 285, "03789579": 285, "04418527": 285, "05047474": 285, "05676422": 285, "06305369": 285, "06934316": 285, "07563264": 285, "08192211": 285, "08821159": 285, "09450106": 285, "10079054": 285, "10708001": 285, "11336949": 285, "11965896": 285, "12594844": 285, "13223791": 285, "13852739": 285, "14481686": 285, "15110634": 285, "15739581": 285, "16368529": 285, "16997476": 285, "17626424": 285, "18255371": 285, "18884319": 285, "19513266": 285, "20142214": 285, "20771161": 285, "21400108": 285, "22029056": 285, "22658003": 285, "23286951": 285, "23915898": 285, "24544846": 285, "25173793": 285, "25802741": 285, "26431688": 285, "27060636": 285, "27689583": 285, "28318531": 285, "datashap": 285, "2026834": 285, "40536679": 285, "60805019": 285, "81073359": 285, "01341699": 285, "21610038": 285, "41878378": 285, "62146718": 285, "82415057": 285, "02683397": 285, "22951737": 285, "43220076": 285, "63488416": 285, "83756756": 285, "04025096": 285, "24293435": 285, "44561775": 285, "64830115": 285, "85098454": 285, "05366794": 285, "25635134": 285, "45903473": 285, "66171813": 285, "86440153": 285, "06708493": 285, "26976832": 285, "47245172": 285, "67513512": 285, "87781851": 285, "08050191": 285, "orbit": 285, "thick": 285, "unweight": 285, "remaind": 285, "cylind": 285, "soderman": 285, "s\u00f6derman": 285, "oll": 285, "bengt": 285, "j\u00f6nsson": 285, "1995": [285, 336], "yaniv": 285, "978": [285, 326], "ten": 285, "nr": 285, "292": [285, 332], "e0": [285, 333, 334], "multicompartment": 285, "imperm": 285, "neglect": [285, 287], "bvals_2": 285, "bvecs_2": 285, "d_comp": 285, "odf_vert": 285, "pdf_point": 285, "pname": 286, "bname": 286, "group_id": [286, 289], "dir_nam": 286, "hd5": 286, "10001": [286, 289], "target_bundl": 286, "return_mahalnobi": 286, "mahalanobi": 286, "return_mahalanobi": 286, "n_streamlin": [286, 287], "profile_stat": 286, "orient_bi": 286, "weights_kwarg": 286, "voxel_to_rasmm": [286, 287], "dipytrack": 287, "phrase": 287, "nb_streamlin": 287, "min_nb_point": 287, "max_nb_point": 287, "tracks1": 287, "tracks2": 287, "nm": 287, "m1": 287, "track2track": 287, "tl": 287, "mam_dist": 287, "indices2": 287, "speedi": 287, "maker": 287, "calc_sign": [287, 290], "reconstmodel": [287, 290], "to_fit": 287, "weighted_sign": 287, "relative_sign": 287, "mean_sig": 287, "vox_data": 287, "reconstfit": [287, 290], "interior": 287, "mitig": 287, "n_node": 287, "unique_idx": 287, "v2f": 287, "v2fn": 287, "fixedstep": 287, "random_se": 287, "save_se": [287, 289, 321, 322, 338], "stepsiz": [287, 343], "pft_max_trial": 287, "back_tracking_dist": [287, 289, 322], "front_tracking_dist": [287, 289, 322], "trial": 287, "triangles_mask": 287, "triangles_weight": 287, "rand_gen": 287, "triangles_indic": 287, "trilinear_coord": 287, "triangles_idx": 287, "trilin_coord": 287, "trilinear_coordin": 287, "vts_valu": 287, "vertices_norm": 287, "vertices_color": 287, "triangles_valu": 287, "expected_len": 287, "len_along": 287, "cumsum": 287, "n_pol": 287, "xyz2": 287, "frenet": 287, "serret": 287, "mathwork": 287, "matlabcentr": 287, "fileexchang": 287, "11169": 287, "parametris": 287, "qquad": 287, "tangent": 287, "binorm": 287, "kappa": 287, "torsion": 287, "helix": 287, "tm": 287, "ic": 287, "longest": [287, 289], "longest_or_indic": 287, "sph_cent": 287, "sph_radiu": 287, "rai": [287, 342], "wasp": 287, "uwa": 287, "pbourk": 287, "spherelin": 287, "cpp": 287, "xyzn": 287, "cookbook": 287, "netlib": 287, "fitpack": 287, "dierckx": 287, "datapoint": 287, "knot": 287, "ascend": 287, "spiral": 287, "splprep": 287, "splev": 287, "travel": 287, "va": 287, "51010101": 287, "09883545": 287, "new_streamlin": 287, "inv_shift": 287, "in_plac": 287, "selected_streamlin": 287, "roi1": 287, "roi2": 287, "n_roi": 287, "either_end": 287, "both_end": 287, "mask1": 287, "mask2": 287, "max_mdf": 287, "overrid": [287, 326, 337], "subsamplen": 287, "degrad": 287, "5mm": 287, "jordan17": 287, "as_gener": 287, "ndarrrai": 287, "vol_dim": 287, "image_volum": 287, "label_volum": 287, "defaultdict": 287, "bincount": 287, "new_label": 287, "max_segment_length": 287, "output_streamlin": 287, "seeds_count": 287, "seed_count_per_voxel": 287, "0640051": 287, "47407377": 287, "04966248": 287, "0507979": 287, "20814782": 287, "20909526": 287, "46702984": 287, "04723225": 287, "47268436": 287, "27800683": 287, "37073231": 287, "29328084": 287, "39286015": 287, "16802019": 287, "32122912": 287, "42369171": 287, "27991879": 287, "06159077": 287, "70671916": 287, "48962585": 287, "00187459": 287, "99577329": 287, "target_mask": 287, "whatev": 287, "bresenham5": 287, "bresenham": 287, "jack": 287, "elton": 287, "plotter": 287, "ibm": 287, "houde15": 287, "compress_streamlin": [287, 324, 342], "roi_coord": 287, "region_of_interest": 287, "in_arrai": 287, "f4": 287, "u_return": 287, "tracking_output": 287, "include_roi": 287, "exclude_roi": 287, "aoi": 287, "fill_valu": 287, "seq": 287, "plm": 287, "min_radius_curvatur": 287, "onlinelibrari": 287, "wilei": 287, "22005": 287, "out_png": 288, "recorded_ev": 288, "return_showm": 288, "order_transpar": 288, "buan_color": 288, "roi_imag": [288, 289, 311], "roi_color": [288, 289, 311], "peakandmetr": 288, "pictur": [288, 289, 311], "cababl": 288, "peel": [288, 289, 311], "anti": [288, 289, 311], "alias": [288, 289, 311], "horizon_ismrm19": [288, 289, 311], "juneja": [288, 289, 311, 328], "build_scen": [288, 290], "build_show": [288, 290], "abc": [288, 341], "tab_id": 288, "tab_ui": [288, 290], "win_siz": 288, "reposit": [288, 290], "clusters_visu": 288, "peak_actor": 288, "contour_actor": 288, "slices_visu": 288, "show_manag": 288, "enable_callback": 288, "add_cluster_actor": [288, 290], "tract_idx": 288, "thr": 288, "centroid_actor": [288, 290], "cluster_actor": [288, 290], "recluster_tractogram": [288, 290], "tractogram_clust": [288, 290], "interactor": [288, 326, 327], "change_volum": [288, 290], "prev_idx": 288, "next_idx": 288, "visible_slic": 288, "data_shap": [288, 290], "intensities_rang": [288, 290], "register_picker_callback": [288, 290], "selected_slic": [288, 290], "volume_max": [288, 290], "volume_min": [288, 290], "mem": 288, "fit_kwarg": 288, "fit1": 288, "fit2": 288, "fitnam": 288, "xlimit": 288, "disprang": 288, "shape_profil": 288, "cbar": 288, "basemap_arg": 288, "triang": 288, "xlabel": 288, "ylabel": 288, "ylabl": 288, "img0": 288, "img1": 288, "title0": 288, "title_mid": 288, "title1": 288, "fig_kwarg": [288, 337], "segular": 288, "direct_grid_shap": 288, "direct_grid2world": 288, "inverse_grid_shap": 288, "inverse_grid2world": 288, "show_figur": 288, "warped_forward": 288, "warped_backward": 288, "slice_indic": 288, "slice_index": 288, "slice_typ": 288, "ltitl": 288, "rtitl": 288, "sagit": 288, "c2": 288, "magnitdu": 288, "docscrap": 289, "numpydoc": 289, "mentat": 289, "virtanen": 289, "pav": 289, "iki": 289, "fi": 289, "output_strategi": 289, "get_short_nam": [289, 290], "troubl": 289, "subworkflow": 289, "strongli": 289, "new_vox_s": [289, 317], "out_resl": [289, 317], "new_vox_sz": [289, 317], "static_fil": [289, 296, 318], "moving_fil": [289, 296, 318], "out_mov": [289, 291, 297, 318], "out_stat_centroid": [289, 318], "static_centroid": 289, "out_moving_centroid": [289, 318], "moving_centroid": 289, "out_moved_centroid": [289, 318], "moved_centroid": 289, "static_image_fil": [289, 291, 292, 293], "moving_image_fil": [289, 291, 292, 293], "out_qual": [289, 291], "quality_metr": [289, 291], "transform_map_fil": [289, 293], "overwritten": [289, 293], "prealign_fil": [289, 292], "inv_stat": [289, 292], "mopt_sigma_diff": [289, 292], "mopt_radiu": [289, 292], "mopt_smooth": [289, 292], "mopt_inner_it": [289, 292], "mopt_q_level": [289, 292], "mopt_double_gradi": [289, 292], "mopt_step_typ": [289, 292], "out_inv_stat": [289, 292], "inc_stat": 289, "out_field": [289, 292], "displacement_field": 289, "bvalues_fil": [289, 297, 298, 304, 305, 306, 307, 308], "bvectors_fil": [289, 297, 298, 304, 305, 306, 307, 308], "bvecs_tol": [289, 297, 298, 304, 305, 307, 312], "out_linear_mov": [289, 296], "linearly_mov": 289, "out_nonlinear_mov": [289, 296], "out_warp_transform": [289, 296], "warp_transform": 289, "out_warp_kernel": [289, 296], "warp_kernel": 289, "out_dist": [289, 296], "distance_matrix": 289, "out_matched_pair": [289, 296], "cpd": [289, 290, 296], "treamlin": [289, 296], "prog": 289, "epilog": 289, "formatter_class": 289, "rawtexthelpformatt": 289, "prefix_char": 289, "fromfile_prefix_char": 289, "argument_default": 289, "conflict_handl": 289, "add_help": 289, "argumentpars": 289, "augment": 289, "argv": 289, "helpformatt": 289, "charact": [289, 326, 328, 332, 333], "add_descript": [289, 290], "add_epilogu": [289, 290], "add_sub_flow_arg": [289, 290], "sub_flow": 289, "introspect": 289, "sub_flow_opt": 289, "add_workflow": [289, 290], "arpars": 289, "get_flow_arg": [289, 290], "optional_paramet": [289, 290], "output_paramet": [289, 290], "positional_paramet": [289, 290], "show_argu": [289, 290], "dest": 289, "update_argu": [289, 290], "karg": 289, "get_opt": [289, 290], "get_sub_run": [289, 290], "set_sub_flows_opt": [289, 290], "_option": 289, "bval_fil": [289, 301], "dwi_patch2self": [289, 301], "globe": [289, 300, 301, 306, 307, 308, 315, 351], "dwi_nlmean": 289, "dwi_mppca": 289, "out_sigma": [289, 299], "dwi_sigma": 289, "out_unr": [289, 310], "dwi_unr": 289, "eof": [289, 290], "is_empti": [289, 290], "peek": [289, 290], "read_to_condit": [289, 290], "condition_func": 289, "read_to_next_empty_lin": [289, 290], "read_to_next_unindented_lin": [289, 290], "seek_next_non_empty_lin": [289, 290], "deindent": 289, "lvl": 289, "bshell_thr": [289, 312], "load_modul": [289, 290], "module_path": 289, "reload": [289, 326], "data_nam": [289, 303], "out_split": [289, 320], "lb": [289, 314, 343], "ub": [289, 314], "out_fnam": 289, "create_directori": [289, 290], "create_output": [289, 290], "file_existence_check": [289, 290], "set_input": [289, 290], "set_out_dir": [289, 290], "set_out_fnam": [289, 290], "set_output_kei": [289, 290], "sa": 289, "sb": 289, "substr": 289, "dir_str": 289, "prepend": 289, "multi_input": 289, "out_kei": 289, "fnc": 289, "frameobject": 289, "save_mask": [289, 302, 315], "dwi_mask": 289, "park2022": [289, 302], "data_fil": [289, 309, 319], "out_rtop": [289, 309], "out_lapnorm": [289, 309], "lapnorm": [289, 309], "out_msd": [289, 309], "out_qiv": [289, 309], "out_rtap": [289, 309], "out_rtpp": [289, 309], "out_ng": [289, 309], "out_perng": [289, 309], "perng": [289, 309], "out_parng": [289, 309], "parng": [289, 309], "laplacian_sign": [289, 309], "get_fitted_tensor": [289, 290], "optional_arg": 289, "mask_fil": [289, 304, 305, 306, 307, 308, 319], "out_fa": [289, 306, 307], "out_ga": [289, 306, 307], "out_rgb": [289, 306, 307], "out_md": [289, 306, 307], "out_ad": [289, 306, 307], "out_rd": [289, 306, 307], "out_mod": [289, 306, 307], "out_evec": [289, 306, 307], "out_ev": [289, 306, 307], "nifti_tensor": [289, 307], "hung": [289, 307], "frf": [289, 305], "odf_to_sh_ord": [289, 304, 305], "out_pam": [289, 304, 305], "out_shm": [289, 304, 305], "out_peaks_dir": [289, 304, 305], "peaks_dir": 289, "out_peaks_valu": [289, 304, 305], "peaks_valu": 289, "out_peaks_indic": [289, 304, 305], "peaks_indic": 289, "out_gfa": [289, 304, 305], "peak_from_model": [289, 304, 305, 332], "out_dt_tensor": [289, 306], "out_dk_tensor": [289, 306], "dki_tensor": 289, "out_mk": [289, 306], "out_ak": [289, 306], "out_rk": [289, 306], "joseph": [289, 306], "anita": [289, 306], "hanzhang": [289, 306], "kyle": [289, 306], "get_fitted_ivim": [289, 290], "out_s0_predict": [289, 308], "out_perfusion_fract": [289, 308], "out_d_star": [289, 308], "out_d": [289, 308], "sphere_nam": 289, "streamline_fil": [289, 313, 316], "model_bundle_fil": [289, 316], "no_slr": [289, 316], "slr_matrix": [289, 316], "r_reduction_thr": [289, 316], "r_pruning_thr": [289, 316], "no_r_slr": [289, 316], "out_recognized_transf": [289, 316], "out_recognized_label": [289, 316], "tini": [289, 316], "labels_fil": [289, 313], "out_bundl": [289, 313], "recognized_orig": 289, "bbox_threshold": [289, 319], "out_mask_cc": [289, 319], "out_mask_nois": [289, 319], "model_bundle_fold": [289, 295], "subject_fold": [289, 295], "get_metric_nam": [289, 290], "af_l_fa": 289, "h5_file": [289, 294], "save_lmm_plot": [289, 290], "plot_fil": 289, "bundle_nam": 289, "log10": 289, "bundle_fold": 289, "orig_bundle_fold": 289, "metric_fold": 289, "orig_fold": 289, "pam_fil": [289, 321, 322], "stopping_fil": [289, 321], "seeding_fil": [289, 321, 322], "use_binary_mask": [289, 321], "stopping_thr": [289, 321], "binar": [289, 321], "regularli": [289, 321, 322, 337], "closestpeak": [289, 321, 330], "wm_file": [289, 322], "gm_file": [289, 322], "csf_file": [289, 322], "pft_back": [289, 322], "pft_front": [289, 322], "pft_count": [289, 322], "cmc": [289, 322], "100000000": 289, "icbm_2009a": [289, 311], "emerg": [289, 311], "icbm_2009c": [289, 311], "manage_output_overwrit": [289, 290], "_force_overwrit": 289, "liter": [289, 337, 338], "subpackag": 290, "get_info": [290, 324, 325], "_public": [290, 339], "scalespac": 290, "verbositylevel": 290, "syn_registr": [290, 333], "write_map": [290, 342], "read_map": 290, "_method_dict": 290, "register_dwi_seri": 290, "deformableregistr": 290, "gaussian_kernel": 290, "low_rank_eigen": 290, "initialize_sigma2": 290, "lowrankq": 290, "affineinversionerror": 290, "affineinvalidvalueserror": 290, "_transform_method": 290, "transform_geometric_cent": 290, "diffeomorphicregistr": [290, 335], "logger": [290, 342], "mult_aff": 290, "get_direction_and_spac": 290, "similaritymetr": 290, "emmetr": 290, "v_cycle_2d": 290, "v_cycle_3d": 290, "isotropicscalespac": 290, "streamlinedistancemetr": 290, "bundlemindistancematrixmetr": 290, "bundlemindistanceasymmetricmetr": 290, "bundlesumdistancematrixmetr": 290, "jointbundlemindistancemetr": 290, "streamlineregistrationmap": 290, "jointstreamlineregistrationmap": 290, "bundle_sum_dist": 290, "bundle_min_dist": 290, "bundle_min_distance_fast": 290, "bundle_min_distance_asymmetric_fast": 290, "remove_clusters_by_s": 290, "progressive_slr": 290, "slr_with_qbx": [290, 343], "get_unique_pair": 290, "compose_matrix44": 290, "decompose_matrix44": 290, "average_bundle_length": 290, "find_miss": 290, "benchmark": [290, 326, 331], "bench_spher": 290, "onetim": 290, "sphere_stat": [290, 332, 333], "timer": [290, 329], "func_minimize_adhoc": 290, "func_minimize_scipi": 290, "bench_disperse_charges_alt": 290, "_tuple2ax": 290, "sphere2cart": [290, 331, 351], "cart2spher": [290, 331, 334], "sph2latlon": 290, "normalized_vector": 290, "vector_norm": [290, 331], "rodrigues_axis_rot": 290, "nearest_pos_semi_def": 290, "sphere_dist": 290, "cart_dist": 290, "vector_cosin": 290, "lambert_equal_area_projection_polar": 290, "lambert_equal_area_projection_cart": 290, "euler_matrix": 290, "compose_matrix": [290, 333], "decompose_matrix": 290, "circumradiu": 290, "vec2vec_rotmat": [290, 324, 340], "compose_transform": 290, "perpendicular_direct": 290, "dist_to_corn": 290, "is_hemispher": [290, 335], "gradient_table_from_bvals_bvec": 290, "gradient_table_from_qvals_bvec": 290, "gradient_table_from_gradient_strength_bvec": 290, "reorient_bvec": [290, 337], "generate_bvec": 290, "round_bval": 290, "get_bval_indic": 290, "check_multi_b": 290, "btens_to_param": 290, "params_to_bten": 290, "ornt_map": 290, "reorient_vector": 290, "reorient_on_axi": 290, "orientation_from_str": 290, "orientation_to_str": 290, "resetmixin": 290, "onetimeproperti": 290, "auto_attr": [290, 333], "nonnegativeleastsquar": 290, "sparse_nnl": 290, "wichmannhill2006": 290, "wichmannhill1982": 290, "lecuy": 290, "faces_from_sphere_vertic": 290, "unique_edg": 290, "unique_set": 290, "disperse_charges_alt": 290, "euler_characteristic_check": 290, "octahedron_vertic": 290, "octahedron_fac": 290, "icosahedron_vertic": 290, "icosahedron_fac": 290, "unit_octahedron": 290, "unit_icosahedron": 290, "hemi_icosahedron": 290, "random_uniform_on_spher": [290, 332, 333], "eigenstat": 290, "compare_orientation_set": 290, "angular_similar": 290, "create_unit_hemispher": 290, "cshift3d": 290, "permutationinvers": 290, "afb3d_a": 290, "sfb3d_a": 290, "sfb3d": 290, "afb3d": 290, "dwt3d": 290, "idwt3d": 290, "dataerror": 290, "loads_compat": 290, "data_dir": 290, "get_sim_voxel": 290, "get_skeleton": 290, "get_gtab_taiwan_dsi": 290, "dsi_deconv_voxel": 290, "mrtrix_spherical_funct": 290, "get_cmap": [290, 333], "matlab_life_result": 290, "load_sdp_constraint": 290, "copyfileobj_withprogress": 290, "check_md5": 290, "fetch_data": 290, "fetch_stanford_label": 290, "fetch_resdnn_weight": 290, "fetch_synb0_weight": 290, "fetch_synb0_test": 290, "fetch_evac_weight": 290, "fetch_evac_test": 290, "fetch_stanford_t1": 290, "fetch_taiwan_ntu_dsi": 290, "fetch_scil_b0": 290, "fetch_cfin_multib": 290, "fetch_gold_standard_io": [290, 337], "fetch_qte_lte_pt": 290, "fetch_fury_surfac": 290, "fetch_dib_70_lte_pte_st": 290, "fetch_dib_217_lte_pte_st": 290, "fetch_ptt_minimal_dataset": 290, "read_scil_b0": 290, "read_siemens_scil_b0": 290, "read_isbi2013_2shel": 290, "read_sherbrooke_3shel": 290, "read_stanford_label": 290, "read_stanford_hardi": 290, "read_stanford_t1": 290, "read_stanford_pve_map": 290, "read_taiwan_ntu_dsi": 290, "read_syn_data": 290, "fetch_tissue_data": 290, "read_tissue_data": 290, "fetch_cenir_multib": 290, "read_cfin_dwi": 290, "read_cfin_t1": 290, "read_qte_lte_pt": 290, "extract_example_tract": 290, "to_bids_descript": 290, "fetch_hcp": 290, "peak_directions_nl": 290, "reshape_peaks_for_visu": 290, "read_bvec_fil": 290, "save_qa_metr": 290, "load_peak": [290, 336], "save_peak": 290, "peaks_to_nifti": 290, "set_sft_logger_level": 290, "load_gener": 290, "save_gener": 290, "load_vtk": 290, "load_vtp": 290, "load_fib": 290, "load_dpi": 290, "save_vtk": 290, "save_vtp": 290, "save_fib": 290, "save_dpi": 290, "nifti1_symmat": 290, "make5d": 290, "decfa": [290, 330, 335], "decfa_to_float": 290, "is_reference_info_valid": 290, "save_buan_profiles_hdf5": 290, "read_img_arr_or_path": 290, "save_polydata": 290, "save_vtk_streamlin": [290, 337], "load_vtk_streamlin": [290, 337], "cnn_1d_denois": 290, "histo_resdnn": 290, "cnn1ddenois": 290, "channelsum": 290, "evacplu": 290, "prepare_img": 290, "init_model": 290, "historesdnn": 290, "singlelayerperceptron": 290, "multiplelayerpercepton": 290, "encoderblock": 290, "decoderblock": 290, "unet3d": 290, "unnorm": 290, "set_logger_level": 290, "recover_img": 290, "bench_bounding_box": 290, "bench_csd": 290, "bench_peak": 290, "bench_squash": 290, "bench_vec_val_sum": 290, "multi_voxel": [290, 331, 337], "num_grad": 290, "bench_csdeconv": 290, "bench_local_maxima": 290, "old_squash": 290, "bench_quick_squash": 290, "bench_vec_val_vect": 290, "coeff_of_determin": 290, "axsymshrespons": 290, "constrainedsdtmodel": 290, "estimate_respons": 290, "forward_sdt_deconv_mat": 290, "odf_deconv": 290, "fa_trace_to_lambda": 290, "carlson_rf": 290, "carlson_rd": 290, "directional_diffus": 290, "directional_diffusion_vari": 290, "directional_kurtosi": 290, "apparent_kurtosis_coef": 290, "radial_kurtosi": 290, "kurtosis_maximum": 290, "mean_kurtosis_tensor": 290, "kurtosis_fractional_anisotropi": 290, "dki_predict": 290, "params_to_dki_param": 290, "ls_fit_dki": 290, "cls_fit_dki": 290, "wrotat": 290, "wrotate_el": 290, "wcon": 290, "split_dki_param": 290, "kurtosismicrostructuralfit": 290, "axonal_water_fract": 290, "diffusion_compon": 290, "dkimicro_predict": 290, "diffusionspectrumfit": 290, "diffusionspectrumdeconvfit": 290, "create_qspac": 290, "create_qt": 290, "hanning_filt": 290, "pdf_interp_coord": 290, "pdf_odf": [290, 331], "half_to_full_qspac": 290, "project_hemisph_bvec": 290, "threshold_propag": 290, "gen_psf": 290, "lr_deconv": 290, "geodesic_anisotropi": 290, "axial_diffus": 290, "radial_diffus": 290, "deviator": 290, "apparent_diffusion_coef": 290, "tensor_predict": 290, "iter_fit_tensor": [290, 324], "wls_fit_tensor": 290, "ols_fit_tensor": 290, "nlls_fit_tensor": 290, "restore_fit_tensor": 290, "_lt_indic": 290, "_lt_row": 290, "_lt_col": 290, "quantize_evec": [290, 326, 337], "eig_from_lo_tri": [290, 333], "forecastfit": 290, "find_signal_mean": 290, "forecast_error_func": 290, "psi_l": 290, "forecast_matrix": 290, "rho_matrix": 290, "lb_forecast": 290, "fwdti_predict": 290, "wls_iter": 290, "nls_iter": 290, "nls_fit_tensor": 290, "lower_triangular_to_choleski": 290, "cholesky_to_lower_triangular": 290, "generalizedqsamplingfit": 290, "normalize_qa": 290, "squared_radial_compon": 290, "npa": 290, "equatorial_zone_vertic": 290, "polar_zone_vertic": 290, "upper_hemi_map": 290, "equatorial_maximum": 290, "patch_vertic": 290, "patch_maximum": 290, "odf_sum": 290, "patch_sum": 290, "triple_odf_maxima": 290, "ivimmodeltrr": 290, "ivimmodelvp": 290, "ivim_predict": 290, "f_d_star_predict": 290, "f_d_star_error": 290, "ivim_model_selector": 290, "mapmrifit": 290, "isotropic_scale_factor": 290, "mapmri_index_matrix": 290, "b_mat": 290, "b_mat_isotrop": 290, "mapmri_phi_1d": 290, "mapmri_phi_matrix": 290, "mapmri_psi_1d": 290, "mapmri_psi_matrix": 290, "mapmri_odf_matrix": 290, "mapmri_isotropic_phi_matrix": 290, "mapmri_isotropic_radial_signal_basi": 290, "mapmri_isotropic_m_mu_independ": 290, "mapmri_isotropic_m_mu_depend": 290, "mapmri_isotropic_psi_matrix": 290, "mapmri_isotropic_radial_pdf_basi": 290, "mapmri_isotropic_k_mu_independ": 290, "mapmri_isotropic_k_mu_depend": 290, "binomialfloat": 290, "mapmri_isotropic_odf_matrix": 290, "mapmri_isotropic_odf_sh_matrix": 290, "mapmri_isotropic_laplacian_reg_matrix": 290, "mapmri_isotropic_laplacian_reg_matrix_from_index_matrix": 290, "mapmri_isotropic_index_matrix": 290, "create_rspac": 290, "map_laplace_u": 290, "map_laplace_t": 290, "map_laplace_": 290, "mapmri_stu_reg_matric": 290, "mapmri_laplacian_reg_matrix": 290, "generalized_crossvalidation_arrai": 290, "generalized_crossvalid": 290, "gcv_cost_funct": 290, "msdeconvfit": 290, "qpfitter": 290, "multi_tissue_basi": 290, "solve_qp": [290, 338, 343], "meandiffusionkurtosisfit": 290, "mean_signal_bvalu": 290, "msk_from_awf": 290, "awf_from_msk": 290, "msdki_predict": 290, "wls_fit_msdki": 290, "multivoxelfit": 290, "callablearrai": 290, "odfmodel": 290, "odffit": 290, "minmax_norm": [290, 332, 335], "qtdmrifit": 290, "qtdmri_to_mapmri_matrix": 290, "qtdmri_isotropic_to_mapmri_matrix": 290, "qtdmri_temporal_norm": 290, "qtdmri_mapmri_norm": 290, "qtdmri_mapmri_isotropic_norm": 290, "qtdmri_signal_matrix_": 290, "qtdmri_signal_matrix": 290, "qtdmri_eap_matrix": 290, "qtdmri_isotropic_signal_matrix_": 290, "qtdmri_isotropic_signal_matrix": 290, "qtdmri_eap_matrix_": 290, "qtdmri_isotropic_eap_matrix_": 290, "qtdmri_isotropic_eap_matrix": 290, "radial_basis_opt": 290, "angular_basis_opt": 290, "radial_basis_eap_opt": 290, "angular_basis_eap_opt": 290, "temporal_basi": 290, "qtdmri_index_matrix": 290, "qtdmri_isotropic_index_matrix": 290, "qtdmri_laplacian_reg_matrix": 290, "qtdmri_isotropic_laplacian_reg_matrix": 290, "part23_reg_matrix_q": 290, "part23_iso_reg_matrix_q": 290, "part4_reg_matrix_q": 290, "part4_iso_reg_matrix_q": 290, "part1_reg_matrix_tau": 290, "part23_reg_matrix_tau": 290, "part4_reg_matrix_tau": 290, "qtdmri_isotropic_sc": 290, "qtdmri_anisotropic_sc": 290, "design_matrix_spati": 290, "create_rt_space_grid": 290, "qtdmri_number_of_coeffici": 290, "l1_crossvalid": 290, "elastic_crossvalid": 290, "from_6x1_to_3x3": 290, "from_6x6_to_21x1": 290, "from_21x1_to_6x6": 290, "cvxpy_1x6_to_3x3": 290, "cvxpy_1x21_to_6x6": 290, "dtd_covari": 290, "qti_sign": 290, "rumba_deconv": 290, "mbessel_ratio": 290, "generate_kernel": 290, "rumba_deconv_glob": 290, "isotropicmodel": 290, "isotropicfit": 290, "exponentialisotropicmodel": 290, "exponentialisotropicfit": 290, "sparsefasciclefit": 290, "sfm_design_matrix": 290, "sphharmmodel": [290, 332], "qballbasemodel": [290, 335], "sphharmfit": [290, 332], "opdtmodel": 290, "residualbootstrapwrapp": 290, "forward_sdeconv_mat": 290, "sh_to_rh": 290, "gen_dirac": 290, "spherical_harmon": 290, "real_sph_harm": [290, 326], "real_sh_tournier_from_index": 290, "real_sh_descoteaux_from_index": 290, "real_sh_tourni": 290, "real_sh_descoteaux": 290, "real_sym_sh_mrtrix": 290, "real_sym_sh_basi": 290, "sph_harm_ind_list": 290, "order_from_ncoef": 290, "smooth_pinv": 290, "lazy_index": 290, "normalize_data": 290, "lcr_matrix": 290, "bootstrap_data_arrai": 290, "bootstrap_data_voxel": 290, "sh_to_sf_matrix": 290, "calculate_max_ord": [290, 329], "convert_sh_to_full_basi": 290, "convert_sh_from_legaci": 290, "convert_sh_to_legaci": [290, 342], "shorefit": 290, "shore_matrix": 290, "shore_matrix_pdf": 290, "shore_matrix_odf": 290, "l_shore": 290, "n_shore": 290, "shore_indic": 290, "shore_ord": 290, "dki_design_matrix": 290, "bench_quickbundl": 290, "mdfpy": 290, "check_rang": 290, "bundle_adjac": 290, "ba_analysi": 290, "cluster_bundl": 290, "clustercentroid": 290, "treeclust": 290, "treeclustermap": 290, "qbx_and_merg": 290, "nearest_from_matrix_col": 290, "applymask": 290, "clean_cc_mask": 290, "mean_manhattan_dist": 290, "mean_euclidean_dist": 290, "upper_bound_by_r": 290, "upper_bound_by_perc": 290, "diff2eigenvector": 290, "orbital_phantom": 290, "diffusion_ev": 290, "callaghan_perpendicular": 290, "gaussian_parallel": 290, "cylinders_and_ball_soderman": 290, "kurtosis_el": 290, "dki_sign": [290, 326], "all_tensor_evec": [290, 334], "single_tensor_rtop": 290, "multi_tensor_rtop": 290, "single_tensor_pdf": 290, "multi_tensor_pdf": 290, "single_tensor_msd": 290, "multi_tensor_msd": 290, "bench_streamlin": 290, "generate_streamlin": [290, 341], "bench_set_number_of_point": 290, "bench_length": 290, "bench_compress_streamlin": 290, "detect_corresponding_track": 290, "detect_corresponding_tracks_plu": 290, "lifesignalmak": 290, "streamline_sign": 290, "streamline_gradi": 290, "grad_tensor": 290, "streamline_tensor": 290, "triangles_area": 290, "vertices_to_triangles_valu": 290, "wind": [290, 326], "midpoint": 290, "frenet_serret": 290, "mean_curvatur": 290, "mean_orient": 290, "generate_combin": 290, "longest_track_bundl": 290, "intersect_spher": 290, "inside_spher": 290, "inside_sphere_point": 290, "arbitrarypoint": 290, "principal_compon": 290, "midpoint2point": 290, "relist_streamlin": 290, "center_streamlin": 290, "ndbincount": 290, "reduce_label": 290, "subseg": 290, "streamline_near_roi": [290, 341], "unique_row": [290, 333], "transform_tracking_output": 290, "reduce_roi": [290, 341], "max_angle_from_curvatur": 290, "min_radius_curvature_from_angl": 290, "gmem": 290, "app": 290, "globalhorizon": 290, "horizontab": 290, "tabmanag": 290, "color_single_slid": 290, "color_double_slid": 290, "clusterstab": 290, "peakstab": 290, "roistab": 290, "slicestab": 290, "clustersvisu": 290, "slicesvisu": 290, "slicer_panel": 290, "bundle_shape_profil": 290, "sph_project": [290, 331, 333], "simple_plot": 290, "draw_lattice_2d": 290, "plot_slic": 290, "docstring_pars": 290, "multi_io": [290, 327, 329], "resliceflow": 290, "slrwithqbxflow": 290, "applytransformflow": 290, "synregistrationflow": [290, 343], "bundlewarpflow": 290, "check_dimens": 290, "introspectiveargumentpars": 290, "get_args_default": 290, "none_or_dtyp": 290, "patch2selfflow": 290, "mppcaflow": 290, "gibbsringingflow": 290, "numpydocstr": 290, "dedent_lin": 290, "get_level": 290, "ioinfoflow": 290, "splitflow": [290, 336], "maskflow": 290, "common_start": 290, "slash_to_und": 290, "connect_output_path": 290, "concatenate_input": 290, "basename_without_extens": 290, "io_iter": 290, "io_iterator_": 290, "evacplusflow": 290, "reconstmapmriflow": 290, "reconstdtiflow": 290, "reconstcsdflow": 290, "reconstcsaflow": 290, "reconstdkiflow": 290, "reconstivimflow": 290, "reconstrumbaflow": 290, "recobundlesflow": 290, "labelsbundlesflow": 290, "snrinccflow": 290, "bundleanalysistractometryflow": 290, "linearmixedmodelsflow": 290, "bundleshapeanalysi": 290, "buan_bundle_profil": 290, "localfibertrackingpamflow": 290, "pftrackingpamflow": 290, "horizonflow": 290, "andgaryfallidi": [295, 316], "forinvestig": [295, 316], "acrosspopul": [295, 316], "randommatrix": [298, 335], "noisemap": [298, 299], "inmedicin": 298, "matrixtheori": 299, "andprima": 300, "onhardi": 300, "featurecrf": 302, "mridata": 310, "ringingartifact": 310, "2016doi": 310, "linearregistr": 318, "ofstreamlin": 318, "fiberbundl": 318, "matterbundl": 318, "registrationand": 318, "towardsquantit": 322, "alphabet": 324, "1022": [324, 326, 335], "qixiang": 324, "chen": 324, "gonzalo": 324, "232": [324, 332], "github_stat": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "769": 324, "altogeth": 324, "772": 324, "xvfb": 324, "headless": 324, "754": 324, "car": 324, "gitter": [324, 325, 328, 337, 345], "chat": [324, 325, 328], "753": 324, "tst": [324, 325, 326, 328, 329, 331, 333, 336, 337, 338], "767": 324, "offscreen": 324, "test_slic": 324, "768": 324, "766": 324, "751": 324, "765": 324, "757": 324, "587": 324, "pr1": [324, 334], "748": 324, "_to_voxel_toler": 324, "678": 324, "714": 324, "739": 324, "733": 324, "743": 324, "memleak": 324, "sinkpoint": 324, "741": 324, "727": 324, "726": 324, "729": 324, "736": 324, "tk": 324, "735": 324, "732": 324, "wip": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343], "731": 324, "640": 324, "682": 324, "716": 324, "699": 324, "712": 324, "gh707": 324, "713": 324, "677": 324, "pr3": 324, "721": 324, "572": 324, "708": 324, "707": [324, 335], "709": 324, "703": 324, "705": 324, "702": 324, "689": 324, "681": 324, "da": [324, 341], "696": 324, "691": 324, "661": 324, "690": 324, "segfault": [324, 329, 332], "667": 324, "sourceforg": 324, "makefil": 324, "gh": [324, 333], "upl": 324, "676": [324, 329], "infrastructur": 324, "533": 324, "mrg": [324, 325, 326, 327, 328, 332, 333], "686": 324, "pyhon26": 324, "683": 324, "654": 324, "684": 324, "674": 324, "679": 324, "680": 324, "664": 324, "pr2": 324, "671": 324, "663": 324, "usherbrook": 324, "648": 324, "582": 324, "660": 324, "612": 324, "wrt": 324, "651": 324, "659": 324, "658": 324, "resav": 324, "657": 324, "628": 324, "637": 324, "639": 324, "614": 324, "633": 324, "tissuetyp": 324, "632": 324, "627": 324, "626": 324, "loosevers": 324, "625": 324, "624": 324, "619": 324, "618": 324, "616": 324, "576": 324, "387": [324, 329], "610": 324, "609": 324, "607": 324, "606": 324, "605": 324, "594": [324, 334], "771": 324, "761": 324, "dconn": 324, "723": 324, "738": 324, "tkinter": 324, "752": 324, "mesa": 324, "763": 324, "764": 324, "404": [324, 334, 336], "286": 324, "cleanup": [324, 326, 331, 332, 333, 334, 337, 340, 341], "755": 324, "test_shm": 324, "test_sf_to_sh": 324, "typeerror": [324, 332, 333, 343], "same_kind": 324, "737": 324, "672": 324, "730": 324, "734": 324, "688": 324, "cento": [324, 329], "python2": 324, "725": 324, "611": 324, "715": 324, "719": 324, "693": 324, "694": 324, "timeout": [324, 333, 338, 341], "697": 324, "test_spher": 324, "test_interp_rbf": 324, "649": 324, "656": 324, "701": 324, "704": 324, "hyp1f1": 324, "622": 324, "233": [324, 333], "652": 324, "653": 324, "revisit": [324, 332], "cuba": 324, "655": 324, "638": 324, "630": 324, "623": 324, "604": 324, "arm": 324, "613": 324, "test_vector_field": [324, 326], "test_reorient_vector_field_2d": 324, "icon": [324, 329], "nanmean": [324, 334], "271": 325, "933": [325, 326], "925": 325, "915": 325, "dipy_quickbundl": 325, "922": 325, "921": 325, "918": 325, "test_expectmax": 325, "917": 325, "916": 325, "908": 325, "911": 325, "904": 325, "851": 325, "upcom": [325, 327, 333, 335, 336, 340, 343], "856": 325, "762": 325, "816": 325, "811": 325, "853": 325, "miscellan": [325, 341, 342], "849": 325, "850": 325, "848": 325, "847": 325, "845": 325, "examples_index": 325, "846": 325, "826": 325, "841": 325, "839": 325, "819": 325, "843": 325, "838": 325, "833": 325, "817": 325, "695": 325, "829": 325, "813": [325, 326], "830": 325, "825": 325, "toollib": 325, "802": 325, "760": 325, "824": 325, "815": 325, "669": 325, "moco": 325, "809": 325, "821": 325, "revert": [325, 326, 329, 331, 333], "commit_info": 325, "818": 325, "797": 325, "806": 325, "814": [325, 332], "745": 325, "807": 325, "shebang": [325, 326], "801": 325, "886": 325, "863": 325, "919": 325, "896": [325, 326], "906": 325, "890": 325, "905": 325, "898": 325, "891": [325, 326], "892": 325, "894": 325, "895": 325, "893": 325, "860": 325, "badg": [325, 326, 327, 328, 329, 341], "692": 325, "quickstart": [325, 329], "822": 325, "urlerror": 325, "urlopen": 325, "errno": 325, "10060": 325, "840": 325, "855": 325, "3rc": 325, "153": [325, 340], "665": 325, "macosx": 325, "758": 325, "842": 325, "pip": [325, 326, 333], "805": 325, "812": 325, "685": [325, 339], "pr5": [325, 339], "666": 325, "747": 325, "631": 325, "820": 325, "hash": [325, 329], "810": 325, "_voxel2stream": 325, "803": 325, "vm": 325, "1491": [326, 328], "antonio": 326, "ossa": 326, "etienn": [326, 340, 343], "julio": 326, "villalon": 326, "manu": 326, "sharma": [326, 329, 330], "gonzalez": 326, "riddhish": 326, "bhalodia": 326, "sourav": 326, "singh": [326, 328], "stong": 326, "guillaum": [326, 327, 329], "theaud": [326, 327, 329], "tingyi": 326, "wanyan": 326, "wright": 326, "vibhatha": 326, "abeykoon": 326, "theaveragegui": 326, "511": [326, 333], "342": [326, 338], "1273": 326, "1272": 326, "1269": 326, "1271": 326, "tut": 326, "1268": 326, "1243": 326, "1223": 326, "1270": 326, "1263": 326, "1254": 326, "1261": 326, "1255": 326, "1260": 326, "1241": 326, "1250": 326, "1244": 326, "1235": 326, "1233": 326, "dipy_hom": 326, "1234": 326, "ascii": [326, 328, 332, 333], "1222": 326, "lightweight": [326, 327, 329], "1228": 326, "1227": 326, "1226": 326, "1229": 326, "1225": 326, "1219": 326, "dropbox": 326, "1221": 326, "1212": 326, "1217": 326, "1205": 326, "1166": 326, "1216": 326, "1214": 326, "clarif": 326, "simplify_warp_funcion_3d": 326, "1206": 326, "1204": 326, "1196": 326, "1199": 326, "1202": 326, "1198": 326, "1201": 326, "cla": 326, "1052": 326, "1183": 326, "textbox": 326, "1186": 326, "wheelhous": 326, "1195": 326, "assert_arrays_equ": 326, "1193": 326, "accent": [326, 335], "anticip": 326, "1140": 326, "1171": 326, "int64": 326, "1123": 326, "1174": 326, "1162": 326, "1147": 326, "1050": 326, "denspe": 326, "1082": 326, "1153": 326, "1159": 326, "1157": 326, "get_head": 326, "1160": 326, "1158": 326, "1151": 326, "fmin": 326, "studio": 326, "1149": 326, "1137": 326, "942": 326, "1141": 326, "1098": 326, "1136": 326, "1113": 326, "1134": 326, "993": 326, "1064": 326, "1114": 326, "pathlength": 326, "1132": 326, "1125": 326, "1130": 326, "minor": [326, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339], "1092": 326, "1129": 326, "1127": 326, "1034": 326, "1060": 326, "1124": 326, "1110": 326, "1120": 326, "1119": 326, "1075": 326, "drop26": 326, "835": 326, "1046": 326, "nbr_process": 326, "1049": 326, "1087": 326, "1112": 326, "1106": 326, "1066": 326, "1091": 326, "1105": 326, "imp": 326, "1102": 326, "py35": 326, "1100": 326, "1094": 326, "1061": 326, "1089": 326, "1079": 326, "1080": 326, "828": 326, "1072": 326, "1025": 326, "1077": 326, "1069": 326, "1068": 326, "test_shor": 326, "1067": 326, "1062": 326, "1056": 326, "1028": 326, "1041": 326, "1039": 326, "1019": 326, "heavi": 326, "1018": 326, "1035": 326, "974": 326, "1021": 326, "1024": 326, "981": 326, "979": 326, "958": 326, "1005": 326, "951": 326, "1015": 326, "progressbar": [326, 338], "992": 326, "1003": 326, "1004": 326, "pkg_info": 326, "1006": 326, "1010": 326, "929": 326, "941": 326, "976": 326, "956": [326, 333], "955": 326, "952": 326, "982": 326, "972": [326, 331], "901": 326, "971": 326, "989": 326, "977": 326, "957": 326, "959": 326, "967": 326, "954": 326, "948": 326, "test_sumsqdiff": 326, "test_scalespac": 326, "964": 326, "test_imaffin": 326, "963": 326, "947": 326, "897": 326, "926": 326, "937": 326, "clamp": 326, "907": 326, "mathjax": 326, "932": 326, "931": 326, "927": 326, "test_bvectxt": 326, "913": 326, "935": 326, "934": 326, "todai": 326, "1143": 326, "1246": 326, "1265": 326, "test_nlmeans_4d_3dsigma_and_thread": 326, "1251": 326, "1238": 326, "cryptic": 326, "1242": 326, "intermittenli": 326, "1252": 326, "revamp": 326, "1179": 326, "1253": 326, "1001": 326, "1258": 326, "369": 326, "1155": 326, "1070": 326, "711": 326, "api_chang": 326, "321": 326, "994": 326, "608": 326, "test_imwarp": 326, "591": 326, "seed_from_mask": [326, 335], "518": 326, "328": 326, "incompat": [326, 333, 342, 343], "1210": 326, "1209": 326, "909": 326, "inconsist": [326, 333, 338, 339], "1182": 326, "1211": 326, "1027": 326, "1218": 326, "1215": 326, "tracking_quick_start": [326, 327, 333], "1213": 326, "simplify_warp_function_3d": 326, "1191": 326, "1207": 326, "1107": 326, "swallow": [326, 337], "rework": [326, 331, 333], "1188": 326, "1187": 326, "1170": 326, "1086": 326, "1173": 326, "1190": 326, "test_peaksfrommodelparallel": 326, "1189": 326, "np1": 326, "1139": 326, "nearestneighbor_interpol": 326, "1142": 326, "streamlines_format": 326, "1097": 326, "1163": 326, "940": 326, "1040": 326, "1118": 326, "ivim_linear": 326, "1128": 326, "1138": 326, "1148": 326, "740": 326, "1045": 326, "1154": 326, "1145": 326, "827": 326, "1051": 326, "673": 326, "859": 326, "983": 326, "884": 326, "984": 326, "1009": 326, "1036": 326, "anaconda": [326, 327, 329, 338], "973": 326, "1121": 326, "1083": 326, "332": 326, "nipyp": [326, 341], "1116": 326, "bufferediobas": 326, "351": 326, "912": 326, "1104": 326, "367": [326, 333], "1101": 326, "1085": 326, "1081": 326, "1031": 326, "1071": 326, "1037": 326, "1078": 326, "953": 326, "883": 326, "1011": 326, "1055": 326, "1057": 326, "workaround": [326, 332], "slowadcopdfmodel": 326, "1054": 326, "1043": 326, "899": 326, "991": 326, "footer": 326, "1008": 326, "charm": 326, "1033": 326, "1032": 326, "1029": 326, "1014": 326, "1013": 326, "make_fetch": 326, "1020": 326, "1023": 326, "882": 326, "885": 326, "902": 326, "997": 326, "675": 326, "stabilis": 326, "1012": 326, "996": 326, "998": 326, "1007": 326, "980": 326, "1017": 326, "877": 326, "887": 326, "995": 326, "344": 326, "970": 326, "986": 326, "pip3": [326, 337], "990": 326, "988": 326, "975": 326, "517": 326, "960": 326, "961": 326, "880": [326, 327], "962": 326, "889": 326, "866": 326, "test_metr": 326, "867": 326, "test_parzenhist": 326, "868": 326, "869": 326, "870": 326, "test_transform": 326, "871": 326, "864": 326, "862": 326, "test_crosscorr": 326, "873": 326, "831": 326, "weird": 326, "876": 326, "968": 326, "872": 326, "966": 326, "920": 326, "950": 326, "949": 326, "878": 326, "939": 326, "945": 326, "indent": 326, "unus": [326, 333, 335, 336, 341, 343], "streamlinespe": [326, 333], "924": 326, "879": 326, "938": 326, "212": [327, 332], "bennet": [327, 328], "fauber": [327, 328], "saber": 327, "sheybani": 327, "1367": 327, "1361": 327, "1316": 327, "1360": 327, "1348": 327, "1357": 327, "1332": 327, "1239": 327, "1356": 327, "1351": 327, "1353": 327, "epilogu": 327, "1262": 327, "1352": 327, "1314": 327, "1345": 327, "1330": 327, "1315": 327, "gpl": [327, 333, 339], "1328": 327, "1329": 327, "1335": 327, "test_csdeconv": 327, "1319": 327, "1297": 327, "eigh": 327, "1298": 327, "textactor2d": 327, "1312": 327, "1285": 327, "1307": 327, "1310": 327, "1308": 327, "1304": 327, "1303": 327, "reciproc": [327, 346], "1289": 327, "1288": 327, "1290": 327, "1279": 327, "1287": 327, "1286": 327, "1284": 327, "1278": 327, "viz_ui": 327, "1366": 327, "1146": 327, "1084": 327, "1248": 327, "1359": 327, "1324": 327, "1334": 327, "1344": 327, "1346": 327, "1333": 327, "clinicalgraph": 327, "1044": 327, "1247": 327, "1337": 327, "coveral": 327, "baggi": 327, "1341": 327, "activeax": [327, 328], "1325": 327, "1323": 327, "1042": 327, "1317": 327, "1313": 327, "vtkcommoncor": 327, "1318": 327, "func_mul": 327, "1167": 327, "1180": 327, "375": 327, "directiion": 327, "ppc": [327, 333, 338], "804": 327, "662": 327, "1306": 327, "1309": 327, "step_help": 327, "1293": 327, "1292": 327, "570": 327, "1169": 327, "645": [328, 329], "conor": 328, "corbin": 328, "jiri": [328, 329], "borovec": [328, 329, 337], "mendoza": 328, "karandeep": [328, 329], "kumar": 328, "ashutosh": 328, "pradeep": 328, "reddi": 328, "raamana": 328, "ricci": [328, 329, 336], "woo": [328, 329, 336], "aman": 328, "arya": 328, "215": 328, "1504": 328, "test_whole_brain_slr": 328, "1503": 328, "1424": 328, "1502": 328, "1498": 328, "1431": 328, "1443": 328, "1398": 328, "1447": 328, "1423": 328, "1493": 328, "vtk8": 328, "1497": 328, "1496": 328, "1495": 328, "sfm_reconst": 328, "1494": 328, "1474": 328, "1471": 328, "1457": 328, "1468": 328, "1484": 328, "punctuat": 328, "1475": 328, "_iter": 328, "1482": 328, "test_mapmri": 328, "1460": 328, "diskslid": 328, "1452": 328, "1466": 328, "logo": [328, 333], "1464": 328, "banner": [328, 333], "1465": 328, "progit": 328, "1451": 328, "1379": 328, "1445": 328, "1450": 328, "delimit": 328, "1425": 328, "1446": 328, "hyperlink": [328, 330], "1437": 328, "mdfmetric": 328, "qbx": [328, 343], "1428": 328, "1385": 328, "textblock": 328, "1422": 328, "1434": 328, "1430": 328, "1421": 328, "1416": 328, "1413": 328, "getargspec": 328, "1393": 328, "1294": 328, "1419": 328, "rcond": [328, 338], "1384": 328, "1411": 328, "eddy_rotated_bvec": 328, "1407": 328, "1408": 328, "1406": 328, "assert_tru": 328, "assert_equ": [328, 331, 337], "1347": 328, "1322": 328, "1326": 328, "1399": 328, "1391": 328, "1331": 328, "1386": 328, "1165": 328, "1300": 328, "ravel_multi_index": [328, 333], "1381": 328, "1375": 328, "1342": 328, "whatnot": 328, "1378": 328, "1377": 328, "1374": 328, "1368": 328, "affili": [328, 329], "1370": 328, "1369": 328, "1418": [328, 342], "parallel_voxel_fit": [328, 329, 342], "1291": 328, "644": 328, "1490": 328, "1469": 328, "1485": 328, "1483": 328, "1479": 328, "1477": 328, "1448": 328, "1481": 328, "globalimmediatemoderenderingon": 328, "1454": 328, "1467": 328, "1488": 328, "1478": 328, "1476": 328, "1470": 328, "1458": 328, "1438": 328, "1473": 328, "1462": 328, "1461": 328, "1463": 328, "1455": 328, "pyautogui": 328, "monitor": [328, 344], "1456": 328, "1453": 328, "1339": 328, "1441": 328, "1449": 328, "1362": 328, "1395": 328, "1436": 328, "1417": 328, "1435": 328, "1439": 328, "memview": 328, "struct": [328, 341], "1184": 328, "1380": 328, "1429": 328, "syntaxerror": 328, "xe2": [328, 332], "596": [328, 334], "1390": 328, "coding_style_guidelin": 328, "1427": 328, "1426": 328, "987": 328, "faq": [328, 331, 337], "1327": 328, "1181": 328, "1150": 328, "streamline_map": 328, "1409": 328, "1415": 328, "1117": 328, "1412": 328, "791": 328, "1410": 328, "1403": 328, "jet": 328, "1387": 328, "1405": 328, "1402": 328, "rint": 328, "1321": 328, "1161": 328, "1394": 328, "misc": [328, 329, 341], "1382": 328, "1350": 328, "1392": 328, "chrome": 328, "1388": 328, "1340": 328, "1383": 328, "mmriflow": 328, "1299": 328, "test_rmi": [328, 333], "1301": 328, "1376": 328, "1343": 328, "1282": 328, "filo": 329, "albai": 329, "parichit": [329, 330], "chandan": 329, "gangwar": 329, "enrico": 329, "cahal": 329, "hunt": 329, "194": 329, "1684": 329, "1686": 329, "1685": 329, "1663": 329, "1681": 329, "1680": 329, "1683": 329, "1667": 329, "1677": 329, "msg": 329, "1678": 329, "1676": 329, "1283": 329, "1670": 329, "1669": 329, "1659": 329, "1621": 329, "1657": 329, "1660": 329, "1658": 329, "honor": 329, "1281": 329, "1651": 329, "1656": 329, "neurostar": [329, 345], "1624": 329, "1655": 329, "1650": 329, "codecov": [329, 340, 343], "1649": 329, "1556": 329, "1645": 329, "1647": 329, "1644": 329, "1643": 329, "787": 329, "starter": 329, "1642": 329, "1641": 329, "evenly_distributed_sphere_642": 329, "1564": 329, "listbox2d": 329, "1636": 329, "1584": 329, "1554": 329, "1528": 329, "imread": 329, "1526": 329, "1623": 329, "1626": 329, "1619": 329, "1592": 329, "1559": 329, "checkbox": 329, "radiobutton": 329, "1583": 329, "1602": 329, "1609": 329, "1560": 329, "1593": 329, "1597": 329, "1601": 329, "nosetest": [329, 343], "1515": 329, "1590": 329, "1570": 329, "1589": 329, "1580": 329, "1533": 329, "1523": 329, "1543": 329, "out_strategi": 329, "1547": 329, "1561": 329, "1578": 329, "1563": 329, "major_vers": 329, "1557": 329, "button2d": 329, "1555": 329, "1522": 329, "1355": 329, "listbox": 329, "1540": 329, "1548": 329, "1542": 329, "1546": 329, "1545": 329, "1492": 329, "mistakenli": 329, "1536": 329, "1537": 329, "1530": 329, "1529": 329, "1520": 329, "1524": 329, "1521": 329, "1518": 329, "1517": 329, "1516": 329, "1514": 329, "pep8speak": [329, 336], "1513": 329, "1510": 329, "1508": 329, "appeas": 329, "1506": 329, "1679": 329, "1220": 329, "746": 329, "1637": 329, "1673": 329, "1338": 329, "1682": 329, "634": 329, "944": 329, "1099": 329, "1544": 329, "643": 329, "1674": 329, "1397": 329, "1668": 329, "1662": 329, "1296": 329, "ana": 329, "mini": 329, "1653": 329, "1654": 329, "1414": 329, "1093": 329, "1611": 329, "preload": 329, "1615": 329, "1631": 329, "1638": 329, "noddix": 329, "1618": 329, "filemenu2d": 329, "1569": 329, "listboxitem2d": 329, "1532": 329, "sierra": 329, "ananoda": 329, "1420": 329, "1396": 329, "1295": 329, "1232": 329, "disappear": 329, "928": 329, "854": 329, "759": 329, "vtk6": [329, 332, 333], "voxsz": 329, "646": 329, "353": 329, "1203": 329, "1156": 329, "642": 329, "1135": 329, "442": 329, "558": 329, "1236": 329, "1389": 329, "1519": 329, "1596": 329, "noddix_pr": 329, "1576": 329, "1568": 329, "1108": 329, "1629": 329, "userwarn": [329, 335], "1591": 329, "1582": 329, "1575": 329, "1620": 329, "1598": 329, "1595": 329, "1588": 329, "1608": 329, "1610": 329, "tortois": 329, "1607": 329, "1586": 329, "1585": 329, "1594": 329, "1577": 329, "1571": 329, "1579": 329, "1433": 329, "1541": 329, "1573": 329, "test_ui_listbox_2d": 329, "1566": 329, "1572": 329, "1567": 329, "1551": 329, "1549": 329, "1562": 329, "1550": 329, "1527": 329, "1534": 329, "1487": 329, "check_scratch": 329, "1486": 329, "1539": 329, "1535": 329, "1507": 329, "1512": 329, "1511": 329, "exaampl": 329, "1509": 329, "361": [330, 333], "cl\u00e9ment": 330, "zotti": 330, "katrin": 330, "leinweb": 330, "yijun": 330, "liu": [330, 340], "1755": 330, "1748": 330, "1714": 330, "1726": 330, "1753": 330, "1751": 330, "1743": 330, "1749": 330, "1739": 330, "1695": 330, "1741": 330, "1742": 330, "1745": 330, "1746": 330, "sponsor": 330, "1735": 330, "1738": 330, "1740": 330, "1730": 330, "1666": 330, "1737": 330, "1733": 330, "1732": 330, "maiincrement": 330, "1716": 330, "1640": 330, "1652": 330, "1720": 330, "1719": 330, "1715": 330, "bullet": 330, "1706": 330, "liner": 330, "1705": 330, "random_integ": 330, "1704": 330, "1701": 330, "1707": 330, "pendingdeprec": 330, "1703": 330, "blank": [330, 333], "1708": 330, "1710": 330, "1702": 330, "1697": 330, "1696": 330, "1690": 330, "1693": 330, "1757": 330, "sensor": 330, "acsept": 330, "deprecationwarn": 330, "usersranjianaconda3libsit": 330, "packagesipykernel_launch": 330, "imsav": 330, "imageio": 330, "imwrit": 330, "1616": 330, "1605": 330, "1661": 330, "1604": [330, 341], "1734": 330, "1565": 330, "1729": 330, "n4": 330, "1280": 330, "1727": 330, "1723": 330, "1718": [330, 335], "1717": 330, "1664": 330, "1633": 330, "1698": 330, "1691": 330, "1692": 330, "1632": 330, "mdesco": 331, "141": 331, "sf2sh": 331, "dsi_deconv": 331, "133": 331, "132": 331, "130": [331, 336], "127": 331, "rbf": 331, "result_typ": 331, "getitem": [331, 343], "_squash": 331, "vec_val_vect": 331, "109": 331, "einsum": 331, "110": 331, "xp": 331, "sty": 331, "multivoxel": 331, "remove_similar_vertic": 331, "ip": 331, "yai": 331, "l2norm": 331, "e1381s6_edcor": 331, "optional_trait": 331, "brought": 331, "_filter": 331, "reduce_antipod": 331, "preview": 331, "_filter_peak": 331, "unique_vertic": 331, "optionalimporterror": 331, "trait": 331, "gitwash": 331, "frontpag": 331, "longest_track_len": 331, "mayavi": 331, "83": 331, "refacotor": 331, "tb": 331, "hap": 331, "triangle_subdivid": 331, "badrequest": 331, "erik": 332, "279": 332, "257": 332, "274": 332, "275": 332, "261": 332, "273": 332, "autopep8": 332, "shmfit": 332, "260": 332, "peaks_from_model_parallel": 332, "sdeconv": 332, "253": [332, 333], "263": 332, "252": 332, "243": 332, "240": 332, "245": 332, "230": 332, "229": 332, "brainextract": 332, "226": 332, "setinput": 332, "vtk5": 332, "setinputdata": 332, "223": 332, "222": 332, "mask_voxel_s": 332, "promote_dtyp": 332, "wi": 332, "211": 332, "213": 332, "207": 332, "205": 332, "173": 332, "tensor_": 332, "201": 332, "testfail": 332, "189": 332, "probabilisticodfweightedtrack": 332, "190": 332, "182": 332, "soureforg": 332, "py3": 332, "supersed": 332, "174": 332, "172": 332, "stamp": 332, "166": 332, "pyc": 332, "archiv": 332, "164": [332, 337], "163": [332, 337], "544": 333, "propspe": 333, "543": 333, "plot_2d": 333, "537": 333, "534": 333, "536": 333, "535": 333, "527": 333, "npymath": 333, "528": 333, "530": 333, "ugli": 333, "msvc": 333, "529": 333, "526": 333, "523": 333, "522": 333, "521": 333, "520": 333, "519": 333, "christma": 333, "513": 333, "reinstat": 333, "508": 333, "516": 333, "495": 333, "509": 333, "460": 333, "499": 333, "501": 333, "507": 333, "mergsort": 333, "494": 333, "503": 333, "471": 333, "importlib": 333, "__import__": 333, "419": 333, "489": 333, "484": 333, "490": 333, "341": 333, "traco": 333, "redesign": 333, "483": 333, "485": 333, "482": 333, "479": 333, "481": 333, "476": 333, "478": 333, "477": 333, "474": 333, "virtualenv": 333, "473": 333, "469": 333, "463": 333, "466": 333, "465": 333, "433": 333, "458": 333, "crosscorr": 333, "npy_math": 333, "447": 333, "439": 333, "443": 333, "456": 333, "454": 333, "checker": 333, "453": 333, "446": 333, "445": 333, "pxi": 333, "var": [333, 337, 342], "440": 333, "431": 333, "408": 333, "438": [333, 348], "405": 333, "418": 333, "437": 333, "435": 333, "434": 333, "430": 333, "427": 333, "422": 333, "415": 333, "420": 333, "413": 333, "memory_leak": 333, "test_strealin": 333, "417": 333, "409": 333, "pipe": 333, "396": 333, "407": 333, "omarocegueda": 333, "402": 333, "ae": 333, "test_peak_directions_thorough": 333, "401": 333, "skiptest": 333, "340": 333, "397": 333, "393": 333, "382": 333, "386": 333, "352": 333, "odf_sh_sharpen": 333, "374": 333, "bumpi": 333, "380": 333, "378": 333, "379": 333, "339": 333, "373": 333, "371": 333, "fopenmp": 333, "372": 333, "crossplatform": 333, "337": 333, "370": 333, "tone": 333, "364": 333, "368": 333, "363": 333, "355": 333, "357": 333, "sent": 333, "356": 333, "349": 333, "348": 333, "347": 333, "338": 333, "334": 333, "vec2vec": 333, "324": 333, "331": 333, "326": 333, "327": 333, "319": 333, "318": 333, "316": 333, "315": 333, "305": 333, "311": 333, "309": 333, "pep": 333, "stuf": 333, "303": 333, "304": 333, "302": 333, "298": 333, "290": 333, "540": 333, "542": 333, "538": 333, "449": 333, "512": 333, "467": 333, "464": 333, "wheezi": [333, 334], "argsort": 333, "mergesort": 333, "506": 333, "383": 333, "350": 333, "424": 333, "493": 333, "dpy_math": 333, "hyp2f1": 333, "502": 333, "492": 333, "410": 333, "487": 333, "428": 333, "travis": 333, "475": 333, "tmp_file": 333, "470": 333, "461": 333, "432": 333, "450": 333, "matrix44": 333, "452": 333, "398": 333, "444": 333, "mkl": 333, "nlmeans_3d": 333, "412": 333, "pow": 333, "391": 333, "16gb": 333, "385": 333, "376": 333, "demianw": 333, "358": 333, "343": 333, "277": 333, "336": 333, "235": [333, 334], "329": 333, "330": 333, "312": 333, "quicki": 333, "307": 333, "241": 333, "248": 333, "peaksfrommodel": 333, "282": 333, "incomprehens": 333, "228": 333, "dipy_fit_tensor": 333, "brittl": 333, "171": 333, "runtimewarn": [333, 337], "create_half_unit_spher": 333, "306": 333, "310": 333, "575": 334, "595": 334, "599": 334, "dpy_rint": 334, "test_center_of_mass": 334, "601": 334, "598": 334, "undetect": 334, "593": 334, "588": 334, "565": 334, "589": 334, "typograph": 334, "584": 334, "568": 334, "quickbundles2": 334, "559": 334, "586": 334, "574": 334, "581": 334, "580": 334, "579": 334, "577": 334, "553": 334, "552": 334, "571": 334, "557": 334, "563": 334, "564": 334, "561": 334, "francopestilli": 334, "556": 334, "550": 334, "551": 334, "549": 334, "602": 334, "test_feature_center_of_mass": 334, "597": 334, "585": 334, "amico": 334, "567": 334, "414": 334, "560": 334, "three_shells_voxel": 334, "555": 334, "chatroom": 334, "354": 334, "532": 334, "sparc": 334, "antoin": 335, "theberg": 335, "clint": 335, "1946": 335, "1947": 335, "1942": 335, "1917": 335, "1940": 335, "1909": 335, "1931": 335, "1944": 335, "1939": 335, "1943": 335, "1941": 335, "1926": 335, "1935": 335, "1903": 335, "endian": 335, "s390x": 335, "1892": 335, "1804": 335, "1937": 335, "1928": 335, "1925": 335, "1927": 335, "1923": 335, "1894": 335, "1812": 335, "stateful": 335, "1922": 335, "1885": 335, "1913": 335, "1915": 335, "1630": 335, "1896": 335, "1912": 335, "1916": 335, "1918": 335, "1881": 335, "python_requir": 335, "1914": 335, "1907": 335, "1908": 335, "1887": 335, "1905": 335, "1849": 335, "1902": 335, "1904": 335, "1771": 335, "1899": 335, "1898": 335, "1897": 335, "1893": 335, "1891": 335, "test_refine_rb": 335, "test_bundl": 335, "1888": 335, "1879": 335, "1884": 335, "1875": 335, "1882": 335, "1880": 335, "1878": 335, "numpy_less_0": 335, "1877": 335, "scipy_less_0": 335, "1876": 335, "1874": 335, "oversight": 335, "1858": 335, "1843": 335, "1866": 335, "1850": 335, "1855": 335, "statsmodel": 335, "1835": 335, "1836": 335, "1792": 335, "1851": 335, "1842": 335, "tput": 335, "1830": 335, "1821": 335, "1816": 335, "1818": 335, "1827": 335, "1824": 335, "1819": 335, "diffeormorph": 335, "1823": 335, "1814": 335, "1815": 335, "1813": 335, "1772": 335, "1810": 335, "1806": 335, "1789": 335, "1770": 335, "1796": 335, "1795": 335, "1768": 335, "1788": 335, "1769": 335, "1767": 335, "1759": 335, "1230": 335, "1798": 335, "1817": 335, "1774": 335, "1587": 335, "1890": 335, "1933": 335, "985": 335, "1558": 335, "389": 335, "peaks_direct": 335, "590": 335, "1722": 335, "1832": 335, "728": 335, "1920": 335, "bedpostx": 335, "1779": 335, "1906": 335, "1901": 335, "1747": 335, "1839": 335, "583": 335, "1694": 335, "test_streamlin": 335, "1724": [335, 337], "844": 335, "1752": 335, "1856": 335, "1807": 335, "1889": 335, "1713": 335, "668": 335, "592": 335, "shouldn": [335, 341], "nodirect": 335, "1811": 335, "1831": 335, "1857": 335, "1863": 335, "1781": 335, "1869": 335, "1844": 335, "1865": 335, "1860": 335, "1168": 335, "1854": 335, "1764": 335, "1731": 335, "1845": 335, "1829": 335, "reco": 335, "1606": 335, "1837": 335, "1786": 335, "1828": 335, "infeas": 335, "1833": 335, "1834": 335, "1721": 335, "b0slice": 335, "1499": 335, "dii": 335, "1822": 335, "1048": 335, "1797": 335, "1802": 335, "1787": 335, "1763": 335, "1756": 335, "1761": 335, "795": 335, "620": 335, "436": 335, "1758": 335, "1808": 335, "1794": 335, "dettrackpamflow": 335, "1801": 335, "1803": 335, "1809": 335, "1799": 335, "nifiti": 335, "1712": 335, "initial_direct": 335, "3075": 335, "1783": 335, "trilinear_interpolate4d": 335, "1784": 335, "1790": 335, "operand": 335, "1782": 335, "1320": 335, "1245": 335, "1240": 335, "1237": 335, "flesh": 335, "1192": 335, "1096": 335, "832": 335, "578": 335, "behnel": 335, "1780": 335, "1126": 335, "1603": 335, "392": [336, 338], "2030": 336, "2029": 336, "proxi": 336, "dead": [336, 341], "1862": 336, "1952": 336, "1998": 336, "1975": 336, "1711": 336, "1989": 336, "1987": 336, "1986": 336, "1977": 336, "1983": 336, "1981": 336, "1980": 336, "1979": 336, "1956": 336, "stateful_tractogram_post_1": 336, "0_fix": 336, "1971": 336, "1970": 336, "1929": 336, "reloc": 336, "sim_respons": 336, "1966": 336, "1967": 336, "1961": 336, "1963": 336, "1948": 336, "1951": 336, "1958": 336, "1197": 336, "1959": 336, "1777": 336, "read_": 336, "1634": 336, "1949": 336, "1870": 336, "1953": 336, "184": 336, "1976": 336, "785": 336, "1859": 336, "1950": 336, "statefulltractogram": 336, "1930": 336, "ioerror": 336, "1968": 336, "1960": 336, "1867": 336, "circleci": 336, "1954": 336, "1964": 336, "1840": 336, "1841": 336, "1955": 336, "intersphinx": 336, "inventori": 336, "1401": 336, "1442": 336, "1791": 336, "aryansh": 337, "omrai": 337, "charl": [337, 338, 343], "poirier": [337, 338, 343], "fabio": 337, "neri": 337, "jirka": 337, "leevi": [337, 341], "kerkela": [337, 341], "leon": [337, 341], "wening": [337, 341], "martijn": 337, "nagtega": 337, "sarath": 337, "chandra": 337, "shrishti": 337, "hore": 337, "shubham": 337, "shaswat": 337, "taki": 337, "panagopoulo": 337, "tashrif": 337, "billah": 337, "kunal": 337, "mehta": 337, "svabhishek29": 337, "areesha": [337, 338, 339], "tariq": [337, 338, 339], "karan": [337, 338, 339], "2191": 337, "2212": 337, "2207": 337, "shader": 337, "2208": 337, "2157": 337, "uniniti": 337, "2205": 337, "2204": 337, "2183": 337, "_streamlines_in_mask": 337, "2203": 337, "2142": 337, "2195": 337, "2161": 337, "2163": 337, "2174": 337, "2168": 337, "2178": 337, "2193": 337, "buan_flow": 337, "2196": 337, "2188": 337, "2176": 337, "2173": 337, "ssl": 337, "certif": 337, "2171": 337, "2154": 337, "2162": 337, "2156": 337, "2160": 337, "assert_": 337, "2158": 337, "2155": 337, "2147": 337, "2148": 337, "2150": 337, "2149": 337, "2145": 337, "2152": 337, "2146": 337, "2134": 337, "2135": 337, "2141": 337, "2136": 337, "2140": 337, "rag": 337, "2139": 337, "2108": 337, "2121": 337, "initialis": 337, "2129": 337, "2133": 337, "2125": 337, "2124": 337, "2033": 337, "2111": 337, "2086": 337, "2091": 337, "2057": 337, "2103": 337, "grammar": [337, 342], "2088": 337, "2120": 337, "2113": 337, "cigar_tensor": 337, "2116": 337, "2100": 337, "grammat": 337, "2101": 337, "2095": 337, "2099": 337, "2102": 337, "2055": 337, "2097": 337, "sform": 337, "get_best_affin": 337, "2104": 337, "2065": 337, "2090": 337, "2067": 337, "2093": 337, "2077": 337, "2071": 337, "2084": 337, "kunakl07": 337, "2085": 337, "2068": 337, "2069": 337, "2063": 337, "2045": 337, "2060": 337, "2058": 337, "2059": 337, "2056": 337, "2053": 337, "_gibbs_removal_2d": 337, "2043": 337, "2047": 337, "2044": 337, "2041": 337, "2039": 337, "2042": 337, "2040": 337, "2038": 337, "2037": 337, "fw": 337, "2028": 337, "2035": 337, "2114": 337, "1793": 337, "wf": 337, "2061": 337, "colab": 337, "2070": 337, "2107": 337, "2153": 337, "2138": 337, "2194": 337, "2177": 337, "maco": 337, "2182": 337, "tp_print": 337, "2199": 337, "2175": 337, "2190": [337, 338], "2051": 337, "2172": 337, "2169": 337, "2170": 337, "2144": 337, "2159": 337, "2151": 337, "2130": 337, "2131": 337, "elementwis": 337, "2128": 337, "1765": 337, "2122": 337, "2127": 337, "2126": 337, "2096": 337, "2118": 337, "1861": 337, "winter": 337, "2094": 337, "regn": 337, "2078": 337, "1305": 337, "polici": 337, "2089": 337, "2072": 337, "2073": 337, "old_highlight": 337, "2074": 337, "2075": 337, "maintainer_workflow": 337, "2076": 337, "2079": 337, "2080": 337, "2081": 337, "2082": 337, "2083": 337, "2066": 337, "1363": 337, "1871": 337, "2052": 337, "1785": 337, "gifti": 337, "1728": 337, "1699": 337, "1671": 337, "1552": 337, "1373": 337, "troubleshoot": 337, "1152": 337, "1047": 337, "2049": 337, "2048": 337, "218": 337, "313": 337, "1848": 337, "hub": 337, "2034": 337, "backlog": 337, "1864": 337, "basil": 338, "pinsard": 338, "jaewon": 338, "siddharth": 338, "kapoor": 338, "2181": 338, "2223": 338, "2238": 338, "2265": 338, "2206": 338, "2266": 338, "2255": 338, "2271": 338, "2263": 338, "part2": 338, "2259": 338, "2264": 338, "2268": 338, "2267": 338, "2262": 338, "2244": 338, "2119": 338, "2260": 338, "2258": 338, "2257": 338, "2261": 338, "1919": 338, "2256": 338, "2253": 338, "2240": 338, "2198": 338, "2025": 338, "2197": 338, "2227": 338, "2250": 338, "2252": 338, "2248": 338, "2249": 338, "2247": 338, "2246": 338, "backtick": 338, "2239": 338, "2242": 338, "2241": 338, "2235": 338, "2234": 338, "2231": 338, "2221": 338, "robustifi": 338, "solvererror": 338, "2226": 338, "2225": 338, "rackspac": 338, "nightli": [338, 341], "2224": 338, "xfail": 338, "assert_rais": 338, "2220": 338, "2218": 338, "2217": 338, "lstsq": 338, "2211": 338, "2272": 338, "2180": 338, "2054": 338, "unr": 338, "2046": 338, "2132": 338, "1266": 338, "test_mapmri_isotropic_static_scale_factor": 338, "1264": 338, "2117": 338, "2202": 338, "2115": 338, "1744": 338, "1489": 338, "2192": 338, "2201": 338, "2232": 338, "somesuch": 338, "2219": 338, "2236": 338, "2254": 338, "2251": 338, "2243": 338, "2237": 338, "2245": 338, "verbatim": 338, "2230": 338, "2228": 338, "2109": 338, "spring": [338, 341], "2214": 338, "2216": 338, "test_multi_shell_fiber_respons": 338, "2185": 338, "2215": 338, "1762": 338, "1354": 338, "325": 338, "2318": 339, "p2": [339, 340], "2317": 339, "2315": 339, "2307": 339, "2278": 339, "2275": 339, "2277": 339, "2289": 339, "2292": 339, "2296": 339, "2294": 339, "2291": 339, "2295": 339, "2280": 339, "2287": 339, "doctstr": 339, "2286": 339, "2284": 339, "doctsr": 339, "2283": 339, "2282": 339, "2210": 339, "arclength": 339, "722": 339, "2328": 339, "2323": 339, "2229": 339, "2098": 339, "2303": 339, "2279": 339, "felix": 340, "kruper": 340, "2367": 340, "2387": 340, "2386": 340, "2375": 340, "2382": 340, "2385": 340, "2384": 340, "2351": 340, "2381": 340, "2371": 340, "2352": 340, "2373": 340, "2372": 340, "2348": 340, "2363": 340, "2365": 340, "2349": 340, "2350": 340, "size_t": 340, "2346": 340, "mnt": [340, 341], "wherev": [340, 341], "2347": 340, "2340": 340, "reactiv": 340, "2344": 340, "2339": 340, "1648": 340, "2337": 340, "2333": 340, "2335": 340, "2332": 340, "1973": 340, "2377": 340, "2380": 340, "2300": 340, "2320": 340, "2341": 340, "2353": 340, "1311": 340, "1302": 340, "366": 340, "1672": 340, "fault": 340, "1444": 340, "562": 340, "2324": 340, "vr": 340, "2345": 340, "423": 340, "837": 340, "636": 340, "861": 340, "1895": 340, "545": 340, "1847": 340, "1872": 340, "1646": 340, "1635": 340, "2309": 340, "2334": 340, "aphys": 340, "1873": 340, "2343": 340, "2311": 340, "2274": 340, "1675": 340, "2316": 340, "translationtransform2d": 340, "2331": 340, "573": 341, "dan": 341, "franci": 341, "jerom": 341, "giulia": 341, "bert\u00f2": 341, "joshua": 341, "kenji": 341, "marshal": 341, "luca": 341, "costa": 341, "sam": [341, 342, 343], "covenei": [341, 342, 343], "2561": 341, "2520": 341, "2558": 341, "errant": 341, "2557": 341, "2556": 341, "2554": 341, "2555": 341, "2539": 341, "embarrassingli": 341, "2545": 341, "2548": 341, "concurr": 341, "gha": 341, "2549": 341, "2550": 341, "2551": 341, "2536": 341, "2533": 341, "underlin": 341, "2342": 341, "2512": 341, "2526": 341, "2534": 341, "2532": 341, "2529": 341, "2528": 341, "2527": 341, "2493": 341, "2522": 341, "2521": 341, "2420": 341, "2482": 341, "2423": 341, "2518": 341, "2515": 341, "2513": 341, "2506": 341, "2510": 341, "reboot": 341, "2487": 341, "2442": 341, "2470": 341, "2485": 341, "2481": 341, "2480": 341, "2478": 341, "2479": 341, "2475": 341, "2476": 341, "2472": 341, "2471": 341, "2468": 341, "2467": 341, "2466": 341, "2453": 341, "2413": 341, "2447": 341, "bitwis": 341, "2444": 341, "2434": 341, "2435": 341, "2436": 341, "2438": 341, "misplac": 341, "2374": 341, "2390": 341, "2417": 341, "2419": 341, "2406": 341, "2411": 341, "c_compress_streamlin": 341, "2416": 341, "2415": 341, "2410": 341, "2409": 341, "2405": 341, "2407": 341, "2392": 341, "2389": 341, "bundles_distances_mdf": 341, "2368": 341, "_local_track": 341, "2123": 341, "2489": 341, "2525": 341, "2509": 341, "2543": 341, "2546": 341, "2542": 341, "2477": 341, "2541": 341, "2507": 341, "2422": 341, "1969": 341, "2456": 341, "2524": 341, "2449": 341, "nonsens": 341, "2179": 341, "2492": 341, "reusabl": 341, "2497": 341, "2495": 341, "2305": 341, "2499": 341, "2488": 341, "footprint": 341, "2504": 341, "fwdwi": 341, "2502": 341, "2490": 341, "2402": 341, "dipy_to_nipype_interfac": 341, "2486": 341, "2484": 341, "2483": 341, "2463": 341, "2460": 341, "2429": 341, "2461": 341, "2464": 341, "homepag": 341, "2457": 341, "2454": 341, "2446": 341, "bitwise_or": 341, "2443": 341, "2441": 341, "2430": 341, "2431": 341, "2432": 341, "2314": 341, "1805": 341, "2418": 341, "365": 341, "2404": 341, "2209": 341, "_pytest": 341, "pathlib": 341, "importpathmismatcherror": 341, "1934": 341, "2312": 341, "2383": 341, "dcperror": 341, "2391": 341, "2393": 341, "probtrackx2": 341, "fmrib": 341, "toolbox": 341, "2310": 341, "deneb": 342, "jacob": 342, "malinda": 342, "dilhara": 342, "2710": 342, "2711": 342, "2702": 342, "2704": 342, "2701": 342, "progbar": 342, "2700": 342, "2694": 342, "2697": 342, "2692": 342, "2693": 342, "2687": 342, "2690": 342, "2688": 342, "2683": 342, "2668": 342, "2674": 342, "2670": 342, "2672": 342, "2669": 342, "inaccur": 342, "2664": 342, "2553": 342, "2369": 342, "diffeormorphicmap": 342, "2631": 342, "2630": 342, "2629": 342, "2618": 342, "multi_dot": 342, "2606": 342, "2531": 342, "2589": 342, "intemporarydirectori": 342, "tmpfile": 342, "2577": 342, "2595": 342, "2591": 342, "mutabl": 342, "2592": 342, "2579": 342, "2584": 342, "2566": 342, "2581": 342, "2580": 342, "2576": 342, "2568": 342, "2709": 342, "2708": 342, "2699": 342, "noreg": 342, "redux": 342, "2696": 342, "port": 342, "pyafq": 342, "2679": 342, "2676": 342, "2673": 342, "2667": 342, "2662": 342, "cmd_line": 342, "2658": 342, "chanc": 342, "arm64": 342, "2659": 342, "2649": 342, "2424": 342, "2327": 342, "2313": 342, "wholebrain": 342, "2616": 342, "2627": 342, "tvis_hdr": 342, "nii_aff": 342, "2634": 342, "2559": 342, "2564": 342, "2572": 342, "2617": 342, "2602": 342, "dear": 342, "expert": 342, "2603": 342, "dti_peak": 342, "2587": 342, "safeti": 342, "concern": 342, "relianc": 342, "tmpdir": 342, "2450": 342, "2594": 342, "2573": 342, "2567": 342, "2565": 342, "dogu": 343, "baran": 343, "sung": 343, "martino": 343, "pilia": 343, "mitesh": 343, "gulecha": 343, "rahul": 343, "ubal": 343, "karp2601": 343, "ujjwal": 343, "shekhar": 343, "2765": 343, "2788": 343, "2768": 343, "2744": 343, "2785": 343, "2540": 343, "2609": 343, "2596": 343, "2740": 343, "2773": 343, "2783": 343, "test_roi_imag": 343, "2782": 343, "mtn": 343, "2780": 343, "pmfgendirectiongett": 343, "2778": 343, "2767": 343, "fast_numpi": 343, "2626": 343, "2763": 343, "2751": 343, "2762": 343, "2753": 343, "2722": 343, "2741": 343, "2739": 343, "codespel": 343, "2590": 343, "2733": 343, "2648": 343, "2723": 343, "trx": 343, "2727": 343, "extras_requir": 343, "2725": 343, "2716": 343, "2717": 343, "2628": 343, "2713": 343, "2625": 343, "2537": 343, "1778": 343, "1990": 343, "1073": 343, "2530": 343, "2756": 343, "2754": 343, "2775": 343, "2770": 343, "2750": 343, "2745": 343, "2742": 343, "2729": 343, "attributeerror": 343, "2726": 343, "2707": 343, "fixdenois": 343, "2575": 343, "2414": 343, "2599": 343, "broader": 345, "respond": 345, "b_matrix": [346, 347], "privat": [346, 347], "req": [346, 347], "g_x": [346, 347], "g_y": [346, 347], "g_z": [346, 347], "supposedli": [346, 347], "envelop": 346, "int_0": 346, "matiello": 346, "onset": 346, "g_i": 346, "g_j": 346, "direcrt": 346, "trse": [346, 347], "ramp": [346, 347], "2b_": [346, 347], "_2": [346, 347], "_3": [346, 347], "dft": [346, 347], "callaghan": 346, "eccl": 346, "xia": 346, "mysteri": 346, "loos": 346, "exposit": 347, "clearer": 347, "frank": 348, "calaghan": 348, "transit": 348, "orthonorm": 350, "p_l": 350, "legendr": 350, "overlin": 350, "a_l": 350, "m_l": 350, "formal": 350, "leq": 350, "Their": 350, "foral": 350, "omiss": 350, "motiv": 350, "jorg": 351, "stolfi": 351, "atan2": 351, "cart2sph": 351, "rat": 278, "minlen": 287, "useless": 287, "fetch_cti_rat1": 290}, "objects": {"": [[274, 0, 0, "-", "dipy"]], "dipy": [[275, 0, 0, "-", "align"], [276, 0, 0, "-", "boots"], [277, 0, 0, "-", "core"], [278, 0, 0, "-", "data"], [279, 0, 0, "-", "denoise"], [280, 0, 0, "-", "direction"], [274, 3, 1, "", "get_info"], [281, 0, 0, "-", "io"], [282, 0, 0, "-", "nn"], [283, 0, 0, "-", "reconst"], [284, 0, 0, "-", "segment"], [285, 0, 0, "-", "sims"], [286, 0, 0, "-", "stats"], [287, 0, 0, "-", "tracking"], [288, 0, 0, "-", "viz"], [289, 0, 0, "-", "workflows"]], "dipy.align": [[275, 1, 1, "", "Bunch"], [275, 3, 1, "", "VerbosityLevels"], [275, 0, 0, "-", "_public"], [275, 0, 0, "-", "cpd"], [275, 0, 0, "-", "imaffine"], [275, 0, 0, "-", "imwarp"], [275, 0, 0, "-", "metrics"], [275, 0, 0, "-", "reslice"], [275, 0, 0, "-", "scalespace"], [275, 0, 0, "-", "streamlinear"], [275, 0, 0, "-", "streamwarp"]], "dipy.align.Bunch": [[275, 2, 1, "", "__init__"]], "dipy.align._public": [[275, 3, 1, "", "_METHOD_DICT"], [275, 3, 1, "", "affine"], [275, 3, 1, "", "affine_registration"], [275, 3, 1, "", "center_of_mass"], [275, 3, 1, "", "motion_correction"], [275, 3, 1, "", "read_mapping"], [275, 3, 1, "", "register_dwi_series"], [275, 3, 1, "", "register_dwi_to_template"], [275, 3, 1, "", "register_series"], [275, 3, 1, "", "resample"], [275, 3, 1, "", "rigid"], [275, 3, 1, "", "rigid_isoscaling"], [275, 3, 1, "", "rigid_scaling"], [275, 3, 1, "", "streamline_registration"], [275, 3, 1, "", "syn_registration"], [275, 3, 1, "", "translation"], [275, 3, 1, "", "write_mapping"]], "dipy.align.cpd": [[275, 1, 1, "", "DeformableRegistration"], [275, 3, 1, "", "gaussian_kernel"], [275, 3, 1, "", "initialize_sigma2"], [275, 3, 1, "", "low_rank_eigen"], [275, 3, 1, "", "lowrankQS"]], "dipy.align.cpd.DeformableRegistration": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "expectation"], [275, 2, 1, "", "get_registration_parameters"], [275, 2, 1, "", "iterate"], [275, 2, 1, "", "maximization"], [275, 2, 1, "", "register"], [275, 2, 1, "", "transform_point_cloud"], [275, 2, 1, "", "update_transform"], [275, 2, 1, "", "update_variance"]], "dipy.align.imaffine": [[275, 1, 1, "", "AffineInvalidValuesError"], [275, 1, 1, "", "AffineInversionError"], [275, 1, 1, "", "AffineMap"], [275, 1, 1, "", "AffineRegistration"], [275, 1, 1, "", "MutualInformationMetric"], [275, 3, 1, "", "_transform_method"], [275, 3, 1, "", "transform_centers_of_mass"], [275, 3, 1, "", "transform_geometric_centers"], [275, 3, 1, "", "transform_origins"]], "dipy.align.imaffine.AffineInvalidValuesError": [[275, 2, 1, "", "__init__"]], "dipy.align.imaffine.AffineInversionError": [[275, 2, 1, "", "__init__"]], "dipy.align.imaffine.AffineMap": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "get_affine"], [275, 2, 1, "", "set_affine"], [275, 2, 1, "", "transform"], [275, 2, 1, "", "transform_inverse"]], "dipy.align.imaffine.AffineRegistration": [[275, 2, 1, "", "__init__"], [275, 4, 1, "", "docstring_addendum"], [275, 2, 1, "", "optimize"]], "dipy.align.imaffine.MutualInformationMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"], [275, 2, 1, "", "distance_and_gradient"], [275, 2, 1, "", "gradient"], [275, 2, 1, "", "setup"]], "dipy.align.imwarp": [[275, 1, 1, "", "DiffeomorphicMap"], [275, 1, 1, "", "DiffeomorphicRegistration"], [275, 3, 1, "", "RegistrationStages"], [275, 1, 1, "", "SymmetricDiffeomorphicRegistration"], [275, 3, 1, "", "get_direction_and_spacings"], [275, 3, 1, "", "logger"], [275, 3, 1, "", "mult_aff"]], "dipy.align.imwarp.DiffeomorphicMap": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "allocate"], [275, 2, 1, "", "compute_inversion_error"], [275, 2, 1, "", "expand_fields"], [275, 2, 1, "", "get_backward_field"], [275, 2, 1, "", "get_forward_field"], [275, 2, 1, "", "get_simplified_transform"], [275, 2, 1, "", "interpret_matrix"], [275, 2, 1, "", "inverse"], [275, 2, 1, "", "shallow_copy"], [275, 2, 1, "", "transform"], [275, 2, 1, "", "transform_inverse"], [275, 2, 1, "", "transform_points"], [275, 2, 1, "", "transform_points_inverse"], [275, 2, 1, "", "warp_endomorphism"]], "dipy.align.imwarp.DiffeomorphicRegistration": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "get_map"], [275, 2, 1, "", "optimize"], [275, 2, 1, "", "set_level_iters"]], "dipy.align.imwarp.SymmetricDiffeomorphicRegistration": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "get_map"], [275, 2, 1, "", "optimize"], [275, 2, 1, "", "update"]], "dipy.align.metrics": [[275, 1, 1, "", "CCMetric"], [275, 1, 1, "", "EMMetric"], [275, 1, 1, "", "SSDMetric"], [275, 1, 1, "", "SimilarityMetric"], [275, 3, 1, "", "v_cycle_2d"], [275, 3, 1, "", "v_cycle_3d"]], "dipy.align.metrics.CCMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "compute_backward"], [275, 2, 1, "", "compute_forward"], [275, 2, 1, "", "free_iteration"], [275, 2, 1, "", "get_energy"], [275, 2, 1, "", "initialize_iteration"]], "dipy.align.metrics.EMMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "compute_backward"], [275, 2, 1, "", "compute_demons_step"], [275, 2, 1, "", "compute_forward"], [275, 2, 1, "", "compute_gauss_newton_step"], [275, 2, 1, "", "free_iteration"], [275, 2, 1, "", "get_energy"], [275, 2, 1, "", "initialize_iteration"], [275, 2, 1, "", "use_moving_image_dynamics"], [275, 2, 1, "", "use_static_image_dynamics"]], "dipy.align.metrics.SSDMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "compute_backward"], [275, 2, 1, "", "compute_demons_step"], [275, 2, 1, "", "compute_forward"], [275, 2, 1, "", "compute_gauss_newton_step"], [275, 2, 1, "", "free_iteration"], [275, 2, 1, "", "get_energy"], [275, 2, 1, "", "initialize_iteration"]], "dipy.align.metrics.SimilarityMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "compute_backward"], [275, 2, 1, "", "compute_forward"], [275, 2, 1, "", "free_iteration"], [275, 2, 1, "", "get_energy"], [275, 2, 1, "", "initialize_iteration"], [275, 2, 1, "", "set_levels_above"], [275, 2, 1, "", "set_levels_below"], [275, 2, 1, "", "set_moving_image"], [275, 2, 1, "", "set_static_image"], [275, 2, 1, "", "use_moving_image_dynamics"], [275, 2, 1, "", "use_static_image_dynamics"]], "dipy.align.reslice": [[275, 3, 1, "", "reslice"]], "dipy.align.scalespace": [[275, 1, 1, "", "IsotropicScaleSpace"], [275, 1, 1, "", "ScaleSpace"], [275, 3, 1, "", "logger"]], "dipy.align.scalespace.IsotropicScaleSpace": [[275, 2, 1, "", "__init__"]], "dipy.align.scalespace.ScaleSpace": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "get_affine"], [275, 2, 1, "", "get_affine_inv"], [275, 2, 1, "", "get_domain_shape"], [275, 2, 1, "", "get_expand_factors"], [275, 2, 1, "", "get_image"], [275, 2, 1, "", "get_scaling"], [275, 2, 1, "", "get_sigmas"], [275, 2, 1, "", "get_spacing"], [275, 2, 1, "", "print_level"]], "dipy.align.streamlinear": [[275, 1, 1, "", "BundleMinDistanceAsymmetricMetric"], [275, 1, 1, "", "BundleMinDistanceMatrixMetric"], [275, 1, 1, "", "BundleMinDistanceMetric"], [275, 1, 1, "", "BundleSumDistanceMatrixMetric"], [275, 1, 1, "", "JointBundleMinDistanceMetric"], [275, 1, 1, "", "JointStreamlineRegistrationMap"], [275, 1, 1, "", "StreamlineDistanceMetric"], [275, 1, 1, "", "StreamlineLinearRegistration"], [275, 1, 1, "", "StreamlineRegistrationMap"], [275, 3, 1, "", "bundle_min_distance"], [275, 3, 1, "", "bundle_min_distance_asymmetric_fast"], [275, 3, 1, "", "bundle_min_distance_fast"], [275, 3, 1, "", "bundle_sum_distance"], [275, 3, 1, "", "compose_matrix44"], [275, 3, 1, "", "decompose_matrix44"], [275, 3, 1, "", "get_unique_pairs"], [275, 3, 1, "", "groupwise_slr"], [275, 3, 1, "", "logger"], [275, 3, 1, "", "progressive_slr"], [275, 3, 1, "", "remove_clusters_by_size"], [275, 3, 1, "", "slr_with_qbx"]], "dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"]], "dipy.align.streamlinear.BundleMinDistanceMatrixMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"], [275, 2, 1, "", "setup"]], "dipy.align.streamlinear.BundleMinDistanceMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"], [275, 2, 1, "", "setup"]], "dipy.align.streamlinear.BundleSumDistanceMatrixMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"]], "dipy.align.streamlinear.JointBundleMinDistanceMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"], [275, 2, 1, "", "setup"]], "dipy.align.streamlinear.JointStreamlineRegistrationMap": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "transform"]], "dipy.align.streamlinear.StreamlineDistanceMetric": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "distance"], [275, 2, 1, "", "setup"]], "dipy.align.streamlinear.StreamlineLinearRegistration": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "optimize"]], "dipy.align.streamlinear.StreamlineRegistrationMap": [[275, 2, 1, "", "__init__"], [275, 2, 1, "", "transform"]], "dipy.align.streamwarp": [[275, 3, 1, "", "average_bundle_length"], [275, 3, 1, "", "bundlewarp"], [275, 3, 1, "", "bundlewarp_shape_analysis"], [275, 3, 1, "", "bundlewarp_vector_filed"], [275, 3, 1, "", "find_missing"]], "dipy.core": [[277, 0, 0, "-", "benchmarks"], [277, 0, 0, "-", "geometry"], [277, 0, 0, "-", "gradients"], [277, 0, 0, "-", "graph"], [277, 0, 0, "-", "histeq"], [277, 0, 0, "-", "ndindex"], [277, 0, 0, "-", "onetime"], [277, 0, 0, "-", "optimize"], [277, 0, 0, "-", "profile"], [277, 0, 0, "-", "rng"], [277, 0, 0, "-", "sphere"], [277, 0, 0, "-", "sphere_stats"], [277, 0, 0, "-", "subdivide_octahedron"], [277, 0, 0, "-", "wavelet"]], "dipy.core.benchmarks": [[277, 0, 0, "-", "bench_sphere"]], "dipy.core.benchmarks.bench_sphere": [[277, 1, 1, "", "Timer"], [277, 3, 1, "", "bench_disperse_charges_alt"], [277, 3, 1, "", "func_minimize_adhoc"], [277, 3, 1, "", "func_minimize_scipy"]], "dipy.core.benchmarks.bench_sphere.Timer": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "duration_in_seconds"]], "dipy.core.geometry": [[277, 3, 1, "", "_TUPLE2AXES"], [277, 3, 1, "", "cart2sphere"], [277, 3, 1, "", "cart_distance"], [277, 3, 1, "", "circumradius"], [277, 3, 1, "", "compose_matrix"], [277, 3, 1, "", "compose_transformations"], [277, 3, 1, "", "decompose_matrix"], [277, 3, 1, "", "dist_to_corner"], [277, 3, 1, "", "euler_matrix"], [277, 3, 1, "", "is_hemispherical"], [277, 3, 1, "", "lambert_equal_area_projection_cart"], [277, 3, 1, "", "lambert_equal_area_projection_polar"], [277, 3, 1, "", "nearest_pos_semi_def"], [277, 3, 1, "", "normalized_vector"], [277, 3, 1, "", "perpendicular_directions"], [277, 3, 1, "", "rodrigues_axis_rotation"], [277, 3, 1, "", "sph2latlon"], [277, 3, 1, "", "sphere2cart"], [277, 3, 1, "", "sphere_distance"], [277, 3, 1, "", "vec2vec_rotmat"], [277, 3, 1, "", "vector_cosine"], [277, 3, 1, "", "vector_norm"]], "dipy.core.gradients": [[277, 1, 1, "", "GradientTable"], [277, 3, 1, "", "btens_to_params"], [277, 3, 1, "", "check_multi_b"], [277, 3, 1, "", "generate_bvecs"], [277, 3, 1, "", "get_bval_indices"], [277, 3, 1, "", "gradient_table"], [277, 3, 1, "", "gradient_table_from_bvals_bvecs"], [277, 3, 1, "", "gradient_table_from_gradient_strength_bvecs"], [277, 3, 1, "", "gradient_table_from_qvals_bvecs"], [277, 3, 1, "", "logger"], [277, 3, 1, "", "orientation_from_string"], [277, 3, 1, "", "orientation_to_string"], [277, 3, 1, "", "ornt_mapping"], [277, 3, 1, "", "params_to_btens"], [277, 3, 1, "", "reorient_bvecs"], [277, 3, 1, "", "reorient_on_axis"], [277, 3, 1, "", "reorient_vectors"], [277, 3, 1, "", "round_bvals"], [277, 3, 1, "", "unique_bvals"], [277, 3, 1, "", "unique_bvals_magnitude"], [277, 3, 1, "", "unique_bvals_tolerance"]], "dipy.core.gradients.GradientTable": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "b0s_mask"], [277, 2, 1, "", "bvals"], [277, 2, 1, "", "bvecs"], [277, 2, 1, "", "gradient_strength"], [277, 5, 1, "", "info"], [277, 2, 1, "", "qvals"], [277, 2, 1, "", "tau"]], "dipy.core.graph": [[277, 1, 1, "", "Graph"]], "dipy.core.graph.Graph": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "add_edge"], [277, 2, 1, "", "add_node"], [277, 2, 1, "", "all_paths"], [277, 2, 1, "", "children"], [277, 2, 1, "", "del_node"], [277, 2, 1, "", "del_node_and_edges"], [277, 2, 1, "", "down"], [277, 2, 1, "", "down_short"], [277, 2, 1, "", "parents"], [277, 2, 1, "", "shortest_path"], [277, 2, 1, "", "up"], [277, 2, 1, "", "up_short"]], "dipy.core.histeq": [[277, 3, 1, "", "histeq"]], "dipy.core.ndindex": [[277, 3, 1, "", "ndindex"]], "dipy.core.onetime": [[277, 1, 1, "", "OneTimeProperty"], [277, 1, 1, "", "ResetMixin"], [277, 3, 1, "", "auto_attr"]], "dipy.core.onetime.OneTimeProperty": [[277, 2, 1, "", "__init__"]], "dipy.core.onetime.ResetMixin": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "reset"]], "dipy.core.optimize": [[277, 1, 1, "", "NonNegativeLeastSquares"], [277, 1, 1, "", "Optimizer"], [277, 1, 1, "", "PositiveDefiniteLeastSquares"], [277, 1, 1, "", "SKLearnLinearSolver"], [277, 3, 1, "", "sparse_nnls"], [277, 3, 1, "", "spdot"]], "dipy.core.optimize.NonNegativeLeastSquares": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "fit"]], "dipy.core.optimize.Optimizer": [[277, 2, 1, "", "__init__"], [277, 5, 1, "", "evolution"], [277, 5, 1, "", "fopt"], [277, 5, 1, "", "message"], [277, 5, 1, "", "nfev"], [277, 5, 1, "", "nit"], [277, 2, 1, "", "print_summary"], [277, 5, 1, "", "xopt"]], "dipy.core.optimize.PositiveDefiniteLeastSquares": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "solve"]], "dipy.core.optimize.SKLearnLinearSolver": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "fit"], [277, 2, 1, "", "predict"]], "dipy.core.profile": [[277, 1, 1, "", "Profiler"]], "dipy.core.profile.Profiler": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "print_stats"]], "dipy.core.rng": [[277, 3, 1, "", "LEcuyer"], [277, 3, 1, "", "WichmannHill1982"], [277, 3, 1, "", "WichmannHill2006"]], "dipy.core.sphere": [[277, 1, 1, "", "HemiSphere"], [277, 1, 1, "", "Sphere"], [277, 3, 1, "", "disperse_charges"], [277, 3, 1, "", "disperse_charges_alt"], [277, 3, 1, "", "euler_characteristic_check"], [277, 3, 1, "", "faces_from_sphere_vertices"], [277, 3, 1, "", "hemi_icosahedron"], [277, 3, 1, "", "icosahedron_faces"], [277, 3, 1, "", "icosahedron_vertices"], [277, 3, 1, "", "octahedron_faces"], [277, 3, 1, "", "octahedron_vertices"], [277, 3, 1, "", "unique_edges"], [277, 3, 1, "", "unique_sets"], [277, 3, 1, "", "unit_icosahedron"], [277, 3, 1, "", "unit_octahedron"]], "dipy.core.sphere.HemiSphere": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "faces"], [277, 2, 1, "", "find_closest"], [277, 2, 1, "", "from_sphere"], [277, 2, 1, "", "mirror"], [277, 2, 1, "", "subdivide"]], "dipy.core.sphere.Sphere": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "edges"], [277, 2, 1, "", "faces"], [277, 2, 1, "", "find_closest"], [277, 2, 1, "", "subdivide"], [277, 2, 1, "", "vertices"], [277, 5, 1, "", "x"], [277, 5, 1, "", "y"], [277, 5, 1, "", "z"]], "dipy.core.sphere_stats": [[277, 3, 1, "", "angular_similarity"], [277, 3, 1, "", "compare_orientation_sets"], [277, 3, 1, "", "eigenstats"], [277, 3, 1, "", "random_uniform_on_sphere"]], "dipy.core.subdivide_octahedron": [[277, 3, 1, "", "create_unit_hemisphere"], [277, 3, 1, "", "create_unit_sphere"]], "dipy.core.wavelet": [[277, 3, 1, "", "afb3D"], [277, 3, 1, "", "afb3D_A"], [277, 3, 1, "", "cshift3D"], [277, 3, 1, "", "dwt3D"], [277, 3, 1, "", "idwt3D"], [277, 3, 1, "", "permutationinverse"], [277, 3, 1, "", "sfb3D"], [277, 3, 1, "", "sfb3D_A"]], "dipy.data": [[278, 3, 1, "", "DATA_DIR"], [278, 1, 1, "", "DataError"], [278, 3, 1, "", "default_sphere"], [278, 3, 1, "", "dsi_deconv_voxels"], [278, 3, 1, "", "dsi_voxels"], [278, 0, 0, "-", "fetcher"], [278, 3, 1, "", "get_3shell_gtab"], [278, 3, 1, "", "get_cmap"], [278, 3, 1, "", "get_gtab_taiwan_dsi"], [278, 3, 1, "", "get_isbi2013_2shell_gtab"], [278, 3, 1, "", "get_sim_voxels"], [278, 3, 1, "", "get_skeleton"], [278, 3, 1, "", "get_sphere"], [278, 3, 1, "", "load_sdp_constraints"], [278, 3, 1, "", "loads_compat"], [278, 3, 1, "", "matlab_life_results"], [278, 3, 1, "", "mrtrix_spherical_functions"], [278, 3, 1, "", "small_sphere"], [278, 3, 1, "", "two_cingulum_bundles"]], "dipy.data.DataError": [[278, 2, 1, "", "__init__"]], "dipy.data.fetcher": [[278, 3, 1, "", "check_md5"], [278, 3, 1, "", "copyfileobj_withprogress"], [278, 3, 1, "", "extract_example_tracts"], [278, 3, 1, "", "fetch_DiB_217_lte_pte_ste"], [278, 3, 1, "", "fetch_DiB_70_lte_pte_ste"], [278, 3, 1, "", "fetch_bundle_atlas_hcp842"], [278, 3, 1, "", "fetch_bundle_fa_hcp"], [278, 3, 1, "", "fetch_bundle_warp_dataset"], [278, 3, 1, "", "fetch_bundles_2_subjects"], [278, 3, 1, "", "fetch_cenir_multib"], [278, 3, 1, "", "fetch_cfin_multib"], [278, 3, 1, "", "fetch_cti_rat1"], [278, 3, 1, "", "fetch_data"], [278, 3, 1, "", "fetch_evac_test"], [278, 3, 1, "", "fetch_evac_weights"], [278, 3, 1, "", "fetch_file_formats"], [278, 3, 1, "", "fetch_fury_surface"], [278, 3, 1, "", "fetch_gold_standard_io"], [278, 3, 1, "", "fetch_hbn"], [278, 3, 1, "", "fetch_hcp"], [278, 3, 1, "", "fetch_isbi2013_2shell"], [278, 3, 1, "", "fetch_ivim"], [278, 3, 1, "", "fetch_mni_template"], [278, 3, 1, "", "fetch_ptt_minimal_dataset"], [278, 3, 1, "", "fetch_qtdMRI_test_retest_2subjects"], [278, 3, 1, "", "fetch_qte_lte_pte"], [278, 3, 1, "", "fetch_resdnn_weights"], [278, 3, 1, "", "fetch_scil_b0"], [278, 3, 1, "", "fetch_sherbrooke_3shell"], [278, 3, 1, "", "fetch_stanford_hardi"], [278, 3, 1, "", "fetch_stanford_labels"], [278, 3, 1, "", "fetch_stanford_pve_maps"], [278, 3, 1, "", "fetch_stanford_t1"], [278, 3, 1, "", "fetch_stanford_tracks"], [278, 3, 1, "", "fetch_syn_data"], [278, 3, 1, "", "fetch_synb0_test"], [278, 3, 1, "", "fetch_synb0_weights"], [278, 3, 1, "", "fetch_taiwan_ntu_dsi"], [278, 3, 1, "", "fetch_target_tractogram_hcp"], [278, 3, 1, "", "fetch_tissue_data"], [278, 3, 1, "", "get_bundle_atlas_hcp842"], [278, 3, 1, "", "get_file_formats"], [278, 3, 1, "", "get_fnames"], [278, 3, 1, "", "get_target_tractogram_hcp"], [278, 3, 1, "", "get_two_hcp842_bundles"], [278, 3, 1, "", "read_DiB_217_lte_pte_ste"], [278, 3, 1, "", "read_DiB_70_lte_pte_ste"], [278, 3, 1, "", "read_bundles_2_subjects"], [278, 3, 1, "", "read_cenir_multib"], [278, 3, 1, "", "read_cfin_dwi"], [278, 3, 1, "", "read_cfin_t1"], [278, 3, 1, "", "read_five_af_bundles"], [278, 3, 1, "", "read_isbi2013_2shell"], [278, 3, 1, "", "read_ivim"], [278, 3, 1, "", "read_mni_template"], [278, 3, 1, "", "read_qtdMRI_test_retest_2subjects"], [278, 3, 1, "", "read_qte_lte_pte"], [278, 3, 1, "", "read_scil_b0"], [278, 3, 1, "", "read_sherbrooke_3shell"], [278, 3, 1, "", "read_siemens_scil_b0"], [278, 3, 1, "", "read_stanford_hardi"], [278, 3, 1, "", "read_stanford_labels"], [278, 3, 1, "", "read_stanford_pve_maps"], [278, 3, 1, "", "read_stanford_t1"], [278, 3, 1, "", "read_syn_data"], [278, 3, 1, "", "read_taiwan_ntu_dsi"], [278, 3, 1, "", "read_tissue_data"], [278, 3, 1, "", "to_bids_description"]], "dipy.denoise": [[279, 0, 0, "-", "adaptive_soft_matching"], [279, 0, 0, "-", "gibbs"], [279, 0, 0, "-", "localpca"], [279, 0, 0, "-", "nlmeans"], [279, 0, 0, "-", "noise_estimate"], [279, 0, 0, "-", "non_local_means"], [279, 0, 0, "-", "patch2self"]], "dipy.denoise.adaptive_soft_matching": [[279, 3, 1, "", "adaptive_soft_matching"]], "dipy.denoise.gibbs": [[279, 3, 1, "", "gibbs_removal"]], "dipy.denoise.localpca": [[279, 3, 1, "", "genpca"], [279, 3, 1, "", "localpca"], [279, 3, 1, "", "mppca"]], "dipy.denoise.nlmeans": [[279, 3, 1, "", "nlmeans"]], "dipy.denoise.noise_estimate": [[279, 3, 1, "", "estimate_sigma"], [279, 3, 1, "", "piesno"]], "dipy.denoise.non_local_means": [[279, 3, 1, "", "non_local_means"]], "dipy.denoise.patch2self": [[279, 3, 1, "", "patch2self"]], "dipy.direction": [[280, 0, 0, "-", "peaks"]], "dipy.direction.peaks": [[280, 1, 1, "", "PeaksAndMetrics"], [280, 3, 1, "", "peak_directions"], [280, 3, 1, "", "peak_directions_nl"], [280, 3, 1, "", "peaks_from_model"], [280, 3, 1, "", "reshape_peaks_for_visualization"]], "dipy.direction.peaks.PeaksAndMetrics": [[280, 2, 1, "", "__init__"]], "dipy.io": [[281, 0, 0, "-", "bvectxt"], [281, 0, 0, "-", "dpy"], [281, 0, 0, "-", "gradients"], [281, 0, 0, "-", "image"], [281, 0, 0, "-", "peaks"], [281, 0, 0, "-", "pickles"], [281, 0, 0, "-", "stateful_tractogram"], [281, 0, 0, "-", "streamline"], [281, 0, 0, "-", "utils"], [281, 0, 0, "-", "vtk"]], "dipy.io.bvectxt": [[281, 3, 1, "", "orientation_from_string"], [281, 3, 1, "", "orientation_to_string"], [281, 3, 1, "", "ornt_mapping"], [281, 3, 1, "", "read_bvec_file"], [281, 3, 1, "", "reorient_on_axis"], [281, 3, 1, "", "reorient_vectors"]], "dipy.io.dpy": [[281, 1, 1, "", "Dpy"]], "dipy.io.dpy.Dpy": [[281, 2, 1, "", "__init__"], [281, 2, 1, "", "close"], [281, 2, 1, "", "read_track"], [281, 2, 1, "", "read_tracks"], [281, 2, 1, "", "read_tracksi"], [281, 2, 1, "", "version"], [281, 2, 1, "", "write_track"], [281, 2, 1, "", "write_tracks"]], "dipy.io.gradients": [[281, 3, 1, "", "read_bvals_bvecs"]], "dipy.io.image": [[281, 3, 1, "", "load_nifti"], [281, 3, 1, "", "load_nifti_data"], [281, 3, 1, "", "save_nifti"], [281, 3, 1, "", "save_qa_metric"]], "dipy.io.peaks": [[281, 3, 1, "", "load_peaks"], [281, 3, 1, "", "peaks_to_niftis"], [281, 3, 1, "", "save_peaks"]], "dipy.io.pickles": [[281, 3, 1, "", "load_pickle"], [281, 3, 1, "", "save_pickle"]], "dipy.io.stateful_tractogram": [[281, 1, 1, "", "Origin"], [281, 1, 1, "", "Space"], [281, 1, 1, "", "StatefulTractogram"], [281, 3, 1, "", "logger"], [281, 3, 1, "", "set_sft_logger_level"]], "dipy.io.stateful_tractogram.Origin": [[281, 4, 1, "", "NIFTI"], [281, 4, 1, "", "TRACKVIS"], [281, 2, 1, "", "__init__"]], "dipy.io.stateful_tractogram.Space": [[281, 4, 1, "", "RASMM"], [281, 4, 1, "", "VOX"], [281, 4, 1, "", "VOXMM"], [281, 2, 1, "", "__init__"]], "dipy.io.stateful_tractogram.StatefulTractogram": [[281, 2, 1, "", "__init__"], [281, 5, 1, "", "affine"], [281, 2, 1, "", "are_compatible"], [281, 2, 1, "", "compute_bounding_box"], [281, 5, 1, "", "data_per_point"], [281, 5, 1, "", "data_per_streamline"], [281, 5, 1, "", "dimensions"], [281, 5, 1, "", "dtype_dict"], [281, 2, 1, "", "from_sft"], [281, 2, 1, "", "get_data_per_point_keys"], [281, 2, 1, "", "get_data_per_streamline_keys"], [281, 2, 1, "", "get_streamlines_copy"], [281, 2, 1, "", "is_bbox_in_vox_valid"], [281, 5, 1, "", "origin"], [281, 2, 1, "", "remove_invalid_streamlines"], [281, 5, 1, "", "space"], [281, 5, 1, "", "space_attributes"], [281, 5, 1, "", "streamlines"], [281, 2, 1, "", "to_center"], [281, 2, 1, "", "to_corner"], [281, 2, 1, "", "to_origin"], [281, 2, 1, "", "to_rasmm"], [281, 2, 1, "", "to_space"], [281, 2, 1, "", "to_vox"], [281, 2, 1, "", "to_voxmm"], [281, 5, 1, "", "voxel_order"], [281, 5, 1, "", "voxel_sizes"]], "dipy.io.streamline": [[281, 3, 1, "", "load_dpy"], [281, 3, 1, "", "load_fib"], [281, 3, 1, "", "load_generator"], [281, 3, 1, "", "load_tck"], [281, 3, 1, "", "load_tractogram"], [281, 3, 1, "", "load_trk"], [281, 3, 1, "", "load_vtk"], [281, 3, 1, "", "load_vtp"], [281, 3, 1, "", "save_dpy"], [281, 3, 1, "", "save_fib"], [281, 3, 1, "", "save_generator"], [281, 3, 1, "", "save_tck"], [281, 3, 1, "", "save_tractogram"], [281, 3, 1, "", "save_trk"], [281, 3, 1, "", "save_vtk"], [281, 3, 1, "", "save_vtp"]], "dipy.io.utils": [[281, 3, 1, "", "create_nifti_header"], [281, 3, 1, "", "create_tractogram_header"], [281, 3, 1, "", "decfa"], [281, 3, 1, "", "decfa_to_float"], [281, 3, 1, "", "get_reference_info"], [281, 3, 1, "", "is_header_compatible"], [281, 3, 1, "", "is_reference_info_valid"], [281, 3, 1, "", "make5d"], [281, 3, 1, "", "nifti1_symmat"], [281, 3, 1, "", "read_img_arr_or_path"], [281, 3, 1, "", "save_buan_profiles_hdf5"]], "dipy.io.vtk": [[281, 3, 1, "", "load_polydata"], [281, 3, 1, "", "load_vtk_streamlines"], [281, 3, 1, "", "save_polydata"], [281, 3, 1, "", "save_vtk_streamlines"]], "dipy.nn": [[282, 0, 0, "-", "cnn_1d_denoising"], [282, 0, 0, "-", "evac"], [282, 0, 0, "-", "histo_resdnn"], [282, 0, 0, "-", "model"], [282, 0, 0, "-", "synb0"], [282, 0, 0, "-", "utils"]], "dipy.nn.cnn_1d_denoising": [[282, 1, 1, "", "Cnn1DDenoiser"]], "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "compile"], [282, 2, 1, "", "evaluate"], [282, 2, 1, "", "fit"], [282, 2, 1, "", "load_weights"], [282, 2, 1, "", "predict"], [282, 2, 1, "", "save_weights"], [282, 2, 1, "", "summary"], [282, 2, 1, "", "train_test_split"]], "dipy.nn.evac": [[282, 1, 1, "", "Block"], [282, 1, 1, "", "ChannelSum"], [282, 1, 1, "", "EVACPlus"], [282, 3, 1, "", "init_model"], [282, 3, 1, "", "logger"], [282, 3, 1, "", "prepare_img"]], "dipy.nn.evac.Block": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "call"]], "dipy.nn.evac.ChannelSum": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "call"]], "dipy.nn.evac.EVACPlus": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "fetch_default_weights"], [282, 2, 1, "", "load_model_weights"], [282, 2, 1, "", "predict"]], "dipy.nn.histo_resdnn": [[282, 1, 1, "", "HistoResDNN"], [282, 3, 1, "", "logger"]], "dipy.nn.histo_resdnn.HistoResDNN": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "fetch_default_weights"], [282, 2, 1, "", "load_model_weights"], [282, 2, 1, "", "predict"]], "dipy.nn.model": [[282, 1, 1, "", "MultipleLayerPercepton"], [282, 1, 1, "", "SingleLayerPerceptron"]], "dipy.nn.model.MultipleLayerPercepton": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "evaluate"], [282, 2, 1, "", "fit"], [282, 2, 1, "", "predict"], [282, 2, 1, "", "summary"]], "dipy.nn.model.SingleLayerPerceptron": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "evaluate"], [282, 2, 1, "", "fit"], [282, 2, 1, "", "predict"], [282, 2, 1, "", "summary"]], "dipy.nn.synb0": [[282, 1, 1, "id69", "DecoderBlock"], [282, 1, 1, "id0", "EncoderBlock"], [282, 1, 1, "", "Synb0"], [282, 3, 1, "id90", "UNet3D"], [282, 3, 1, "", "logger"], [282, 3, 1, "", "normalize"], [282, 3, 1, "", "unnormalize"]], "dipy.nn.synb0.DecoderBlock": [[282, 2, 1, "id70", "__init__"], [282, 2, 1, "id71", "call"]], "dipy.nn.synb0.EncoderBlock": [[282, 2, 1, "id62", "__init__"], [282, 2, 1, "id63", "call"]], "dipy.nn.synb0.Synb0": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "fetch_default_weights"], [282, 2, 1, "", "load_model_weights"], [282, 2, 1, "", "predict"]], "dipy.nn.utils": [[282, 3, 1, "", "normalize"], [282, 3, 1, "", "recover_img"], [282, 3, 1, "", "set_logger_level"], [282, 3, 1, "", "transform_img"], [282, 3, 1, "", "unnormalize"]], "dipy.reconst": [[283, 0, 0, "-", "base"], [283, 0, 0, "-", "benchmarks"], [283, 0, 0, "-", "cache"], [283, 0, 0, "-", "cross_validation"], [283, 0, 0, "-", "csdeconv"], [283, 0, 0, "-", "dki"], [283, 0, 0, "-", "dki_micro"], [283, 0, 0, "-", "dsi"], [283, 0, 0, "-", "dti"], [283, 0, 0, "-", "forecast"], [283, 0, 0, "-", "fwdti"], [283, 0, 0, "-", "gqi"], [283, 0, 0, "-", "ivim"], [283, 0, 0, "-", "mapmri"], [283, 0, 0, "-", "mcsd"], [283, 0, 0, "-", "msdki"], [283, 0, 0, "-", "multi_voxel"], [283, 0, 0, "-", "odf"], [283, 0, 0, "-", "qtdmri"], [283, 0, 0, "-", "qti"], [283, 0, 0, "-", "rumba"], [283, 0, 0, "-", "sfm"], [283, 0, 0, "-", "shm"], [283, 0, 0, "-", "shore"], [283, 0, 0, "-", "utils"]], "dipy.reconst.base": [[283, 1, 1, "", "ReconstFit"], [283, 1, 1, "", "ReconstModel"]], "dipy.reconst.base.ReconstFit": [[283, 2, 1, "", "__init__"]], "dipy.reconst.base.ReconstModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.benchmarks": [[283, 0, 0, "-", "bench_bounding_box"], [283, 0, 0, "-", "bench_csd"], [283, 0, 0, "-", "bench_peaks"], [283, 0, 0, "-", "bench_squash"], [283, 0, 0, "-", "bench_vec_val_sum"]], "dipy.reconst.benchmarks.bench_bounding_box": [[283, 3, 1, "", "bench_bounding_box"]], "dipy.reconst.benchmarks.bench_csd": [[283, 3, 1, "", "bench_csdeconv"], [283, 3, 1, "", "num_grad"]], "dipy.reconst.benchmarks.bench_peaks": [[283, 3, 1, "", "bench_local_maxima"]], "dipy.reconst.benchmarks.bench_squash": [[283, 3, 1, "", "bench_quick_squash"], [283, 3, 1, "", "old_squash"]], "dipy.reconst.benchmarks.bench_vec_val_sum": [[283, 3, 1, "", "bench_vec_val_vect"]], "dipy.reconst.cache": [[283, 1, 1, "", "Cache"]], "dipy.reconst.cache.Cache": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "cache_clear"], [283, 2, 1, "", "cache_get"], [283, 2, 1, "", "cache_set"]], "dipy.reconst.cross_validation": [[283, 3, 1, "", "coeff_of_determination"], [283, 3, 1, "", "kfold_xval"]], "dipy.reconst.csdeconv": [[283, 1, 1, "", "AxSymShResponse"], [283, 1, 1, "", "ConstrainedSDTModel"], [283, 1, 1, "", "ConstrainedSphericalDeconvModel"], [283, 3, 1, "", "auto_response"], [283, 3, 1, "", "auto_response_ssst"], [283, 3, 1, "", "csdeconv"], [283, 3, 1, "", "estimate_response"], [283, 3, 1, "", "fa_trace_to_lambdas"], [283, 3, 1, "", "forward_sdt_deconv_mat"], [283, 3, 1, "", "mask_for_response_ssst"], [283, 3, 1, "", "odf_deconv"], [283, 3, 1, "", "odf_sh_to_sharp"], [283, 3, 1, "", "recursive_response"], [283, 3, 1, "", "response_from_mask"], [283, 3, 1, "", "response_from_mask_ssst"]], "dipy.reconst.csdeconv.AxSymShResponse": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "basis"], [283, 2, 1, "", "on_sphere"]], "dipy.reconst.csdeconv.ConstrainedSDTModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.dki": [[283, 1, 1, "", "DiffusionKurtosisFit"], [283, 1, 1, "", "DiffusionKurtosisModel"], [283, 3, 1, "", "Wcons"], [283, 3, 1, "", "Wrotate"], [283, 3, 1, "", "Wrotate_element"], [283, 3, 1, "", "apparent_kurtosis_coef"], [283, 3, 1, "", "axial_kurtosis"], [283, 3, 1, "", "carlson_rd"], [283, 3, 1, "", "carlson_rf"], [283, 3, 1, "", "cls_fit_dki"], [283, 3, 1, "", "directional_diffusion"], [283, 3, 1, "", "directional_diffusion_variance"], [283, 3, 1, "", "directional_kurtosis"], [283, 3, 1, "", "dki_prediction"], [283, 3, 1, "", "kurtosis_fractional_anisotropy"], [283, 3, 1, "", "kurtosis_maximum"], [283, 3, 1, "", "ls_fit_dki"], [283, 3, 1, "", "mean_kurtosis"], [283, 3, 1, "", "mean_kurtosis_tensor"], [283, 3, 1, "", "params_to_dki_params"], [283, 3, 1, "", "radial_kurtosis"], [283, 3, 1, "", "split_dki_param"]], "dipy.reconst.dki.DiffusionKurtosisFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "ak"], [283, 2, 1, "", "akc"], [283, 5, 1, "", "kfa"], [283, 2, 1, "", "kmax"], [283, 5, 1, "", "kt"], [283, 2, 1, "", "mk"], [283, 2, 1, "", "mkt"], [283, 2, 1, "", "predict"], [283, 2, 1, "", "rk"]], "dipy.reconst.dki.DiffusionKurtosisModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "multi_fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.dki_micro": [[283, 1, 1, "", "KurtosisMicrostructuralFit"], [283, 1, 1, "", "KurtosisMicrostructureModel"], [283, 3, 1, "", "axonal_water_fraction"], [283, 3, 1, "", "diffusion_components"], [283, 3, 1, "", "dkimicro_prediction"], [283, 3, 1, "", "tortuosity"]], "dipy.reconst.dki_micro.KurtosisMicrostructuralFit": [[283, 2, 1, "", "__init__"], [283, 5, 1, "", "awf"], [283, 5, 1, "", "axonal_diffusivity"], [283, 5, 1, "", "hindered_ad"], [283, 5, 1, "", "hindered_evals"], [283, 5, 1, "", "hindered_rd"], [283, 2, 1, "", "predict"], [283, 5, 1, "", "restricted_evals"], [283, 5, 1, "", "tortuosity"]], "dipy.reconst.dki_micro.KurtosisMicrostructureModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.dsi": [[283, 1, 1, "", "DiffusionSpectrumDeconvFit"], [283, 1, 1, "", "DiffusionSpectrumDeconvModel"], [283, 1, 1, "", "DiffusionSpectrumFit"], [283, 1, 1, "", "DiffusionSpectrumModel"], [283, 3, 1, "", "LR_deconv"], [283, 3, 1, "", "create_qspace"], [283, 3, 1, "", "create_qtable"], [283, 3, 1, "", "gen_PSF"], [283, 3, 1, "", "half_to_full_qspace"], [283, 3, 1, "", "hanning_filter"], [283, 3, 1, "", "pdf_interp_coords"], [283, 3, 1, "", "pdf_odf"], [283, 3, 1, "", "project_hemisph_bvecs"], [283, 3, 1, "", "threshold_propagator"]], "dipy.reconst.dsi.DiffusionSpectrumDeconvFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "pdf"]], "dipy.reconst.dsi.DiffusionSpectrumDeconvModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.dsi.DiffusionSpectrumFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "msd_discrete"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "pdf"], [283, 2, 1, "", "rtop_pdf"], [283, 2, 1, "", "rtop_signal"]], "dipy.reconst.dsi.DiffusionSpectrumModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.dti": [[283, 1, 1, "", "TensorFit"], [283, 1, 1, "", "TensorModel"], [283, 3, 1, "", "_lt_cols"], [283, 3, 1, "", "_lt_indices"], [283, 3, 1, "", "_lt_rows"], [283, 3, 1, "", "apparent_diffusion_coef"], [283, 3, 1, "", "axial_diffusivity"], [283, 3, 1, "", "color_fa"], [283, 3, 1, "", "decompose_tensor"], [283, 3, 1, "", "design_matrix"], [283, 3, 1, "", "determinant"], [283, 3, 1, "", "deviatoric"], [283, 3, 1, "", "eig_from_lo_tri"], [283, 3, 1, "", "fractional_anisotropy"], [283, 3, 1, "", "from_lower_triangular"], [283, 3, 1, "", "geodesic_anisotropy"], [283, 3, 1, "", "isotropic"], [283, 3, 1, "", "iter_fit_tensor"], [283, 3, 1, "", "linearity"], [283, 3, 1, "", "lower_triangular"], [283, 3, 1, "", "mean_diffusivity"], [283, 3, 1, "", "mode"], [283, 3, 1, "", "nlls_fit_tensor"], [283, 3, 1, "", "norm"], [283, 3, 1, "", "ols_fit_tensor"], [283, 3, 1, "", "planarity"], [283, 3, 1, "", "quantize_evecs"], [283, 3, 1, "", "radial_diffusivity"], [283, 3, 1, "", "restore_fit_tensor"], [283, 3, 1, "", "sphericity"], [283, 3, 1, "", "tensor_prediction"], [283, 3, 1, "", "trace"], [283, 3, 1, "", "wls_fit_tensor"]], "dipy.reconst.dti.TensorFit": [[283, 5, 1, "", "S0_hat"], [283, 2, 1, "", "__init__"], [283, 2, 1, "", "ad"], [283, 2, 1, "", "adc"], [283, 2, 1, "", "color_fa"], [283, 5, 1, "", "directions"], [283, 5, 1, "", "evals"], [283, 5, 1, "", "evecs"], [283, 2, 1, "", "fa"], [283, 2, 1, "", "ga"], [283, 2, 1, "", "linearity"], [283, 2, 1, "", "lower_triangular"], [283, 2, 1, "", "md"], [283, 2, 1, "", "mode"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "planarity"], [283, 2, 1, "", "predict"], [283, 5, 1, "", "quadratic_form"], [283, 2, 1, "", "rd"], [283, 5, 1, "", "shape"], [283, 2, 1, "", "sphericity"], [283, 2, 1, "", "trace"]], "dipy.reconst.dti.TensorModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.forecast": [[283, 1, 1, "", "ForecastFit"], [283, 1, 1, "", "ForecastModel"], [283, 3, 1, "", "find_signal_means"], [283, 3, 1, "", "forecast_error_func"], [283, 3, 1, "", "forecast_matrix"], [283, 3, 1, "", "lb_forecast"], [283, 3, 1, "", "psi_l"], [283, 3, 1, "", "rho_matrix"]], "dipy.reconst.forecast.ForecastFit": [[283, 2, 1, "", "__init__"], [283, 5, 1, "", "dpar"], [283, 5, 1, "", "dperp"], [283, 2, 1, "", "fractional_anisotropy"], [283, 2, 1, "", "mean_diffusivity"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "predict"], [283, 5, 1, "", "sh_coeff"]], "dipy.reconst.forecast.ForecastModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.fwdti": [[283, 1, 1, "", "FreeWaterTensorFit"], [283, 1, 1, "", "FreeWaterTensorModel"], [283, 3, 1, "", "cholesky_to_lower_triangular"], [283, 3, 1, "", "fwdti_prediction"], [283, 3, 1, "", "lower_triangular_to_cholesky"], [283, 3, 1, "", "nls_fit_tensor"], [283, 3, 1, "", "nls_iter"], [283, 3, 1, "", "wls_fit_tensor"], [283, 3, 1, "", "wls_iter"]], "dipy.reconst.fwdti.FreeWaterTensorFit": [[283, 2, 1, "", "__init__"], [283, 5, 1, "", "f"], [283, 2, 1, "", "predict"]], "dipy.reconst.fwdti.FreeWaterTensorModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.gqi": [[283, 1, 1, "", "GeneralizedQSamplingFit"], [283, 1, 1, "", "GeneralizedQSamplingModel"], [283, 3, 1, "", "equatorial_maximum"], [283, 3, 1, "", "equatorial_zone_vertices"], [283, 3, 1, "", "normalize_qa"], [283, 3, 1, "", "npa"], [283, 3, 1, "", "odf_sum"], [283, 3, 1, "", "patch_maximum"], [283, 3, 1, "", "patch_sum"], [283, 3, 1, "", "patch_vertices"], [283, 3, 1, "", "polar_zone_vertices"], [283, 3, 1, "", "squared_radial_component"], [283, 3, 1, "", "triple_odf_maxima"], [283, 3, 1, "", "upper_hemi_map"]], "dipy.reconst.gqi.GeneralizedQSamplingFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "odf"]], "dipy.reconst.gqi.GeneralizedQSamplingModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.ivim": [[283, 1, 1, "", "IvimFit"], [283, 1, 1, "", "IvimModelTRR"], [283, 1, 1, "", "IvimModelVP"], [283, 3, 1, "", "f_D_star_error"], [283, 3, 1, "", "f_D_star_prediction"], [283, 3, 1, "", "ivim_model_selector"], [283, 3, 1, "", "ivim_prediction"]], "dipy.reconst.ivim.IvimFit": [[283, 5, 1, "", "D"], [283, 5, 1, "", "D_star"], [283, 5, 1, "", "S0_predicted"], [283, 2, 1, "", "__init__"], [283, 5, 1, "", "perfusion_fraction"], [283, 2, 1, "", "predict"], [283, 5, 1, "", "shape"]], "dipy.reconst.ivim.IvimModelTRR": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "estimate_f_D_star"], [283, 2, 1, "", "estimate_linear_fit"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.ivim.IvimModelVP": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "cvx_fit"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "ivim_mix_cost_one"], [283, 2, 1, "", "nlls_cost"], [283, 2, 1, "", "phi"], [283, 2, 1, "", "stoc_search_cost"], [283, 2, 1, "", "x_and_f_to_x_f"], [283, 2, 1, "", "x_f_to_x_and_f"]], "dipy.reconst.mapmri": [[283, 1, 1, "", "MapmriFit"], [283, 1, 1, "", "MapmriModel"], [283, 3, 1, "", "b_mat"], [283, 3, 1, "", "b_mat_isotropic"], [283, 3, 1, "", "binomialfloat"], [283, 3, 1, "", "create_rspace"], [283, 3, 1, "", "delta"], [283, 3, 1, "", "gcv_cost_function"], [283, 3, 1, "", "generalized_crossvalidation"], [283, 3, 1, "", "generalized_crossvalidation_array"], [283, 3, 1, "", "isotropic_scale_factor"], [283, 3, 1, "", "map_laplace_s"], [283, 3, 1, "", "map_laplace_t"], [283, 3, 1, "", "map_laplace_u"], [283, 3, 1, "", "mapmri_STU_reg_matrices"], [283, 3, 1, "", "mapmri_index_matrix"], [283, 3, 1, "", "mapmri_isotropic_K_mu_dependent"], [283, 3, 1, "", "mapmri_isotropic_K_mu_independent"], [283, 3, 1, "", "mapmri_isotropic_M_mu_dependent"], [283, 3, 1, "", "mapmri_isotropic_M_mu_independent"], [283, 3, 1, "", "mapmri_isotropic_index_matrix"], [283, 3, 1, "", "mapmri_isotropic_laplacian_reg_matrix"], [283, 3, 1, "", "mapmri_isotropic_laplacian_reg_matrix_from_index_matrix"], [283, 3, 1, "", "mapmri_isotropic_odf_matrix"], [283, 3, 1, "", "mapmri_isotropic_odf_sh_matrix"], [283, 3, 1, "", "mapmri_isotropic_phi_matrix"], [283, 3, 1, "", "mapmri_isotropic_psi_matrix"], [283, 3, 1, "", "mapmri_isotropic_radial_pdf_basis"], [283, 3, 1, "", "mapmri_isotropic_radial_signal_basis"], [283, 3, 1, "", "mapmri_laplacian_reg_matrix"], [283, 3, 1, "", "mapmri_odf_matrix"], [283, 3, 1, "", "mapmri_phi_1d"], [283, 3, 1, "", "mapmri_phi_matrix"], [283, 3, 1, "", "mapmri_psi_1d"], [283, 3, 1, "", "mapmri_psi_matrix"]], "dipy.reconst.mapmri.MapmriFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fitted_signal"], [283, 5, 1, "", "mapmri_R"], [283, 5, 1, "", "mapmri_coeff"], [283, 5, 1, "", "mapmri_mu"], [283, 2, 1, "", "msd"], [283, 2, 1, "", "ng"], [283, 2, 1, "", "ng_parallel"], [283, 2, 1, "", "ng_perpendicular"], [283, 2, 1, "", "norm_of_laplacian_signal"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "odf_sh"], [283, 2, 1, "", "pdf"], [283, 2, 1, "", "predict"], [283, 2, 1, "", "qiv"], [283, 2, 1, "", "rtap"], [283, 2, 1, "", "rtop"], [283, 2, 1, "", "rtpp"]], "dipy.reconst.mapmri.MapmriModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.mcsd": [[283, 1, 1, "", "MSDeconvFit"], [283, 1, 1, "", "MultiShellDeconvModel"], [283, 1, 1, "", "MultiShellResponse"], [283, 1, 1, "", "QpFitter"], [283, 3, 1, "", "auto_response_msmt"], [283, 3, 1, "", "mask_for_response_msmt"], [283, 3, 1, "", "multi_shell_fiber_response"], [283, 3, 1, "", "multi_tissue_basis"], [283, 3, 1, "", "response_from_mask_msmt"], [283, 3, 1, "", "solve_qp"]], "dipy.reconst.mcsd.MSDeconvFit": [[283, 2, 1, "", "__init__"], [283, 5, 1, "", "all_shm_coeff"], [283, 5, 1, "", "shm_coeff"], [283, 5, 1, "", "volume_fractions"]], "dipy.reconst.mcsd.MultiShellDeconvModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.mcsd.MultiShellResponse": [[283, 2, 1, "", "__init__"], [283, 5, 1, "", "iso"]], "dipy.reconst.mcsd.QpFitter": [[283, 2, 1, "", "__init__"]], "dipy.reconst.msdki": [[283, 1, 1, "", "MeanDiffusionKurtosisFit"], [283, 1, 1, "", "MeanDiffusionKurtosisModel"], [283, 3, 1, "", "awf_from_msk"], [283, 3, 1, "", "design_matrix"], [283, 3, 1, "", "mean_signal_bvalue"], [283, 3, 1, "", "msdki_prediction"], [283, 3, 1, "", "msk_from_awf"], [283, 3, 1, "", "wls_fit_msdki"]], "dipy.reconst.msdki.MeanDiffusionKurtosisFit": [[283, 5, 1, "", "S0_hat"], [283, 2, 1, "", "__init__"], [283, 2, 1, "", "msd"], [283, 2, 1, "", "msk"], [283, 2, 1, "", "predict"], [283, 2, 1, "", "smt2di"], [283, 2, 1, "", "smt2f"], [283, 2, 1, "", "smt2uFA"]], "dipy.reconst.msdki.MeanDiffusionKurtosisModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.multi_voxel": [[283, 1, 1, "", "CallableArray"], [283, 1, 1, "", "MultiVoxelFit"], [283, 3, 1, "", "multi_voxel_fit"]], "dipy.reconst.multi_voxel.CallableArray": [[283, 2, 1, "", "__init__"]], "dipy.reconst.multi_voxel.MultiVoxelFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "predict"], [283, 5, 1, "", "shape"]], "dipy.reconst.odf": [[283, 1, 1, "", "OdfFit"], [283, 1, 1, "", "OdfModel"], [283, 3, 1, "", "gfa"], [283, 3, 1, "", "minmax_normalize"]], "dipy.reconst.odf.OdfFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "odf"]], "dipy.reconst.odf.OdfModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.qtdmri": [[283, 3, 1, "", "GCV_cost_function"], [283, 3, 1, "", "H"], [283, 1, 1, "", "QtdmriFit"], [283, 1, 1, "", "QtdmriModel"], [283, 3, 1, "", "angular_basis_EAP_opt"], [283, 3, 1, "", "angular_basis_opt"], [283, 3, 1, "", "create_rt_space_grid"], [283, 3, 1, "", "design_matrix_spatial"], [283, 3, 1, "", "elastic_crossvalidation"], [283, 3, 1, "", "generalized_crossvalidation"], [283, 3, 1, "", "l1_crossvalidation"], [283, 3, 1, "", "part1_reg_matrix_tau"], [283, 3, 1, "", "part23_iso_reg_matrix_q"], [283, 3, 1, "", "part23_reg_matrix_q"], [283, 3, 1, "", "part23_reg_matrix_tau"], [283, 3, 1, "", "part4_iso_reg_matrix_q"], [283, 3, 1, "", "part4_reg_matrix_q"], [283, 3, 1, "", "part4_reg_matrix_tau"], [283, 3, 1, "", "qtdmri_anisotropic_scaling"], [283, 3, 1, "", "qtdmri_eap_matrix"], [283, 3, 1, "", "qtdmri_eap_matrix_"], [283, 3, 1, "", "qtdmri_index_matrix"], [283, 3, 1, "", "qtdmri_isotropic_eap_matrix"], [283, 3, 1, "", "qtdmri_isotropic_eap_matrix_"], [283, 3, 1, "", "qtdmri_isotropic_index_matrix"], [283, 3, 1, "", "qtdmri_isotropic_laplacian_reg_matrix"], [283, 3, 1, "", "qtdmri_isotropic_scaling"], [283, 3, 1, "", "qtdmri_isotropic_signal_matrix"], [283, 3, 1, "", "qtdmri_isotropic_signal_matrix_"], [283, 3, 1, "", "qtdmri_isotropic_to_mapmri_matrix"], [283, 3, 1, "", "qtdmri_laplacian_reg_matrix"], [283, 3, 1, "", "qtdmri_mapmri_isotropic_normalization"], [283, 3, 1, "", "qtdmri_mapmri_normalization"], [283, 3, 1, "", "qtdmri_number_of_coefficients"], [283, 3, 1, "", "qtdmri_signal_matrix"], [283, 3, 1, "", "qtdmri_signal_matrix_"], [283, 3, 1, "", "qtdmri_temporal_normalization"], [283, 3, 1, "", "qtdmri_to_mapmri_matrix"], [283, 3, 1, "", "radial_basis_EAP_opt"], [283, 3, 1, "", "radial_basis_opt"], [283, 3, 1, "", "temporal_basis"], [283, 3, 1, "", "visualise_gradient_table_G_Delta_rainbow"]], "dipy.reconst.qtdmri.QtdmriFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fitted_signal"], [283, 2, 1, "", "msd"], [283, 2, 1, "", "norm_of_laplacian_signal"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "odf_sh"], [283, 2, 1, "", "pdf"], [283, 2, 1, "", "predict"], [283, 2, 1, "", "qiv"], [283, 2, 1, "", "qtdmri_to_mapmri_coef"], [283, 2, 1, "", "rtap"], [283, 2, 1, "", "rtop"], [283, 2, 1, "", "rtpp"], [283, 2, 1, "", "sparsity_abs"], [283, 2, 1, "", "sparsity_density"]], "dipy.reconst.qtdmri.QtdmriModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.qti": [[283, 1, 1, "", "QtiFit"], [283, 1, 1, "", "QtiModel"], [283, 3, 1, "", "cvxpy_1x21_to_6x6"], [283, 3, 1, "", "cvxpy_1x6_to_3x3"], [283, 3, 1, "", "design_matrix"], [283, 3, 1, "", "dtd_covariance"], [283, 3, 1, "", "from_21x1_to_6x6"], [283, 3, 1, "", "from_3x3_to_6x1"], [283, 3, 1, "", "from_6x1_to_3x3"], [283, 3, 1, "", "from_6x6_to_21x1"], [283, 3, 1, "", "qti_signal"]], "dipy.reconst.qti.QtiFit": [[283, 2, 1, "", "S0_hat"], [283, 2, 1, "", "__init__"], [283, 2, 1, "", "c_c"], [283, 2, 1, "", "c_m"], [283, 2, 1, "", "c_md"], [283, 2, 1, "", "c_mu"], [283, 2, 1, "", "d_sq"], [283, 2, 1, "", "fa"], [283, 2, 1, "", "k_bulk"], [283, 2, 1, "", "k_mu"], [283, 2, 1, "", "k_shear"], [283, 2, 1, "", "md"], [283, 2, 1, "", "mean_d_sq"], [283, 2, 1, "", "mk"], [283, 2, 1, "", "predict"], [283, 2, 1, "", "ufa"], [283, 2, 1, "", "v_iso"], [283, 2, 1, "", "v_md"], [283, 2, 1, "", "v_shear"]], "dipy.reconst.qti.QtiModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "predict"]], "dipy.reconst.rumba": [[283, 1, 1, "", "RumbaFit"], [283, 1, 1, "", "RumbaSDModel"], [283, 3, 1, "", "generate_kernel"], [283, 3, 1, "", "logger"], [283, 3, 1, "", "mbessel_ratio"], [283, 3, 1, "", "rumba_deconv"], [283, 3, 1, "", "rumba_deconv_global"]], "dipy.reconst.rumba.RumbaFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "combined_odf_iso"], [283, 2, 1, "", "f_csf"], [283, 2, 1, "", "f_gm"], [283, 2, 1, "", "f_iso"], [283, 2, 1, "", "f_wm"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "predict"]], "dipy.reconst.rumba.RumbaSDModel": [[283, 2, 1, "", "__init__"]], "dipy.reconst.sfm": [[283, 1, 1, "", "ExponentialIsotropicFit"], [283, 1, 1, "", "ExponentialIsotropicModel"], [283, 1, 1, "", "IsotropicFit"], [283, 1, 1, "", "IsotropicModel"], [283, 1, 1, "", "SparseFascicleFit"], [283, 1, 1, "", "SparseFascicleModel"], [283, 3, 1, "", "sfm_design_matrix"]], "dipy.reconst.sfm.ExponentialIsotropicFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "predict"]], "dipy.reconst.sfm.ExponentialIsotropicModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.sfm.IsotropicFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "predict"]], "dipy.reconst.sfm.IsotropicModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.sfm.SparseFascicleFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "predict"]], "dipy.reconst.sfm.SparseFascicleModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "design_matrix"], [283, 2, 1, "", "fit"]], "dipy.reconst.shm": [[283, 1, 1, "", "CsaOdfModel"], [283, 1, 1, "", "OpdtModel"], [283, 1, 1, "", "QballBaseModel"], [283, 1, 1, "", "QballModel"], [283, 1, 1, "", "ResidualBootstrapWrapper"], [283, 1, 1, "", "SphHarmFit"], [283, 1, 1, "", "SphHarmModel"], [283, 3, 1, "", "anisotropic_power"], [283, 3, 1, "", "bootstrap_data_array"], [283, 3, 1, "", "bootstrap_data_voxel"], [283, 3, 1, "", "calculate_max_order"], [283, 3, 1, "", "convert_sh_from_legacy"], [283, 3, 1, "", "convert_sh_to_full_basis"], [283, 3, 1, "", "convert_sh_to_legacy"], [283, 3, 1, "", "forward_sdeconv_mat"], [283, 3, 1, "", "gen_dirac"], [283, 3, 1, "", "hat"], [283, 3, 1, "", "lazy_index"], [283, 3, 1, "", "lcr_matrix"], [283, 3, 1, "", "normalize_data"], [283, 3, 1, "", "order_from_ncoef"], [283, 3, 1, "", "real_sh_descoteaux"], [283, 3, 1, "", "real_sh_descoteaux_from_index"], [283, 3, 1, "", "real_sh_tournier"], [283, 3, 1, "", "real_sh_tournier_from_index"], [283, 3, 1, "", "real_sph_harm"], [283, 3, 1, "", "real_sym_sh_basis"], [283, 3, 1, "", "real_sym_sh_mrtrix"], [283, 3, 1, "", "sf_to_sh"], [283, 3, 1, "", "sh_to_rh"], [283, 3, 1, "", "sh_to_sf"], [283, 3, 1, "", "sh_to_sf_matrix"], [283, 3, 1, "", "smooth_pinv"], [283, 3, 1, "", "sph_harm_ind_list"], [283, 3, 1, "", "spherical_harmonics"]], "dipy.reconst.shm.CsaOdfModel": [[283, 2, 1, "", "__init__"], [283, 4, 1, "", "max"], [283, 4, 1, "", "min"]], "dipy.reconst.shm.OpdtModel": [[283, 2, 1, "", "__init__"]], "dipy.reconst.shm.QballBaseModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.shm.QballModel": [[283, 2, 1, "", "__init__"]], "dipy.reconst.shm.ResidualBootstrapWrapper": [[283, 2, 1, "", "__init__"]], "dipy.reconst.shm.SphHarmFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "gfa"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "predict"], [283, 5, 1, "", "shape"], [283, 5, 1, "", "shm_coeff"]], "dipy.reconst.shm.SphHarmModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "sampling_matrix"]], "dipy.reconst.shore": [[283, 1, 1, "", "ShoreFit"], [283, 1, 1, "", "ShoreModel"], [283, 3, 1, "", "create_rspace"], [283, 3, 1, "", "l_shore"], [283, 3, 1, "", "n_shore"], [283, 3, 1, "", "shore_indices"], [283, 3, 1, "", "shore_matrix"], [283, 3, 1, "", "shore_matrix_odf"], [283, 3, 1, "", "shore_matrix_pdf"], [283, 3, 1, "", "shore_order"]], "dipy.reconst.shore.ShoreFit": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fitted_signal"], [283, 2, 1, "", "msd"], [283, 2, 1, "", "odf"], [283, 2, 1, "", "odf_sh"], [283, 2, 1, "", "pdf"], [283, 2, 1, "", "pdf_grid"], [283, 2, 1, "", "rtop_pdf"], [283, 2, 1, "", "rtop_signal"], [283, 5, 1, "", "shore_coeff"]], "dipy.reconst.shore.ShoreModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "fit"]], "dipy.reconst.utils": [[283, 3, 1, "", "dki_design_matrix"]], "dipy.segment": [[284, 0, 0, "-", "benchmarks"], [284, 0, 0, "-", "bundles"], [284, 0, 0, "-", "clustering"], [284, 0, 0, "-", "fss"], [284, 0, 0, "-", "mask"], [284, 0, 0, "-", "metric"], [284, 0, 0, "-", "threshold"], [284, 0, 0, "-", "tissue"]], "dipy.segment.benchmarks": [[284, 0, 0, "-", "bench_quickbundles"]], "dipy.segment.benchmarks.bench_quickbundles": [[284, 1, 1, "", "MDFpy"], [284, 3, 1, "", "bench_quickbundles"]], "dipy.segment.benchmarks.bench_quickbundles.MDFpy": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "are_compatible"], [284, 2, 1, "", "dist"]], "dipy.segment.bundles": [[284, 1, 1, "", "RecoBundles"], [284, 3, 1, "", "ba_analysis"], [284, 3, 1, "", "bundle_adjacency"], [284, 3, 1, "", "bundle_shape_similarity"], [284, 3, 1, "", "check_range"], [284, 3, 1, "", "cluster_bundle"], [284, 3, 1, "", "logger"]], "dipy.segment.bundles.RecoBundles": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "evaluate_results"], [284, 2, 1, "", "recognize"], [284, 2, 1, "", "refine"]], "dipy.segment.clustering": [[284, 1, 1, "", "Cluster"], [284, 1, 1, "", "ClusterCentroid"], [284, 1, 1, "", "ClusterMap"], [284, 1, 1, "", "ClusterMapCentroid"], [284, 1, 1, "", "Clustering"], [284, 1, 1, "", "Identity"], [284, 1, 1, "", "QuickBundles"], [284, 1, 1, "", "QuickBundlesX"], [284, 1, 1, "", "TreeCluster"], [284, 1, 1, "", "TreeClusterMap"], [284, 3, 1, "", "logger"], [284, 3, 1, "", "qbx_and_merge"]], "dipy.segment.clustering.Cluster": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "assign"]], "dipy.segment.clustering.ClusterCentroid": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "assign"], [284, 2, 1, "", "update"]], "dipy.segment.clustering.ClusterMap": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "add_cluster"], [284, 2, 1, "", "clear"], [284, 5, 1, "", "clusters"], [284, 2, 1, "", "clusters_sizes"], [284, 2, 1, "", "get_large_clusters"], [284, 2, 1, "", "get_small_clusters"], [284, 5, 1, "", "refdata"], [284, 2, 1, "", "remove_cluster"], [284, 2, 1, "", "size"]], "dipy.segment.clustering.ClusterMapCentroid": [[284, 2, 1, "", "__init__"], [284, 5, 1, "", "centroids"]], "dipy.segment.clustering.Clustering": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "cluster"]], "dipy.segment.clustering.Identity": [[284, 2, 1, "", "__init__"]], "dipy.segment.clustering.QuickBundles": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "cluster"]], "dipy.segment.clustering.QuickBundlesX": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "cluster"]], "dipy.segment.clustering.TreeCluster": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "add"], [284, 5, 1, "", "is_leaf"], [284, 2, 1, "", "return_indices"]], "dipy.segment.clustering.TreeClusterMap": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "get_clusters"], [284, 2, 1, "", "iter_preorder"], [284, 5, 1, "", "refdata"], [284, 2, 1, "", "traverse_postorder"]], "dipy.segment.fss": [[284, 1, 1, "", "FastStreamlineSearch"], [284, 3, 1, "", "nearest_from_matrix_col"], [284, 3, 1, "", "nearest_from_matrix_row"]], "dipy.segment.fss.FastStreamlineSearch": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "radius_search"]], "dipy.segment.mask": [[284, 3, 1, "", "applymask"], [284, 3, 1, "", "bounding_box"], [284, 3, 1, "", "clean_cc_mask"], [284, 3, 1, "", "crop"], [284, 3, 1, "", "median_otsu"], [284, 3, 1, "", "multi_median"], [284, 3, 1, "", "segment_from_cfa"]], "dipy.segment.metric": [[284, 3, 1, "", "mdf"], [284, 3, 1, "", "mean_euclidean_distance"], [284, 3, 1, "", "mean_manhattan_distance"]], "dipy.segment.threshold": [[284, 3, 1, "", "otsu"], [284, 3, 1, "", "upper_bound_by_percent"], [284, 3, 1, "", "upper_bound_by_rate"]], "dipy.segment.tissue": [[284, 1, 1, "", "TissueClassifierHMRF"]], "dipy.segment.tissue.TissueClassifierHMRF": [[284, 2, 1, "", "__init__"], [284, 2, 1, "", "classify"]], "dipy.sims": [[285, 0, 0, "-", "phantom"], [285, 0, 0, "-", "voxel"]], "dipy.sims.phantom": [[285, 3, 1, "", "add_noise"], [285, 3, 1, "", "diff2eigenvectors"], [285, 3, 1, "", "orbital_phantom"]], "dipy.sims.voxel": [[285, 3, 1, "", "add_noise"], [285, 3, 1, "", "all_tensor_evecs"], [285, 3, 1, "", "callaghan_perpendicular"], [285, 3, 1, "", "cylinders_and_ball_soderman"], [285, 3, 1, "", "diffusion_evals"], [285, 3, 1, "", "dki_signal"], [285, 3, 1, "", "gaussian_parallel"], [285, 3, 1, "", "kurtosis_element"], [285, 3, 1, "", "multi_tensor"], [285, 3, 1, "", "multi_tensor_dki"], [285, 3, 1, "", "multi_tensor_msd"], [285, 3, 1, "", "multi_tensor_odf"], [285, 3, 1, "", "multi_tensor_pdf"], [285, 3, 1, "", "multi_tensor_rtop"], [285, 3, 1, "", "single_tensor"], [285, 3, 1, "", "single_tensor_msd"], [285, 3, 1, "", "single_tensor_odf"], [285, 3, 1, "", "single_tensor_pdf"], [285, 3, 1, "", "single_tensor_rtop"], [285, 3, 1, "", "sticks_and_ball"]], "dipy.stats": [[286, 0, 0, "-", "analysis"]], "dipy.stats.analysis": [[286, 3, 1, "", "afq_profile"], [286, 3, 1, "", "anatomical_measures"], [286, 3, 1, "", "assignment_map"], [286, 3, 1, "", "gaussian_weights"], [286, 3, 1, "", "peak_values"]], "dipy.tracking": [[287, 0, 0, "-", "_utils"], [287, 0, 0, "-", "benchmarks"], [287, 0, 0, "-", "learning"], [287, 0, 0, "-", "life"], [287, 0, 0, "-", "local_tracking"], [287, 0, 0, "-", "mesh"], [287, 0, 0, "-", "metrics"], [287, 0, 0, "-", "streamline"], [287, 0, 0, "-", "utils"]], "dipy.tracking.benchmarks": [[287, 0, 0, "-", "bench_streamline"]], "dipy.tracking.benchmarks.bench_streamline": [[287, 3, 1, "", "bench_compress_streamlines"], [287, 3, 1, "", "bench_length"], [287, 3, 1, "", "bench_set_number_of_points"], [287, 3, 1, "", "generate_streamlines"], [287, 3, 1, "", "setup"]], "dipy.tracking.learning": [[287, 3, 1, "", "detect_corresponding_tracks"], [287, 3, 1, "", "detect_corresponding_tracks_plus"]], "dipy.tracking.life": [[287, 1, 1, "", "FiberFit"], [287, 1, 1, "", "FiberModel"], [287, 1, 1, "", "LifeSignalMaker"], [287, 3, 1, "", "grad_tensor"], [287, 3, 1, "", "gradient"], [287, 3, 1, "", "streamline_gradients"], [287, 3, 1, "", "streamline_signal"], [287, 3, 1, "", "streamline_tensors"], [287, 3, 1, "", "voxel2streamline"]], "dipy.tracking.life.FiberFit": [[287, 2, 1, "", "__init__"], [287, 2, 1, "", "predict"]], "dipy.tracking.life.FiberModel": [[287, 2, 1, "", "__init__"], [287, 2, 1, "", "fit"], [287, 2, 1, "", "setup"]], "dipy.tracking.life.LifeSignalMaker": [[287, 2, 1, "", "__init__"], [287, 2, 1, "", "calc_signal"], [287, 2, 1, "", "streamline_signal"]], "dipy.tracking.local_tracking": [[287, 1, 1, "", "LocalTracking"], [287, 1, 1, "", "ParticleFilteringTracking"]], "dipy.tracking.local_tracking.LocalTracking": [[287, 2, 1, "", "__init__"]], "dipy.tracking.local_tracking.ParticleFilteringTracking": [[287, 2, 1, "", "__init__"]], "dipy.tracking.mesh": [[287, 3, 1, "", "random_coordinates_from_surface"], [287, 3, 1, "", "seeds_from_surface_coordinates"], [287, 3, 1, "", "triangles_area"], [287, 3, 1, "", "vertices_to_triangles_values"]], "dipy.tracking.metrics": [[287, 3, 1, "", "arbitrarypoint"], [287, 3, 1, "", "bytes"], [287, 3, 1, "", "center_of_mass"], [287, 3, 1, "", "downsample"], [287, 3, 1, "", "endpoint"], [287, 3, 1, "", "frenet_serret"], [287, 3, 1, "", "generate_combinations"], [287, 3, 1, "", "inside_sphere"], [287, 3, 1, "", "inside_sphere_points"], [287, 3, 1, "", "intersect_sphere"], [287, 3, 1, "", "length"], [287, 3, 1, "", "longest_track_bundle"], [287, 3, 1, "", "magn"], [287, 3, 1, "", "mean_curvature"], [287, 3, 1, "", "mean_orientation"], [287, 3, 1, "", "midpoint"], [287, 3, 1, "", "midpoint2point"], [287, 3, 1, "", "principal_components"], [287, 3, 1, "", "spline"], [287, 3, 1, "", "startpoint"], [287, 3, 1, "", "winding"]], "dipy.tracking.streamline": [[287, 3, 1, "", "center_streamlines"], [287, 3, 1, "", "cluster_confidence"], [287, 3, 1, "", "deform_streamlines"], [287, 3, 1, "", "nbytes"], [287, 3, 1, "", "orient_by_rois"], [287, 3, 1, "", "orient_by_streamline"], [287, 3, 1, "", "relist_streamlines"], [287, 3, 1, "", "select_by_rois"], [287, 3, 1, "", "select_random_set_of_streamlines"], [287, 3, 1, "", "transform_streamlines"], [287, 3, 1, "", "unlist_streamlines"], [287, 3, 1, "", "values_from_volume"]], "dipy.tracking.utils": [[287, 3, 1, "", "connectivity_matrix"], [287, 3, 1, "", "density_map"], [287, 3, 1, "", "length"], [287, 3, 1, "", "max_angle_from_curvature"], [287, 3, 1, "", "min_radius_curvature_from_angle"], [287, 3, 1, "", "ndbincount"], [287, 3, 1, "", "near_roi"], [287, 3, 1, "", "path_length"], [287, 3, 1, "", "random_seeds_from_mask"], [287, 3, 1, "", "reduce_labels"], [287, 3, 1, "", "reduce_rois"], [287, 3, 1, "", "seeds_from_mask"], [287, 3, 1, "", "streamline_near_roi"], [287, 3, 1, "", "subsegment"], [287, 3, 1, "", "target"], [287, 3, 1, "", "target_line_based"], [287, 3, 1, "", "transform_tracking_output"], [287, 3, 1, "", "unique_rows"]], "dipy.viz": [[288, 0, 0, "-", "gmem"], [288, 0, 0, "-", "horizon"], [288, 0, 0, "-", "panel"], [288, 0, 0, "-", "plotting"], [288, 0, 0, "-", "projections"], [288, 0, 0, "-", "regtools"], [288, 0, 0, "-", "streamline"]], "dipy.viz.gmem": [[288, 1, 1, "", "GlobalHorizon"]], "dipy.viz.gmem.GlobalHorizon": [[288, 2, 1, "", "__init__"]], "dipy.viz.horizon": [[288, 0, 0, "-", "app"], [288, 0, 0, "-", "tab"], [288, 0, 0, "-", "visualizer"]], "dipy.viz.horizon.app": [[288, 1, 1, "", "Horizon"], [288, 3, 1, "", "horizon"]], "dipy.viz.horizon.app.Horizon": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "build_scene"], [288, 2, 1, "", "build_show"]], "dipy.viz.horizon.tab": [[288, 0, 0, "-", "base"], [288, 0, 0, "-", "cluster"], [288, 0, 0, "-", "peak"], [288, 0, 0, "-", "roi"], [288, 0, 0, "-", "slice"]], "dipy.viz.horizon.tab.base": [[288, 1, 1, "", "HorizonTab"], [288, 1, 1, "", "TabManager"], [288, 3, 1, "", "build_label"], [288, 3, 1, "", "color_double_slider"], [288, 3, 1, "", "color_single_slider"]], "dipy.viz.horizon.tab.base.HorizonTab": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "build"], [288, 5, 1, "", "name"]], "dipy.viz.horizon.tab.base.TabManager": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "reposition"], [288, 5, 1, "", "tab_ui"]], "dipy.viz.horizon.tab.cluster": [[288, 1, 1, "", "ClustersTab"]], "dipy.viz.horizon.tab.cluster.ClustersTab": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "build"], [288, 5, 1, "", "name"]], "dipy.viz.horizon.tab.peak": [[288, 1, 1, "", "PeaksTab"]], "dipy.viz.horizon.tab.peak.PeaksTab": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "build"], [288, 5, 1, "", "name"]], "dipy.viz.horizon.tab.roi": [[288, 1, 1, "", "ROIsTab"]], "dipy.viz.horizon.tab.roi.ROIsTab": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "build"], [288, 5, 1, "", "name"]], "dipy.viz.horizon.tab.slice": [[288, 1, 1, "", "SlicesTab"]], "dipy.viz.horizon.tab.slice.SlicesTab": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "build"], [288, 5, 1, "", "name"]], "dipy.viz.horizon.visualizer": [[288, 0, 0, "-", "cluster"], [288, 0, 0, "-", "slice"]], "dipy.viz.horizon.visualizer.cluster": [[288, 1, 1, "", "ClustersVisualizer"]], "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "add_cluster_actors"], [288, 5, 1, "", "centroid_actors"], [288, 5, 1, "", "cluster_actors"], [288, 5, 1, "", "lengths"], [288, 2, 1, "", "recluster_tractograms"], [288, 5, 1, "", "sizes"], [288, 5, 1, "", "tractogram_clusters"]], "dipy.viz.horizon.visualizer.slice": [[288, 1, 1, "", "SlicesVisualizer"]], "dipy.viz.horizon.visualizer.slice.SlicesVisualizer": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "change_volume"], [288, 5, 1, "", "data_shape"], [288, 5, 1, "", "intensities_range"], [288, 2, 1, "", "register_picker_callback"], [288, 5, 1, "", "selected_slices"], [288, 5, 1, "", "slice_actors"], [288, 5, 1, "", "volume_max"], [288, 5, 1, "", "volume_min"]], "dipy.viz.panel": [[288, 3, 1, "", "build_label"], [288, 3, 1, "", "slicer_panel"]], "dipy.viz.plotting": [[288, 3, 1, "", "bundle_shape_profile"], [288, 3, 1, "", "compare_maps"], [288, 3, 1, "", "compare_qti_maps"]], "dipy.viz.projections": [[288, 3, 1, "", "sph_project"]], "dipy.viz.regtools": [[288, 3, 1, "", "draw_lattice_2d"], [288, 3, 1, "", "overlay_images"], [288, 3, 1, "", "overlay_slices"], [288, 3, 1, "", "plot_2d_diffeomorphic_map"], [288, 3, 1, "", "plot_slices"], [288, 3, 1, "", "simple_plot"]], "dipy.viz.streamline": [[288, 3, 1, "", "show_bundles"], [288, 3, 1, "", "viz_displacement_mag"], [288, 3, 1, "", "viz_two_bundles"], [288, 3, 1, "", "viz_vector_field"]], "dipy.workflows": [[289, 0, 0, "-", "align"], [289, 0, 0, "-", "base"], [289, 0, 0, "-", "combined_workflow"], [289, 0, 0, "-", "denoise"], [289, 0, 0, "-", "docstring_parser"], [289, 0, 0, "-", "flow_runner"], [289, 0, 0, "-", "io"], [289, 0, 0, "-", "mask"], [289, 0, 0, "-", "multi_io"], [289, 0, 0, "-", "nn"], [289, 0, 0, "-", "reconst"], [289, 0, 0, "-", "segment"], [289, 0, 0, "-", "stats"], [289, 0, 0, "-", "tracking"], [289, 0, 0, "-", "viz"], [289, 0, 0, "-", "workflow"]], "dipy.workflows.align": [[289, 1, 1, "", "ApplyTransformFlow"], [289, 1, 1, "", "BundleWarpFlow"], [289, 1, 1, "", "ImageRegistrationFlow"], [289, 1, 1, "", "MotionCorrectionFlow"], [289, 1, 1, "", "ResliceFlow"], [289, 1, 1, "", "SlrWithQbxFlow"], [289, 1, 1, "", "SynRegistrationFlow"], [289, 3, 1, "", "check_dimensions"]], "dipy.workflows.align.ApplyTransformFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "run"]], "dipy.workflows.align.BundleWarpFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.align.ImageRegistrationFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "run"]], "dipy.workflows.align.MotionCorrectionFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "run"]], "dipy.workflows.align.ResliceFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.align.SlrWithQbxFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.align.SynRegistrationFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "run"]], "dipy.workflows.base": [[289, 1, 1, "", "IntrospectiveArgumentParser"], [289, 3, 1, "", "get_args_default"], [289, 3, 1, "", "none_or_dtype"]], "dipy.workflows.base.IntrospectiveArgumentParser": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "add_description"], [289, 2, 1, "", "add_epilogue"], [289, 2, 1, "", "add_sub_flow_args"], [289, 2, 1, "", "add_workflow"], [289, 2, 1, "", "get_flow_args"], [289, 5, 1, "", "optional_parameters"], [289, 5, 1, "", "output_parameters"], [289, 5, 1, "", "positional_parameters"], [289, 2, 1, "", "show_argument"], [289, 2, 1, "", "update_argument"]], "dipy.workflows.combined_workflow": [[289, 1, 1, "", "CombinedWorkflow"]], "dipy.workflows.combined_workflow.CombinedWorkflow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_optionals"], [289, 2, 1, "", "get_sub_runs"], [289, 2, 1, "", "run_sub_flow"], [289, 2, 1, "", "set_sub_flows_optionals"]], "dipy.workflows.denoise": [[289, 1, 1, "", "GibbsRingingFlow"], [289, 1, 1, "", "LPCAFlow"], [289, 1, 1, "", "MPPCAFlow"], [289, 1, 1, "", "NLMeansFlow"], [289, 1, 1, "", "Patch2SelfFlow"]], "dipy.workflows.denoise.GibbsRingingFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.denoise.LPCAFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.denoise.MPPCAFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.denoise.NLMeansFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.denoise.Patch2SelfFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.docstring_parser": [[289, 1, 1, "", "NumpyDocString"], [289, 1, 1, "", "Reader"], [289, 3, 1, "", "dedent_lines"]], "dipy.workflows.docstring_parser.NumpyDocString": [[289, 2, 1, "", "__init__"]], "dipy.workflows.docstring_parser.Reader": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "eof"], [289, 2, 1, "", "is_empty"], [289, 2, 1, "", "peek"], [289, 2, 1, "", "read"], [289, 2, 1, "", "read_to_condition"], [289, 2, 1, "", "read_to_next_empty_line"], [289, 2, 1, "", "read_to_next_unindented_line"], [289, 2, 1, "", "reset"], [289, 2, 1, "", "seek_next_non_empty_line"]], "dipy.workflows.flow_runner": [[289, 3, 1, "", "get_level"], [289, 3, 1, "", "run_flow"]], "dipy.workflows.io": [[289, 1, 1, "", "FetchFlow"], [289, 1, 1, "", "IoInfoFlow"], [289, 1, 1, "", "SplitFlow"]], "dipy.workflows.io.FetchFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_fetcher_datanames"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "load_module"], [289, 2, 1, "", "run"]], "dipy.workflows.io.IoInfoFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.io.SplitFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.mask": [[289, 1, 1, "", "MaskFlow"]], "dipy.workflows.mask.MaskFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.multi_io": [[289, 1, 1, "", "IOIterator"], [289, 3, 1, "", "basename_without_extension"], [289, 3, 1, "", "common_start"], [289, 3, 1, "", "concatenate_inputs"], [289, 3, 1, "", "connect_output_paths"], [289, 3, 1, "", "io_iterator"], [289, 3, 1, "", "io_iterator_"], [289, 3, 1, "", "slash_to_under"]], "dipy.workflows.multi_io.IOIterator": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "create_directories"], [289, 2, 1, "", "create_outputs"], [289, 2, 1, "", "file_existence_check"], [289, 2, 1, "", "set_inputs"], [289, 2, 1, "", "set_out_dir"], [289, 2, 1, "", "set_out_fnames"], [289, 2, 1, "", "set_output_keys"]], "dipy.workflows.nn": [[289, 1, 1, "", "EVACPlusFlow"]], "dipy.workflows.nn.EVACPlusFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst": [[289, 1, 1, "", "ReconstCSAFlow"], [289, 1, 1, "", "ReconstCSDFlow"], [289, 1, 1, "", "ReconstDkiFlow"], [289, 1, 1, "", "ReconstDtiFlow"], [289, 1, 1, "", "ReconstIvimFlow"], [289, 1, 1, "", "ReconstMAPMRIFlow"], [289, 1, 1, "", "ReconstRUMBAFlow"]], "dipy.workflows.reconst.ReconstCSAFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst.ReconstCSDFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst.ReconstDkiFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_fitted_tensor"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst.ReconstDtiFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_fitted_tensor"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst.ReconstIvimFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_fitted_ivim"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst.ReconstMAPMRIFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.reconst.ReconstRUMBAFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.segment": [[289, 1, 1, "", "LabelsBundlesFlow"], [289, 1, 1, "", "MedianOtsuFlow"], [289, 1, 1, "", "RecoBundlesFlow"]], "dipy.workflows.segment.LabelsBundlesFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.segment.MedianOtsuFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.segment.RecoBundlesFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.stats": [[289, 1, 1, "", "BundleAnalysisTractometryFlow"], [289, 1, 1, "", "BundleShapeAnalysis"], [289, 1, 1, "", "LinearMixedModelsFlow"], [289, 1, 1, "", "SNRinCCFlow"], [289, 3, 1, "", "buan_bundle_profiles"]], "dipy.workflows.stats.BundleAnalysisTractometryFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.stats.BundleShapeAnalysis": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.stats.LinearMixedModelsFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_metric_name"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"], [289, 2, 1, "", "save_lmm_plot"]], "dipy.workflows.stats.SNRinCCFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.tracking": [[289, 1, 1, "", "LocalFiberTrackingPAMFlow"], [289, 1, 1, "", "PFTrackingPAMFlow"]], "dipy.workflows.tracking.LocalFiberTrackingPAMFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.tracking.PFTrackingPAMFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.viz": [[289, 1, 1, "", "HorizonFlow"]], "dipy.workflows.viz.HorizonFlow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "run"]], "dipy.workflows.workflow": [[289, 1, 1, "", "Workflow"]], "dipy.workflows.workflow.Workflow": [[289, 2, 1, "", "__init__"], [289, 2, 1, "", "get_io_iterator"], [289, 2, 1, "", "get_short_name"], [289, 2, 1, "", "get_sub_runs"], [289, 2, 1, "", "manage_output_overwrite"], [289, 2, 1, "", "run"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"api": [0, 290], "chang": [0, 110, 119], "dipi": [0, 36, 107, 113, 118, 122, 124, 162, 238, 241, 246, 274, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "1": [0, 7, 41, 58, 134, 167, 184, 252, 253, 335, 336, 337, 338, 339, 340, 341, 342, 343], "7": [0, 263, 332, 343], "0": [0, 34, 160, 251, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "6": [0, 263, 331, 342], "5": [0, 260, 261, 341], "4": [0, 259, 339, 340], "3": [0, 125, 256, 257, 338], "2": [0, 7, 41, 58, 125, 134, 167, 184, 255, 337], "16": [0, 330], "15": [0, 329], "14": [0, 328], "13": [0, 272, 327], "12": [0, 271, 326], "10": [0, 267, 268, 324], "9": [0, 265, 266, 334], "8": [0, 265, 266, 333], "between": [0, 31, 54, 78, 157, 180, 204, 242], "cross": [1, 39, 48, 128, 165, 174], "preserv": [1, 128], "contextu": [1, 3, 18, 128, 130], "enhanc": [1, 3, 18, 80, 128, 130, 206], "refer": [1, 2, 5, 6, 7, 9, 10, 12, 13, 14, 15, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 39, 40, 41, 42, 43, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 71, 72, 73, 75, 76, 79, 80, 81, 85, 87, 88, 89, 90, 92, 96, 107, 128, 129, 132, 133, 134, 136, 137, 139, 140, 141, 142, 149, 150, 152, 153, 154, 155, 157, 158, 160, 163, 165, 166, 167, 168, 169, 173, 174, 175, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 197, 198, 199, 201, 202, 205, 206, 207, 211, 213, 214, 215, 216, 218, 222, 234, 236, 237, 239, 240, 242, 243, 244, 245, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 350], "fiber": [2, 4, 18, 41, 48, 58, 75, 129, 131, 167, 174, 184, 201, 245], "bundl": [2, 66, 67, 68, 75, 87, 88, 89, 97, 129, 192, 193, 194, 201, 213, 214, 215, 223, 235, 236, 237, 284], "coher": [2, 129], "measur": [2, 129], "acknowledg": [2, 129], "track": [4, 9, 13, 14, 18, 37, 131, 136, 140, 141, 163, 245, 287, 289], "linear": [5, 132, 236, 283], "fascicl": [5, 14, 59, 132, 141, 185], "evalu": [5, 132], "life": [5, 132, 287], "surfac": [6, 98, 133, 224], "seed": [6, 133], "tractographi": [6, 10, 12, 15, 78, 79, 81, 133, 137, 139, 142, 204, 205, 207], "displai": [6, 133], "gener": [6, 50, 133, 176, 262, 264, 266], "list": [6, 133], "posit": [6, 57, 133, 183, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "bootstrap": [7, 134], "closest": [7, 134, 245], "peak": [7, 134, 245, 280, 281, 288], "direct": [7, 8, 11, 34, 67, 134, 135, 138, 160, 193, 280], "getter": [7, 8, 11, 134, 135, 138], "exampl": [7, 18, 56, 57, 66, 134, 182, 183, 192, 248, 275, 277, 278, 281, 283, 285, 287, 288], "csd": [7, 21, 53, 134, 147, 179, 243], "model": [7, 13, 14, 39, 42, 43, 47, 48, 49, 52, 58, 59, 61, 134, 140, 141, 165, 168, 169, 173, 174, 175, 178, 184, 185, 187, 256, 258, 263, 265, 282], "an": [8, 11, 97, 135, 138, 223], "introduct": [8, 9, 11, 37, 116, 123, 135, 136, 138, 163, 234], "determinist": [8, 135, 245], "maximum": [8, 135], "basic": [9, 37, 136, 163], "particl": [10, 137, 245], "filter": [10, 137, 245], "cmc": [10, 137], "act": [10, 15, 137, 142], "stop": [10, 15, 137, 142], "criterion": [10, 15, 137, 142], "probabilist": [11, 138, 245], "parallel": [12, 20, 21, 139, 146, 147], "transport": [12, 139], "robust": [13, 58, 63, 140, 184, 189], "unbias": [13, 58, 140, 184], "base": [13, 45, 58, 71, 140, 171, 184, 197, 236, 244, 283, 288, 289, 350], "spheric": [13, 41, 58, 60, 140, 167, 184, 186, 243, 283, 350, 351], "deconvolut": [13, 41, 46, 58, 84, 140, 167, 172, 184, 210, 243], "rumba": [13, 140, 283], "sd": [13, 140], "spars": [14, 59, 141, 185], "us": [15, 20, 21, 23, 25, 26, 27, 32, 49, 54, 55, 60, 63, 107, 142, 146, 147, 149, 151, 152, 153, 158, 175, 180, 181, 186, 189, 233, 239, 271, 282], "variou": [15, 142], "threshold": [15, 25, 142, 151, 284], "binari": [15, 70, 124, 142, 196], "note": [15, 103, 142, 233, 248, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "file": [16, 17, 18, 143, 144], "format": [16, 18, 143], "read": [17, 144], "write": [17, 144, 272], "streamlin": [17, 18, 71, 76, 91, 93, 97, 98, 144, 197, 202, 217, 219, 223, 224, 236, 244, 281, 287, 288], "overview": [17, 31, 33, 109, 110, 115, 120, 121, 144, 157, 159, 239, 245, 344], "content": [18, 104], "quick": [18, 35, 161, 344], "start": [18, 35, 36, 161, 162, 232], "preprocess": [18, 30, 156], "reconstruct": [18, 20, 21, 38, 40, 41, 42, 43, 44, 47, 50, 53, 54, 56, 58, 59, 60, 146, 147, 164, 166, 167, 168, 169, 170, 173, 176, 179, 180, 182, 184, 185, 186, 243], "analysi": [18, 91, 217, 286], "connect": [18, 91, 94, 217, 220], "registr": [18, 64, 65, 66, 67, 68, 69, 70, 72, 73, 190, 191, 192, 193, 194, 195, 196, 198, 199, 236, 237, 244], "segment": [18, 22, 74, 77, 87, 148, 200, 203, 213, 236, 284, 289], "simul": [18, 83, 85, 86, 209, 211, 212, 257, 258], "multiprocess": [18, 19, 145], "visual": [18, 95, 96, 97, 98, 221, 222, 223, 224, 288], "workflow": [18, 100, 101, 102, 110, 117, 119, 226, 227, 228, 241, 289], "q": [20, 40, 50, 55, 56, 57, 146, 166, 176, 181, 182, 183, 346, 348], "ball": [20, 40, 146, 166], "brain": [22, 74, 148, 200], "median_otsu": [22, 74, 148, 200, 284], "denois": [23, 25, 26, 27, 28, 149, 151, 152, 153, 154, 239, 279, 282, 289], "imag": [23, 25, 26, 27, 34, 44, 50, 54, 56, 57, 70, 71, 82, 149, 151, 152, 153, 160, 170, 176, 180, 182, 183, 196, 197, 208, 232, 243, 244, 274, 281, 282, 348], "adapt": [23, 149], "soft": [23, 149], "coeffici": [23, 149], "match": [23, 149], "ascm": [23, 149], "suppress": [24, 150, 240], "gibb": [24, 150, 240, 279], "oscil": [24, 150, 240], "local": [25, 27, 112, 151, 153, 239, 245], "pca": [25, 26, 151, 152, 239], "via": [25, 28, 151, 154], "empir": [25, 151], "estim": [25, 26, 32, 34, 41, 55, 58, 151, 152, 158, 160, 167, 181, 184], "nois": [25, 26, 32, 151, 152, 158], "standard": [25, 26, 151, 152], "deviat": [25, 26, 151, 152], "perform": [25, 151], "localpca": [25, 151, 279], "function": [25, 41, 48, 58, 125, 151, 167, 174, 184, 266, 270], "marcenko": [26, 152, 239], "pastur": [26, 152, 239], "algorithm": [26, 63, 152, 189], "non": [27, 153], "mean": [27, 42, 54, 153, 168, 180, 243], "nlmean": [27, 153, 239, 279], "patch2self": [28, 154, 279], "self": [28, 154], "supervis": [28, 154], "statist": [28, 154], "independ": [28, 154], "gradient": [29, 155, 277, 281, 287], "sphere": [29, 155, 277], "volum": [31, 97, 99, 157, 223, 225, 242], "motion": [31, 51, 157, 177, 242, 243], "correct": [31, 157, 242], "dwi": [31, 157], "dataset": [31, 33, 104, 157, 159, 235, 238, 263, 271], "piesno": [32, 158, 279], "reslic": [33, 159, 275], "diffus": [33, 34, 42, 43, 44, 47, 52, 54, 55, 61, 159, 160, 168, 169, 170, 173, 178, 180, 181, 187, 232, 239, 243, 256, 259, 263, 274, 282], "snr": [34, 160], "weight": [34, 82, 160, 208, 282], "b": [34, 160, 346, 347], "i": [34, 160, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "42": [34, 160], "0695455758": [34, 160], "57": [34, 160], "05039": [34, 160], "99871": [34, 160], "0054406": [34, 160], "23": [34, 160], "9329492871": [34, 160], "get": [36, 112, 162, 232, 233, 252, 254, 255, 257, 258, 260, 262, 264, 265, 266, 267, 268, 269, 271], "k": [39, 165], "fold": [39, 165], "valid": [39, 165], "comparison": [39, 165, 235], "constant": [40, 166, 243], "solid": [40, 166, 243], "angl": [40, 166, 243], "constrain": [41, 42, 167, 168, 243], "step": [41, 58, 167, 184, 232], "respons": [41, 48, 58, 167, 174, 184], "fodf": [41, 58, 167, 184], "signal": [42, 43, 47, 52, 54, 60, 61, 168, 169, 173, 178, 180, 186, 187, 254, 262, 264], "kurtosi": [42, 54, 168, 180, 243], "tensor": [42, 47, 63, 168, 173, 189, 243], "optim": [42, 168, 277], "dki": [42, 85, 168, 211, 243, 283], "fraction": [42, 168], "anisotropi": [42, 168], "wmti": [43, 169], "spectrum": [44, 170], "calcul": [45, 62, 90, 92, 171, 188, 216, 218], "dsi": [45, 46, 84, 171, 172, 210, 283], "scalar": [45, 62, 171, 188], "map": [45, 52, 62, 88, 92, 94, 171, 178, 188, 214, 218, 220, 243], "v": [46, 84, 172, 210], "invari": [48, 174], "forecast": [48, 174, 283], "free": [49, 175], "water": [49, 175], "elimin": [49, 175], "remov": [49, 175], "dti": [49, 175, 243, 283], "contamin": [49, 175], "sampl": [50, 176, 348], "intravoxel": [51, 177, 243], "incoher": [51, 177, 243], "continu": [52, 61, 178, 187, 259], "analyt": [52, 61, 178, 187, 235], "mri": [52, 178, 243, 263], "multi": [53, 179], "shell": [53, 179], "tissu": [53, 82, 179, 208, 284], "msdki": [54, 180, 283], "test": [54, 180, 233, 262, 264, 267, 269, 270, 272], "synthet": [54, 180], "data": [54, 104, 180, 278, 282], "relationship": [54, 180], "smt2": [54, 180], "time": [55, 181], "depend": [55, 106, 181], "space": [55, 56, 57, 181, 182, 183, 281], "indic": [55, 181], "qt": [55, 181], "dmri": [55, 181], "trajectori": [56, 57, 182, 183], "qti": [56, 57, 182, 183, 257, 258, 283], "theori": [56, 57, 182, 183, 349], "usag": [56, 57, 182, 183, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "appli": [57, 71, 183, 197, 244], "constraint": [57, 183], "instal": [57, 115, 183, 233], "harmon": [60, 186, 350], "3d": [61, 64, 73, 187, 190, 199], "shore": [61, 62, 187, 188, 283], "restor": [63, 189], "fit": [63, 189, 266], "affin": [64, 65, 190, 191, 275], "mask": [65, 191, 284, 289], "groupwis": [66, 192], "how": [66, 192], "work": [66, 103, 118, 192, 269, 270], "extend": [66, 80, 192, 206], "capabl": [66, 192], "nonrigid": [68, 194, 237], "bundlewarp": [68, 194, 237, 275], "diffeomorph": [70, 72, 73, 196, 198, 199, 244], "fuzzi": [70, 196], "deform": [71, 197, 237], "symmetr": [72, 73, 198, 199, 244], "2d": [72, 198], "automat": [75, 201], "extract": [75, 87, 201, 213], "recobundl": [75, 201, 236, 284], "fast": [76, 202], "search": [76, 202], "cluster": [78, 79, 80, 81, 90, 204, 205, 206, 207, 216, 284, 288], "avail": [78, 79, 204, 205, 268], "featur": [78, 80, 110, 204, 206, 344], "ident": [78, 204, 284], "resampl": [78, 204, 275], "center": [78, 204], "mass": [78, 204], "midpoint": [78, 204, 287], "arclength": [78, 204], "vector": [78, 204], "endpoint": [78, 204, 287], "metric": [79, 80, 97, 205, 206, 223, 275, 284, 287], "averag": [79, 205], "pointwis": [79, 205], "euclidean": [79, 205], "sum": [79, 205], "cosin": [79, 205], "quickbundl": [80, 81, 206, 207, 284], "differ": [80, 97, 111, 206, 223], "framework": [80, 206, 235], "classif": [82, 208], "t1": [82, 99, 208, 225], "structur": [82, 208, 239], "multitensor": [85, 86, 211, 212], "afq": [87, 213], "tract": [87, 213], "profil": [87, 213, 235, 277], "from": [87, 97, 99, 110, 120, 213, 223, 225, 233], "buan": [88, 89, 214, 215, 235], "assign": [88, 214], "creation": [88, 214, 254], "shape": [89, 215, 235], "similar": [89, 215, 235], "score": [89, 215], "outlier": [90, 216], "confid": [90, 216], "index": [90, 216], "path": [92, 218], "length": [92, 93, 218, 219, 287], "size": [93, 219], "reduct": [93, 219], "matric": [94, 220], "roi": [94, 98, 220, 224, 288], "intersect": [94, 220], "densiti": [94, 220], "advanc": [96, 117, 222], "interact": [96, 222], "show": [97, 223], "everi": [97, 223], "orient": [97, 223], "color": [97, 223], "point": [97, 223], "valu": [97, 99, 107, 223, 225], "default": [97, 223], "colormap": [97, 99, 223, 225], "your": [97, 99, 110, 113, 121, 223, 225], "specif": [97, 99, 223, 225, 235], "render": [98, 99, 224, 225], "simpl": [99, 225], "slice": [99, 225, 288], "rang": [99, 125, 225], "fa": [99, 225], "creat": [99, 100, 102, 113, 225, 226, 228, 262], "mosaic": [99, 225], "new": [100, 102, 110, 226, 228], "combin": [100, 226], "public": 103, "A": [103, 119, 124, 248, 344], "cite": 103, "our": 103, "code": [107, 108, 112, 118, 125, 258, 261], "style": 107, "guidelin": 107, "import": [107, 125, 287], "cython": 107, "variabl": 107, "declar": 107, "c": 107, "librari": 107, "error": [107, 268], "return": [107, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "pointer": 107, "cast": 107, "loop": 107, "document": [107, 127, 233, 272], "commit": [108, 110, 119], "messag": 108, "configur": [109, 113], "git": [109, 114, 115, 117], "In": [109, 110, 115, 120, 121, 232], "detail": [109, 110, 115, 120, 121], "user": 109, "name": 109, "email": 109, "alias": 109, "editor": 109, "merg": [109, 110], "fanci": 109, "log": 109, "output": [109, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "develop": [110, 114, 120, 122, 126], "summari": [110, 117], "consid": 110, "delet": 110, "master": 110, "branch": 110, "updat": [110, 112], "mirror": 110, "trunk": [110, 119], "make": [110, 113, 120, 124, 269, 270, 272], "The": [110, 252, 346, 347, 351], "edit": 110, "more": 110, "ask": [110, 229], "review": 110, "some": 110, "other": [110, 124, 277], "thing": [110, 266, 267, 270], "you": 110, "might": 110, "want": 110, "do": [110, 124, 267, 270], "github": [110, 113], "sever": 110, "peopl": 110, "share": 110, "singl": 110, "repositori": [110, 121], "explor": 110, "rebas": 110, "recov": 110, "mess": 110, "up": [110, 113, 121, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272], "rewrit": 110, "histori": [110, 119], "two": 111, "three": 111, "dot": 111, "spec": 111, "follow": 112, "latest": 112, "sourc": [112, 118, 233, 252], "copi": [112, 113], "own": 113, "fork": [113, 121], "set": [113, 121], "account": [113, 260], "resourc": 117, "tutori": [117, 257], "manual": 117, "page": 117, "onlin": 117, "maintain": 119, "integr": 119, "few": 119, "long": 119, "seri": 119, "check": 119, "push": 119, "patch": 120, "move": [120, 125], "clone": 121, "link": 121, "upstream": 121, "repo": 121, "guid": 124, "releas": [124, 233, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "checklist": 124, "upload": 124, "build": [124, 233], "stuff": [124, 346], "need": 124, "keep": 125, "compat": 125, "python": [125, 232, 233, 274], "futur": 125, "print": 125, "divis": 125, "modul": [125, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "xrang": 125, "reduc": 125, "string": 125, "next": [125, 232, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "except": 125, "dictionari": 125, "frequent": 229, "question": 229, "theoret": 229, "practic": 229, "gimbal": 230, "lock": 230, "mathemat": [230, 351], "glossari": 231, "highlight": [232, 249], "announc": [232, 250], "support": [232, 233, 344], "anaconda": 233, "packag": 233, "window": 233, "osx": 233, "linux": 233, "pip": 233, "contact": 233, "u": 233, "common": 233, "problem": 233, "multipl": 233, "altern": 233, "memori": 233, "issu": [233, 268], "version": [233, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "all": 233, "oper": 233, "system": [233, 344], "unix": 233, "e": 233, "g": 233, "ubuntu": 233, "debian": 233, "fedora": 233, "mandriva": 233, "mayb": 233, "redhat": 233, "openmp": 233, "under": 233, "homebrew": 233, "org": 233, "onli": 233, "tip": 233, "troubleshoot": 233, "command": [234, 323], "line": [234, 323], "interfac": [234, 241], "group": 235, "across": 235, "popul": 235, "reproduc": 235, "result": [235, 256, 263], "larger": 235, "white": [236, 237], "matter": [236, 237], "partial": 237, "fulli": 237, "download": 238, "overcomplet": 239, "method": [239, 245, 262, 275], "unring": 240, "appar": 243, "propag": 243, "csa": 243, "ivim": [243, 283], "transform": 244, "eudx": 245, "pft": 245, "what": [246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 346], "mission": 247, "statement": 247, "about": [248, 252, 346], "older": 249, "past": 250, "journei": 251, "gsoc": [251, 252], "applic": 251, "accept": 251, "week": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "commun": [252, 253], "bond": [252, 253], "insight": 252, "myself": 252, "intro": 252, "open": 252, "dai": 252, "did": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "thi": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "come": [252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272], "stuck": [252, 254, 255, 257, 258, 260, 262, 264, 265, 266, 267, 268, 269, 271], "anywher": [252, 254, 255, 257, 258, 260, 262, 264, 265, 268, 269, 271], "project": [253, 288], "kickstart": 253, "paper": 254, "research": [254, 259], "week2": 254, "discoveri": 254, "deep": 255, "dive": 255, "vq": [255, 256], "vae": [255, 256], "studi": 256, "cti": 257, "re": 258, "engin": 258, "design": [258, 261], "matrix": [258, 261, 346, 347], "carbon": [260, 268], "setup": [260, 287], "experi": [260, 271], "debug": 260, "repeat": 260, "implement": 261, "pep8": 261, "signal_predict": 262, "pre": 263, "train": 263, "vqvae": [263, 265], "latent": 263, "nfb": 263, "modifi": 264, "monai": 265, "checkerboard": 265, "artifact": 265, "ad": 267, "gpu": 268, "tensorflow": 268, "11": [268, 269, 325], "week12": 270, "final": 271, "both": 271, "week13": 271, "subpackag": 274, "util": [274, 281, 282, 283, 287, 323], "get_info": 274, "align": [275, 289], "_public": 275, "cpd": 275, "imaffin": 275, "imwarp": 275, "scalespac": 275, "streamlinear": 275, "streamwarp": 275, "bunch": 275, "verbositylevel": 275, "syn_registr": 275, "paramet": [275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "register_dwi_to_templ": 275, "write_map": 275, "read_map": 275, "affine_registr": 275, "center_of_mass": [275, 287], "translat": 275, "rigid": 275, "rigid_isosc": 275, "rigid_sc": 275, "_method_dict": 275, "register_seri": 275, "register_dwi_seri": 275, "motion_correct": 275, "streamline_registr": 275, "deformableregistr": 275, "attribut": [275, 277, 283, 285], "gaussian_kernel": 275, "low_rank_eigen": 275, "initialize_sigma2": 275, "lowrankq": 275, "affineinversionerror": 275, "affineinvalidvalueserror": 275, "affinemap": 275, "mutualinformationmetr": 275, "affineregistr": 275, "_transform_method": 275, "transform_centers_of_mass": 275, "transform_geometric_cent": 275, "transform_origin": 275, "diffeomorphicmap": 275, "diffeomorphicregistr": 275, "symmetricdiffeomorphicregistr": 275, "registrationstag": 275, "logger": [275, 277, 281, 282, 283, 284], "mult_aff": 275, "get_direction_and_spac": 275, "similaritymetr": 275, "ccmetric": 275, "emmetr": 275, "ssdmetric": 275, "v_cycle_2d": 275, "v_cycle_3d": 275, "isotropicscalespac": 275, "streamlinedistancemetr": 275, "bundlemindistancemetr": 275, "bundlemindistancematrixmetr": 275, "bundlemindistanceasymmetricmetr": 275, "bundlesumdistancematrixmetr": 275, "jointbundlemindistancemetr": 275, "streamlinelinearregistr": 275, "streamlineregistrationmap": 275, "jointstreamlineregistrationmap": 275, "bundle_sum_dist": 275, "bundle_min_dist": 275, "bundle_min_distance_fast": 275, "bundle_min_distance_asymmetric_fast": 275, "remove_clusters_by_s": 275, "progressive_slr": 275, "slr_with_qbx": 275, "groupwise_slr": 275, "get_unique_pair": 275, "compose_matrix44": 275, "decompose_matrix44": 275, "average_bundle_length": 275, "find_miss": 275, "bundlewarp_vector_fil": 275, "bundlewarp_shape_analysi": 275, "boot": 276, "core": 277, "benchmark": [277, 283, 284, 287], "bench_spher": 277, "geometri": 277, "graph": 277, "histeq": 277, "ndindex": 277, "onetim": 277, "rng": 277, "sphere_stat": 277, "subdivide_octahedron": 277, "wavelet": 277, "timer": 277, "func_minimize_adhoc": 277, "func_minimize_scipi": 277, "bench_disperse_charges_alt": 277, "_tuple2ax": 277, "sphere2cart": 277, "cart2spher": 277, "sph2latlon": 277, "normalized_vector": 277, "vector_norm": 277, "rodrigues_axis_rot": 277, "nearest_pos_semi_def": 277, "sphere_dist": 277, "see": [277, 278, 281, 283, 285, 287], "also": [277, 278, 281, 283, 285, 287], "cart_dist": 277, "vector_cosin": 277, "lambert_equal_area_projection_polar": 277, "lambert_equal_area_projection_cart": 277, "euler_matrix": 277, "compose_matrix": 277, "decompose_matrix": 277, "rais": [277, 278, 287], "circumradiu": 277, "vec2vec_rotmat": 277, "compose_transform": 277, "perpendicular_direct": 277, "dist_to_corn": 277, "is_hemispher": 277, "gradientt": 277, "unique_bv": 277, "gradient_table_from_bvals_bvec": 277, "gradient_table_from_qvals_bvec": 277, "gradient_table_from_gradient_strength_bvec": 277, "gradient_t": 277, "reorient_bvec": 277, "generate_bvec": 277, "round_bval": 277, "unique_bvals_toler": 277, "get_bval_indic": 277, "unique_bvals_magnitud": 277, "check_multi_b": 277, "btens_to_param": 277, "params_to_bten": 277, "ornt_map": [277, 281], "reorient_vector": [277, 281], "reorient_on_axi": [277, 281], "orientation_from_str": [277, 281], "orientation_to_str": [277, 281], "resetmixin": 277, "onetimeproperti": 277, "auto_attr": 277, "sklearnlinearsolv": 277, "nonnegativeleastsquar": 277, "positivedefiniteleastsquar": 277, "spdot": 277, "sparse_nnl": 277, "wichmannhill2006": 277, "wichmannhill1982": 277, "lecuy": 277, "hemispher": 277, "faces_from_sphere_vertic": 277, "unique_edg": 277, "unique_set": 277, "disperse_charg": 277, "disperse_charges_alt": 277, "euler_characteristic_check": 277, "octahedron_vertic": 277, "octahedron_fac": 277, "icosahedron_vertic": 277, "icosahedron_fac": 277, "unit_octahedron": 277, "unit_icosahedron": 277, "hemi_icosahedron": 277, "random_uniform_on_spher": 277, "eigenstat": 277, "compare_orientation_set": 277, "angular_similar": 277, "create_unit_spher": 277, "create_unit_hemispher": 277, "cshift3d": 277, "permutationinvers": 277, "afb3d_a": 277, "sfb3d_a": 277, "sfb3d": 277, "afb3d": 277, "dwt3d": 277, "idwt3d": 277, "fetcher": 278, "dataerror": 278, "loads_compat": 278, "data_dir": 278, "get_sim_voxel": 278, "get_skeleton": 278, "get_spher": 278, "default_spher": 278, "small_spher": 278, "get_3shell_gtab": 278, "get_isbi2013_2shell_gtab": 278, "get_gtab_taiwan_dsi": 278, "dsi_voxel": 278, "dsi_deconv_voxel": 278, "mrtrix_spherical_funct": 278, "get_cmap": 278, "two_cingulum_bundl": 278, "matlab_life_result": 278, "load_sdp_constraint": 278, "copyfileobj_withprogress": 278, "check_md5": 278, "fetch_data": 278, "fetch_isbi2013_2shel": 278, "fetch_stanford_label": 278, "fetch_sherbrooke_3shel": 278, "fetch_stanford_hardi": 278, "fetch_resdnn_weight": 278, "fetch_synb0_weight": 278, "fetch_synb0_test": 278, "fetch_evac_weight": 278, "fetch_evac_test": 278, "fetch_stanford_t1": 278, "fetch_stanford_pve_map": 278, "fetch_stanford_track": 278, "fetch_taiwan_ntu_dsi": 278, "fetch_syn_data": 278, "fetch_mni_templ": 278, "fetch_scil_b0": 278, "fetch_bundles_2_subject": 278, "fetch_ivim": 278, "fetch_cfin_multib": 278, "fetch_file_format": 278, "fetch_bundle_atlas_hcp842": 278, "fetch_target_tractogram_hcp": 278, "fetch_bundle_fa_hcp": 278, "fetch_qtdmri_test_retest_2subject": 278, "fetch_gold_standard_io": 278, "fetch_qte_lte_pt": 278, "fetch_fury_surfac": 278, "fetch_dib_70_lte_pte_st": 278, "fetch_dib_217_lte_pte_st": 278, "fetch_ptt_minimal_dataset": 278, "fetch_bundle_warp_dataset": 278, "get_fnam": 278, "read_qtdmri_test_retest_2subject": 278, "read_scil_b0": 278, "read_siemens_scil_b0": 278, "read_isbi2013_2shel": 278, "read_sherbrooke_3shel": 278, "read_stanford_label": 278, "read_stanford_hardi": 278, "read_stanford_t1": 278, "read_stanford_pve_map": 278, "read_taiwan_ntu_dsi": 278, "read_syn_data": 278, "fetch_tissue_data": 278, "read_tissue_data": 278, "read_mni_templ": 278, "fetch_cenir_multib": 278, "read_cenir_multib": 278, "read_bundles_2_subject": 278, "read_ivim": 278, "read_cfin_dwi": 278, "read_cfin_t1": 278, "get_file_format": 278, "get_bundle_atlas_hcp842": 278, "get_two_hcp842_bundl": 278, "get_target_tractogram_hcp": 278, "read_qte_lte_pt": 278, "read_dib_70_lte_pte_st": 278, "read_dib_217_lte_pte_st": 278, "extract_example_tract": 278, "read_five_af_bundl": 278, "to_bids_descript": 278, "fetch_hcp": 278, "fetch_hbn": 278, "adaptive_soft_match": 279, "noise_estim": 279, "non_local_mean": 279, "gibbs_remov": 279, "genpca": 279, "mppca": 279, "estimate_sigma": 279, "peaksandmetr": 280, "peak_directions_nl": 280, "peak_direct": 280, "peaks_from_model": 280, "reshape_peaks_for_visu": 280, "io": [281, 289], "bvectxt": 281, "dpy": 281, "pickl": 281, "stateful_tractogram": 281, "vtk": 281, "read_bvec_fil": 281, "read_bvals_bvec": 281, "load_nifti_data": 281, "load_nifti": 281, "save_nifti": 281, "save_qa_metr": 281, "load_peak": 281, "save_peak": 281, "peaks_to_nifti": 281, "save_pickl": 281, "load_pickl": 281, "origin": 281, "statefultractogram": 281, "set_sft_logger_level": 281, "save_tractogram": 281, "load_tractogram": 281, "load_gener": 281, "save_gener": 281, "load_trk": 281, "load_tck": 281, "load_vtk": 281, "load_vtp": 281, "load_fib": 281, "load_dpi": 281, "save_trk": 281, "save_tck": 281, "save_vtk": 281, "save_vtp": 281, "save_fib": 281, "save_dpi": 281, "nifti1_symmat": 281, "make5d": 281, "decfa": 281, "decfa_to_float": 281, "is_reference_info_valid": 281, "get_reference_info": 281, "is_header_compat": 281, "create_tractogram_head": 281, "create_nifti_head": 281, "save_buan_profiles_hdf5": 281, "read_img_arr_or_path": 281, "load_polydata": 281, "save_polydata": 281, "save_vtk_streamlin": 281, "load_vtk_streamlin": 281, "nn": [282, 289], "cnn_1d_denois": 282, "titl": 282, "cnn": 282, "evac": 282, "histo_resdnn": 282, "synb0": 282, "cnn1ddenois": 282, "block": 282, "channelsum": 282, "evacplu": 282, "prepare_img": 282, "init_model": 282, "historesdnn": 282, "singlelayerperceptron": 282, "multiplelayerpercepton": 282, "encoderblock": 282, "decoderblock": 282, "unet3d": 282, "normal": 282, "unnorm": 282, "set_logger_level": 282, "transform_img": 282, "recover_img": 282, "reconst": [283, 289], "bench_bounding_box": 283, "bench_csd": 283, "bench_peak": 283, "bench_squash": 283, "bench_vec_val_sum": 283, "cach": 283, "cross_valid": 283, "csdeconv": 283, "dki_micro": 283, "fwdti": 283, "gqi": 283, "mapmri": 283, "mcsd": 283, "multi_voxel": 283, "odf": 283, "qtdmri": 283, "sfm": 283, "shm": 283, "reconstmodel": 283, "reconstfit": 283, "num_grad": 283, "bench_csdeconv": 283, "bench_local_maxima": 283, "old_squash": 283, "bench_quick_squash": 283, "bench_vec_val_vect": 283, "coeff_of_determin": 283, "kfold_xval": 283, "axsymshrespons": 283, "constrainedsphericaldeconvmodel": 283, "constrainedsdtmodel": 283, "auto_respons": 283, "response_from_mask": 283, "estimate_respons": 283, "forward_sdt_deconv_mat": 283, "odf_deconv": 283, "odf_sh_to_sharp": 283, "mask_for_response_ssst": 283, "response_from_mask_ssst": 283, "auto_response_ssst": 283, "recursive_respons": 283, "fa_trace_to_lambda": 283, "diffusionkurtosismodel": 283, "diffusionkurtosisfit": 283, "carlson_rf": 283, "carlson_rd": 283, "directional_diffus": 283, "directional_diffusion_vari": 283, "directional_kurtosi": 283, "apparent_kurtosis_coef": 283, "mean_kurtosi": 283, "radial_kurtosi": 283, "axial_kurtosi": 283, "kurtosis_maximum": 283, "mean_kurtosis_tensor": 283, "kurtosis_fractional_anisotropi": 283, "dki_predict": 283, "params_to_dki_param": 283, "ls_fit_dki": 283, "cls_fit_dki": 283, "wrotat": 283, "wrotate_el": 283, "wcon": 283, "split_dki_param": 283, "kurtosismicrostructuremodel": 283, "kurtosismicrostructuralfit": 283, "axonal_water_fract": 283, "diffusion_compon": 283, "dkimicro_predict": 283, "tortuos": 283, "diffusionspectrummodel": 283, "diffusionspectrumfit": 283, "diffusionspectrumdeconvmodel": 283, "diffusionspectrumdeconvfit": 283, "create_qspac": 283, "create_qt": 283, "hanning_filt": 283, "pdf_interp_coord": 283, "pdf_odf": 283, "half_to_full_qspac": 283, "project_hemisph_bvec": 283, "threshold_propag": 283, "gen_psf": 283, "lr_deconv": 283, "tensormodel": 283, "tensorfit": 283, "fractional_anisotropi": 283, "geodesic_anisotropi": 283, "mean_diffus": 283, "axial_diffus": 283, "radial_diffus": 283, "trace": 283, "color_fa": 283, "determin": 283, "isotrop": 283, "deviator": 283, "norm": 283, "mode": 283, "planar": 283, "apparent_diffusion_coef": 283, "tensor_predict": 283, "iter_fit_tensor": 283, "wls_fit_tensor": 283, "ols_fit_tensor": 283, "nlls_fit_tensor": 283, "restore_fit_tensor": 283, "_lt_indic": 283, "from_lower_triangular": 283, "_lt_row": 283, "_lt_col": 283, "lower_triangular": 283, "decompose_tensor": 283, "design_matrix": 283, "quantize_evec": 283, "eig_from_lo_tri": 283, "forecastmodel": 283, "forecastfit": 283, "find_signal_mean": 283, "forecast_error_func": 283, "psi_l": 283, "forecast_matrix": 283, "rho_matrix": 283, "lb_forecast": 283, "freewatertensormodel": 283, "freewatertensorfit": 283, "fwdti_predict": 283, "wls_iter": 283, "nls_iter": 283, "nls_fit_tensor": 283, "lower_triangular_to_choleski": 283, "cholesky_to_lower_triangular": 283, "generalizedqsamplingmodel": 283, "generalizedqsamplingfit": 283, "normalize_qa": 283, "squared_radial_compon": 283, "npa": 283, "equatorial_zone_vertic": 283, "polar_zone_vertic": 283, "upper_hemi_map": 283, "equatorial_maximum": 283, "patch_vertic": 283, "patch_maximum": 283, "odf_sum": 283, "patch_sum": 283, "triple_odf_maxima": 283, "ivimmodeltrr": 283, "ivimmodelvp": 283, "ivimfit": 283, "ivim_predict": 283, "f_d_star_predict": 283, "f_d_star_error": 283, "ivim_model_selector": 283, "mapmrimodel": 283, "mapmrifit": 283, "isotropic_scale_factor": 283, "mapmri_index_matrix": 283, "b_mat": 283, "b_mat_isotrop": 283, "mapmri_phi_1d": 283, "mapmri_phi_matrix": 283, "mapmri_psi_1d": 283, "mapmri_psi_matrix": 283, "mapmri_odf_matrix": 283, "mapmri_isotropic_phi_matrix": 283, "mapmri_isotropic_radial_signal_basi": 283, "mapmri_isotropic_m_mu_independ": 283, "mapmri_isotropic_m_mu_depend": 283, "mapmri_isotropic_psi_matrix": 283, "mapmri_isotropic_radial_pdf_basi": 283, "mapmri_isotropic_k_mu_independ": 283, "mapmri_isotropic_k_mu_depend": 283, "binomialfloat": 283, "mapmri_isotropic_odf_matrix": 283, "mapmri_isotropic_odf_sh_matrix": 283, "mapmri_isotropic_laplacian_reg_matrix": 283, "mapmri_isotropic_laplacian_reg_matrix_from_index_matrix": 283, "mapmri_isotropic_index_matrix": 283, "create_rspac": 283, "delta": 283, "map_laplace_u": 283, "map_laplace_t": 283, "map_laplace_": 283, "mapmri_stu_reg_matric": 283, "mapmri_laplacian_reg_matrix": 283, "generalized_crossvalidation_arrai": 283, "generalized_crossvalid": 283, "gcv_cost_funct": 283, "multishellrespons": 283, "multishelldeconvmodel": 283, "msdeconvfit": 283, "qpfitter": 283, "multi_tissue_basi": 283, "solve_qp": 283, "multi_shell_fiber_respons": 283, "mask_for_response_msmt": 283, "response_from_mask_msmt": 283, "auto_response_msmt": 283, "meandiffusionkurtosismodel": 283, "meandiffusionkurtosisfit": 283, "mean_signal_bvalu": 283, "msk_from_awf": 283, "awf_from_msk": 283, "msdki_predict": 283, "wls_fit_msdki": 283, "multivoxelfit": 283, "callablearrai": 283, "multi_voxel_fit": 283, "odfmodel": 283, "odffit": 283, "gfa": 283, "minmax_norm": 283, "qtdmrimodel": 283, "qtdmrifit": 283, "qtdmri_to_mapmri_matrix": 283, "qtdmri_isotropic_to_mapmri_matrix": 283, "qtdmri_temporal_norm": 283, "qtdmri_mapmri_norm": 283, "qtdmri_mapmri_isotropic_norm": 283, "qtdmri_signal_matrix_": 283, "qtdmri_signal_matrix": 283, "qtdmri_eap_matrix": 283, "qtdmri_isotropic_signal_matrix_": 283, "qtdmri_isotropic_signal_matrix": 283, "qtdmri_eap_matrix_": 283, "qtdmri_isotropic_eap_matrix_": 283, "qtdmri_isotropic_eap_matrix": 283, "radial_basis_opt": 283, "angular_basis_opt": 283, "radial_basis_eap_opt": 283, "angular_basis_eap_opt": 283, "temporal_basi": 283, "qtdmri_index_matrix": 283, "qtdmri_isotropic_index_matrix": 283, "qtdmri_laplacian_reg_matrix": 283, "qtdmri_isotropic_laplacian_reg_matrix": 283, "part23_reg_matrix_q": 283, "part23_iso_reg_matrix_q": 283, "part4_reg_matrix_q": 283, "part4_iso_reg_matrix_q": 283, "part1_reg_matrix_tau": 283, "part23_reg_matrix_tau": 283, "part4_reg_matrix_tau": 283, "h": 283, "qtdmri_isotropic_sc": 283, "qtdmri_anisotropic_sc": 283, "design_matrix_spati": 283, "create_rt_space_grid": 283, "qtdmri_number_of_coeffici": 283, "l1_crossvalid": 283, "elastic_crossvalid": 283, "visualise_gradient_table_g_delta_rainbow": 283, "qtimodel": 283, "qtifit": 283, "from_3x3_to_6x1": 283, "from_6x1_to_3x3": 283, "from_6x6_to_21x1": 283, "from_21x1_to_6x6": 283, "cvxpy_1x6_to_3x3": 283, "cvxpy_1x21_to_6x6": 283, "dtd_covari": 283, "qti_sign": 283, "rumbasdmodel": 283, "rumbafit": 283, "rumba_deconv": 283, "mbessel_ratio": 283, "generate_kernel": 283, "rumba_deconv_glob": 283, "isotropicmodel": 283, "isotropicfit": 283, "exponentialisotropicmodel": 283, "exponentialisotropicfit": 283, "sparsefasciclemodel": 283, "sparsefasciclefit": 283, "sfm_design_matrix": 283, "sphharmmodel": 283, "qballbasemodel": 283, "sphharmfit": 283, "csaodfmodel": 283, "opdtmodel": 283, "qballmodel": 283, "residualbootstrapwrapp": 283, "forward_sdeconv_mat": 283, "sh_to_rh": 283, "gen_dirac": 283, "spherical_harmon": 283, "real_sph_harm": 283, "real_sh_tournier_from_index": 283, "real_sh_descoteaux_from_index": 283, "real_sh_tourni": 283, "real_sh_descoteaux": 283, "real_sym_sh_mrtrix": 283, "real_sym_sh_basi": 283, "sph_harm_ind_list": 283, "order_from_ncoef": 283, "smooth_pinv": 283, "lazy_index": 283, "normalize_data": 283, "hat": 283, "lcr_matrix": 283, "bootstrap_data_arrai": 283, "bootstrap_data_voxel": 283, "sf_to_sh": 283, "sh_to_sf": 283, "sh_to_sf_matrix": 283, "calculate_max_ord": 283, "anisotropic_pow": 283, "convert_sh_to_full_basi": 283, "convert_sh_from_legaci": 283, "convert_sh_to_legaci": 283, "shoremodel": 283, "shorefit": 283, "shore_matrix": 283, "shore_matrix_pdf": 283, "shore_matrix_odf": 283, "l_shore": 283, "n_shore": 283, "shore_indic": 283, "shore_ord": 283, "dki_design_matrix": 283, "bench_quickbundl": 284, "fss": 284, "mdfpy": 284, "check_rang": 284, "bundle_adjac": 284, "ba_analysi": 284, "cluster_bundl": 284, "bundle_shape_similar": 284, "clustercentroid": 284, "clustermap": 284, "clustermapcentroid": 284, "quickbundlesx": 284, "treeclust": 284, "treeclustermap": 284, "qbx_and_merg": 284, "faststreamlinesearch": 284, "nearest_from_matrix_row": 284, "nearest_from_matrix_col": 284, "multi_median": 284, "applymask": 284, "bounding_box": 284, "crop": 284, "segment_from_cfa": 284, "clean_cc_mask": 284, "mdf": 284, "mean_manhattan_dist": 284, "mean_euclidean_dist": 284, "otsu": 284, "upper_bound_by_r": 284, "upper_bound_by_perc": 284, "tissueclassifierhmrf": 284, "sim": 285, "phantom": 285, "voxel": 285, "add_nois": 285, "diff2eigenvector": 285, "orbital_phantom": 285, "diffusion_ev": 285, "sticks_and_bal": 285, "callaghan_perpendicular": 285, "gaussian_parallel": 285, "cylinders_and_ball_soderman": 285, "single_tensor": 285, "multi_tensor": 285, "multi_tensor_dki": 285, "kurtosis_el": 285, "dki_sign": 285, "single_tensor_odf": 285, "all_tensor_evec": 285, "multi_tensor_odf": 285, "single_tensor_rtop": 285, "multi_tensor_rtop": 285, "single_tensor_pdf": 285, "multi_tensor_pdf": 285, "single_tensor_msd": 285, "multi_tensor_msd": 285, "stat": [286, 289], "peak_valu": 286, "anatomical_measur": 286, "assignment_map": 286, "gaussian_weight": 286, "afq_profil": 286, "_util": 287, "bench_streamlin": 287, "learn": 287, "local_track": 287, "mesh": 287, "generate_streamlin": 287, "bench_set_number_of_point": 287, "bench_length": 287, "bench_compress_streamlin": 287, "detect_corresponding_track": 287, "detect_corresponding_tracks_plu": 287, "lifesignalmak": 287, "fibermodel": 287, "fiberfit": 287, "streamline_gradi": 287, "grad_tensor": 287, "streamline_tensor": 287, "streamline_sign": 287, "voxel2streamlin": 287, "localtrack": 287, "particlefilteringtrack": 287, "random_coordinates_from_surfac": 287, "seeds_from_surface_coordin": 287, "triangles_area": 287, "vertices_to_triangles_valu": 287, "wind": 287, "byte": 287, "downsampl": 287, "magn": 287, "frenet_serret": 287, "mean_curvatur": 287, "mean_orient": 287, "generate_combin": 287, "longest_track_bundl": 287, "intersect_spher": 287, "inside_spher": 287, "inside_sphere_point": 287, "spline": 287, "startpoint": 287, "arbitrarypoint": 287, "principal_compon": 287, "midpoint2point": 287, "unlist_streamlin": 287, "relist_streamlin": 287, "center_streamlin": 287, "deform_streamlin": 287, "transform_streamlin": 287, "select_random_set_of_streamlin": 287, "select_by_roi": 287, "cluster_confid": 287, "orient_by_roi": 287, "orient_by_streamlin": 287, "values_from_volum": 287, "nbyte": 287, "density_map": 287, "connectivity_matrix": 287, "ndbincount": 287, "reduce_label": 287, "subseg": 287, "seeds_from_mask": 287, "random_seeds_from_mask": 287, "target": 287, "target_line_bas": 287, "streamline_near_roi": 287, "near_roi": 287, "unique_row": 287, "transform_tracking_output": 287, "reduce_roi": 287, "path_length": 287, "max_angle_from_curvatur": 287, "min_radius_curvature_from_angl": 287, "viz": [288, 289], "gmem": 288, "horizon": 288, "app": 288, "tab": 288, "panel": 288, "plot": 288, "regtool": 288, "globalhorizon": 288, "horizontab": 288, "tabmanag": 288, "build_label": 288, "color_single_slid": 288, "color_double_slid": 288, "clusterstab": 288, "peakstab": 288, "roistab": 288, "slicestab": 288, "clustersvisu": 288, "slicesvisu": 288, "slicer_panel": 288, "compare_map": 288, "compare_qti_map": 288, "bundle_shape_profil": 288, "sph_project": 288, "simple_plot": 288, "overlay_imag": 288, "draw_lattice_2d": 288, "plot_2d_diffeomorphic_map": 288, "plot_slic": 288, "overlay_slic": 288, "show_bundl": 288, "viz_two_bundl": 288, "viz_vector_field": 288, "viz_displacement_mag": 288, "combined_workflow": 289, "docstring_pars": 289, "flow_runn": 289, "multi_io": 289, "resliceflow": 289, "slrwithqbxflow": 289, "imageregistrationflow": 289, "applytransformflow": 289, "synregistrationflow": 289, "motioncorrectionflow": 289, "bundlewarpflow": 289, "check_dimens": 289, "introspectiveargumentpars": 289, "get_args_default": 289, "none_or_dtyp": 289, "combinedworkflow": 289, "patch2selfflow": 289, "nlmeansflow": 289, "lpcaflow": 289, "mppcaflow": 289, "gibbsringingflow": 289, "reader": 289, "numpydocstr": 289, "dedent_lin": 289, "get_level": 289, "run_flow": 289, "ioinfoflow": 289, "fetchflow": 289, "splitflow": 289, "maskflow": 289, "ioiter": 289, "common_start": 289, "slash_to_und": 289, "connect_output_path": 289, "concatenate_input": 289, "basename_without_extens": 289, "io_iter": 289, "io_iterator_": 289, "evacplusflow": 289, "reconstmapmriflow": 289, "reconstdtiflow": 289, "reconstcsdflow": 289, "reconstcsaflow": 289, "reconstdkiflow": 289, "reconstivimflow": 289, "reconstrumbaflow": 289, "medianotsuflow": 289, "recobundlesflow": 289, "labelsbundlesflow": 289, "snrinccflow": 289, "bundleanalysistractometryflow": 289, "linearmixedmodelsflow": 289, "bundleshapeanalysi": 289, "buan_bundle_profil": 289, "localfibertrackingpamflow": 289, "pftrackingpamflow": 289, "horizonflow": 289, "dipy_align_affin": 291, "argument": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "option": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "dipy_align_syn": 292, "dipy_apply_transform": 293, "dipy_buan_lmm": 294, "dipy_buan_profil": 295, "dipy_bundlewarp": 296, "dipy_correct_mot": 297, "dipy_denoise_lpca": 298, "dipy_denoise_mppca": 299, "dipy_denoise_nlmean": 300, "dipy_denoise_patch2self": 301, "dipy_evac_plu": 302, "dipy_fetch": 303, "dipy_fit_csa": 304, "dipy_fit_csd": 305, "dipy_fit_dki": 306, "dipy_fit_dti": 307, "dipy_fit_ivim": 308, "dipy_fit_mapmri": 309, "dipy_gibbs_ring": 310, "dipy_horizon": 311, "dipy_info": 312, "dipy_labelsbundl": 313, "dipy_mask": 314, "dipy_median_otsu": 315, "dipy_recobundl": 316, "dipy_reslic": 317, "dipy_slr": 318, "dipy_snr_in_cc": 319, "dipy_split": 320, "dipy_track": 321, "dipy_track_pft": 322, "subscrib": 345, "dii": 346, "siemen": [346, 347], "dicom": [346, 347], "generalis": 348, "concept": 349, "coordin": 351, "term": 351, "physic": 351, "convent": 351, "matlab": 351, "fetch_cti_rat1": 278}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"API changes": [[0, "api-changes"]], "DIPY 1.7.0 changes": [[0, "dipy-1-7-0-changes"]], "DIPY 1.6.0 changes": [[0, "dipy-1-6-0-changes"]], "DIPY 1.5.0 changes": [[0, "dipy-1-5-0-changes"]], "DIPY 1.4.1 changes": [[0, "dipy-1-4-1-changes"]], "DIPY 1.4.0 changes": [[0, "dipy-1-4-0-changes"]], "DIPY 1.3.0 changes": [[0, "dipy-1-3-0-changes"]], "DIPY 1.2.0 changes": [[0, "dipy-1-2-0-changes"]], "DIPY 1.1.1 changes": [[0, "dipy-1-1-1-changes"]], "DIPY 1.0.0 changes": [[0, "dipy-1-0-0-changes"]], "DIPY 0.16 Changes": [[0, "dipy-0-16-changes"]], "DIPY 0.15 Changes": [[0, "dipy-0-15-changes"]], "DIPY 0.14 Changes": [[0, "dipy-0-14-changes"]], "DIPY 0.13 Changes": [[0, "dipy-0-13-changes"]], "DIPY 0.12 Changes": [[0, "dipy-0-12-changes"]], "DIPY 0.10 Changes": [[0, "dipy-0-10-changes"]], "DIPY 0.9 Changes": [[0, "dipy-0-9-changes"]], "DIPY 0.8 Changes": [[0, "dipy-0-8-changes"]], "Changes between 0.7.1 and 0.6": [[0, "changes-between-0-7-1-and-0-6"]], "Crossing-preserving contextual enhancement": [[1, "crossing-preserving-contextual-enhancement"], [128, "crossing-preserving-contextual-enhancement"]], "References": [[1, "references"], [2, "references"], [5, "references"], [6, "references"], [7, "references"], [9, "references"], [10, "references"], [12, "references"], [13, "references"], [14, "references"], [15, "references"], [23, "references"], [24, "references"], [26, "references"], [27, "references"], [28, "references"], [29, "references"], [31, "references"], [32, "references"], [34, "references"], [37, "references"], [39, "references"], [40, "references"], [41, "references"], [42, "references"], [43, "references"], [47, "references"], [48, "references"], [49, "references"], [52, "references"], [53, "references"], [54, "references"], [56, "references"], [57, "references"], [58, "references"], [59, "references"], [61, "references"], [62, "references"], [63, "references"], [66, "references"], [67, "references"], [68, "references"], [71, "references"], [72, "references"], [73, "references"], [75, "references"], [76, "references"], [79, "references"], [80, "references"], [81, "references"], [85, "references"], [87, "references"], [88, "references"], [89, "references"], [90, "references"], [92, "references"], [96, "references"], [107, "references"], [128, "references"], [129, "references"], [132, "references"], [133, "references"], [134, "references"], [136, "references"], [137, "references"], [139, "references"], [140, "references"], [141, "references"], [142, "references"], [149, "references"], [150, "references"], [152, "references"], [153, "references"], [154, "references"], [155, "references"], [157, "references"], [158, "references"], [160, "references"], [163, "references"], [165, "references"], [166, "references"], [167, "references"], [168, "references"], [169, "references"], [173, "references"], [174, "references"], [175, "references"], [178, "references"], [179, "references"], [180, "references"], [182, "references"], [183, "references"], [184, "references"], [185, "references"], [187, "references"], [188, "references"], [189, "references"], [192, "references"], [193, "references"], [194, "references"], [197, "references"], [198, "references"], [199, "references"], [201, "references"], [202, "references"], [205, "references"], [206, "references"], [207, "references"], [211, "references"], [213, "references"], [214, "references"], [215, "references"], [216, "references"], [218, "references"], [222, "references"], [234, "references"], [236, "references"], [237, "references"], [239, "references"], [240, "references"], [242, "references"], [243, "references"], [244, "references"], [245, "references"], [275, "references"], [275, "id102"], [275, "id108"], [275, "id113"], [275, "id138"], [275, "id163"], [275, "id186"], [275, "id191"], [275, "id195"], [275, "id209"], [277, "references"], [277, "id17"], [277, "id52"], [277, "id76"], [277, "id90"], [277, "id114"], [278, "references"], [279, "references"], [279, "id5"], [279, "id11"], [279, "id23"], [279, "id30"], [279, "id35"], [279, "id39"], [279, "id47"], [279, "id52"], [279, "id56"], [280, "references"], [281, "references"], [282, "references"], [282, "id30"], [282, "id77"], [283, "references"], [283, "id94"], [283, "id105"], [283, "id117"], [283, "id125"], [283, "id148"], [283, "id153"], [283, "id161"], [283, "id168"], [283, "id181"], [283, "id199"], [283, "id210"], [283, "id217"], [283, "id225"], [283, "id231"], [283, "id237"], [283, "id255"], [283, "id268"], [283, "id280"], [283, "id289"], [283, "id293"], [283, "id298"], [283, "id302"], [283, "id313"], [283, "id319"], [283, "id324"], [283, "id328"], [283, "id331"], [283, "id335"], [283, "id339"], [283, "id343"], [283, "id347"], [283, "id352"], [283, "id357"], [283, "id364"], [283, "id380"], [283, "id403"], [283, "id414"], [283, "id425"], [283, "id434"], [283, "id441"], [283, "id478"], [283, "id491"], [283, "id497"], [283, "id503"], [283, "id513"], [283, "id520"], [283, "id528"], [283, "id557"], [283, "id576"], [283, "id581"], [283, "id593"], [283, "id598"], [283, "id604"], [283, "id617"], [283, "id626"], [283, "id638"], [283, "id666"], [283, "id687"], [283, "id698"], [283, "id703"], [283, "id708"], [283, "id713"], [283, "id717"], [283, "id721"], [283, "id725"], [283, "id730"], [283, "id735"], [283, "id740"], [283, "id745"], [283, "id750"], [283, "id755"], [283, "id760"], [283, "id765"], [283, "id769"], [283, "id773"], [283, "id777"], [283, "id781"], [283, "id785"], [283, "id789"], [283, "id793"], [283, "id797"], [283, "id801"], [283, "id808"], [283, "id816"], [283, "id822"], [283, "id827"], [283, "id832"], [283, "id839"], [283, "id844"], [283, "id849"], [283, "id854"], [283, "id859"], [283, "id866"], [283, "id874"], [283, "id899"], [283, "id902"], [283, "id909"], [283, "id917"], [283, "id925"], [283, "id932"], [283, "id940"], [283, "id946"], [283, "id959"], [283, "id963"], [283, "id967"], [283, "id973"], [283, "id979"], [283, "id984"], [283, "id989"], [283, "id995"], [283, "id1001"], [283, "id1005"], [283, "id1008"], [283, "id1014"], [283, "id1016"], [283, "id1018"], [283, "id1020"], [283, "id1022"], [283, "id1024"], [283, "id1026"], [283, "id1028"], [283, "id1030"], [283, "id1033"], [283, "id1036"], [283, "id1040"], [283, "id1046"], [283, "id1094"], [283, "id1156"], [283, "id1160"], [283, "id1165"], [283, "id1175"], [283, "id1195"], [283, "id1202"], [283, "id1209"], [283, "id1216"], [283, "id1228"], [283, "id1236"], [283, "id1247"], [283, "id1250"], [283, "id1255"], [283, "id1259"], [284, "references"], [284, "id13"], [284, "id19"], [284, "id23"], [284, "id26"], [284, "id30"], [284, "id34"], [284, "id67"], [284, "id74"], [284, "id80"], [284, "id85"], [284, "id109"], [285, "references"], [285, "id20"], [285, "id26"], [285, "id31"], [285, "id39"], [285, "id44"], [285, "id54"], [285, "id60"], [285, "id64"], [285, "id68"], [285, "id77"], [285, "id81"], [285, "id85"], [285, "id89"], [285, "id93"], [285, "id97"], [286, "references"], [286, "id7"], [287, "references"], [287, "id113"], [287, "id147"], [287, "id167"], [287, "id170"], [288, "references"], [288, "id3"], [289, "references"], [289, "id12"], [289, "id19"], [289, "id21"], [289, "id25"], [289, "id31"], [289, "id35"], [289, "id53"], [289, "id57"], [289, "id64"], [289, "id67"], [289, "id71"], [289, "id76"], [289, "id79"], [289, "id83"], [289, "id86"], [289, "id90"], [289, "id96"], [289, "id99"], [289, "id102"], [289, "id104"], [289, "id106"], [291, "references"], [292, "references"], [293, "references"], [294, "references"], [295, "references"], [296, "references"], [297, "references"], [298, "references"], [299, "references"], [300, "references"], [301, "references"], [302, "references"], [303, "references"], [304, "references"], [305, "references"], [306, "references"], [307, "references"], [308, "references"], [309, "references"], [310, "references"], [311, "references"], [312, "references"], [313, "references"], [314, "references"], [315, "references"], [316, "references"], [317, "references"], [318, "references"], [319, "references"], [320, "references"], [321, "references"], [322, "references"], [350, "references"]], "Fiber to bundle coherence measures": [[2, "fiber-to-bundle-coherence-measures"], [129, "fiber-to-bundle-coherence-measures"]], "Acknowledgments": [[2, "acknowledgments"], [129, "acknowledgments"]], "Contextual Enhancement": [[3, "contextual-enhancement"], [18, "contextual-enhancement"], [130, "contextual-enhancement"]], "Fiber Tracking": [[4, "fiber-tracking"], [18, "fiber-tracking"], [131, "fiber-tracking"]], "Linear fascicle evaluation (LiFE)": [[5, "linear-fascicle-evaluation-life"], [132, "linear-fascicle-evaluation-life"]], "Surface seeding for tractography": [[6, "surface-seeding-for-tractography"], [133, "surface-seeding-for-tractography"]], "Display the surface": [[6, "display-the-surface"], [133, "display-the-surface"]], "Generate a list of seeding positions": [[6, "generate-a-list-of-seeding-positions"], [133, "generate-a-list-of-seeding-positions"]], "Bootstrap and Closest Peak Direction Getters Example": [[7, "bootstrap-and-closest-peak-direction-getters-example"], [134, "bootstrap-and-closest-peak-direction-getters-example"]], "Example #1: Bootstrap direction getter with CSD Model": [[7, "example-1-bootstrap-direction-getter-with-csd-model"], [134, "example-1-bootstrap-direction-getter-with-csd-model"]], "Example #2: Closest peak direction getter with CSD Model": [[7, "example-2-closest-peak-direction-getter-with-csd-model"], [134, "example-2-closest-peak-direction-getter-with-csd-model"]], "An introduction to the Deterministic Maximum Direction Getter": [[8, "an-introduction-to-the-deterministic-maximum-direction-getter"], [135, "an-introduction-to-the-deterministic-maximum-direction-getter"]], "Introduction to Basic Tracking": [[9, "introduction-to-basic-tracking"], [37, "introduction-to-basic-tracking"], [136, "introduction-to-basic-tracking"], [163, "introduction-to-basic-tracking"]], "Particle Filtering Tractography": [[10, "particle-filtering-tractography"], [10, "id4"], [137, "particle-filtering-tractography"]], "CMC/ACT Stopping Criterion": [[10, "cmc-act-stopping-criterion"], [137, "cmc-act-stopping-criterion"]], "An introduction to the Probabilistic Direction Getter": [[11, "an-introduction-to-the-probabilistic-direction-getter"], [138, "an-introduction-to-the-probabilistic-direction-getter"]], "Parallel Transport Tractography": [[12, "parallel-transport-tractography"], [139, "parallel-transport-tractography"]], "Tracking with Robust Unbiased Model-BAsed Spherical Deconvolution (RUMBA-SD)": [[13, "tracking-with-robust-unbiased-model-based-spherical-deconvolution-rumba-sd"], [140, "tracking-with-robust-unbiased-model-based-spherical-deconvolution-rumba-sd"]], "Tracking with the Sparse Fascicle Model": [[14, "tracking-with-the-sparse-fascicle-model"], [141, "tracking-with-the-sparse-fascicle-model"]], "Using Various Stopping Criterion for Tractography": [[15, "using-various-stopping-criterion-for-tractography"], [142, "using-various-stopping-criterion-for-tractography"]], "Threshold Stopping Criterion": [[15, "threshold-stopping-criterion"], [142, "threshold-stopping-criterion"]], "Binary Stopping Criterion": [[15, "binary-stopping-criterion"], [142, "binary-stopping-criterion"]], "ACT Stopping Criterion": [[15, "act-stopping-criterion"], [142, "act-stopping-criterion"]], "Notes": [[15, "notes"], [142, "notes"], [275, "notes"], [275, "id8"], [275, "id11"], [275, "id16"], [275, "id43"], [275, "id63"], [275, "id71"], [275, "id74"], [275, "id77"], [275, "id142"], [275, "id144"], [275, "id148"], [275, "id152"], [275, "id156"], [275, "id160"], [275, "id170"], [275, "id181"], [275, "id189"], [277, "notes"], [277, "id28"], [277, "id47"], [277, "id55"], [277, "id64"], [277, "id68"], [277, "id72"], [277, "id85"], [277, "id89"], [277, "id142"], [277, "id148"], [277, "id153"], [277, "id158"], [277, "id163"], [278, "notes"], [278, "id15"], [278, "id19"], [278, "id43"], [278, "id48"], [278, "id51"], [278, "id67"], [278, "id71"], [279, "notes"], [279, "id38"], [279, "id44"], [280, "notes"], [281, "notes"], [281, "id23"], [281, "id66"], [281, "id69"], [283, "notes"], [283, "id93"], [283, "id121"], [283, "id124"], [283, "id146"], [283, "id152"], [283, "id157"], [283, "id160"], [283, "id177"], [283, "id197"], [283, "id206"], [283, "id216"], [283, "id221"], [283, "id251"], [283, "id264"], [283, "id278"], [283, "id297"], [283, "id301"], [283, "id317"], [283, "id322"], [283, "id326"], [283, "id333"], [283, "id337"], [283, "id341"], [283, "id345"], [283, "id350"], [283, "id362"], [283, "id398"], [283, "id400"], [283, "id413"], [283, "id421"], [283, "id424"], [283, "id428"], [283, "id433"], [283, "id437"], [283, "id440"], [283, "id444"], [283, "id447"], [283, "id458"], [283, "id461"], [283, "id464"], [283, "id467"], [283, "id470"], [283, "id476"], [283, "id484"], [283, "id490"], [283, "id496"], [283, "id502"], [283, "id506"], [283, "id512"], [283, "id519"], [283, "id532"], [283, "id539"], [283, "id544"], [283, "id561"], [283, "id607"], [283, "id615"], [283, "id632"], [283, "id637"], [283, "id643"], [283, "id889"], [283, "id892"], [283, "id895"], [283, "id907"], [283, "id915"], [283, "id923"], [283, "id930"], [283, "id938"], [283, "id1057"], [283, "id1059"], [283, "id1063"], [283, "id1065"], [283, "id1067"], [283, "id1069"], [283, "id1072"], [283, "id1075"], [283, "id1078"], [283, "id1081"], [283, "id1084"], [283, "id1087"], [283, "id1129"], [283, "id1145"], [284, "notes"], [284, "id38"], [284, "id43"], [284, "id79"], [284, "id84"], [284, "id99"], [285, "notes"], [285, "id12"], [285, "id17"], [285, "id52"], [285, "id58"], [286, "notes"], [287, "notes"], [287, "id5"], [287, "id7"], [287, "id19"], [287, "id25"], [287, "id73"], [287, "id105"], [287, "id107"], [287, "id121"], [287, "id124"], [287, "id131"], [287, "id162"], [288, "notes"], [289, "notes"]], "File Formats": [[16, "file-formats"], [18, "file-formats"], [143, "file-formats"]], "Read/Write streamline files": [[17, "read-write-streamline-files"], [144, "read-write-streamline-files"]], "Overview": [[17, "overview"], [31, "overview"], [33, "overview"], [109, "overview"], [110, "overview"], [115, "overview"], [120, "overview"], [121, "overview"], [144, "overview"], [157, "overview"], [159, "overview"]], "Examples": [[18, "examples"], [275, "examples"], [277, "examples"], [277, "id10"], [277, "id13"], [277, "id16"], [277, "id21"], [277, "id25"], [277, "id31"], [277, "id34"], [277, "id37"], [277, "id42"], [277, "id63"], [277, "id67"], [277, "id71"], [277, "id86"], [277, "id92"], [277, "id96"], [277, "id97"], [277, "id100"], [277, "id113"], [277, "id118"], [277, "id121"], [277, "id124"], [277, "id149"], [277, "id154"], [277, "id159"], [277, "id164"], [277, "id171"], [277, "id174"], [278, "examples"], [278, "id7"], [278, "id10"], [278, "id28"], [278, "id42"], [281, "examples"], [281, "id17"], [281, "id21"], [283, "examples"], [283, "id91"], [283, "id533"], [283, "id540"], [283, "id545"], [283, "id610"], [283, "id694"], [283, "id1142"], [285, "examples"], [285, "id9"], [285, "id13"], [285, "id23"], [285, "id49"], [285, "id53"], [285, "id74"], [287, "examples"], [287, "id4"], [287, "id18"], [287, "id49"], [287, "id54"], [287, "id59"], [287, "id62"], [287, "id67"], [287, "id70"], [287, "id76"], [287, "id80"], [287, "id83"], [287, "id86"], [287, "id89"], [287, "id92"], [287, "id110"], [287, "id116"], [287, "id128"], [287, "id132"], [287, "id136"], [287, "id140"], [288, "examples"]], "Contents": [[18, "contents"], [104, "contents"]], "Quick Start": [[18, "quick-start"], [35, "quick-start"], [161, "quick-start"]], "Preprocessing": [[18, "preprocessing"], [30, "preprocessing"], [156, "preprocessing"]], "Reconstruction": [[18, "reconstruction"], [38, "reconstruction"], [164, "reconstruction"], [243, "reconstruction"]], "Streamlines Analysis and Connectivity": [[18, "streamlines-analysis-and-connectivity"], [91, "streamlines-analysis-and-connectivity"], [217, "streamlines-analysis-and-connectivity"]], "Registration": [[18, "registration"], [69, "registration"], [195, "registration"], [244, "registration"]], "Segmentation": [[18, "segmentation"], [77, "segmentation"], [203, "segmentation"]], "Simulation": [[18, "simulation"], [83, "simulation"], [209, "simulation"]], "Multiprocessing": [[18, "multiprocessing"], [19, "multiprocessing"], [145, "multiprocessing"]], "Visualization": [[18, "visualization"], [95, "visualization"], [221, "visualization"]], "Workflows": [[18, "workflows"], [101, "workflows"], [227, "workflows"]], "Parallel reconstruction using Q-Ball": [[20, "parallel-reconstruction-using-q-ball"], [146, "parallel-reconstruction-using-q-ball"]], "Parallel reconstruction using CSD": [[21, "parallel-reconstruction-using-csd"], [147, "parallel-reconstruction-using-csd"]], "Brain segmentation with median_otsu": [[22, "brain-segmentation-with-median-otsu"], [74, "brain-segmentation-with-median-otsu"], [148, "brain-segmentation-with-median-otsu"], [200, "brain-segmentation-with-median-otsu"]], "Denoise images using Adaptive Soft Coefficient Matching (ASCM)": [[23, "denoise-images-using-adaptive-soft-coefficient-matching-ascm"], [149, "denoise-images-using-adaptive-soft-coefficient-matching-ascm"]], "Suppress Gibbs oscillations": [[24, "suppress-gibbs-oscillations"], [150, "suppress-gibbs-oscillations"]], "Denoise images using Local PCA via empirical thresholds": [[25, "denoise-images-using-local-pca-via-empirical-thresholds"], [151, "denoise-images-using-local-pca-via-empirical-thresholds"]], "Estimate the noise standard deviation": [[25, "estimate-the-noise-standard-deviation"], [151, "estimate-the-noise-standard-deviation"]], "Perform the localPCA using the function localpca": [[25, "perform-the-localpca-using-the-function-localpca"], [151, "perform-the-localpca-using-the-function-localpca"]], "Denoise images using the Marcenko-Pastur PCA algorithm": [[26, "denoise-images-using-the-marcenko-pastur-pca-algorithm"], [152, "denoise-images-using-the-marcenko-pastur-pca-algorithm"]], "Noise standard deviation estimation using the Marcenko-Pastur PCA algorithm": [[26, "noise-standard-deviation-estimation-using-the-marcenko-pastur-pca-algorithm"], [152, "noise-standard-deviation-estimation-using-the-marcenko-pastur-pca-algorithm"]], "Denoise images using Non-Local Means (NLMEANS)": [[27, "denoise-images-using-non-local-means-nlmeans"], [153, "denoise-images-using-non-local-means-nlmeans"]], "Patch2Self: Self-Supervised Denoising via Statistical Independence": [[28, "patch2self-self-supervised-denoising-via-statistical-independence"], [154, "patch2self-self-supervised-denoising-via-statistical-independence"]], "Gradients and Spheres": [[29, "gradients-and-spheres"], [155, "gradients-and-spheres"]], "Between-volumes Motion Correction on DWI datasets": [[31, "between-volumes-motion-correction-on-dwi-datasets"], [157, "between-volumes-motion-correction-on-dwi-datasets"]], "Noise estimation using PIESNO": [[32, "noise-estimation-using-piesno"], [158, "noise-estimation-using-piesno"]], "Reslice diffusion datasets": [[33, "reslice-diffusion-datasets"], [159, "reslice-diffusion-datasets"]], "SNR estimation for Diffusion-Weighted Images": [[34, "snr-estimation-for-diffusion-weighted-images"], [160, "snr-estimation-for-diffusion-weighted-images"]], "SNR for the b=0 image is : \u2018\u201942.0695455758\u2019\u2019": [[34, "snr-for-the-b-0-image-is-42-0695455758"], [160, "snr-for-the-b-0-image-is-42-0695455758"]], "SNR for direction 57  [-0.05039  0.99871  0.0054406] is : \u2018\u201923.9329492871\u2019\u2019": [[34, "snr-for-direction-57-0-05039-0-99871-0-0054406-is-23-9329492871"], [160, "snr-for-direction-57-0-05039-0-99871-0-0054406-is-23-9329492871"]], "Getting started with DIPY": [[36, "getting-started-with-dipy"], [162, "getting-started-with-dipy"]], "K-fold cross-validation for model comparison": [[39, "k-fold-cross-validation-for-model-comparison"], [165, "k-fold-cross-validation-for-model-comparison"]], "Reconstruct with Constant Solid Angle (Q-Ball)": [[40, "reconstruct-with-constant-solid-angle-q-ball"], [166, "reconstruct-with-constant-solid-angle-q-ball"]], "Reconstruction with Constrained Spherical Deconvolution": [[41, "reconstruction-with-constrained-spherical-deconvolution"], [167, "reconstruction-with-constrained-spherical-deconvolution"]], "Step 1. Estimation of the fiber response function": [[41, "step-1-estimation-of-the-fiber-response-function"], [58, "step-1-estimation-of-the-fiber-response-function"], [167, "step-1-estimation-of-the-fiber-response-function"], [184, "step-1-estimation-of-the-fiber-response-function"]], "Step 2. fODF reconstruction": [[41, "step-2-fodf-reconstruction"], [167, "step-2-fodf-reconstruction"]], "Reconstruction of the diffusion signal with the kurtosis tensor model": [[42, "reconstruction-of-the-diffusion-signal-with-the-kurtosis-tensor-model"], [168, "reconstruction-of-the-diffusion-signal-with-the-kurtosis-tensor-model"]], "Constrained optimization for DKI": [[42, "constrained-optimization-for-dki"], [168, "constrained-optimization-for-dki"]], "Mean kurtosis tensor and kurtosis fractional anisotropy": [[42, "mean-kurtosis-tensor-and-kurtosis-fractional-anisotropy"], [168, "mean-kurtosis-tensor-and-kurtosis-fractional-anisotropy"]], "Reconstruction of the diffusion signal with the WMTI model": [[43, "reconstruction-of-the-diffusion-signal-with-the-wmti-model"], [169, "reconstruction-of-the-diffusion-signal-with-the-wmti-model"]], "Reconstruct with Diffusion Spectrum Imaging": [[44, "reconstruct-with-diffusion-spectrum-imaging"], [170, "reconstruct-with-diffusion-spectrum-imaging"]], "Calculate DSI-based scalar maps": [[45, "calculate-dsi-based-scalar-maps"], [171, "calculate-dsi-based-scalar-maps"]], "DSI Deconvolution vs DSI": [[46, "dsi-deconvolution-vs-dsi"], [84, "dsi-deconvolution-vs-dsi"], [172, "dsi-deconvolution-vs-dsi"], [210, "dsi-deconvolution-vs-dsi"]], "Reconstruction of the diffusion signal with the Tensor model": [[47, "reconstruction-of-the-diffusion-signal-with-the-tensor-model"], [173, "reconstruction-of-the-diffusion-signal-with-the-tensor-model"]], "Crossing invariant fiber response function with FORECAST model": [[48, "crossing-invariant-fiber-response-function-with-forecast-model"], [174, "crossing-invariant-fiber-response-function-with-forecast-model"]], "Using the free water elimination model to remove DTI free water contamination": [[49, "using-the-free-water-elimination-model-to-remove-dti-free-water-contamination"], [175, "using-the-free-water-elimination-model-to-remove-dti-free-water-contamination"]], "Reconstruct with Generalized Q-Sampling Imaging": [[50, "reconstruct-with-generalized-q-sampling-imaging"], [176, "reconstruct-with-generalized-q-sampling-imaging"]], "Intravoxel incoherent motion": [[51, "intravoxel-incoherent-motion"], [177, "intravoxel-incoherent-motion"]], "Continuous and analytical diffusion signal modelling with MAP-MRI": [[52, "continuous-and-analytical-diffusion-signal-modelling-with-map-mri"], [178, "continuous-and-analytical-diffusion-signal-modelling-with-map-mri"]], "Reconstruction with Multi-Shell Multi-Tissue CSD": [[53, "reconstruction-with-multi-shell-multi-tissue-csd"], [179, "reconstruction-with-multi-shell-multi-tissue-csd"]], "Mean signal diffusion kurtosis imaging (MSDKI)": [[54, "mean-signal-diffusion-kurtosis-imaging-msdki"], [180, "mean-signal-diffusion-kurtosis-imaging-msdki"]], "Testing MSDKI in synthetic data": [[54, "testing-msdki-in-synthetic-data"], [180, "testing-msdki-in-synthetic-data"]], "Reconstructing diffusion data using MSDKI": [[54, "reconstructing-diffusion-data-using-msdki"], [180, "reconstructing-diffusion-data-using-msdki"]], "Relationship between MSDKI and SMT2": [[54, "relationship-between-msdki-and-smt2"], [180, "relationship-between-msdki-and-smt2"]], "Estimating diffusion time dependent q-space indices using qt-dMRI": [[55, "estimating-diffusion-time-dependent-q-space-indices-using-qt-dmri"], [181, "estimating-diffusion-time-dependent-q-space-indices-using-qt-dmri"]], "Reconstruct with Q-space Trajectory Imaging (QTI)": [[56, "reconstruct-with-q-space-trajectory-imaging-qti"], [182, "reconstruct-with-q-space-trajectory-imaging-qti"]], "Theory": [[56, "theory"], [57, "theory"], [182, "theory"], [183, "theory"]], "Usage example": [[56, "usage-example"], [57, "usage-example"], [182, "usage-example"], [183, "usage-example"]], "Applying positivity constraints to Q-space Trajectory Imaging (QTI+)": [[57, "applying-positivity-constraints-to-q-space-trajectory-imaging-qti"], [183, "applying-positivity-constraints-to-q-space-trajectory-imaging-qti"]], "Installation": [[57, "installation"], [183, "installation"], [233, "installation"]], "Reconstruction with Robust and Unbiased Model-BAsed Spherical Deconvolution": [[58, "reconstruction-with-robust-and-unbiased-model-based-spherical-deconvolution"], [184, "reconstruction-with-robust-and-unbiased-model-based-spherical-deconvolution"]], "Step 2. fODF Reconstruction": [[58, "step-2-fodf-reconstruction"], [184, "step-2-fodf-reconstruction"]], "Reconstruction with the Sparse Fascicle Model": [[59, "reconstruction-with-the-sparse-fascicle-model"], [185, "reconstruction-with-the-sparse-fascicle-model"]], "Signal Reconstruction Using Spherical Harmonics": [[60, "signal-reconstruction-using-spherical-harmonics"], [186, "signal-reconstruction-using-spherical-harmonics"]], "Continuous and analytical diffusion signal modelling with 3D-SHORE": [[61, "continuous-and-analytical-diffusion-signal-modelling-with-3d-shore"], [187, "continuous-and-analytical-diffusion-signal-modelling-with-3d-shore"]], "Calculate SHORE scalar maps": [[62, "calculate-shore-scalar-maps"], [188, "calculate-shore-scalar-maps"]], "Using the RESTORE algorithm for robust tensor fitting": [[63, "using-the-restore-algorithm-for-robust-tensor-fitting"], [189, "using-the-restore-algorithm-for-robust-tensor-fitting"]], "Affine Registration in 3D": [[64, "affine-registration-in-3d"], [190, "affine-registration-in-3d"]], "Affine Registration with Masks": [[65, "affine-registration-with-masks"], [191, "affine-registration-with-masks"]], "Groupwise Bundle Registration": [[66, "groupwise-bundle-registration"], [192, "groupwise-bundle-registration"]], "How it works": [[66, "how-it-works"], [192, "how-it-works"]], "Example": [[66, "example"], [192, "example"]], "Extended capabilities": [[66, "extended-capabilities"], [192, "extended-capabilities"]], "Direct Bundle Registration": [[67, "direct-bundle-registration"], [193, "direct-bundle-registration"]], "Nonrigid Bundle Registration with BundleWarp": [[68, "nonrigid-bundle-registration-with-bundlewarp"], [194, "nonrigid-bundle-registration-with-bundlewarp"]], "Diffeomorphic Registration with binary and fuzzy images": [[70, "diffeomorphic-registration-with-binary-and-fuzzy-images"], [196, "diffeomorphic-registration-with-binary-and-fuzzy-images"]], "Applying image-based deformations to streamlines": [[71, "applying-image-based-deformations-to-streamlines"], [197, "applying-image-based-deformations-to-streamlines"]], "Symmetric Diffeomorphic Registration in 2D": [[72, "symmetric-diffeomorphic-registration-in-2d"], [198, "symmetric-diffeomorphic-registration-in-2d"]], "Symmetric Diffeomorphic Registration in 3D": [[73, "symmetric-diffeomorphic-registration-in-3d"], [199, "symmetric-diffeomorphic-registration-in-3d"]], "Automatic Fiber Bundle Extraction with RecoBundles": [[75, "automatic-fiber-bundle-extraction-with-recobundles"], [201, "automatic-fiber-bundle-extraction-with-recobundles"]], "Fast Streamline Search": [[76, "fast-streamline-search"], [202, "fast-streamline-search"]], "Tractography Clustering - Available Features": [[78, "tractography-clustering-available-features"], [204, "tractography-clustering-available-features"]], "Available Features": [[78, "available-features"], [204, "available-features"]], "Identity Feature": [[78, "clustering-examples-identityfeature"], [204, "clustering-examples-identityfeature"]], "Resample Feature": [[78, "resample-feature"], [204, "resample-feature"]], "Center of Mass Feature": [[78, "center-of-mass-feature"], [204, "center-of-mass-feature"]], "Midpoint Feature": [[78, "midpoint-feature"], [204, "midpoint-feature"]], "ArcLength Feature": [[78, "arclength-feature"], [204, "arclength-feature"]], "Vector Between Endpoints Feature": [[78, "vector-between-endpoints-feature"], [204, "vector-between-endpoints-feature"]], "Tractography Clustering - Available Metrics": [[79, "tractography-clustering-available-metrics"], [205, "tractography-clustering-available-metrics"]], "Available Metrics": [[79, "available-metrics"], [205, "available-metrics"]], "Average of Pointwise Euclidean Metric": [[79, "average-of-pointwise-euclidean-metric"], [205, "average-of-pointwise-euclidean-metric"]], "Sum of Pointwise Euclidean Metric": [[79, "sum-of-pointwise-euclidean-metric"], [205, "sum-of-pointwise-euclidean-metric"]], "Cosine Metric": [[79, "cosine-metric"], [205, "cosine-metric"]], "Enhancing QuickBundles with different metrics and features": [[80, "enhancing-quickbundles-with-different-metrics-and-features"], [206, "enhancing-quickbundles-with-different-metrics-and-features"]], "Clustering framework": [[80, "clustering-framework"], [206, "clustering-framework"]], "Extending Feature": [[80, "extending-feature"], [206, "extending-feature"]], "Extending Metric": [[80, "extending-metric"], [206, "extending-metric"]], "Tractography Clustering with QuickBundles": [[81, "tractography-clustering-with-quickbundles"], [207, "tractography-clustering-with-quickbundles"]], "Tissue Classification of a T1-weighted Structural Image": [[82, "tissue-classification-of-a-t1-weighted-structural-image"], [208, "tissue-classification-of-a-t1-weighted-structural-image"]], "DKI MultiTensor Simulation": [[85, "dki-multitensor-simulation"], [211, "dki-multitensor-simulation"]], "MultiTensor Simulation": [[86, "multitensor-simulation"], [212, "multitensor-simulation"]], "Extracting AFQ tract profiles from segmented bundles": [[87, "extracting-afq-tract-profiles-from-segmented-bundles"], [213, "extracting-afq-tract-profiles-from-segmented-bundles"]], "BUAN Bundle Assignment Maps Creation": [[88, "buan-bundle-assignment-maps-creation"], [214, "buan-bundle-assignment-maps-creation"]], "BUAN Bundle Shape Similarity Score": [[89, "buan-bundle-shape-similarity-score"], [215, "buan-bundle-shape-similarity-score"]], "Calculation of Outliers with Cluster Confidence Index": [[90, "calculation-of-outliers-with-cluster-confidence-index"], [216, "calculation-of-outliers-with-cluster-confidence-index"]], "Calculate Path Length Map": [[92, "calculate-path-length-map"], [218, "calculate-path-length-map"]], "Streamline length and size reduction": [[93, "streamline-length-and-size-reduction"], [219, "streamline-length-and-size-reduction"]], "Connectivity Matrices, ROI Intersections and Density Maps": [[94, "connectivity-matrices-roi-intersections-and-density-maps"], [220, "connectivity-matrices-roi-intersections-and-density-maps"]], "Advanced interactive visualization": [[96, "advanced-interactive-visualization"], [222, "advanced-interactive-visualization"]], "Visualize bundles and metrics on bundles": [[97, "visualize-bundles-and-metrics-on-bundles"], [223, "visualize-bundles-and-metrics-on-bundles"]], "Show every streamline with an orientation color": [[97, "show-every-streamline-with-an-orientation-color"], [223, "show-every-streamline-with-an-orientation-color"]], "Show every point with a value from a volume with default colormap": [[97, "show-every-point-with-a-value-from-a-volume-with-default-colormap"], [223, "show-every-point-with-a-value-from-a-volume-with-default-colormap"]], "Show every point with a value from a volume with your colormap": [[97, "show-every-point-with-a-value-from-a-volume-with-your-colormap"], [223, "show-every-point-with-a-value-from-a-volume-with-your-colormap"]], "Show every bundle with a specific color": [[97, "show-every-bundle-with-a-specific-color"], [223, "show-every-bundle-with-a-specific-color"]], "Show every streamline of a bundle with a different color": [[97, "show-every-streamline-of-a-bundle-with-a-different-color"], [223, "show-every-streamline-of-a-bundle-with-a-different-color"]], "Show every point of every streamline with a different color": [[97, "show-every-point-of-every-streamline-with-a-different-color"], [223, "show-every-point-of-every-streamline-with-a-different-color"]], "Visualization of ROI Surface Rendered with Streamlines": [[98, "visualization-of-roi-surface-rendered-with-streamlines"], [224, "visualization-of-roi-surface-rendered-with-streamlines"]], "Simple volume slicing": [[99, "simple-volume-slicing"], [225, "simple-volume-slicing"]], "Render slices from T1 with a specific value range": [[99, "render-slices-from-t1-with-a-specific-value-range"], [225, "render-slices-from-t1-with-a-specific-value-range"]], "Render slices from FA with your colormap": [[99, "render-slices-from-fa-with-your-colormap"], [225, "render-slices-from-fa-with-your-colormap"]], "Create a mosaic": [[99, "create-a-mosaic"], [225, "create-a-mosaic"]], "Creating a new combined workflow": [[100, "creating-a-new-combined-workflow"], [226, "creating-a-new-combined-workflow"]], "Creating a new workflow.": [[102, "creating-a-new-workflow"], [228, "creating-a-new-workflow"]], "Publications": [[103, "publications"]], "A note on citing our work": [[103, "a-note-on-citing-our-work"]], "Data": [[104, "data"]], "Datasets": [[104, "datasets"]], "Dependencies": [[106, "dependencies"]], "DIPY Coding Style Guideline": [[107, "dipy-coding-style-guideline"]], "Coding style": [[107, "coding-style"]], "Imports": [[107, "imports"], [107, "id1"]], "Cython coding style": [[107, "cython-coding-style"]], "Variable declaration": [[107, "variable-declaration"]], "Using C libraries": [[107, "using-c-libraries"]], "Error return values": [[107, "error-return-values"]], "Pointers and references": [[107, "pointers-and-references"]], "Casting": [[107, "casting"]], "Loops": [[107, "loops"]], "Documentation": [[107, "documentation"], [127, "documentation"]], "Commit message codes": [[108, "commit-message-codes"]], "Configure git": [[109, "configure-git"]], "In detail": [[109, "in-detail"], [115, "in-detail"], [120, "in-detail"], [121, "in-detail"]], "user.name and user.email": [[109, "user-name-and-user-email"]], "Aliases": [[109, "aliases"]], "Editor": [[109, "editor"]], "Merging": [[109, "merging"]], "Fancy log output": [[109, "fancy-log-output"]], "Development workflow": [[110, "development-workflow"]], "Workflow summary": [[110, "workflow-summary"]], "Consider deleting your master branch": [[110, "consider-deleting-your-master-branch"]], "Update the mirror of trunk": [[110, "update-the-mirror-of-trunk"]], "Make a new feature branch": [[110, "make-a-new-feature-branch"]], "The editing workflow": [[110, "the-editing-workflow"]], "In more detail": [[110, "in-more-detail"]], "Ask for your changes to be reviewed or merged": [[110, "ask-for-your-changes-to-be-reviewed-or-merged"]], "Some other things you might want to do": [[110, "some-other-things-you-might-want-to-do"]], "Delete a branch on github": [[110, "delete-a-branch-on-github"]], "Several people sharing a single repository": [[110, "several-people-sharing-a-single-repository"]], "Explore your repository": [[110, "explore-your-repository"]], "Rebasing on trunk": [[110, "rebasing-on-trunk"]], "Recovering from mess-ups": [[110, "recovering-from-mess-ups"]], "Rewriting commit history": [[110, "rewriting-commit-history"]], "Two and three dots in difference specs": [[111, "two-and-three-dots-in-difference-specs"]], "Following the latest source": [[112, "following-the-latest-source"]], "Get the local copy of the code": [[112, "get-the-local-copy-of-the-code"]], "Updating the code": [[112, "updating-the-code"]], "Making your own copy (fork) of DIPY": [[113, "making-your-own-copy-fork-of-dipy"]], "Set up and configure a github account": [[113, "set-up-and-configure-a-github-account"]], "Create your own forked copy of DIPY": [[113, "create-your-own-forked-copy-of-dipy"]], "Git for development": [[114, "git-for-development"]], "Install git": [[115, "install-git"]], "Introduction": [[116, "introduction"], [123, "introduction"]], "git resources": [[117, "git-resources"]], "Tutorials and summaries": [[117, "tutorials-and-summaries"]], "Advanced git workflow": [[117, "advanced-git-workflow"]], "Manual pages online": [[117, "manual-pages-online"]], "Working with DIPY source code": [[118, "working-with-dipy-source-code"]], "Maintainer workflow": [[119, "maintainer-workflow"]], "Integrating changes": [[119, "integrating-changes"]], "A few commits": [[119, "a-few-commits"]], "A long series of commits": [[119, "a-long-series-of-commits"]], "Check the history": [[119, "check-the-history"]], "Push to trunk": [[119, "push-to-trunk"]], "Making a patch": [[120, "making-a-patch"]], "Making patches": [[120, "making-patches"]], "Moving from patching to development": [[120, "moving-from-patching-to-development"]], "Set up your fork": [[121, "set-up-your-fork"]], "Clone your fork": [[121, "clone-your-fork"]], "Linking your repository to the upstream repo": [[121, "linking-your-repository-to-the-upstream-repo"]], "DIPY development": [[122, "dipy-development"]], "A guide to making a DIPY release": [[124, "a-guide-to-making-a-dipy-release"]], "Release checklist": [[124, "release-checklist"]], "Doing the release": [[124, "doing-the-release"]], "Uploading binary builds for the release": [[124, "uploading-binary-builds-for-the-release"]], "Other stuff that needs doing for the release": [[124, "other-stuff-that-needs-doing-for-the-release"]], "Keeping code compatible with Pythons 2 and 3": [[125, "keeping-code-compatible-with-pythons-2-and-3"]], "Future imports": [[125, "future-imports"]], "Print": [[125, "print"]], "Division": [[125, "division"]], "Moved modules": [[125, "moved-modules"]], "Range, xrange": [[125, "range-xrange"]], "Reduce": [[125, "reduce"]], "Strings": [[125, "strings"]], "Next function": [[125, "next-function"]], "Except": [[125, "except"]], "Dictionaries": [[125, "dictionaries"]], "Developers": [[126, "developers"]], "Frequently Asked Questions": [[229, "frequently-asked-questions"]], "Theoretical": [[229, "theoretical"]], "Practical": [[229, "practical"]], "Gimbal lock": [[230, "gimbal-lock"]], "Mathematics of gimbal lock": [[230, "mathematics-of-gimbal-lock"]], "Glossary": [[231, "glossary"]], "Diffusion Imaging In Python": [[232, "diffusion-imaging-in-python"]], "Highlights": [[232, "highlights"]], "Announcements": [[232, "announcements"]], "Getting Started": [[232, "getting-started"]], "Next Steps": [[232, "next-steps"]], "Support": [[232, "support"], [233, "support"]], "Installing a release": [[233, "installing-a-release"]], "Using Anaconda:": [[233, "using-anaconda"]], "Using packages:": [[233, "using-packages"]], "Windows": [[233, "windows"], [233, "id2"]], "OSX": [[233, "osx"], [233, "id3"]], "Linux": [[233, "linux"]], "Using pip:": [[233, "using-pip"]], "Contact us:": [[233, "contact-us"]], "Common problems:": [[233, "common-problems"]], "Multiple installations": [[233, "multiple-installations"]], "Alternatives to Anaconda": [[233, "alternatives-to-anaconda"]], "Memory issues": [[233, "memory-issues"]], "Note on python versions": [[233, "note-on-python-versions"]], "Installing from source": [[233, "installing-from-source"]], "Getting the source": [[233, "getting-the-source"]], "Building and installing": [[233, "building-and-installing"], [233, "id4"]], "Install from source (all operating systems)": [[233, "install-from-source-all-operating-systems"]], "Install from source for Unix (e.g Linux, OSX)": [[233, "install-from-source-for-unix-e-g-linux-osx"]], "Ubuntu/Debian": [[233, "ubuntu-debian"]], "Fedora / Mandriva maybe Redhat": [[233, "fedora-mandriva-maybe-redhat"]], "OpenMP with OSX": [[233, "openmp-with-osx"]], "Under Anaconda": [[233, "under-anaconda"]], "Under Homebrew Python or python.org Python": [[233, "under-homebrew-python-or-python-org-python"]], "Testing": [[233, "testing"]], "Documentation (Unix only)": [[233, "documentation-unix-only"]], "Tip": [[233, "tip"]], "Troubleshooting": [[233, "troubleshooting"]], "Introduction to command line interfaces": [[234, "introduction-to-command-line-interfaces"]], "BUndle ANalytics (BUAN) framework": [[235, "bundle-analytics-buan-framework"]], "Group Comparison of Bundle Profiles": [[235, "group-comparison-of-bundle-profiles"]], "Shape similarity of specific bundles across the populations": [[235, "shape-similarity-of-specific-bundles-across-the-populations"]], "Reproducing results on larger dataset:": [[235, "reproducing-results-on-larger-dataset"]], "White Matter Bundle Segmentation with RecoBundles": [[236, "white-matter-bundle-segmentation-with-recobundles"]], "Streamline-Based Linear Registration": [[236, "streamline-based-linear-registration"]], "RecoBundles": [[236, "recobundles"], [284, "recobundles"]], "Nonrigid White Matter Bundle Registration with BundleWarp": [[237, "nonrigid-white-matter-bundle-registration-with-bundlewarp"]], "Partially Deformable BundleWarp Registration": [[237, "partially-deformable-bundlewarp-registration"]], "Fully Deformable BundleWarp Registration": [[237, "fully-deformable-bundlewarp-registration"]], "Downloading DIPY datasets": [[238, "downloading-dipy-datasets"]], "Denoising": [[239, "denoising"]], "Denoising using Overcomplete Local PCA": [[239, "denoising-using-overcomplete-local-pca"]], "Denoising using Marcenko-Pastur PCA": [[239, "denoising-using-marcenko-pastur-pca"]], "Denoising using NLMEANS": [[239, "denoising-using-nlmeans"]], "Overview of Denoising Methods": [[239, "overview-of-denoising-methods"]], "Diffusion": [[239, "diffusion"]], "Structural": [[239, "structural"]], "Gibbs Unringing": [[240, "gibbs-unringing"]], "Suppress Gibbs Oscillations": [[240, "suppress-gibbs-oscillations"]], "DIPY Workflows Interfaces": [[241, "dipy-workflows-interfaces"]], "Between-Volumes Motion Correction": [[242, "between-volumes-motion-correction"]], "Motion Correction": [[242, "motion-correction"]], "Constrained Spherical Deconvolution (CSD)": [[243, "constrained-spherical-deconvolution-csd"]], "Mean Apparent Propagator (MAP)-MRI": [[243, "mean-apparent-propagator-map-mri"]], "Diffusion Tensor Imaging (DTI)": [[243, "diffusion-tensor-imaging-dti"]], "Diffusion Kurtosis Imaging (DKI)": [[243, "diffusion-kurtosis-imaging-dki"]], "Constant Solid Angle (CSA)": [[243, "constant-solid-angle-csa"]], "Intravoxel Incoherent Motion (IVIM)": [[243, "intravoxel-incoherent-motion-ivim"]], "Image Registration": [[244, "image-registration"]], "Symmetric Diffeomorphic Registration": [[244, "symmetric-diffeomorphic-registration"]], "Apply a Transformation": [[244, "apply-a-transformation"]], "Streamline-based Registration": [[244, "streamline-based-registration"]], "Tracking": [[245, "tracking"]], "Local Fiber Tracking": [[245, "local-fiber-tracking"]], "EuDX Tracking": [[245, "eudx-tracking"]], "Deterministic Tracking": [[245, "deterministic-tracking"]], "Probabilistic Tracking": [[245, "probabilistic-tracking"]], "Closest Peaks Tracking": [[245, "closest-peaks-tracking"]], "Particle Filtering Tracking (PFT)": [[245, "particle-filtering-tracking-pft"]], "Overview of Fiber Tracking Methods": [[245, "overview-of-fiber-tracking-methods"]], "What is DIPY?": [[246, "what-is-dipy"]], "Mission statement": [[247, "mission-statement"]], "A note about the examples": [[248, "a-note-about-the-examples"]], "Older Highlights": [[249, "older-highlights"]], "Past Announcements": [[250, "past-announcements"]], "Journey of GSOC application & acceptance : Week 0": [[251, "journey-of-gsoc-application-acceptance-week-0"]], "Community Bonding and Week 1 Insights": [[252, "community-bonding-and-week-1-insights"]], "About Myself": [[252, "about-myself"]], "Intro to Open-Source and GSoC": [[252, "intro-to-open-source-and-gsoc"]], "The Day": [[252, "the-day"]], "What I did this week": [[252, "what-i-did-this-week"], [253, "what-i-did-this-week"], [254, "what-i-did-this-week"], [255, "what-i-did-this-week"], [256, "what-i-did-this-week"], [258, "what-i-did-this-week"], [259, "what-i-did-this-week"], [260, "what-i-did-this-week"], [262, "what-i-did-this-week"], [263, "what-i-did-this-week"], [264, "what-i-did-this-week"], [265, "what-i-did-this-week"], [266, "what-i-did-this-week"], [267, "what-i-did-this-week"], [268, "what-i-did-this-week"], [269, "what-i-did-this-week"], [270, "what-i-did-this-week"], [271, "what-i-did-this-week"], [272, "what-i-did-this-week"]], "What is coming up next Week": [[252, "what-is-coming-up-next-week"], [258, "what-is-coming-up-next-week"], [261, "what-is-coming-up-next-week"], [272, "what-is-coming-up-next-week"]], "Did I get stuck anywhere": [[252, "did-i-get-stuck-anywhere"], [254, "did-i-get-stuck-anywhere"], [255, "did-i-get-stuck-anywhere"], [257, "did-i-get-stuck-anywhere"], [258, "did-i-get-stuck-anywhere"], [260, "did-i-get-stuck-anywhere"], [262, "did-i-get-stuck-anywhere"], [264, "did-i-get-stuck-anywhere"], [265, "did-i-get-stuck-anywhere"], [268, "did-i-get-stuck-anywhere"], [269, "did-i-get-stuck-anywhere"], [271, "did-i-get-stuck-anywhere"]], "Community bonding and Project kickstart : Week 1": [[253, "community-bonding-and-project-kickstart-week-1"]], "Signal Creation & Paper Research: Week2 Discoveries": [[254, "signal-creation-paper-research-week2-discoveries"]], "What Is coming up next week": [[254, "what-is-coming-up-next-week"], [255, "what-is-coming-up-next-week"], [259, "what-is-coming-up-next-week"], [260, "what-is-coming-up-next-week"], [262, "what-is-coming-up-next-week"], [263, "what-is-coming-up-next-week"], [268, "what-is-coming-up-next-week"]], "Deep Dive into VQ-VAE : Week 2": [[255, "deep-dive-into-vq-vae-week-2"]], "VQ-VAE results and study on Diffusion models : Week 3": [[256, "vq-vae-results-and-study-on-diffusion-models-week-3"]], "What is coming up next week": [[256, "what-is-coming-up-next-week"], [264, "what-is-coming-up-next-week"], [265, "what-is-coming-up-next-week"], [269, "what-is-coming-up-next-week"], [271, "what-is-coming-up-next-week"]], "CTI Simulation and QTI tutorial : Week 3": [[257, "cti-simulation-and-qti-tutorial-week-3"]], "What I did this week:": [[257, "what-i-did-this-week"]], "What Is coming up next week:": [[257, "what-is-coming-up-next-week"]], "Re-Engineering Simulation Codes with the QTI Model and Design Matrix": [[258, "re-engineering-simulation-codes-with-the-qti-model-and-design-matrix"]], "Diffusion research continues: Week 4": [[259, "diffusion-research-continues-week-4"]], "Carbonate Account Setup, Experiment, Debug and Repeat: Week 5": [[260, "carbonate-account-setup-experiment-debug-and-repeat-week-5"]], "Design Matrix Implementation and Coding with PEP8: Week 5": [[261, "design-matrix-implementation-and-coding-with-pep8-week-5"]], "What I did this Week": [[261, "what-i-did-this-week"]], "Creating signal_predict Method: Testing Signal Generation": [[262, "creating-signal-predict-method-testing-signal-generation"]], "Diffusion Model results on pre-trained VQVAE latents of NFBS MRI Dataset: Week 6 & Week 7": [[263, "diffusion-model-results-on-pre-trained-vqvae-latents-of-nfbs-mri-dataset-week-6-week-7"]], "Modifying Test Signal Generation": [[264, "modifying-test-signal-generation"]], "VQVAE MONAI models & checkerboard artifacts: Week 8 & Week 9": [[265, "vqvae-monai-models-checkerboard-artifacts-week-8-week-9"]], "Generating Fit Functions : Week 8 & 9": [[266, "generating-fit-functions-week-8-9"]], "Things coming up next week": [[266, "things-coming-up-next-week"]], "Did i get stuck this week": [[266, "did-i-get-stuck-this-week"]], "Adding Tests : Week 10": [[267, "adding-tests-week-10"]], "Things to do next week": [[267, "things-to-do-next-week"], [270, "things-to-do-next-week"]], "Did I get stuck": [[267, "did-i-get-stuck"]], "Carbonate issues, GPU availability, Tensorflow errors: Week 10 & Week 11": [[268, "carbonate-issues-gpu-availability-tensorflow-errors-week-10-week-11"]], "Making the Tests Work : Week 11": [[269, "making-the-tests-work-week-11"]], "Week12: Making Test Functions Work": [[270, "week12-making-test-functions-work"]], "Finalized experiments using both datasets: Week 12 & Week13": [[271, "finalized-experiments-using-both-datasets-week-12-week13"]], "Writing Tests & Making Documentation: Week 13": [[272, "writing-tests-making-documentation-week-13"]], "dipy": [[274, "module-dipy"]], "Diffusion Imaging in Python": [[274, "diffusion-imaging-in-python"]], "Subpackages": [[274, "subpackages"]], "Utilities": [[274, "utilities"]], "get_info": [[274, "get-info"]], "align": [[275, "module-dipy.align"]], "Module: align._public": [[275, "module-dipy.align._public"]], "Module: align.cpd": [[275, "module-dipy.align.cpd"]], "Note": [[275, "note"]], "Module: align.imaffine": [[275, "module-dipy.align.imaffine"]], "Module: align.imwarp": [[275, "module-dipy.align.imwarp"]], "Module: align.metrics": [[275, "module-dipy.align.metrics"]], "Module: align.reslice": [[275, "module-dipy.align.reslice"]], "Module: align.scalespace": [[275, "module-dipy.align.scalespace"]], "Module: align.streamlinear": [[275, "module-dipy.align.streamlinear"]], "Module: align.streamwarp": [[275, "module-dipy.align.streamwarp"]], "Bunch": [[275, "bunch"]], "VerbosityLevels": [[275, "verbositylevels"]], "syn_registration": [[275, "syn-registration"]], "Parameters": [[275, "parameters"], [275, "id5"], [275, "id7"], [275, "id9"], [275, "id12"], [275, "id14"], [275, "id19"], [275, "id21"], [275, "id23"], [275, "id25"], [275, "id28"], [275, "id30"], [275, "id32"], [275, "id34"], [275, "id35"], [275, "id37"], [275, "id38"], [275, "id40"], [275, "id42"], [275, "id44"], [275, "id46"], [275, "id48"], [275, "id50"], [275, "id51"], [275, "id55"], [275, "id57"], [275, "id59"], [275, "id61"], [275, "id64"], [275, "id65"], [275, "id69"], [275, "id72"], [275, "id75"], [275, "id78"], [275, "id79"], [275, "id80"], [275, "id81"], [275, "id83"], [275, "id85"], [275, "id87"], [275, "id89"], [275, "id90"], [275, "id91"], [275, "id92"], [275, "id93"], [275, "id94"], [275, "id95"], [275, "id96"], [275, "id97"], [275, "id98"], [275, "id100"], [275, "id103"], [275, "id104"], [275, "id105"], [275, "id106"], [275, "id109"], [275, "id111"], [275, "id114"], [275, "id116"], [275, "id118"], [275, "id120"], [275, "id122"], [275, "id124"], [275, "id126"], [275, "id128"], [275, "id130"], [275, "id132"], [275, "id134"], [275, "id135"], [275, "id137"], [275, "id139"], [275, "id140"], [275, "id141"], [275, "id145"], [275, "id146"], [275, "id147"], [275, "id149"], [275, "id150"], [275, "id153"], [275, "id154"], [275, "id157"], [275, "id158"], [275, "id159"], [275, "id162"], [275, "id165"], [275, "id167"], [275, "id168"], [275, "id171"], [275, "id172"], [275, "id175"], [275, "id177"], [275, "id179"], [275, "id182"], [275, "id185"], [275, "id188"], [275, "id194"], [275, "id198"], [275, "id199"], [275, "id201"], [275, "id203"], [275, "id205"], [275, "id207"], [275, "id210"], [275, "id212"], [277, "parameters"], [277, "id6"], [277, "id8"], [277, "id11"], [277, "id14"], [277, "id19"], [277, "id22"], [277, "id26"], [277, "id29"], [277, "id32"], [277, "id35"], [277, "id38"], [277, "id40"], [277, "id43"], [277, "id45"], [277, "id48"], [277, "id50"], [277, "id53"], [277, "id56"], [277, "id61"], [277, "id65"], [277, "id69"], [277, "id74"], [277, "id77"], [277, "id79"], [277, "id81"], [277, "id83"], [277, "id87"], [277, "id93"], [277, "id95"], [277, "id98"], [277, "id99"], [277, "id101"], [277, "id103"], [277, "id105"], [277, "id107"], [277, "id109"], [277, "id111"], [277, "id115"], [277, "id116"], [277, "id119"], [277, "id122"], [277, "id125"], [277, "id126"], [277, "id128"], [277, "id130"], [277, "id132"], [277, "id134"], [277, "id136"], [277, "id138"], [277, "id140"], [277, "id143"], [277, "id145"], [277, "id150"], [277, "id155"], [277, "id160"], [277, "id165"], [277, "id166"], [277, "id167"], [277, "id169"], [277, "id172"], [277, "id175"], [277, "id177"], [277, "id179"], [277, "id181"], [277, "id183"], [277, "id185"], [277, "id187"], [277, "id189"], [278, "parameters"], [278, "id5"], [278, "id8"], [278, "id11"], [278, "id12"], [278, "id17"], [278, "id21"], [278, "id22"], [278, "id26"], [278, "id38"], [278, "id40"], [278, "id47"], [278, "id49"], [278, "id62"], [278, "id65"], [278, "id69"], [279, "parameters"], [279, "id3"], [279, "id7"], [279, "id16"], [279, "id27"], [279, "id33"], [279, "id36"], [279, "id42"], [279, "id50"], [279, "id54"], [280, "parameters"], [280, "id1"], [280, "id3"], [280, "id9"], [281, "parameters"], [281, "id3"], [281, "id4"], [281, "id5"], [281, "id7"], [281, "id10"], [281, "id12"], [281, "id13"], [281, "id15"], [281, "id16"], [281, "id19"], [281, "id22"], [281, "id25"], [281, "id27"], [281, "id29"], [281, "id30"], [281, "id32"], [281, "id34"], [281, "id36"], [281, "id38"], [281, "id40"], [281, "id42"], [281, "id44"], [281, "id46"], [281, "id48"], [281, "id50"], [281, "id52"], [281, "id54"], [281, "id56"], [281, "id58"], [281, "id60"], [281, "id62"], [281, "id64"], [281, "id67"], [281, "id70"], [281, "id72"], [281, "id74"], [281, "id76"], [281, "id77"], [281, "id79"], [281, "id81"], [281, "id82"], [281, "id83"], [282, "parameters"], [282, "id1"], [282, "id2"], [282, "id3"], [282, "id5"], [282, "id6"], [282, "id8"], [282, "id10"], [282, "id20"], [282, "id22"], [282, "id23"], [282, "id25"], [282, "id27"], [282, "id29"], [282, "id33"], [282, "id34"], [282, "id37"], [282, "id38"], [282, "id40"], [282, "id42"], [282, "id45"], [282, "id46"], [282, "id48"], [282, "id50"], [282, "id76"], [282, "id80"], [282, "id81"], [282, "id82"], [282, "id85"], [282, "id87"], [282, "id92"], [282, "id95"], [282, "id97"], [282, "id98"], [282, "id100"], [283, "parameters"], [283, "id87"], [283, "id88"], [283, "id90"], [283, "id92"], [283, "id96"], [283, "id101"], [283, "id110"], [283, "id114"], [283, "id119"], [283, "id122"], [283, "id127"], [283, "id144"], [283, "id150"], [283, "id155"], [283, "id158"], [283, "id163"], [283, "id171"], [283, "id172"], [283, "id174"], [283, "id188"], [283, "id194"], [283, "id203"], [283, "id214"], [283, "id219"], [283, "id223"], [283, "id228"], [283, "id234"], [283, "id248"], [283, "id261"], [283, "id272"], [283, "id275"], [283, "id287"], [283, "id291"], [283, "id295"], [283, "id299"], [283, "id303"], [283, "id305"], [283, "id308"], [283, "id315"], [283, "id316"], [283, "id321"], [283, "id355"], [283, "id360"], [283, "id369"], [283, "id373"], [283, "id378"], [283, "id384"], [283, "id387"], [283, "id388"], [283, "id390"], [283, "id392"], [283, "id394"], [283, "id395"], [283, "id396"], [283, "id399"], [283, "id401"], [283, "id407"], [283, "id418"], [283, "id419"], [283, "id445"], [283, "id456"], [283, "id459"], [283, "id462"], [283, "id465"], [283, "id468"], [283, "id471"], [283, "id474"], [283, "id482"], [283, "id488"], [283, "id494"], [283, "id500"], [283, "id505"], [283, "id507"], [283, "id509"], [283, "id516"], [283, "id522"], [283, "id525"], [283, "id530"], [283, "id534"], [283, "id536"], [283, "id541"], [283, "id546"], [283, "id548"], [283, "id550"], [283, "id552"], [283, "id554"], [283, "id563"], [283, "id564"], [283, "id565"], [283, "id566"], [283, "id569"], [283, "id578"], [283, "id580"], [283, "id583"], [283, "id590"], [283, "id595"], [283, "id603"], [283, "id612"], [283, "id613"], [283, "id616"], [283, "id620"], [283, "id622"], [283, "id624"], [283, "id630"], [283, "id635"], [283, "id641"], [283, "id644"], [283, "id646"], [283, "id648"], [283, "id650"], [283, "id652"], [283, "id653"], [283, "id655"], [283, "id657"], [283, "id659"], [283, "id661"], [283, "id685"], [283, "id695"], [283, "id720"], [283, "id748"], [283, "id753"], [283, "id758"], [283, "id763"], [283, "id768"], [283, "id772"], [283, "id776"], [283, "id780"], [283, "id784"], [283, "id788"], [283, "id792"], [283, "id796"], [283, "id800"], [283, "id806"], [283, "id814"], [283, "id820"], [283, "id825"], [283, "id830"], [283, "id834"], [283, "id837"], [283, "id842"], [283, "id847"], [283, "id852"], [283, "id857"], [283, "id862"], [283, "id864"], [283, "id868"], [283, "id873"], [283, "id878"], [283, "id879"], [283, "id880"], [283, "id881"], [283, "id883"], [283, "id885"], [283, "id887"], [283, "id890"], [283, "id893"], [283, "id897"], [283, "id928"], [283, "id936"], [283, "id944"], [283, "id949"], [283, "id951"], [283, "id953"], [283, "id955"], [283, "id958"], [283, "id966"], [283, "id972"], [283, "id978"], [283, "id983"], [283, "id988"], [283, "id994"], [283, "id1000"], [283, "id1004"], [283, "id1007"], [283, "id1038"], [283, "id1042"], [283, "id1044"], [283, "id1049"], [283, "id1051"], [283, "id1053"], [283, "id1060"], [283, "id1070"], [283, "id1073"], [283, "id1076"], [283, "id1079"], [283, "id1082"], [283, "id1085"], [283, "id1093"], [283, "id1097"], [283, "id1103"], [283, "id1105"], [283, "id1111"], [283, "id1116"], [283, "id1117"], [283, "id1119"], [283, "id1120"], [283, "id1121"], [283, "id1122"], [283, "id1124"], [283, "id1125"], [283, "id1126"], [283, "id1133"], [283, "id1135"], [283, "id1136"], [283, "id1138"], [283, "id1140"], [283, "id1148"], [283, "id1149"], [283, "id1151"], [283, "id1153"], [283, "id1155"], [283, "id1158"], [283, "id1163"], [283, "id1167"], [283, "id1169"], [283, "id1170"], [283, "id1172"], [283, "id1177"], [283, "id1190"], [283, "id1193"], [283, "id1199"], [283, "id1206"], [283, "id1213"], [283, "id1222"], [283, "id1225"], [283, "id1233"], [283, "id1243"], [283, "id1254"], [283, "id1258"], [283, "id1262"], [283, "id1264"], [283, "id1266"], [284, "parameters"], [284, "id3"], [284, "id6"], [284, "id7"], [284, "id9"], [284, "id15"], [284, "id21"], [284, "id24"], [284, "id28"], [284, "id32"], [284, "id37"], [284, "id39"], [284, "id42"], [284, "id44"], [284, "id46"], [284, "id47"], [284, "id51"], [284, "id53"], [284, "id55"], [284, "id58"], [284, "id59"], [284, "id63"], [284, "id65"], [284, "id69"], [284, "id72"], [284, "id78"], [284, "id82"], [284, "id87"], [284, "id89"], [284, "id91"], [284, "id93"], [284, "id95"], [284, "id97"], [284, "id102"], [284, "id104"], [284, "id107"], [284, "id111"], [284, "id113"], [284, "id115"], [284, "id117"], [284, "id119"], [284, "id121"], [285, "parameters"], [285, "id7"], [285, "id10"], [285, "id15"], [285, "id24"], [285, "id29"], [285, "id33"], [285, "id37"], [285, "id42"], [285, "id47"], [285, "id50"], [285, "id56"], [285, "id62"], [285, "id66"], [285, "id70"], [285, "id72"], [285, "id75"], [285, "id79"], [285, "id83"], [285, "id87"], [285, "id91"], [285, "id95"], [286, "parameters"], [286, "id1"], [286, "id2"], [286, "id3"], [286, "id5"], [287, "parameters"], [287, "id2"], [287, "id6"], [287, "id9"], [287, "id10"], [287, "id12"], [287, "id13"], [287, "id14"], [287, "id16"], [287, "id20"], [287, "id22"], [287, "id23"], [287, "id26"], [287, "id27"], [287, "id29"], [287, "id31"], [287, "id33"], [287, "id36"], [287, "id39"], [287, "id42"], [287, "id45"], [287, "id47"], [287, "id50"], [287, "id52"], [287, "id55"], [287, "id57"], [287, "id60"], [287, "id63"], [287, "id65"], [287, "id68"], [287, "id71"], [287, "id74"], [287, "id78"], [287, "id81"], [287, "id84"], [287, "id87"], [287, "id90"], [287, "id93"], [287, "id95"], [287, "id97"], [287, "id99"], [287, "id101"], [287, "id103"], [287, "id106"], [287, "id111"], [287, "id114"], [287, "id117"], [287, "id119"], [287, "id122"], [287, "id125"], [287, "id127"], [287, "id129"], [287, "id133"], [287, "id137"], [287, "id141"], [287, "id145"], [287, "id149"], [287, "id151"], [287, "id154"], [287, "id156"], [287, "id158"], [287, "id160"], [287, "id163"], [287, "id165"], [287, "id168"], [288, "parameters"], [288, "id2"], [288, "id5"], [288, "id7"], [288, "id9"], [288, "id11"], [288, "id12"], [288, "id13"], [288, "id14"], [288, "id16"], [288, "id17"], [288, "id18"], [288, "id20"], [288, "id22"], [288, "id23"], [288, "id24"], [288, "id25"], [288, "id26"], [288, "id27"], [289, "parameters"], [289, "id3"], [289, "id5"], [289, "id6"], [289, "id9"], [289, "id10"], [289, "id11"], [289, "id13"], [289, "id14"], [289, "id15"], [289, "id16"], [289, "id18"], [289, "id20"], [289, "id22"], [289, "id29"], [289, "id34"], [289, "id38"], [289, "id40"], [289, "id42"], [289, "id43"], [289, "id44"], [289, "id45"], [289, "id47"], [289, "id50"], [289, "id52"], [289, "id54"], [289, "id55"], [289, "id63"], [289, "id66"], [289, "id69"], [289, "id75"], [289, "id78"], [289, "id81"], [289, "id82"], [289, "id85"], [289, "id88"], [289, "id89"], [289, "id92"], [289, "id93"], [289, "id94"], [289, "id95"], [289, "id98"], [289, "id101"], [289, "id103"], [289, "id105"]], "Returns": [[275, "returns"], [275, "id6"], [275, "id10"], [275, "id13"], [275, "id15"], [275, "id20"], [275, "id22"], [275, "id24"], [275, "id26"], [275, "id27"], [275, "id29"], [275, "id31"], [275, "id33"], [275, "id36"], [275, "id39"], [275, "id41"], [275, "id45"], [275, "id47"], [275, "id49"], [275, "id52"], [275, "id56"], [275, "id58"], [275, "id60"], [275, "id62"], [275, "id66"], [275, "id67"], [275, "id68"], [275, "id70"], [275, "id73"], [275, "id76"], [275, "id82"], [275, "id84"], [275, "id86"], [275, "id88"], [275, "id99"], [275, "id101"], [275, "id107"], [275, "id110"], [275, "id112"], [275, "id115"], [275, "id117"], [275, "id119"], [275, "id121"], [275, "id123"], [275, "id125"], [275, "id127"], [275, "id129"], [275, "id131"], [275, "id133"], [275, "id166"], [275, "id169"], [275, "id173"], [275, "id176"], [275, "id178"], [275, "id180"], [275, "id183"], [275, "id200"], [275, "id202"], [275, "id204"], [275, "id206"], [275, "id208"], [275, "id211"], [275, "id213"], [277, "returns"], [277, "id5"], [277, "id7"], [277, "id9"], [277, "id12"], [277, "id15"], [277, "id20"], [277, "id23"], [277, "id27"], [277, "id30"], [277, "id33"], [277, "id36"], [277, "id39"], [277, "id41"], [277, "id44"], [277, "id46"], [277, "id49"], [277, "id51"], [277, "id59"], [277, "id62"], [277, "id66"], [277, "id70"], [277, "id75"], [277, "id78"], [277, "id80"], [277, "id82"], [277, "id84"], [277, "id88"], [277, "id94"], [277, "id104"], [277, "id108"], [277, "id110"], [277, "id117"], [277, "id120"], [277, "id123"], [277, "id127"], [277, "id129"], [277, "id133"], [277, "id135"], [277, "id137"], [277, "id139"], [277, "id141"], [277, "id144"], [277, "id170"], [277, "id173"], [277, "id176"], [277, "id178"], [277, "id180"], [277, "id182"], [277, "id184"], [277, "id186"], [277, "id188"], [277, "id190"], [278, "returns"], [278, "id6"], [278, "id9"], [278, "id14"], [278, "id18"], [278, "id27"], [278, "id31"], [278, "id32"], [278, "id33"], [278, "id34"], [278, "id35"], [278, "id36"], [278, "id37"], [278, "id39"], [278, "id41"], [278, "id50"], [278, "id52"], [278, "id53"], [278, "id54"], [278, "id55"], [278, "id56"], [278, "id57"], [278, "id58"], [278, "id59"], [278, "id60"], [278, "id61"], [278, "id63"], [278, "id66"], [278, "id70"], [279, "returns"], [279, "id4"], [279, "id10"], [279, "id22"], [279, "id29"], [279, "id34"], [279, "id37"], [279, "id43"], [279, "id51"], [279, "id55"], [280, "returns"], [280, "id2"], [280, "id6"], [280, "id10"], [281, "returns"], [281, "id6"], [281, "id8"], [281, "id11"], [281, "id14"], [281, "id20"], [281, "id24"], [281, "id26"], [281, "id28"], [281, "id31"], [281, "id33"], [281, "id35"], [281, "id37"], [281, "id39"], [281, "id41"], [281, "id43"], [281, "id45"], [281, "id47"], [281, "id49"], [281, "id51"], [281, "id53"], [281, "id55"], [281, "id57"], [281, "id59"], [281, "id61"], [281, "id63"], [281, "id65"], [281, "id68"], [281, "id71"], [281, "id73"], [281, "id75"], [281, "id78"], [281, "id80"], [281, "id84"], [282, "returns"], [282, "id4"], [282, "id7"], [282, "id9"], [282, "id11"], [282, "id24"], [282, "id26"], [282, "id28"], [282, "id35"], [282, "id39"], [282, "id41"], [282, "id43"], [282, "id44"], [282, "id47"], [282, "id49"], [282, "id51"], [282, "id52"], [282, "id83"], [282, "id86"], [282, "id88"], [282, "id93"], [282, "id96"], [282, "id99"], [282, "id101"], [283, "returns"], [283, "id89"], [283, "id111"], [283, "id120"], [283, "id123"], [283, "id128"], [283, "id145"], [283, "id151"], [283, "id156"], [283, "id159"], [283, "id176"], [283, "id189"], [283, "id196"], [283, "id205"], [283, "id215"], [283, "id220"], [283, "id224"], [283, "id230"], [283, "id236"], [283, "id250"], [283, "id263"], [283, "id273"], [283, "id277"], [283, "id288"], [283, "id292"], [283, "id296"], [283, "id300"], [283, "id304"], [283, "id306"], [283, "id356"], [283, "id361"], [283, "id370"], [283, "id379"], [283, "id385"], [283, "id389"], [283, "id391"], [283, "id393"], [283, "id397"], [283, "id420"], [283, "id422"], [283, "id427"], [283, "id431"], [283, "id436"], [283, "id438"], [283, "id443"], [283, "id446"], [283, "id457"], [283, "id460"], [283, "id463"], [283, "id466"], [283, "id469"], [283, "id472"], [283, "id475"], [283, "id483"], [283, "id489"], [283, "id495"], [283, "id501"], [283, "id510"], [283, "id517"], [283, "id523"], [283, "id527"], [283, "id535"], [283, "id547"], [283, "id549"], [283, "id551"], [283, "id553"], [283, "id555"], [283, "id567"], [283, "id579"], [283, "id584"], [283, "id591"], [283, "id597"], [283, "id614"], [283, "id621"], [283, "id623"], [283, "id625"], [283, "id631"], [283, "id636"], [283, "id642"], [283, "id645"], [283, "id647"], [283, "id649"], [283, "id651"], [283, "id654"], [283, "id656"], [283, "id658"], [283, "id660"], [283, "id749"], [283, "id754"], [283, "id759"], [283, "id764"], [283, "id807"], [283, "id815"], [283, "id821"], [283, "id826"], [283, "id831"], [283, "id835"], [283, "id838"], [283, "id843"], [283, "id848"], [283, "id853"], [283, "id858"], [283, "id865"], [283, "id882"], [283, "id884"], [283, "id886"], [283, "id888"], [283, "id891"], [283, "id894"], [283, "id898"], [283, "id901"], [283, "id906"], [283, "id914"], [283, "id922"], [283, "id929"], [283, "id937"], [283, "id945"], [283, "id950"], [283, "id954"], [283, "id1039"], [283, "id1050"], [283, "id1052"], [283, "id1054"], [283, "id1055"], [283, "id1056"], [283, "id1058"], [283, "id1061"], [283, "id1062"], [283, "id1064"], [283, "id1066"], [283, "id1068"], [283, "id1071"], [283, "id1074"], [283, "id1077"], [283, "id1080"], [283, "id1083"], [283, "id1086"], [283, "id1098"], [283, "id1099"], [283, "id1100"], [283, "id1101"], [283, "id1102"], [283, "id1104"], [283, "id1106"], [283, "id1112"], [283, "id1118"], [283, "id1123"], [283, "id1132"], [283, "id1134"], [283, "id1137"], [283, "id1139"], [283, "id1141"], [283, "id1150"], [283, "id1154"], [283, "id1171"], [283, "id1173"], [283, "id1179"], [283, "id1191"], [283, "id1194"], [283, "id1201"], [283, "id1208"], [283, "id1215"], [283, "id1223"], [283, "id1227"], [283, "id1235"], [283, "id1263"], [283, "id1265"], [283, "id1267"], [284, "returns"], [284, "id4"], [284, "id8"], [284, "id12"], [284, "id18"], [284, "id22"], [284, "id25"], [284, "id29"], [284, "id33"], [284, "id45"], [284, "id50"], [284, "id52"], [284, "id54"], [284, "id60"], [284, "id64"], [284, "id70"], [284, "id73"], [284, "id83"], [284, "id88"], [284, "id90"], [284, "id92"], [284, "id94"], [284, "id96"], [284, "id98"], [284, "id103"], [284, "id105"], [284, "id108"], [284, "id112"], [284, "id114"], [284, "id116"], [284, "id118"], [284, "id120"], [284, "id122"], [285, "returns"], [285, "id8"], [285, "id16"], [285, "id25"], [285, "id30"], [285, "id34"], [285, "id38"], [285, "id43"], [285, "id48"], [285, "id51"], [285, "id57"], [285, "id63"], [285, "id67"], [285, "id71"], [285, "id73"], [285, "id76"], [285, "id80"], [285, "id84"], [285, "id88"], [285, "id92"], [285, "id96"], [286, "returns"], [286, "id6"], [287, "returns"], [287, "id3"], [287, "id11"], [287, "id15"], [287, "id17"], [287, "id21"], [287, "id24"], [287, "id28"], [287, "id34"], [287, "id37"], [287, "id40"], [287, "id43"], [287, "id46"], [287, "id48"], [287, "id51"], [287, "id53"], [287, "id56"], [287, "id58"], [287, "id61"], [287, "id64"], [287, "id66"], [287, "id69"], [287, "id72"], [287, "id75"], [287, "id79"], [287, "id82"], [287, "id85"], [287, "id88"], [287, "id91"], [287, "id94"], [287, "id96"], [287, "id98"], [287, "id100"], [287, "id102"], [287, "id104"], [287, "id108"], [287, "id112"], [287, "id115"], [287, "id118"], [287, "id120"], [287, "id123"], [287, "id126"], [287, "id130"], [287, "id142"], [287, "id146"], [287, "id150"], [287, "id152"], [287, "id155"], [287, "id157"], [287, "id159"], [287, "id161"], [287, "id164"], [287, "id166"], [287, "id169"], [288, "returns"], [288, "id8"], [288, "id10"], [288, "id15"], [288, "id19"], [288, "id21"], [289, "returns"], [289, "id17"], [289, "id39"], [289, "id41"], [289, "id46"], [289, "id48"], [289, "id51"]], "register_dwi_to_template": [[275, "register-dwi-to-template"]], "write_mapping": [[275, "write-mapping"]], "read_mapping": [[275, "read-mapping"]], "resample": [[275, "resample"]], "affine_registration": [[275, "affine-registration"]], "center_of_mass": [[275, "center-of-mass"], [287, "center-of-mass"]], "translation": [[275, "translation"]], "rigid": [[275, "rigid"]], "rigid_isoscaling": [[275, "rigid-isoscaling"]], "rigid_scaling": [[275, "rigid-scaling"]], "affine": [[275, "affine"]], "_METHOD_DICT": [[275, "method-dict"]], "register_series": [[275, "register-series"]], "register_dwi_series": [[275, "register-dwi-series"]], "motion_correction": [[275, "motion-correction"]], "streamline_registration": [[275, "streamline-registration"]], "DeformableRegistration": [[275, "deformableregistration"]], "Attributes": [[275, "attributes"], [277, "attributes"], [277, "id112"], [277, "id146"], [277, "id151"], [277, "id156"], [277, "id161"], [283, "attributes"], [283, "id537"], [283, "id542"], [285, "attributes"]], "gaussian_kernel": [[275, "gaussian-kernel"]], "low_rank_eigen": [[275, "low-rank-eigen"]], "initialize_sigma2": [[275, "initialize-sigma2"]], "lowrankQS": [[275, "lowrankqs"]], "AffineInversionError": [[275, "affineinversionerror"]], "AffineInvalidValuesError": [[275, "affineinvalidvalueserror"]], "AffineMap": [[275, "affinemap"]], "MutualInformationMetric": [[275, "mutualinformationmetric"]], "AffineRegistration": [[275, "affineregistration"]], "_transform_method": [[275, "transform-method"]], "transform_centers_of_mass": [[275, "transform-centers-of-mass"]], "transform_geometric_centers": [[275, "transform-geometric-centers"]], "transform_origins": [[275, "transform-origins"]], "DiffeomorphicMap": [[275, "diffeomorphicmap"]], "DiffeomorphicRegistration": [[275, "diffeomorphicregistration"]], "SymmetricDiffeomorphicRegistration": [[275, "symmetricdiffeomorphicregistration"]], "RegistrationStages": [[275, "registrationstages"]], "logger": [[275, "logger"], [275, "id136"], [275, "id174"], [277, "logger"], [281, "logger"], [282, "logger"], [282, "id36"], [282, "id84"], [283, "logger"], [284, "logger"], [284, "id71"]], "mult_aff": [[275, "mult-aff"]], "get_direction_and_spacings": [[275, "get-direction-and-spacings"]], "SimilarityMetric": [[275, "similaritymetric"]], "CCMetric": [[275, "ccmetric"]], "EMMetric": [[275, "emmetric"]], "SSDMetric": [[275, "ssdmetric"]], "v_cycle_2d": [[275, "v-cycle-2d"]], "v_cycle_3d": [[275, "v-cycle-3d"]], "reslice": [[275, "reslice"]], "ScaleSpace": [[275, "scalespace"]], "IsotropicScaleSpace": [[275, "isotropicscalespace"]], "StreamlineDistanceMetric": [[275, "streamlinedistancemetric"]], "BundleMinDistanceMetric": [[275, "bundlemindistancemetric"]], "Methods": [[275, "methods"], [275, "id143"], [275, "id151"], [275, "id155"]], "BundleMinDistanceMatrixMetric": [[275, "bundlemindistancematrixmetric"]], "BundleMinDistanceAsymmetricMetric": [[275, "bundlemindistanceasymmetricmetric"]], "BundleSumDistanceMatrixMetric": [[275, "bundlesumdistancematrixmetric"]], "JointBundleMinDistanceMetric": [[275, "jointbundlemindistancemetric"]], "StreamlineLinearRegistration": [[275, "streamlinelinearregistration"]], "StreamlineRegistrationMap": [[275, "streamlineregistrationmap"]], "JointStreamlineRegistrationMap": [[275, "jointstreamlineregistrationmap"]], "bundle_sum_distance": [[275, "bundle-sum-distance"]], "bundle_min_distance": [[275, "bundle-min-distance"]], "bundle_min_distance_fast": [[275, "bundle-min-distance-fast"]], "bundle_min_distance_asymmetric_fast": [[275, "bundle-min-distance-asymmetric-fast"]], "remove_clusters_by_size": [[275, "remove-clusters-by-size"]], "progressive_slr": [[275, "progressive-slr"]], "slr_with_qbx": [[275, "slr-with-qbx"]], "groupwise_slr": [[275, "groupwise-slr"]], "get_unique_pairs": [[275, "get-unique-pairs"]], "compose_matrix44": [[275, "compose-matrix44"]], "decompose_matrix44": [[275, "decompose-matrix44"]], "average_bundle_length": [[275, "average-bundle-length"]], "find_missing": [[275, "find-missing"]], "bundlewarp": [[275, "bundlewarp"]], "bundlewarp_vector_filed": [[275, "bundlewarp-vector-filed"]], "bundlewarp_shape_analysis": [[275, "bundlewarp-shape-analysis"]], "boots": [[276, "module-dipy.boots"]], "core": [[277, "module-dipy.core"]], "Module: core.benchmarks": [[277, "module-dipy.core.benchmarks"]], "Module: core.benchmarks.bench_sphere": [[277, "module-dipy.core.benchmarks.bench_sphere"]], "Module: core.geometry": [[277, "module-dipy.core.geometry"]], "Module: core.gradients": [[277, "module-dipy.core.gradients"]], "Module: core.graph": [[277, "module-dipy.core.graph"]], "Module: core.histeq": [[277, "module-dipy.core.histeq"]], "Module: core.ndindex": [[277, "module-dipy.core.ndindex"]], "Module: core.onetime": [[277, "module-dipy.core.onetime"]], "Module: core.optimize": [[277, "module-dipy.core.optimize"]], "Module: core.profile": [[277, "module-dipy.core.profile"]], "Module: core.rng": [[277, "module-dipy.core.rng"]], "Module: core.sphere": [[277, "module-dipy.core.sphere"]], "Module: core.sphere_stats": [[277, "module-dipy.core.sphere_stats"]], "Module: core.subdivide_octahedron": [[277, "module-dipy.core.subdivide_octahedron"]], "Module: core.wavelet": [[277, "module-dipy.core.wavelet"]], "Timer": [[277, "timer"]], "func_minimize_adhoc": [[277, "func-minimize-adhoc"]], "func_minimize_scipy": [[277, "func-minimize-scipy"]], "bench_disperse_charges_alt": [[277, "bench-disperse-charges-alt"]], "_TUPLE2AXES": [[277, "tuple2axes"]], "sphere2cart": [[277, "sphere2cart"]], "cart2sphere": [[277, "cart2sphere"]], "sph2latlon": [[277, "sph2latlon"]], "normalized_vector": [[277, "normalized-vector"]], "vector_norm": [[277, "vector-norm"]], "rodrigues_axis_rotation": [[277, "rodrigues-axis-rotation"]], "nearest_pos_semi_def": [[277, "nearest-pos-semi-def"]], "sphere_distance": [[277, "sphere-distance"]], "See Also": [[277, "see-also"], [277, "id24"], [277, "id54"], [277, "id60"], [277, "id102"], [277, "id131"], [277, "id147"], [277, "id152"], [277, "id157"], [277, "id162"], [277, "id168"], [278, "see-also"], [278, "id13"], [281, "see-also"], [281, "id9"], [281, "id18"], [283, "see-also"], [283, "id511"], [283, "id518"], [283, "id531"], [283, "id538"], [283, "id543"], [283, "id611"], [283, "id1152"], [283, "id1159"], [283, "id1164"], [283, "id1168"], [283, "id1174"], [283, "id1178"], [283, "id1192"], [285, "see-also"], [285, "id11"], [287, "see-also"], [287, "id35"], [287, "id38"], [287, "id41"], [287, "id44"], [287, "id77"], [287, "id134"], [287, "id138"], [287, "id144"], [287, "id148"]], "cart_distance": [[277, "cart-distance"]], "vector_cosine": [[277, "vector-cosine"]], "lambert_equal_area_projection_polar": [[277, "lambert-equal-area-projection-polar"]], "lambert_equal_area_projection_cart": [[277, "lambert-equal-area-projection-cart"]], "euler_matrix": [[277, "euler-matrix"]], "compose_matrix": [[277, "compose-matrix"]], "decompose_matrix": [[277, "decompose-matrix"]], "Raises": [[277, "raises"], [278, "raises"], [287, "raises"], [287, "id135"], [287, "id139"], [287, "id143"]], "circumradius": [[277, "circumradius"]], "vec2vec_rotmat": [[277, "vec2vec-rotmat"]], "compose_transformations": [[277, "compose-transformations"]], "perpendicular_directions": [[277, "perpendicular-directions"]], "dist_to_corner": [[277, "dist-to-corner"]], "is_hemispherical": [[277, "is-hemispherical"]], "GradientTable": [[277, "gradienttable"]], "unique_bvals": [[277, "unique-bvals"]], "gradient_table_from_bvals_bvecs": [[277, "gradient-table-from-bvals-bvecs"]], "Other Parameters": [[277, "other-parameters"]], "gradient_table_from_qvals_bvecs": [[277, "gradient-table-from-qvals-bvecs"]], "gradient_table_from_gradient_strength_bvecs": [[277, "gradient-table-from-gradient-strength-bvecs"]], "gradient_table": [[277, "gradient-table"]], "reorient_bvecs": [[277, "reorient-bvecs"]], "generate_bvecs": [[277, "generate-bvecs"]], "round_bvals": [[277, "round-bvals"]], "unique_bvals_tolerance": [[277, "unique-bvals-tolerance"]], "get_bval_indices": [[277, "get-bval-indices"]], "unique_bvals_magnitude": [[277, "unique-bvals-magnitude"]], "check_multi_b": [[277, "check-multi-b"]], "btens_to_params": [[277, "btens-to-params"]], "params_to_btens": [[277, "params-to-btens"]], "ornt_mapping": [[277, "ornt-mapping"], [281, "ornt-mapping"]], "reorient_vectors": [[277, "reorient-vectors"], [281, "reorient-vectors"]], "reorient_on_axis": [[277, "reorient-on-axis"], [281, "reorient-on-axis"]], "orientation_from_string": [[277, "orientation-from-string"], [281, "orientation-from-string"]], "orientation_to_string": [[277, "orientation-to-string"], [281, "orientation-to-string"]], "Graph": [[277, "graph"]], "histeq": [[277, "histeq"]], "ndindex": [[277, "ndindex"]], "ResetMixin": [[277, "resetmixin"]], "OneTimeProperty": [[277, "onetimeproperty"]], "auto_attr": [[277, "auto-attr"]], "Optimizer": [[277, "optimizer"]], "SKLearnLinearSolver": [[277, "sklearnlinearsolver"]], "NonNegativeLeastSquares": [[277, "nonnegativeleastsquares"]], "PositiveDefiniteLeastSquares": [[277, "positivedefiniteleastsquares"]], "spdot": [[277, "spdot"]], "sparse_nnls": [[277, "sparse-nnls"]], "Profiler": [[277, "profiler"]], "WichmannHill2006": [[277, "wichmannhill2006"]], "WichmannHill1982": [[277, "wichmannhill1982"]], "LEcuyer": [[277, "lecuyer"]], "Sphere": [[277, "sphere"]], "HemiSphere": [[277, "hemisphere"]], "faces_from_sphere_vertices": [[277, "faces-from-sphere-vertices"]], "unique_edges": [[277, "unique-edges"]], "unique_sets": [[277, "unique-sets"]], "disperse_charges": [[277, "disperse-charges"]], "disperse_charges_alt": [[277, "disperse-charges-alt"]], "euler_characteristic_check": [[277, "euler-characteristic-check"]], "octahedron_vertices": [[277, "octahedron-vertices"]], "octahedron_faces": [[277, "octahedron-faces"]], "icosahedron_vertices": [[277, "icosahedron-vertices"]], "icosahedron_faces": [[277, "icosahedron-faces"]], "unit_octahedron": [[277, "unit-octahedron"]], "unit_icosahedron": [[277, "unit-icosahedron"]], "hemi_icosahedron": [[277, "hemi-icosahedron"]], "random_uniform_on_sphere": [[277, "random-uniform-on-sphere"]], "eigenstats": [[277, "eigenstats"]], "compare_orientation_sets": [[277, "compare-orientation-sets"]], "angular_similarity": [[277, "angular-similarity"]], "create_unit_sphere": [[277, "create-unit-sphere"]], "create_unit_hemisphere": [[277, "create-unit-hemisphere"]], "cshift3D": [[277, "cshift3d"]], "permutationinverse": [[277, "permutationinverse"]], "afb3D_A": [[277, "afb3d-a"]], "sfb3D_A": [[277, "sfb3d-a"]], "sfb3D": [[277, "sfb3d"]], "afb3D": [[277, "afb3d"]], "dwt3D": [[277, "dwt3d"]], "idwt3D": [[277, "idwt3d"]], "data": [[278, "module-dipy.data"]], "Module: data.fetcher": [[278, "module-dipy.data.fetcher"]], "DataError": [[278, "dataerror"]], "loads_compat": [[278, "loads-compat"]], "DATA_DIR": [[278, "data-dir"]], "get_sim_voxels": [[278, "get-sim-voxels"]], "get_skeleton": [[278, "get-skeleton"]], "get_sphere": [[278, "get-sphere"]], "default_sphere": [[278, "default-sphere"]], "small_sphere": [[278, "small-sphere"]], "get_3shell_gtab": [[278, "get-3shell-gtab"]], "get_isbi2013_2shell_gtab": [[278, "get-isbi2013-2shell-gtab"]], "get_gtab_taiwan_dsi": [[278, "get-gtab-taiwan-dsi"]], "dsi_voxels": [[278, "dsi-voxels"]], "dsi_deconv_voxels": [[278, "dsi-deconv-voxels"]], "mrtrix_spherical_functions": [[278, "mrtrix-spherical-functions"]], "get_cmap": [[278, "get-cmap"]], "two_cingulum_bundles": [[278, "two-cingulum-bundles"]], "matlab_life_results": [[278, "matlab-life-results"]], "load_sdp_constraints": [[278, "load-sdp-constraints"]], "copyfileobj_withprogress": [[278, "copyfileobj-withprogress"]], "check_md5": [[278, "check-md5"]], "fetch_data": [[278, "fetch-data"]], "fetch_isbi2013_2shell": [[278, "fetch-isbi2013-2shell"]], "fetch_stanford_labels": [[278, "fetch-stanford-labels"]], "fetch_sherbrooke_3shell": [[278, "fetch-sherbrooke-3shell"]], "fetch_stanford_hardi": [[278, "fetch-stanford-hardi"]], "fetch_resdnn_weights": [[278, "fetch-resdnn-weights"]], "fetch_synb0_weights": [[278, "fetch-synb0-weights"]], "fetch_synb0_test": [[278, "fetch-synb0-test"]], "fetch_evac_weights": [[278, "fetch-evac-weights"]], "fetch_evac_test": [[278, "fetch-evac-test"]], "fetch_stanford_t1": [[278, "fetch-stanford-t1"]], "fetch_stanford_pve_maps": [[278, "fetch-stanford-pve-maps"]], "fetch_stanford_tracks": [[278, "fetch-stanford-tracks"]], "fetch_taiwan_ntu_dsi": [[278, "fetch-taiwan-ntu-dsi"]], "fetch_syn_data": [[278, "fetch-syn-data"]], "fetch_mni_template": [[278, "fetch-mni-template"]], "fetch_scil_b0": [[278, "fetch-scil-b0"]], "fetch_bundles_2_subjects": [[278, "fetch-bundles-2-subjects"]], "fetch_ivim": [[278, "fetch-ivim"]], "fetch_cfin_multib": [[278, "fetch-cfin-multib"]], "fetch_file_formats": [[278, "fetch-file-formats"]], "fetch_bundle_atlas_hcp842": [[278, "fetch-bundle-atlas-hcp842"]], "fetch_target_tractogram_hcp": [[278, "fetch-target-tractogram-hcp"]], "fetch_bundle_fa_hcp": [[278, "fetch-bundle-fa-hcp"]], "fetch_qtdMRI_test_retest_2subjects": [[278, "fetch-qtdmri-test-retest-2subjects"]], "fetch_gold_standard_io": [[278, "fetch-gold-standard-io"]], "fetch_qte_lte_pte": [[278, "fetch-qte-lte-pte"]], "fetch_cti_rat1": [[278, "fetch-cti-rat1"]], "fetch_fury_surface": [[278, "fetch-fury-surface"]], "fetch_DiB_70_lte_pte_ste": [[278, "fetch-dib-70-lte-pte-ste"]], "fetch_DiB_217_lte_pte_ste": [[278, "fetch-dib-217-lte-pte-ste"]], "fetch_ptt_minimal_dataset": [[278, "fetch-ptt-minimal-dataset"]], "fetch_bundle_warp_dataset": [[278, "fetch-bundle-warp-dataset"]], "get_fnames": [[278, "get-fnames"]], "read_qtdMRI_test_retest_2subjects": [[278, "read-qtdmri-test-retest-2subjects"]], "read_scil_b0": [[278, "read-scil-b0"]], "read_siemens_scil_b0": [[278, "read-siemens-scil-b0"]], "read_isbi2013_2shell": [[278, "read-isbi2013-2shell"]], "read_sherbrooke_3shell": [[278, "read-sherbrooke-3shell"]], "read_stanford_labels": [[278, "read-stanford-labels"]], "read_stanford_hardi": [[278, "read-stanford-hardi"]], "read_stanford_t1": [[278, "read-stanford-t1"]], "read_stanford_pve_maps": [[278, "read-stanford-pve-maps"]], "read_taiwan_ntu_dsi": [[278, "read-taiwan-ntu-dsi"]], "read_syn_data": [[278, "read-syn-data"]], "fetch_tissue_data": [[278, "fetch-tissue-data"]], "read_tissue_data": [[278, "read-tissue-data"]], "read_mni_template": [[278, "read-mni-template"]], "fetch_cenir_multib": [[278, "fetch-cenir-multib"]], "read_cenir_multib": [[278, "read-cenir-multib"]], "read_bundles_2_subjects": [[278, "read-bundles-2-subjects"]], "read_ivim": [[278, "read-ivim"]], "read_cfin_dwi": [[278, "read-cfin-dwi"]], "read_cfin_t1": [[278, "read-cfin-t1"]], "get_file_formats": [[278, "get-file-formats"]], "get_bundle_atlas_hcp842": [[278, "get-bundle-atlas-hcp842"]], "get_two_hcp842_bundles": [[278, "get-two-hcp842-bundles"]], "get_target_tractogram_hcp": [[278, "get-target-tractogram-hcp"]], "read_qte_lte_pte": [[278, "read-qte-lte-pte"]], "read_DiB_70_lte_pte_ste": [[278, "read-dib-70-lte-pte-ste"]], "read_DiB_217_lte_pte_ste": [[278, "read-dib-217-lte-pte-ste"]], "extract_example_tracts": [[278, "extract-example-tracts"]], "read_five_af_bundles": [[278, "read-five-af-bundles"]], "to_bids_description": [[278, "to-bids-description"]], "fetch_hcp": [[278, "fetch-hcp"]], "fetch_hbn": [[278, "fetch-hbn"]], "denoise": [[279, "module-dipy.denoise"]], "Module: denoise.adaptive_soft_matching": [[279, "module-dipy.denoise.adaptive_soft_matching"]], "Module: denoise.gibbs": [[279, "module-dipy.denoise.gibbs"]], "Module: denoise.localpca": [[279, "module-dipy.denoise.localpca"]], "Module: denoise.nlmeans": [[279, "module-dipy.denoise.nlmeans"]], "Module: denoise.noise_estimate": [[279, "module-dipy.denoise.noise_estimate"]], "Module: denoise.non_local_means": [[279, "module-dipy.denoise.non_local_means"]], "Module: denoise.patch2self": [[279, "module-dipy.denoise.patch2self"]], "adaptive_soft_matching": [[279, "adaptive-soft-matching"]], "gibbs_removal": [[279, "gibbs-removal"]], "genpca": [[279, "genpca"]], "localpca": [[279, "localpca"]], "mppca": [[279, "mppca"]], "nlmeans": [[279, "nlmeans"]], "piesno": [[279, "piesno"]], "estimate_sigma": [[279, "estimate-sigma"]], "non_local_means": [[279, "non-local-means"]], "patch2self": [[279, "patch2self"]], "direction": [[280, "module-dipy.direction"]], "Module: direction.peaks": [[280, "module-dipy.direction.peaks"]], "PeaksAndMetrics": [[280, "peaksandmetrics"]], "peak_directions_nl": [[280, "peak-directions-nl"]], "peak_directions": [[280, "peak-directions"]], "peaks_from_model": [[280, "peaks-from-model"]], "reshape_peaks_for_visualization": [[280, "reshape-peaks-for-visualization"]], "io": [[281, "module-dipy.io"]], "Module: io.bvectxt": [[281, "module-dipy.io.bvectxt"]], "Module: io.dpy": [[281, "module-dipy.io.dpy"]], "Module: io.gradients": [[281, "module-dipy.io.gradients"]], "Module: io.image": [[281, "module-dipy.io.image"]], "Module: io.peaks": [[281, "module-dipy.io.peaks"]], "Module: io.pickles": [[281, "module-dipy.io.pickles"]], "Module: io.stateful_tractogram": [[281, "module-dipy.io.stateful_tractogram"]], "Module: io.streamline": [[281, "module-dipy.io.streamline"]], "Module: io.utils": [[281, "module-dipy.io.utils"]], "Module: io.vtk": [[281, "module-dipy.io.vtk"]], "read_bvec_file": [[281, "read-bvec-file"]], "Dpy": [[281, "dpy"]], "read_bvals_bvecs": [[281, "read-bvals-bvecs"]], "load_nifti_data": [[281, "load-nifti-data"]], "load_nifti": [[281, "load-nifti"]], "save_nifti": [[281, "save-nifti"]], "save_qa_metric": [[281, "save-qa-metric"]], "load_peaks": [[281, "load-peaks"]], "save_peaks": [[281, "save-peaks"]], "peaks_to_niftis": [[281, "peaks-to-niftis"]], "save_pickle": [[281, "save-pickle"]], "load_pickle": [[281, "load-pickle"]], "Space": [[281, "space"]], "Origin": [[281, "origin"]], "StatefulTractogram": [[281, "statefultractogram"]], "set_sft_logger_level": [[281, "set-sft-logger-level"]], "save_tractogram": [[281, "save-tractogram"]], "load_tractogram": [[281, "load-tractogram"]], "load_generator": [[281, "load-generator"]], "save_generator": [[281, "save-generator"]], "load_trk": [[281, "load-trk"]], "load_tck": [[281, "load-tck"]], "load_vtk": [[281, "load-vtk"]], "load_vtp": [[281, "load-vtp"]], "load_fib": [[281, "load-fib"]], "load_dpy": [[281, "load-dpy"]], "save_trk": [[281, "save-trk"]], "save_tck": [[281, "save-tck"]], "save_vtk": [[281, "save-vtk"]], "save_vtp": [[281, "save-vtp"]], "save_fib": [[281, "save-fib"]], "save_dpy": [[281, "save-dpy"]], "nifti1_symmat": [[281, "nifti1-symmat"]], "make5d": [[281, "make5d"]], "decfa": [[281, "decfa"]], "decfa_to_float": [[281, "decfa-to-float"]], "is_reference_info_valid": [[281, "is-reference-info-valid"]], "get_reference_info": [[281, "get-reference-info"]], "is_header_compatible": [[281, "is-header-compatible"]], "create_tractogram_header": [[281, "create-tractogram-header"]], "create_nifti_header": [[281, "create-nifti-header"]], "save_buan_profiles_hdf5": [[281, "save-buan-profiles-hdf5"]], "read_img_arr_or_path": [[281, "read-img-arr-or-path"]], "load_polydata": [[281, "load-polydata"]], "save_polydata": [[281, "save-polydata"]], "save_vtk_streamlines": [[281, "save-vtk-streamlines"]], "load_vtk_streamlines": [[281, "load-vtk-streamlines"]], "nn": [[282, "module-dipy.nn"]], "Module: nn.cnn_1d_denoising": [[282, "module-dipy.nn.cnn_1d_denoising"]], "Title : Denoising diffusion weighted imaging data using CNN": [[282, "title-denoising-diffusion-weighted-imaging-data-using-cnn"]], "Reference": [[282, "reference"]], "Module: nn.evac": [[282, "module-dipy.nn.evac"]], "Module: nn.histo_resdnn": [[282, "module-dipy.nn.histo_resdnn"]], "Module: nn.model": [[282, "module-dipy.nn.model"]], "Module: nn.synb0": [[282, "module-dipy.nn.synb0"]], "Module: nn.utils": [[282, "module-dipy.nn.utils"]], "Cnn1DDenoiser": [[282, "cnn1ddenoiser"]], "Block": [[282, "block"]], "ChannelSum": [[282, "channelsum"]], "EVACPlus": [[282, "evacplus"]], "prepare_img": [[282, "prepare-img"]], "init_model": [[282, "init-model"]], "HistoResDNN": [[282, "historesdnn"]], "SingleLayerPerceptron": [[282, "singlelayerperceptron"]], "MultipleLayerPercepton": [[282, "multiplelayerpercepton"]], "EncoderBlock": [[282, "encoderblock"], [282, "id61"]], "DecoderBlock": [[282, "decoderblock"], [282, "id68"]], "Synb0": [[282, "synb0"]], "UNet3D": [[282, "unet3d"], [282, "id89"]], "normalize": [[282, "normalize"], [282, "id91"]], "unnormalize": [[282, "unnormalize"], [282, "id94"]], "set_logger_level": [[282, "set-logger-level"]], "transform_img": [[282, "transform-img"]], "recover_img": [[282, "recover-img"]], "reconst": [[283, "module-dipy.reconst"]], "Module: reconst.base": [[283, "module-dipy.reconst.base"]], "Module: reconst.benchmarks": [[283, "module-dipy.reconst.benchmarks"]], "Module: reconst.benchmarks.bench_bounding_box": [[283, "module-dipy.reconst.benchmarks.bench_bounding_box"]], "Module: reconst.benchmarks.bench_csd": [[283, "module-dipy.reconst.benchmarks.bench_csd"]], "Module: reconst.benchmarks.bench_peaks": [[283, "module-dipy.reconst.benchmarks.bench_peaks"]], "Module: reconst.benchmarks.bench_squash": [[283, "module-dipy.reconst.benchmarks.bench_squash"]], "Module: reconst.benchmarks.bench_vec_val_sum": [[283, "module-dipy.reconst.benchmarks.bench_vec_val_sum"]], "Module: reconst.cache": [[283, "module-dipy.reconst.cache"]], "Module: reconst.cross_validation": [[283, "module-dipy.reconst.cross_validation"]], "Module: reconst.csdeconv": [[283, "module-dipy.reconst.csdeconv"]], "Module: reconst.dki": [[283, "module-dipy.reconst.dki"]], "Module: reconst.dki_micro": [[283, "module-dipy.reconst.dki_micro"]], "Module: reconst.dsi": [[283, "module-dipy.reconst.dsi"]], "Module: reconst.dti": [[283, "module-dipy.reconst.dti"]], "Module: reconst.forecast": [[283, "module-dipy.reconst.forecast"]], "Module: reconst.fwdti": [[283, "module-dipy.reconst.fwdti"]], "Module: reconst.gqi": [[283, "module-dipy.reconst.gqi"]], "Module: reconst.ivim": [[283, "module-dipy.reconst.ivim"]], "Module: reconst.mapmri": [[283, "module-dipy.reconst.mapmri"]], "Module: reconst.mcsd": [[283, "module-dipy.reconst.mcsd"]], "Module: reconst.msdki": [[283, "module-dipy.reconst.msdki"]], "Module: reconst.multi_voxel": [[283, "module-dipy.reconst.multi_voxel"]], "Module: reconst.odf": [[283, "module-dipy.reconst.odf"]], "Module: reconst.qtdmri": [[283, "module-dipy.reconst.qtdmri"]], "Module: reconst.qti": [[283, "module-dipy.reconst.qti"]], "Module: reconst.rumba": [[283, "module-dipy.reconst.rumba"]], "Module: reconst.sfm": [[283, "module-dipy.reconst.sfm"]], "Module: reconst.shm": [[283, "module-dipy.reconst.shm"]], "Module: reconst.shore": [[283, "module-dipy.reconst.shore"]], "Module: reconst.utils": [[283, "module-dipy.reconst.utils"]], "ReconstModel": [[283, "reconstmodel"]], "ReconstFit": [[283, "reconstfit"]], "bench_bounding_box": [[283, "bench-bounding-box"]], "num_grad": [[283, "num-grad"]], "bench_csdeconv": [[283, "bench-csdeconv"]], "bench_local_maxima": [[283, "bench-local-maxima"]], "old_squash": [[283, "old-squash"]], "bench_quick_squash": [[283, "bench-quick-squash"]], "bench_vec_val_vect": [[283, "bench-vec-val-vect"]], "Cache": [[283, "cache"]], "coeff_of_determination": [[283, "coeff-of-determination"]], "kfold_xval": [[283, "kfold-xval"]], "AxSymShResponse": [[283, "axsymshresponse"]], "ConstrainedSphericalDeconvModel": [[283, "constrainedsphericaldeconvmodel"]], "ConstrainedSDTModel": [[283, "constrainedsdtmodel"]], "auto_response": [[283, "auto-response"]], "response_from_mask": [[283, "response-from-mask"]], "estimate_response": [[283, "estimate-response"]], "forward_sdt_deconv_mat": [[283, "forward-sdt-deconv-mat"]], "csdeconv": [[283, "csdeconv"]], "odf_deconv": [[283, "odf-deconv"]], "odf_sh_to_sharp": [[283, "odf-sh-to-sharp"]], "mask_for_response_ssst": [[283, "mask-for-response-ssst"]], "response_from_mask_ssst": [[283, "response-from-mask-ssst"]], "auto_response_ssst": [[283, "auto-response-ssst"]], "recursive_response": [[283, "recursive-response"]], "fa_trace_to_lambdas": [[283, "fa-trace-to-lambdas"]], "DiffusionKurtosisModel": [[283, "diffusionkurtosismodel"]], "DiffusionKurtosisFit": [[283, "diffusionkurtosisfit"]], "carlson_rf": [[283, "carlson-rf"]], "carlson_rd": [[283, "carlson-rd"]], "directional_diffusion": [[283, "directional-diffusion"]], "directional_diffusion_variance": [[283, "directional-diffusion-variance"]], "directional_kurtosis": [[283, "directional-kurtosis"]], "apparent_kurtosis_coef": [[283, "apparent-kurtosis-coef"]], "mean_kurtosis": [[283, "mean-kurtosis"]], "radial_kurtosis": [[283, "radial-kurtosis"]], "axial_kurtosis": [[283, "axial-kurtosis"]], "kurtosis_maximum": [[283, "kurtosis-maximum"]], "mean_kurtosis_tensor": [[283, "mean-kurtosis-tensor"]], "kurtosis_fractional_anisotropy": [[283, "kurtosis-fractional-anisotropy"]], "dki_prediction": [[283, "dki-prediction"]], "params_to_dki_params": [[283, "params-to-dki-params"]], "ls_fit_dki": [[283, "ls-fit-dki"]], "cls_fit_dki": [[283, "cls-fit-dki"]], "Wrotate": [[283, "wrotate"]], "Wrotate_element": [[283, "wrotate-element"]], "Wcons": [[283, "wcons"]], "split_dki_param": [[283, "split-dki-param"]], "KurtosisMicrostructureModel": [[283, "kurtosismicrostructuremodel"]], "KurtosisMicrostructuralFit": [[283, "kurtosismicrostructuralfit"]], "axonal_water_fraction": [[283, "axonal-water-fraction"]], "diffusion_components": [[283, "diffusion-components"]], "dkimicro_prediction": [[283, "dkimicro-prediction"]], "tortuosity": [[283, "tortuosity"]], "DiffusionSpectrumModel": [[283, "diffusionspectrummodel"]], "DiffusionSpectrumFit": [[283, "diffusionspectrumfit"]], "DiffusionSpectrumDeconvModel": [[283, "diffusionspectrumdeconvmodel"]], "DiffusionSpectrumDeconvFit": [[283, "diffusionspectrumdeconvfit"]], "create_qspace": [[283, "create-qspace"]], "create_qtable": [[283, "create-qtable"]], "hanning_filter": [[283, "hanning-filter"]], "pdf_interp_coords": [[283, "pdf-interp-coords"]], "pdf_odf": [[283, "pdf-odf"]], "half_to_full_qspace": [[283, "half-to-full-qspace"]], "project_hemisph_bvecs": [[283, "project-hemisph-bvecs"]], "threshold_propagator": [[283, "threshold-propagator"]], "gen_PSF": [[283, "gen-psf"]], "LR_deconv": [[283, "lr-deconv"]], "TensorModel": [[283, "tensormodel"]], "TensorFit": [[283, "tensorfit"]], "fractional_anisotropy": [[283, "fractional-anisotropy"]], "geodesic_anisotropy": [[283, "geodesic-anisotropy"]], "mean_diffusivity": [[283, "mean-diffusivity"]], "axial_diffusivity": [[283, "axial-diffusivity"]], "radial_diffusivity": [[283, "radial-diffusivity"]], "trace": [[283, "trace"]], "color_fa": [[283, "color-fa"]], "determinant": [[283, "determinant"]], "isotropic": [[283, "isotropic"]], "deviatoric": [[283, "deviatoric"]], "norm": [[283, "norm"]], "mode": [[283, "mode"]], "linearity": [[283, "linearity"]], "planarity": [[283, "planarity"]], "sphericity": [[283, "sphericity"]], "apparent_diffusion_coef": [[283, "apparent-diffusion-coef"]], "tensor_prediction": [[283, "tensor-prediction"]], "iter_fit_tensor": [[283, "iter-fit-tensor"]], "wls_fit_tensor": [[283, "wls-fit-tensor"], [283, "id586"]], "ols_fit_tensor": [[283, "ols-fit-tensor"]], "nlls_fit_tensor": [[283, "nlls-fit-tensor"]], "restore_fit_tensor": [[283, "restore-fit-tensor"]], "_lt_indices": [[283, "lt-indices"]], "from_lower_triangular": [[283, "from-lower-triangular"]], "_lt_rows": [[283, "lt-rows"]], "_lt_cols": [[283, "lt-cols"]], "lower_triangular": [[283, "lower-triangular"]], "decompose_tensor": [[283, "decompose-tensor"]], "design_matrix": [[283, "design-matrix"], [283, "id948"], [283, "id1090"]], "quantize_evecs": [[283, "quantize-evecs"]], "eig_from_lo_tri": [[283, "eig-from-lo-tri"]], "ForecastModel": [[283, "forecastmodel"]], "ForecastFit": [[283, "forecastfit"]], "find_signal_means": [[283, "find-signal-means"]], "forecast_error_func": [[283, "forecast-error-func"]], "psi_l": [[283, "psi-l"]], "forecast_matrix": [[283, "forecast-matrix"]], "rho_matrix": [[283, "rho-matrix"]], "lb_forecast": [[283, "lb-forecast"]], "FreeWaterTensorModel": [[283, "freewatertensormodel"]], "FreeWaterTensorFit": [[283, "freewatertensorfit"]], "fwdti_prediction": [[283, "fwdti-prediction"]], "wls_iter": [[283, "wls-iter"]], "nls_iter": [[283, "nls-iter"]], "nls_fit_tensor": [[283, "nls-fit-tensor"]], "lower_triangular_to_cholesky": [[283, "lower-triangular-to-cholesky"]], "cholesky_to_lower_triangular": [[283, "cholesky-to-lower-triangular"]], "GeneralizedQSamplingModel": [[283, "generalizedqsamplingmodel"]], "GeneralizedQSamplingFit": [[283, "generalizedqsamplingfit"]], "normalize_qa": [[283, "normalize-qa"]], "squared_radial_component": [[283, "squared-radial-component"]], "npa": [[283, "npa"]], "equatorial_zone_vertices": [[283, "equatorial-zone-vertices"]], "polar_zone_vertices": [[283, "polar-zone-vertices"]], "upper_hemi_map": [[283, "upper-hemi-map"]], "equatorial_maximum": [[283, "equatorial-maximum"]], "patch_vertices": [[283, "patch-vertices"]], "patch_maximum": [[283, "patch-maximum"]], "odf_sum": [[283, "odf-sum"]], "patch_sum": [[283, "patch-sum"]], "triple_odf_maxima": [[283, "triple-odf-maxima"]], "IvimModelTRR": [[283, "ivimmodeltrr"]], "IvimModelVP": [[283, "ivimmodelvp"]], "IvimFit": [[283, "ivimfit"]], "ivim_prediction": [[283, "ivim-prediction"]], "f_D_star_prediction": [[283, "f-d-star-prediction"]], "f_D_star_error": [[283, "f-d-star-error"]], "ivim_model_selector": [[283, "ivim-model-selector"]], "MapmriModel": [[283, "mapmrimodel"]], "MapmriFit": [[283, "mapmrifit"]], "isotropic_scale_factor": [[283, "isotropic-scale-factor"]], "mapmri_index_matrix": [[283, "mapmri-index-matrix"]], "b_mat": [[283, "b-mat"]], "b_mat_isotropic": [[283, "b-mat-isotropic"]], "mapmri_phi_1d": [[283, "mapmri-phi-1d"]], "mapmri_phi_matrix": [[283, "mapmri-phi-matrix"]], "mapmri_psi_1d": [[283, "mapmri-psi-1d"]], "mapmri_psi_matrix": [[283, "mapmri-psi-matrix"]], "mapmri_odf_matrix": [[283, "mapmri-odf-matrix"]], "mapmri_isotropic_phi_matrix": [[283, "mapmri-isotropic-phi-matrix"]], "mapmri_isotropic_radial_signal_basis": [[283, "mapmri-isotropic-radial-signal-basis"]], "mapmri_isotropic_M_mu_independent": [[283, "mapmri-isotropic-m-mu-independent"]], "mapmri_isotropic_M_mu_dependent": [[283, "mapmri-isotropic-m-mu-dependent"]], "mapmri_isotropic_psi_matrix": [[283, "mapmri-isotropic-psi-matrix"]], "mapmri_isotropic_radial_pdf_basis": [[283, "mapmri-isotropic-radial-pdf-basis"]], "mapmri_isotropic_K_mu_independent": [[283, "mapmri-isotropic-k-mu-independent"]], "mapmri_isotropic_K_mu_dependent": [[283, "mapmri-isotropic-k-mu-dependent"]], "binomialfloat": [[283, "binomialfloat"]], "mapmri_isotropic_odf_matrix": [[283, "mapmri-isotropic-odf-matrix"]], "mapmri_isotropic_odf_sh_matrix": [[283, "mapmri-isotropic-odf-sh-matrix"]], "mapmri_isotropic_laplacian_reg_matrix": [[283, "mapmri-isotropic-laplacian-reg-matrix"]], "mapmri_isotropic_laplacian_reg_matrix_from_index_matrix": [[283, "mapmri-isotropic-laplacian-reg-matrix-from-index-matrix"]], "mapmri_isotropic_index_matrix": [[283, "mapmri-isotropic-index-matrix"]], "create_rspace": [[283, "create-rspace"], [283, "id1261"]], "delta": [[283, "delta"]], "map_laplace_u": [[283, "map-laplace-u"]], "map_laplace_t": [[283, "map-laplace-t"]], "map_laplace_s": [[283, "map-laplace-s"]], "mapmri_STU_reg_matrices": [[283, "mapmri-stu-reg-matrices"]], "mapmri_laplacian_reg_matrix": [[283, "mapmri-laplacian-reg-matrix"]], "generalized_crossvalidation_array": [[283, "generalized-crossvalidation-array"]], "generalized_crossvalidation": [[283, "generalized-crossvalidation"], [283, "id1032"]], "gcv_cost_function": [[283, "gcv-cost-function"]], "MultiShellResponse": [[283, "multishellresponse"]], "MultiShellDeconvModel": [[283, "multishelldeconvmodel"]], "MSDeconvFit": [[283, "msdeconvfit"]], "QpFitter": [[283, "qpfitter"]], "multi_tissue_basis": [[283, "multi-tissue-basis"]], "solve_qp": [[283, "solve-qp"]], "multi_shell_fiber_response": [[283, "multi-shell-fiber-response"]], "mask_for_response_msmt": [[283, "mask-for-response-msmt"]], "response_from_mask_msmt": [[283, "response-from-mask-msmt"]], "auto_response_msmt": [[283, "auto-response-msmt"]], "MeanDiffusionKurtosisModel": [[283, "meandiffusionkurtosismodel"]], "MeanDiffusionKurtosisFit": [[283, "meandiffusionkurtosisfit"]], "mean_signal_bvalue": [[283, "mean-signal-bvalue"]], "msk_from_awf": [[283, "msk-from-awf"]], "awf_from_msk": [[283, "awf-from-msk"]], "msdki_prediction": [[283, "msdki-prediction"]], "wls_fit_msdki": [[283, "wls-fit-msdki"]], "MultiVoxelFit": [[283, "multivoxelfit"]], "CallableArray": [[283, "callablearray"]], "multi_voxel_fit": [[283, "multi-voxel-fit"]], "OdfModel": [[283, "odfmodel"]], "OdfFit": [[283, "odffit"]], "gfa": [[283, "gfa"]], "minmax_normalize": [[283, "minmax-normalize"]], "QtdmriModel": [[283, "qtdmrimodel"]], "QtdmriFit": [[283, "qtdmrifit"]], "qtdmri_to_mapmri_matrix": [[283, "qtdmri-to-mapmri-matrix"]], "qtdmri_isotropic_to_mapmri_matrix": [[283, "qtdmri-isotropic-to-mapmri-matrix"]], "qtdmri_temporal_normalization": [[283, "qtdmri-temporal-normalization"]], "qtdmri_mapmri_normalization": [[283, "qtdmri-mapmri-normalization"]], "qtdmri_mapmri_isotropic_normalization": [[283, "qtdmri-mapmri-isotropic-normalization"]], "qtdmri_signal_matrix_": [[283, "qtdmri-signal-matrix"]], "qtdmri_signal_matrix": [[283, "id1010"]], "qtdmri_eap_matrix": [[283, "qtdmri-eap-matrix"]], "qtdmri_isotropic_signal_matrix_": [[283, "qtdmri-isotropic-signal-matrix"]], "qtdmri_isotropic_signal_matrix": [[283, "id1011"]], "qtdmri_eap_matrix_": [[283, "id1012"]], "qtdmri_isotropic_eap_matrix_": [[283, "qtdmri-isotropic-eap-matrix"]], "qtdmri_isotropic_eap_matrix": [[283, "id1013"]], "radial_basis_opt": [[283, "radial-basis-opt"]], "angular_basis_opt": [[283, "angular-basis-opt"]], "radial_basis_EAP_opt": [[283, "radial-basis-eap-opt"]], "angular_basis_EAP_opt": [[283, "angular-basis-eap-opt"]], "temporal_basis": [[283, "temporal-basis"]], "qtdmri_index_matrix": [[283, "qtdmri-index-matrix"]], "qtdmri_isotropic_index_matrix": [[283, "qtdmri-isotropic-index-matrix"]], "qtdmri_laplacian_reg_matrix": [[283, "qtdmri-laplacian-reg-matrix"]], "qtdmri_isotropic_laplacian_reg_matrix": [[283, "qtdmri-isotropic-laplacian-reg-matrix"]], "part23_reg_matrix_q": [[283, "part23-reg-matrix-q"]], "part23_iso_reg_matrix_q": [[283, "part23-iso-reg-matrix-q"]], "part4_reg_matrix_q": [[283, "part4-reg-matrix-q"]], "part4_iso_reg_matrix_q": [[283, "part4-iso-reg-matrix-q"]], "part1_reg_matrix_tau": [[283, "part1-reg-matrix-tau"]], "part23_reg_matrix_tau": [[283, "part23-reg-matrix-tau"]], "part4_reg_matrix_tau": [[283, "part4-reg-matrix-tau"]], "H": [[283, "h"]], "GCV_cost_function": [[283, "id1035"]], "qtdmri_isotropic_scaling": [[283, "qtdmri-isotropic-scaling"]], "qtdmri_anisotropic_scaling": [[283, "qtdmri-anisotropic-scaling"]], "design_matrix_spatial": [[283, "design-matrix-spatial"]], "create_rt_space_grid": [[283, "create-rt-space-grid"]], "qtdmri_number_of_coefficients": [[283, "qtdmri-number-of-coefficients"]], "l1_crossvalidation": [[283, "l1-crossvalidation"]], "elastic_crossvalidation": [[283, "elastic-crossvalidation"]], "visualise_gradient_table_G_Delta_rainbow": [[283, "visualise-gradient-table-g-delta-rainbow"]], "QtiModel": [[283, "qtimodel"]], "QtiFit": [[283, "qtifit"]], "from_3x3_to_6x1": [[283, "from-3x3-to-6x1"]], "from_6x1_to_3x3": [[283, "from-6x1-to-3x3"]], "from_6x6_to_21x1": [[283, "from-6x6-to-21x1"]], "from_21x1_to_6x6": [[283, "from-21x1-to-6x6"]], "cvxpy_1x6_to_3x3": [[283, "cvxpy-1x6-to-3x3"]], "cvxpy_1x21_to_6x6": [[283, "cvxpy-1x21-to-6x6"]], "dtd_covariance": [[283, "dtd-covariance"]], "qti_signal": [[283, "qti-signal"]], "RumbaSDModel": [[283, "rumbasdmodel"]], "RumbaFit": [[283, "rumbafit"]], "rumba_deconv": [[283, "rumba-deconv"]], "mbessel_ratio": [[283, "mbessel-ratio"]], "generate_kernel": [[283, "generate-kernel"]], "rumba_deconv_global": [[283, "rumba-deconv-global"]], "IsotropicModel": [[283, "isotropicmodel"]], "IsotropicFit": [[283, "isotropicfit"]], "ExponentialIsotropicModel": [[283, "exponentialisotropicmodel"]], "ExponentialIsotropicFit": [[283, "exponentialisotropicfit"]], "SparseFascicleModel": [[283, "sparsefasciclemodel"]], "SparseFascicleFit": [[283, "sparsefasciclefit"]], "sfm_design_matrix": [[283, "sfm-design-matrix"]], "SphHarmModel": [[283, "sphharmmodel"]], "QballBaseModel": [[283, "qballbasemodel"]], "SphHarmFit": [[283, "sphharmfit"]], "CsaOdfModel": [[283, "csaodfmodel"]], "OpdtModel": [[283, "opdtmodel"]], "QballModel": [[283, "qballmodel"]], "ResidualBootstrapWrapper": [[283, "residualbootstrapwrapper"]], "forward_sdeconv_mat": [[283, "forward-sdeconv-mat"]], "sh_to_rh": [[283, "sh-to-rh"]], "gen_dirac": [[283, "gen-dirac"]], "spherical_harmonics": [[283, "spherical-harmonics"]], "real_sph_harm": [[283, "real-sph-harm"]], "real_sh_tournier_from_index": [[283, "real-sh-tournier-from-index"]], "real_sh_descoteaux_from_index": [[283, "real-sh-descoteaux-from-index"]], "real_sh_tournier": [[283, "real-sh-tournier"]], "real_sh_descoteaux": [[283, "real-sh-descoteaux"]], "real_sym_sh_mrtrix": [[283, "real-sym-sh-mrtrix"]], "real_sym_sh_basis": [[283, "real-sym-sh-basis"]], "sph_harm_ind_list": [[283, "sph-harm-ind-list"]], "order_from_ncoef": [[283, "order-from-ncoef"]], "smooth_pinv": [[283, "smooth-pinv"]], "lazy_index": [[283, "lazy-index"]], "normalize_data": [[283, "normalize-data"]], "hat": [[283, "hat"]], "lcr_matrix": [[283, "lcr-matrix"]], "bootstrap_data_array": [[283, "bootstrap-data-array"]], "bootstrap_data_voxel": [[283, "bootstrap-data-voxel"]], "sf_to_sh": [[283, "sf-to-sh"]], "sh_to_sf": [[283, "sh-to-sf"]], "sh_to_sf_matrix": [[283, "sh-to-sf-matrix"]], "calculate_max_order": [[283, "calculate-max-order"]], "anisotropic_power": [[283, "anisotropic-power"]], "convert_sh_to_full_basis": [[283, "convert-sh-to-full-basis"]], "convert_sh_from_legacy": [[283, "convert-sh-from-legacy"]], "convert_sh_to_legacy": [[283, "convert-sh-to-legacy"]], "ShoreModel": [[283, "shoremodel"]], "ShoreFit": [[283, "shorefit"]], "shore_matrix": [[283, "shore-matrix"]], "shore_matrix_pdf": [[283, "shore-matrix-pdf"]], "shore_matrix_odf": [[283, "shore-matrix-odf"]], "l_shore": [[283, "l-shore"]], "n_shore": [[283, "n-shore"]], "shore_indices": [[283, "shore-indices"]], "shore_order": [[283, "shore-order"]], "dki_design_matrix": [[283, "dki-design-matrix"]], "segment": [[284, "module-dipy.segment"]], "Module: segment.benchmarks": [[284, "module-dipy.segment.benchmarks"]], "Module: segment.benchmarks.bench_quickbundles": [[284, "module-dipy.segment.benchmarks.bench_quickbundles"]], "Module: segment.bundles": [[284, "module-dipy.segment.bundles"]], "Module: segment.clustering": [[284, "module-dipy.segment.clustering"]], "Module: segment.fss": [[284, "module-dipy.segment.fss"]], "Module: segment.mask": [[284, "module-dipy.segment.mask"]], "Module: segment.metric": [[284, "module-dipy.segment.metric"]], "Module: segment.threshold": [[284, "module-dipy.segment.threshold"]], "Module: segment.tissue": [[284, "module-dipy.segment.tissue"]], "MDFpy": [[284, "mdfpy"]], "bench_quickbundles": [[284, "bench-quickbundles"]], "check_range": [[284, "check-range"]], "bundle_adjacency": [[284, "bundle-adjacency"]], "ba_analysis": [[284, "ba-analysis"]], "cluster_bundle": [[284, "cluster-bundle"]], "bundle_shape_similarity": [[284, "bundle-shape-similarity"]], "Identity": [[284, "identity"]], "Cluster": [[284, "cluster"]], "ClusterCentroid": [[284, "clustercentroid"]], "ClusterMap": [[284, "clustermap"]], "ClusterMapCentroid": [[284, "clustermapcentroid"]], "Clustering": [[284, "clustering"]], "QuickBundles": [[284, "quickbundles"]], "QuickBundlesX": [[284, "quickbundlesx"]], "TreeCluster": [[284, "treecluster"]], "TreeClusterMap": [[284, "treeclustermap"]], "qbx_and_merge": [[284, "qbx-and-merge"]], "FastStreamlineSearch": [[284, "faststreamlinesearch"]], "nearest_from_matrix_row": [[284, "nearest-from-matrix-row"]], "nearest_from_matrix_col": [[284, "nearest-from-matrix-col"]], "multi_median": [[284, "multi-median"]], "applymask": [[284, "applymask"]], "bounding_box": [[284, "bounding-box"]], "crop": [[284, "crop"]], "median_otsu": [[284, "median-otsu"]], "segment_from_cfa": [[284, "segment-from-cfa"]], "clean_cc_mask": [[284, "clean-cc-mask"]], "mdf": [[284, "mdf"]], "mean_manhattan_distance": [[284, "mean-manhattan-distance"]], "mean_euclidean_distance": [[284, "mean-euclidean-distance"]], "otsu": [[284, "otsu"]], "upper_bound_by_rate": [[284, "upper-bound-by-rate"]], "upper_bound_by_percent": [[284, "upper-bound-by-percent"]], "TissueClassifierHMRF": [[284, "tissueclassifierhmrf"]], "sims": [[285, "module-dipy.sims"]], "Module: sims.phantom": [[285, "module-dipy.sims.phantom"]], "Module: sims.voxel": [[285, "module-dipy.sims.voxel"]], "add_noise": [[285, "add-noise"], [285, "id14"]], "diff2eigenvectors": [[285, "diff2eigenvectors"]], "orbital_phantom": [[285, "orbital-phantom"]], "diffusion_evals": [[285, "diffusion-evals"]], "sticks_and_ball": [[285, "sticks-and-ball"]], "callaghan_perpendicular": [[285, "callaghan-perpendicular"]], "gaussian_parallel": [[285, "gaussian-parallel"]], "cylinders_and_ball_soderman": [[285, "cylinders-and-ball-soderman"]], "single_tensor": [[285, "single-tensor"]], "multi_tensor": [[285, "multi-tensor"]], "multi_tensor_dki": [[285, "multi-tensor-dki"]], "kurtosis_element": [[285, "kurtosis-element"]], "dki_signal": [[285, "dki-signal"]], "single_tensor_odf": [[285, "single-tensor-odf"]], "all_tensor_evecs": [[285, "all-tensor-evecs"]], "multi_tensor_odf": [[285, "multi-tensor-odf"]], "single_tensor_rtop": [[285, "single-tensor-rtop"]], "multi_tensor_rtop": [[285, "multi-tensor-rtop"]], "single_tensor_pdf": [[285, "single-tensor-pdf"]], "multi_tensor_pdf": [[285, "multi-tensor-pdf"]], "single_tensor_msd": [[285, "single-tensor-msd"]], "multi_tensor_msd": [[285, "multi-tensor-msd"]], "stats": [[286, "module-dipy.stats"]], "Module: stats.analysis": [[286, "module-dipy.stats.analysis"]], "peak_values": [[286, "peak-values"]], "anatomical_measures": [[286, "anatomical-measures"]], "assignment_map": [[286, "assignment-map"]], "gaussian_weights": [[286, "gaussian-weights"]], "afq_profile": [[286, "afq-profile"]], "tracking": [[287, "module-dipy.tracking"]], "Module: tracking._utils": [[287, "module-dipy.tracking._utils"]], "Module: tracking.benchmarks": [[287, "module-dipy.tracking.benchmarks"]], "Module: tracking.benchmarks.bench_streamline": [[287, "module-dipy.tracking.benchmarks.bench_streamline"]], "Module: tracking.learning": [[287, "module-dipy.tracking.learning"]], "Module: tracking.life": [[287, "module-dipy.tracking.life"]], "Module: tracking.local_tracking": [[287, "module-dipy.tracking.local_tracking"]], "Module: tracking.mesh": [[287, "module-dipy.tracking.mesh"]], "Module: tracking.metrics": [[287, "module-dipy.tracking.metrics"]], "Module: tracking.streamline": [[287, "module-dipy.tracking.streamline"]], "Module: tracking.utils": [[287, "module-dipy.tracking.utils"]], "Important Notes": [[287, "important-notes"]], "setup": [[287, "setup"]], "generate_streamlines": [[287, "generate-streamlines"]], "bench_set_number_of_points": [[287, "bench-set-number-of-points"]], "bench_length": [[287, "bench-length"]], "bench_compress_streamlines": [[287, "bench-compress-streamlines"]], "detect_corresponding_tracks": [[287, "detect-corresponding-tracks"]], "detect_corresponding_tracks_plus": [[287, "detect-corresponding-tracks-plus"]], "LifeSignalMaker": [[287, "lifesignalmaker"]], "FiberModel": [[287, "fibermodel"]], "FiberFit": [[287, "fiberfit"]], "gradient": [[287, "gradient"]], "streamline_gradients": [[287, "streamline-gradients"]], "grad_tensor": [[287, "grad-tensor"]], "streamline_tensors": [[287, "streamline-tensors"]], "streamline_signal": [[287, "streamline-signal"]], "voxel2streamline": [[287, "voxel2streamline"]], "LocalTracking": [[287, "localtracking"]], "ParticleFilteringTracking": [[287, "particlefilteringtracking"]], "random_coordinates_from_surface": [[287, "random-coordinates-from-surface"]], "seeds_from_surface_coordinates": [[287, "seeds-from-surface-coordinates"]], "triangles_area": [[287, "triangles-area"]], "vertices_to_triangles_values": [[287, "vertices-to-triangles-values"]], "winding": [[287, "winding"]], "length": [[287, "length"], [287, "id153"]], "bytes": [[287, "bytes"]], "midpoint": [[287, "midpoint"]], "downsample": [[287, "downsample"]], "magn": [[287, "magn"]], "frenet_serret": [[287, "frenet-serret"]], "mean_curvature": [[287, "mean-curvature"]], "mean_orientation": [[287, "mean-orientation"]], "generate_combinations": [[287, "generate-combinations"]], "longest_track_bundle": [[287, "longest-track-bundle"]], "intersect_sphere": [[287, "intersect-sphere"]], "inside_sphere": [[287, "inside-sphere"]], "inside_sphere_points": [[287, "inside-sphere-points"]], "spline": [[287, "spline"]], "startpoint": [[287, "startpoint"]], "endpoint": [[287, "endpoint"]], "arbitrarypoint": [[287, "arbitrarypoint"]], "principal_components": [[287, "principal-components"]], "midpoint2point": [[287, "midpoint2point"]], "unlist_streamlines": [[287, "unlist-streamlines"]], "relist_streamlines": [[287, "relist-streamlines"]], "center_streamlines": [[287, "center-streamlines"]], "deform_streamlines": [[287, "deform-streamlines"]], "transform_streamlines": [[287, "transform-streamlines"]], "select_random_set_of_streamlines": [[287, "select-random-set-of-streamlines"]], "select_by_rois": [[287, "select-by-rois"]], "See also": [[287, "id109"]], "cluster_confidence": [[287, "cluster-confidence"]], "orient_by_rois": [[287, "orient-by-rois"]], "orient_by_streamline": [[287, "orient-by-streamline"]], "values_from_volume": [[287, "values-from-volume"]], "nbytes": [[287, "nbytes"]], "density_map": [[287, "density-map"]], "connectivity_matrix": [[287, "connectivity-matrix"]], "ndbincount": [[287, "ndbincount"]], "reduce_labels": [[287, "reduce-labels"]], "subsegment": [[287, "subsegment"]], "seeds_from_mask": [[287, "seeds-from-mask"]], "random_seeds_from_mask": [[287, "random-seeds-from-mask"]], "target": [[287, "target"]], "target_line_based": [[287, "target-line-based"]], "streamline_near_roi": [[287, "streamline-near-roi"]], "near_roi": [[287, "near-roi"]], "unique_rows": [[287, "unique-rows"]], "transform_tracking_output": [[287, "transform-tracking-output"]], "reduce_rois": [[287, "reduce-rois"]], "path_length": [[287, "path-length"]], "max_angle_from_curvature": [[287, "max-angle-from-curvature"]], "min_radius_curvature_from_angle": [[287, "min-radius-curvature-from-angle"]], "viz": [[288, "module-dipy.viz"]], "Module: viz.gmem": [[288, "module-dipy.viz.gmem"]], "Module: viz.horizon": [[288, "module-dipy.viz.horizon"]], "Module: viz.horizon.app": [[288, "module-dipy.viz.horizon.app"]], "Module: viz.horizon.tab": [[288, "module-dipy.viz.horizon.tab"]], "Module: viz.horizon.tab.base": [[288, "module-dipy.viz.horizon.tab.base"]], "Module: viz.horizon.tab.cluster": [[288, "module-dipy.viz.horizon.tab.cluster"]], "Module: viz.horizon.tab.peak": [[288, "module-dipy.viz.horizon.tab.peak"]], "Module: viz.horizon.tab.roi": [[288, "module-dipy.viz.horizon.tab.roi"]], "Module: viz.horizon.tab.slice": [[288, "module-dipy.viz.horizon.tab.slice"]], "Module: viz.horizon.visualizer": [[288, "module-dipy.viz.horizon.visualizer"]], "Module: viz.horizon.visualizer.cluster": [[288, "module-dipy.viz.horizon.visualizer.cluster"]], "Module: viz.horizon.visualizer.slice": [[288, "module-dipy.viz.horizon.visualizer.slice"]], "Module: viz.panel": [[288, "module-dipy.viz.panel"]], "Module: viz.plotting": [[288, "module-dipy.viz.plotting"]], "Module: viz.projections": [[288, "module-dipy.viz.projections"]], "Module: viz.regtools": [[288, "module-dipy.viz.regtools"]], "Module: viz.streamline": [[288, "module-dipy.viz.streamline"]], "GlobalHorizon": [[288, "globalhorizon"]], "Horizon": [[288, "horizon"]], "horizon": [[288, "id1"]], "HorizonTab": [[288, "horizontab"]], "TabManager": [[288, "tabmanager"]], "build_label": [[288, "build-label"], [288, "id6"]], "color_single_slider": [[288, "color-single-slider"]], "color_double_slider": [[288, "color-double-slider"]], "ClustersTab": [[288, "clusterstab"]], "PeaksTab": [[288, "peakstab"]], "ROIsTab": [[288, "roistab"]], "SlicesTab": [[288, "slicestab"]], "ClustersVisualizer": [[288, "clustersvisualizer"]], "SlicesVisualizer": [[288, "slicesvisualizer"]], "slicer_panel": [[288, "slicer-panel"]], "compare_maps": [[288, "compare-maps"]], "compare_qti_maps": [[288, "compare-qti-maps"]], "bundle_shape_profile": [[288, "bundle-shape-profile"]], "sph_project": [[288, "sph-project"]], "simple_plot": [[288, "simple-plot"]], "overlay_images": [[288, "overlay-images"]], "draw_lattice_2d": [[288, "draw-lattice-2d"]], "plot_2d_diffeomorphic_map": [[288, "plot-2d-diffeomorphic-map"]], "plot_slices": [[288, "plot-slices"]], "overlay_slices": [[288, "overlay-slices"]], "show_bundles": [[288, "show-bundles"]], "viz_two_bundles": [[288, "viz-two-bundles"]], "viz_vector_field": [[288, "viz-vector-field"]], "viz_displacement_mag": [[288, "viz-displacement-mag"]], "workflows": [[289, "module-dipy.workflows"]], "Module: workflows.align": [[289, "module-dipy.workflows.align"]], "Module: workflows.base": [[289, "module-dipy.workflows.base"]], "Module: workflows.combined_workflow": [[289, "module-dipy.workflows.combined_workflow"]], "Module: workflows.denoise": [[289, "module-dipy.workflows.denoise"]], "Module: workflows.docstring_parser": [[289, "module-dipy.workflows.docstring_parser"]], "Module: workflows.flow_runner": [[289, "module-dipy.workflows.flow_runner"]], "Module: workflows.io": [[289, "module-dipy.workflows.io"]], "Module: workflows.mask": [[289, "module-dipy.workflows.mask"]], "Module: workflows.multi_io": [[289, "module-dipy.workflows.multi_io"]], "Module: workflows.nn": [[289, "module-dipy.workflows.nn"]], "Module: workflows.reconst": [[289, "module-dipy.workflows.reconst"]], "Module: workflows.segment": [[289, "module-dipy.workflows.segment"]], "Module: workflows.stats": [[289, "module-dipy.workflows.stats"]], "Module: workflows.tracking": [[289, "module-dipy.workflows.tracking"]], "Module: workflows.viz": [[289, "module-dipy.workflows.viz"]], "Module: workflows.workflow": [[289, "module-dipy.workflows.workflow"]], "ResliceFlow": [[289, "resliceflow"]], "SlrWithQbxFlow": [[289, "slrwithqbxflow"]], "ImageRegistrationFlow": [[289, "imageregistrationflow"]], "ApplyTransformFlow": [[289, "applytransformflow"]], "SynRegistrationFlow": [[289, "synregistrationflow"]], "MotionCorrectionFlow": [[289, "motioncorrectionflow"]], "BundleWarpFlow": [[289, "bundlewarpflow"]], "check_dimensions": [[289, "check-dimensions"]], "IntrospectiveArgumentParser": [[289, "introspectiveargumentparser"]], "get_args_default": [[289, "get-args-default"]], "none_or_dtype": [[289, "none-or-dtype"]], "CombinedWorkflow": [[289, "combinedworkflow"]], "Patch2SelfFlow": [[289, "patch2selfflow"]], "NLMeansFlow": [[289, "nlmeansflow"]], "LPCAFlow": [[289, "lpcaflow"]], "MPPCAFlow": [[289, "mppcaflow"]], "GibbsRingingFlow": [[289, "gibbsringingflow"]], "Reader": [[289, "reader"]], "NumpyDocString": [[289, "numpydocstring"]], "dedent_lines": [[289, "dedent-lines"]], "get_level": [[289, "get-level"]], "run_flow": [[289, "run-flow"]], "IoInfoFlow": [[289, "ioinfoflow"]], "FetchFlow": [[289, "fetchflow"]], "SplitFlow": [[289, "splitflow"]], "MaskFlow": [[289, "maskflow"]], "IOIterator": [[289, "ioiterator"]], "common_start": [[289, "common-start"]], "slash_to_under": [[289, "slash-to-under"]], "connect_output_paths": [[289, "connect-output-paths"]], "concatenate_inputs": [[289, "concatenate-inputs"]], "basename_without_extension": [[289, "basename-without-extension"]], "io_iterator": [[289, "io-iterator"]], "io_iterator_": [[289, "id49"]], "EVACPlusFlow": [[289, "evacplusflow"]], "ReconstMAPMRIFlow": [[289, "reconstmapmriflow"]], "ReconstDtiFlow": [[289, "reconstdtiflow"]], "ReconstCSDFlow": [[289, "reconstcsdflow"]], "ReconstCSAFlow": [[289, "reconstcsaflow"]], "ReconstDkiFlow": [[289, "reconstdkiflow"]], "ReconstIvimFlow": [[289, "reconstivimflow"]], "ReconstRUMBAFlow": [[289, "reconstrumbaflow"]], "MedianOtsuFlow": [[289, "medianotsuflow"]], "RecoBundlesFlow": [[289, "recobundlesflow"]], "LabelsBundlesFlow": [[289, "labelsbundlesflow"]], "SNRinCCFlow": [[289, "snrinccflow"]], "BundleAnalysisTractometryFlow": [[289, "bundleanalysistractometryflow"]], "LinearMixedModelsFlow": [[289, "linearmixedmodelsflow"]], "BundleShapeAnalysis": [[289, "bundleshapeanalysis"]], "buan_bundle_profiles": [[289, "buan-bundle-profiles"]], "LocalFiberTrackingPAMFlow": [[289, "localfibertrackingpamflow"]], "PFTrackingPAMFlow": [[289, "pftrackingpamflow"]], "HorizonFlow": [[289, "horizonflow"]], "Workflow": [[289, "workflow"]], "API Reference": [[290, "api-reference"]], "dipy_align_affine": [[291, "dipy-align-affine"]], "Usage": [[291, "usage"], [292, "usage"], [293, "usage"], [294, "usage"], [295, "usage"], [296, "usage"], [297, "usage"], [298, "usage"], [299, "usage"], [300, "usage"], [301, "usage"], [302, "usage"], [303, "usage"], [304, "usage"], [305, "usage"], [306, "usage"], [307, "usage"], [308, "usage"], [309, "usage"], [310, "usage"], [311, "usage"], [312, "usage"], [313, "usage"], [314, "usage"], [315, "usage"], [316, "usage"], [317, "usage"], [318, "usage"], [319, "usage"], [320, "usage"], [321, "usage"], [322, "usage"]], "Positional Arguments": [[291, "positional-arguments"], [292, "positional-arguments"], [293, "positional-arguments"], [294, "positional-arguments"], [295, "positional-arguments"], [296, "positional-arguments"], [297, "positional-arguments"], [298, "positional-arguments"], [299, "positional-arguments"], [300, "positional-arguments"], [301, "positional-arguments"], [302, "positional-arguments"], [303, "positional-arguments"], [304, "positional-arguments"], [305, "positional-arguments"], [306, "positional-arguments"], [307, "positional-arguments"], [308, "positional-arguments"], [309, "positional-arguments"], [310, "positional-arguments"], [311, "positional-arguments"], [312, "positional-arguments"], [313, "positional-arguments"], [314, "positional-arguments"], [315, "positional-arguments"], [316, "positional-arguments"], [317, "positional-arguments"], [318, "positional-arguments"], [319, "positional-arguments"], [320, "positional-arguments"], [321, "positional-arguments"], [322, "positional-arguments"]], "Optional Arguments": [[291, "optional-arguments"], [292, "optional-arguments"], [293, "optional-arguments"], [294, "optional-arguments"], [295, "optional-arguments"], [296, "optional-arguments"], [297, "optional-arguments"], [298, "optional-arguments"], [299, "optional-arguments"], [300, "optional-arguments"], [301, "optional-arguments"], [302, "optional-arguments"], [303, "optional-arguments"], [304, "optional-arguments"], [305, "optional-arguments"], [306, "optional-arguments"], [307, "optional-arguments"], [308, "optional-arguments"], [309, "optional-arguments"], [310, "optional-arguments"], [311, "optional-arguments"], [312, "optional-arguments"], [313, "optional-arguments"], [314, "optional-arguments"], [315, "optional-arguments"], [316, "optional-arguments"], [317, "optional-arguments"], [318, "optional-arguments"], [319, "optional-arguments"], [320, "optional-arguments"], [321, "optional-arguments"], [322, "optional-arguments"]], "Output Arguments(Optional)": [[291, "output-arguments-optional"], [292, "output-arguments-optional"], [293, "output-arguments-optional"], [294, "output-arguments-optional"], [295, "output-arguments-optional"], [296, "output-arguments-optional"], [297, "output-arguments-optional"], [298, "output-arguments-optional"], [299, "output-arguments-optional"], [300, "output-arguments-optional"], [301, "output-arguments-optional"], [302, "output-arguments-optional"], [303, "output-arguments-optional"], [304, "output-arguments-optional"], [305, "output-arguments-optional"], [306, "output-arguments-optional"], [307, "output-arguments-optional"], [308, "output-arguments-optional"], [309, "output-arguments-optional"], [310, "output-arguments-optional"], [311, "output-arguments-optional"], [313, "output-arguments-optional"], [314, "output-arguments-optional"], [315, "output-arguments-optional"], [316, "output-arguments-optional"], [317, "output-arguments-optional"], [318, "output-arguments-optional"], [319, "output-arguments-optional"], [320, "output-arguments-optional"], [321, "output-arguments-optional"], [322, "output-arguments-optional"]], "dipy_align_syn": [[292, "dipy-align-syn"]], "dipy_apply_transform": [[293, "dipy-apply-transform"]], "dipy_buan_lmm": [[294, "dipy-buan-lmm"]], "dipy_buan_profiles": [[295, "dipy-buan-profiles"]], "dipy_bundlewarp": [[296, "dipy-bundlewarp"]], "dipy_correct_motion": [[297, "dipy-correct-motion"]], "dipy_denoise_lpca": [[298, "dipy-denoise-lpca"]], "dipy_denoise_mppca": [[299, "dipy-denoise-mppca"]], "dipy_denoise_nlmeans": [[300, "dipy-denoise-nlmeans"]], "dipy_denoise_patch2self": [[301, "dipy-denoise-patch2self"]], "dipy_evac_plus": [[302, "dipy-evac-plus"]], "dipy_fetch": [[303, "dipy-fetch"]], "dipy_fit_csa": [[304, "dipy-fit-csa"]], "dipy_fit_csd": [[305, "dipy-fit-csd"]], "dipy_fit_dki": [[306, "dipy-fit-dki"]], "dipy_fit_dti": [[307, "dipy-fit-dti"]], "dipy_fit_ivim": [[308, "dipy-fit-ivim"]], "dipy_fit_mapmri": [[309, "dipy-fit-mapmri"]], "dipy_gibbs_ringing": [[310, "dipy-gibbs-ringing"]], "dipy_horizon": [[311, "dipy-horizon"]], "dipy_info": [[312, "dipy-info"]], "dipy_labelsbundles": [[313, "dipy-labelsbundles"]], "dipy_mask": [[314, "dipy-mask"]], "dipy_median_otsu": [[315, "dipy-median-otsu"]], "dipy_recobundles": [[316, "dipy-recobundles"]], "dipy_reslice": [[317, "dipy-reslice"]], "dipy_slr": [[318, "dipy-slr"]], "dipy_snr_in_cc": [[319, "dipy-snr-in-cc"]], "dipy_split": [[320, "dipy-split"]], "dipy_track": [[321, "dipy-track"]], "dipy_track_pft": [[322, "dipy-track-pft"]], "Command Line Utilities Reference": [[323, "command-line-utilities-reference"]], "Release notes for DIPY version 0.10": [[324, "release-notes-for-dipy-version-0-10"]], "Release notes for DIPY version 0.11": [[325, "release-notes-for-dipy-version-0-11"]], "Release notes for DIPY version 0.12": [[326, "release-notes-for-dipy-version-0-12"]], "Release notes for DIPY version 0.13": [[327, "release-notes-for-dipy-version-0-13"]], "Release notes for DIPY version 0.14": [[328, "release-notes-for-dipy-version-0-14"]], "Release notes for DIPY version 0.15": [[329, "release-notes-for-dipy-version-0-15"]], "Release notes for DIPY version 0.16": [[330, "release-notes-for-dipy-version-0-16"]], "Release notes for DIPY version 0.6": [[331, "release-notes-for-dipy-version-0-6"]], "Release notes for DIPY version 0.7": [[332, "release-notes-for-dipy-version-0-7"]], "Release notes for DIPY version 0.8": [[333, "release-notes-for-dipy-version-0-8"]], "Release notes for DIPY version 0.9": [[334, "release-notes-for-dipy-version-0-9"]], "Release notes for DIPY version 1.0": [[335, "release-notes-for-dipy-version-1-0"]], "Release notes for DIPY version 1.1": [[336, "release-notes-for-dipy-version-1-1"]], "Release notes for DIPY version 1.2": [[337, "release-notes-for-dipy-version-1-2"]], "Release notes for DIPY version 1.3": [[338, "release-notes-for-dipy-version-1-3"]], "Release notes for DIPY version 1.4": [[339, "release-notes-for-dipy-version-1-4"]], "Release notes for DIPY version 1.4.1": [[340, "release-notes-for-dipy-version-1-4-1"]], "Release notes for DIPY version 1.5": [[341, "release-notes-for-dipy-version-1-5"]], "Release notes for DIPY version 1.6": [[342, "release-notes-for-dipy-version-1-6"]], "Release notes for DIPY version 1.7": [[343, "release-notes-for-dipy-version-1-7"]], "A quick overview of features": [[344, "a-quick-overview-of-features"]], "Systems supported": [[344, "systems-supported"]], "Subscribe": [[345, "subscribe"]], "DIY Stuff about b and q": [[346, "diy-stuff-about-b-and-q"]], "The B matrix and Siemens DICOM": [[346, "the-b-matrix-and-siemens-dicom"], [347, "the-b-matrix-and-siemens-dicom"]], "\u2026 and what about \u2018q\u2019?": [[346, "and-what-about-q"]], "Generalised Q-Sampling Imaging": [[348, "generalised-q-sampling-imaging"]], "Theory and concepts": [[349, "theory-and-concepts"]], "Spherical Harmonic bases": [[350, "spherical-harmonic-bases"]], "Spherical coordinates": [[351, "spherical-coordinates"]], "Terms": [[351, "terms"]], "The physics convention": [[351, "the-physics-convention"]], "The mathematics convention": [[351, "the-mathematics-convention"]], "Matlab convention": [[351, "matlab-convention"]]}, "indexentries": {"affine matrix": [[231, "term-Affine-matrix"]], "affine transformation": [[231, "term-Affine-transformation"]], "axis angle": [[231, "term-Axis-angle"]], "euclidean norm": [[231, "term-Euclidean-norm"]], "euler angles": [[231, "term-Euler-angles"]], "gimbal lock": [[231, "term-Gimbal-lock"]], "homogeneous coordinates": [[231, "term-Homogeneous-coordinates"]], "linear transformation": [[231, "term-Linear-transformation"]], "quaternion": [[231, "term-Quaternion"]], "reflection": [[231, "term-Reflection"]], "rotation matrix": [[231, "term-Rotation-matrix"]], "rotation vector": [[231, "term-Rotation-vector"]], "shear matrix": [[231, "term-Shear-matrix"]], "unit vector": [[231, "term-Unit-vector"]], "dipy": [[274, "module-dipy"]], "get_info() (in module dipy)": [[274, "dipy.get_info"]], "module": [[274, "module-dipy"], [275, "module-dipy.align"], [275, "module-dipy.align._public"], [275, "module-dipy.align.cpd"], [275, "module-dipy.align.imaffine"], [275, "module-dipy.align.imwarp"], [275, "module-dipy.align.metrics"], [275, "module-dipy.align.reslice"], [275, "module-dipy.align.scalespace"], [275, "module-dipy.align.streamlinear"], [275, "module-dipy.align.streamwarp"], [276, "module-dipy.boots"], [277, "module-dipy.core"], [277, "module-dipy.core.benchmarks"], [277, "module-dipy.core.benchmarks.bench_sphere"], [277, "module-dipy.core.geometry"], [277, "module-dipy.core.gradients"], [277, "module-dipy.core.graph"], [277, "module-dipy.core.histeq"], [277, "module-dipy.core.ndindex"], [277, "module-dipy.core.onetime"], [277, "module-dipy.core.optimize"], [277, "module-dipy.core.profile"], [277, "module-dipy.core.rng"], [277, "module-dipy.core.sphere"], [277, "module-dipy.core.sphere_stats"], [277, "module-dipy.core.subdivide_octahedron"], [277, "module-dipy.core.wavelet"], [278, "module-dipy.data"], [278, "module-dipy.data.fetcher"], [279, "module-dipy.denoise"], [279, "module-dipy.denoise.adaptive_soft_matching"], [279, "module-dipy.denoise.gibbs"], [279, "module-dipy.denoise.localpca"], [279, "module-dipy.denoise.nlmeans"], [279, "module-dipy.denoise.noise_estimate"], [279, "module-dipy.denoise.non_local_means"], [279, "module-dipy.denoise.patch2self"], [280, "module-dipy.direction"], [280, "module-dipy.direction.peaks"], [281, "module-dipy.io"], [281, "module-dipy.io.bvectxt"], [281, "module-dipy.io.dpy"], [281, "module-dipy.io.gradients"], [281, "module-dipy.io.image"], [281, "module-dipy.io.peaks"], [281, "module-dipy.io.pickles"], [281, "module-dipy.io.stateful_tractogram"], [281, "module-dipy.io.streamline"], [281, "module-dipy.io.utils"], [281, "module-dipy.io.vtk"], [282, "module-dipy.nn"], [282, "module-dipy.nn.cnn_1d_denoising"], [282, "module-dipy.nn.evac"], [282, "module-dipy.nn.histo_resdnn"], [282, "module-dipy.nn.model"], [282, "module-dipy.nn.synb0"], [282, "module-dipy.nn.utils"], [283, "module-dipy.reconst"], [283, "module-dipy.reconst.base"], [283, "module-dipy.reconst.benchmarks"], [283, "module-dipy.reconst.benchmarks.bench_bounding_box"], [283, "module-dipy.reconst.benchmarks.bench_csd"], [283, "module-dipy.reconst.benchmarks.bench_peaks"], [283, "module-dipy.reconst.benchmarks.bench_squash"], [283, "module-dipy.reconst.benchmarks.bench_vec_val_sum"], [283, "module-dipy.reconst.cache"], [283, "module-dipy.reconst.cross_validation"], [283, "module-dipy.reconst.csdeconv"], [283, "module-dipy.reconst.dki"], [283, "module-dipy.reconst.dki_micro"], [283, "module-dipy.reconst.dsi"], [283, "module-dipy.reconst.dti"], [283, "module-dipy.reconst.forecast"], [283, "module-dipy.reconst.fwdti"], [283, "module-dipy.reconst.gqi"], [283, "module-dipy.reconst.ivim"], [283, "module-dipy.reconst.mapmri"], [283, "module-dipy.reconst.mcsd"], [283, "module-dipy.reconst.msdki"], [283, "module-dipy.reconst.multi_voxel"], [283, "module-dipy.reconst.odf"], [283, "module-dipy.reconst.qtdmri"], [283, "module-dipy.reconst.qti"], [283, "module-dipy.reconst.rumba"], [283, "module-dipy.reconst.sfm"], [283, "module-dipy.reconst.shm"], [283, "module-dipy.reconst.shore"], [283, "module-dipy.reconst.utils"], [284, "module-dipy.segment"], [284, "module-dipy.segment.benchmarks"], [284, "module-dipy.segment.benchmarks.bench_quickbundles"], [284, "module-dipy.segment.bundles"], [284, "module-dipy.segment.clustering"], [284, "module-dipy.segment.fss"], [284, "module-dipy.segment.mask"], [284, "module-dipy.segment.metric"], [284, "module-dipy.segment.threshold"], [284, "module-dipy.segment.tissue"], [285, "module-dipy.sims"], [285, "module-dipy.sims.phantom"], [285, "module-dipy.sims.voxel"], [286, "module-dipy.stats"], [286, "module-dipy.stats.analysis"], [287, "module-dipy.tracking"], [287, "module-dipy.tracking._utils"], [287, "module-dipy.tracking.benchmarks"], [287, "module-dipy.tracking.benchmarks.bench_streamline"], [287, "module-dipy.tracking.learning"], [287, "module-dipy.tracking.life"], [287, "module-dipy.tracking.local_tracking"], [287, "module-dipy.tracking.mesh"], [287, "module-dipy.tracking.metrics"], [287, "module-dipy.tracking.streamline"], [287, "module-dipy.tracking.utils"], [288, "module-dipy.viz"], [288, "module-dipy.viz.gmem"], [288, "module-dipy.viz.horizon"], [288, "module-dipy.viz.horizon.app"], [288, "module-dipy.viz.horizon.tab"], [288, "module-dipy.viz.horizon.tab.base"], [288, "module-dipy.viz.horizon.tab.cluster"], [288, "module-dipy.viz.horizon.tab.peak"], [288, "module-dipy.viz.horizon.tab.roi"], [288, "module-dipy.viz.horizon.tab.slice"], [288, "module-dipy.viz.horizon.visualizer"], [288, "module-dipy.viz.horizon.visualizer.cluster"], [288, "module-dipy.viz.horizon.visualizer.slice"], [288, "module-dipy.viz.panel"], [288, "module-dipy.viz.plotting"], [288, "module-dipy.viz.projections"], [288, "module-dipy.viz.regtools"], [288, "module-dipy.viz.streamline"], [289, "module-dipy.workflows"], [289, "module-dipy.workflows.align"], [289, "module-dipy.workflows.base"], [289, "module-dipy.workflows.combined_workflow"], [289, "module-dipy.workflows.denoise"], [289, "module-dipy.workflows.docstring_parser"], [289, "module-dipy.workflows.flow_runner"], [289, "module-dipy.workflows.io"], [289, "module-dipy.workflows.mask"], [289, "module-dipy.workflows.multi_io"], [289, "module-dipy.workflows.nn"], [289, "module-dipy.workflows.reconst"], [289, "module-dipy.workflows.segment"], [289, "module-dipy.workflows.stats"], [289, "module-dipy.workflows.tracking"], [289, "module-dipy.workflows.viz"], [289, "module-dipy.workflows.workflow"]], "affineinvalidvalueserror (class in dipy.align.imaffine)": [[275, "dipy.align.imaffine.AffineInvalidValuesError"]], "affineinversionerror (class in dipy.align.imaffine)": [[275, "dipy.align.imaffine.AffineInversionError"]], "affinemap (class in dipy.align.imaffine)": [[275, "dipy.align.imaffine.AffineMap"]], "affineregistration (class in dipy.align.imaffine)": [[275, "dipy.align.imaffine.AffineRegistration"]], "bunch (class in dipy.align)": [[275, "dipy.align.Bunch"]], "bundlemindistanceasymmetricmetric (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric"]], "bundlemindistancematrixmetric (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.BundleMinDistanceMatrixMetric"]], "bundlemindistancemetric (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.BundleMinDistanceMetric"]], "bundlesumdistancematrixmetric (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.BundleSumDistanceMatrixMetric"]], "ccmetric (class in dipy.align.metrics)": [[275, "dipy.align.metrics.CCMetric"]], "deformableregistration (class in dipy.align.cpd)": [[275, "dipy.align.cpd.DeformableRegistration"]], "diffeomorphicmap (class in dipy.align.imwarp)": [[275, "dipy.align.imwarp.DiffeomorphicMap"]], "diffeomorphicregistration (class in dipy.align.imwarp)": [[275, "dipy.align.imwarp.DiffeomorphicRegistration"]], "emmetric (class in dipy.align.metrics)": [[275, "dipy.align.metrics.EMMetric"]], "isotropicscalespace (class in dipy.align.scalespace)": [[275, "dipy.align.scalespace.IsotropicScaleSpace"]], "jointbundlemindistancemetric (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.JointBundleMinDistanceMetric"]], "jointstreamlineregistrationmap (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.JointStreamlineRegistrationMap"]], "mutualinformationmetric (class in dipy.align.imaffine)": [[275, "dipy.align.imaffine.MutualInformationMetric"]], "registrationstages() (in module dipy.align.imwarp)": [[275, "dipy.align.imwarp.RegistrationStages"]], "ssdmetric (class in dipy.align.metrics)": [[275, "dipy.align.metrics.SSDMetric"]], "scalespace (class in dipy.align.scalespace)": [[275, "dipy.align.scalespace.ScaleSpace"]], "similaritymetric (class in dipy.align.metrics)": [[275, "dipy.align.metrics.SimilarityMetric"]], "streamlinedistancemetric (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.StreamlineDistanceMetric"]], "streamlinelinearregistration (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.StreamlineLinearRegistration"]], "streamlineregistrationmap (class in dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.StreamlineRegistrationMap"]], "symmetricdiffeomorphicregistration (class in dipy.align.imwarp)": [[275, "dipy.align.imwarp.SymmetricDiffeomorphicRegistration"]], "verbositylevels() (in module dipy.align)": [[275, "dipy.align.VerbosityLevels"]], "_method_dict() (in module dipy.align._public)": [[275, "dipy.align._public._METHOD_DICT"]], "__init__() (dipy.align.bunch method)": [[275, "dipy.align.Bunch.__init__"]], "__init__() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.__init__"]], "__init__() (dipy.align.imaffine.affineinvalidvalueserror method)": [[275, "dipy.align.imaffine.AffineInvalidValuesError.__init__"]], "__init__() (dipy.align.imaffine.affineinversionerror method)": [[275, "dipy.align.imaffine.AffineInversionError.__init__"]], "__init__() (dipy.align.imaffine.affinemap method)": [[275, "dipy.align.imaffine.AffineMap.__init__"]], "__init__() (dipy.align.imaffine.affineregistration method)": [[275, "dipy.align.imaffine.AffineRegistration.__init__"]], "__init__() (dipy.align.imaffine.mutualinformationmetric method)": [[275, "dipy.align.imaffine.MutualInformationMetric.__init__"]], "__init__() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.__init__"]], "__init__() (dipy.align.imwarp.diffeomorphicregistration method)": [[275, "dipy.align.imwarp.DiffeomorphicRegistration.__init__"]], "__init__() (dipy.align.imwarp.symmetricdiffeomorphicregistration method)": [[275, "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__"]], "__init__() (dipy.align.metrics.ccmetric method)": [[275, "dipy.align.metrics.CCMetric.__init__"]], "__init__() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.__init__"]], "__init__() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.__init__"]], "__init__() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.__init__"]], "__init__() (dipy.align.scalespace.isotropicscalespace method)": [[275, "dipy.align.scalespace.IsotropicScaleSpace.__init__"]], "__init__() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.__init__"]], "__init__() (dipy.align.streamlinear.bundlemindistanceasymmetricmetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.__init__"]], "__init__() (dipy.align.streamlinear.bundlemindistancematrixmetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__"]], "__init__() (dipy.align.streamlinear.bundlemindistancemetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceMetric.__init__"]], "__init__() (dipy.align.streamlinear.bundlesumdistancematrixmetric method)": [[275, "dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__"]], "__init__() (dipy.align.streamlinear.jointbundlemindistancemetric method)": [[275, "dipy.align.streamlinear.JointBundleMinDistanceMetric.__init__"]], "__init__() (dipy.align.streamlinear.jointstreamlineregistrationmap method)": [[275, "dipy.align.streamlinear.JointStreamlineRegistrationMap.__init__"]], "__init__() (dipy.align.streamlinear.streamlinedistancemetric method)": [[275, "dipy.align.streamlinear.StreamlineDistanceMetric.__init__"]], "__init__() (dipy.align.streamlinear.streamlinelinearregistration method)": [[275, "dipy.align.streamlinear.StreamlineLinearRegistration.__init__"]], "__init__() (dipy.align.streamlinear.streamlineregistrationmap method)": [[275, "dipy.align.streamlinear.StreamlineRegistrationMap.__init__"]], "_transform_method() (in module dipy.align.imaffine)": [[275, "dipy.align.imaffine._transform_method"]], "affine() (in module dipy.align._public)": [[275, "dipy.align._public.affine"]], "affine_registration() (in module dipy.align._public)": [[275, "dipy.align._public.affine_registration"]], "allocate() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.allocate"]], "average_bundle_length() (in module dipy.align.streamwarp)": [[275, "dipy.align.streamwarp.average_bundle_length"]], "bundle_min_distance() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.bundle_min_distance"]], "bundle_min_distance_asymmetric_fast() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.bundle_min_distance_asymmetric_fast"]], "bundle_min_distance_fast() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.bundle_min_distance_fast"]], "bundle_sum_distance() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.bundle_sum_distance"]], "bundlewarp() (in module dipy.align.streamwarp)": [[275, "dipy.align.streamwarp.bundlewarp"]], "bundlewarp_shape_analysis() (in module dipy.align.streamwarp)": [[275, "dipy.align.streamwarp.bundlewarp_shape_analysis"]], "bundlewarp_vector_filed() (in module dipy.align.streamwarp)": [[275, "dipy.align.streamwarp.bundlewarp_vector_filed"]], "center_of_mass() (in module dipy.align._public)": [[275, "dipy.align._public.center_of_mass"]], "compose_matrix44() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.compose_matrix44"]], "compute_backward() (dipy.align.metrics.ccmetric method)": [[275, "dipy.align.metrics.CCMetric.compute_backward"]], "compute_backward() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.compute_backward"]], "compute_backward() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.compute_backward"]], "compute_backward() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.compute_backward"]], "compute_demons_step() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.compute_demons_step"]], "compute_demons_step() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.compute_demons_step"]], "compute_forward() (dipy.align.metrics.ccmetric method)": [[275, "dipy.align.metrics.CCMetric.compute_forward"]], "compute_forward() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.compute_forward"]], "compute_forward() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.compute_forward"]], "compute_forward() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.compute_forward"]], "compute_gauss_newton_step() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.compute_gauss_newton_step"]], "compute_gauss_newton_step() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.compute_gauss_newton_step"]], "compute_inversion_error() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error"]], "decompose_matrix44() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.decompose_matrix44"]], "dipy.align": [[275, "module-dipy.align"]], "dipy.align._public": [[275, "module-dipy.align._public"]], "dipy.align.cpd": [[275, "module-dipy.align.cpd"]], "dipy.align.imaffine": [[275, "module-dipy.align.imaffine"]], "dipy.align.imwarp": [[275, "module-dipy.align.imwarp"]], "dipy.align.metrics": [[275, "module-dipy.align.metrics"]], "dipy.align.reslice": [[275, "module-dipy.align.reslice"]], "dipy.align.scalespace": [[275, "module-dipy.align.scalespace"]], "dipy.align.streamlinear": [[275, "module-dipy.align.streamlinear"]], "dipy.align.streamwarp": [[275, "module-dipy.align.streamwarp"]], "distance() (dipy.align.imaffine.mutualinformationmetric method)": [[275, "dipy.align.imaffine.MutualInformationMetric.distance"]], "distance() (dipy.align.streamlinear.bundlemindistanceasymmetricmetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance"]], "distance() (dipy.align.streamlinear.bundlemindistancematrixmetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance"]], "distance() (dipy.align.streamlinear.bundlemindistancemetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceMetric.distance"]], "distance() (dipy.align.streamlinear.bundlesumdistancematrixmetric method)": [[275, "dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance"]], "distance() (dipy.align.streamlinear.jointbundlemindistancemetric method)": [[275, "dipy.align.streamlinear.JointBundleMinDistanceMetric.distance"]], "distance() (dipy.align.streamlinear.streamlinedistancemetric method)": [[275, "dipy.align.streamlinear.StreamlineDistanceMetric.distance"]], "distance_and_gradient() (dipy.align.imaffine.mutualinformationmetric method)": [[275, "dipy.align.imaffine.MutualInformationMetric.distance_and_gradient"]], "docstring_addendum (dipy.align.imaffine.affineregistration attribute)": [[275, "dipy.align.imaffine.AffineRegistration.docstring_addendum"]], "expand_fields() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.expand_fields"]], "expectation() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.expectation"]], "find_missing() (in module dipy.align.streamwarp)": [[275, "dipy.align.streamwarp.find_missing"]], "free_iteration() (dipy.align.metrics.ccmetric method)": [[275, "dipy.align.metrics.CCMetric.free_iteration"]], "free_iteration() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.free_iteration"]], "free_iteration() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.free_iteration"]], "free_iteration() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.free_iteration"]], "gaussian_kernel() (in module dipy.align.cpd)": [[275, "dipy.align.cpd.gaussian_kernel"]], "get_affine() (dipy.align.imaffine.affinemap method)": [[275, "dipy.align.imaffine.AffineMap.get_affine"]], "get_affine() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_affine"]], "get_affine_inv() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_affine_inv"]], "get_backward_field() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.get_backward_field"]], "get_direction_and_spacings() (in module dipy.align.imwarp)": [[275, "dipy.align.imwarp.get_direction_and_spacings"]], "get_domain_shape() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_domain_shape"]], "get_energy() (dipy.align.metrics.ccmetric method)": [[275, "dipy.align.metrics.CCMetric.get_energy"]], "get_energy() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.get_energy"]], "get_energy() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.get_energy"]], "get_energy() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.get_energy"]], "get_expand_factors() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_expand_factors"]], "get_forward_field() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.get_forward_field"]], "get_image() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_image"]], "get_map() (dipy.align.imwarp.diffeomorphicregistration method)": [[275, "dipy.align.imwarp.DiffeomorphicRegistration.get_map"]], "get_map() (dipy.align.imwarp.symmetricdiffeomorphicregistration method)": [[275, "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map"]], "get_registration_parameters() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.get_registration_parameters"]], "get_scaling() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_scaling"]], "get_sigmas() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_sigmas"]], "get_simplified_transform() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform"]], "get_spacing() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.get_spacing"]], "get_unique_pairs() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.get_unique_pairs"]], "gradient() (dipy.align.imaffine.mutualinformationmetric method)": [[275, "dipy.align.imaffine.MutualInformationMetric.gradient"]], "groupwise_slr() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.groupwise_slr"]], "initialize_iteration() (dipy.align.metrics.ccmetric method)": [[275, "dipy.align.metrics.CCMetric.initialize_iteration"]], "initialize_iteration() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.initialize_iteration"]], "initialize_iteration() (dipy.align.metrics.ssdmetric method)": [[275, "dipy.align.metrics.SSDMetric.initialize_iteration"]], "initialize_iteration() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.initialize_iteration"]], "initialize_sigma2() (in module dipy.align.cpd)": [[275, "dipy.align.cpd.initialize_sigma2"]], "interpret_matrix() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.interpret_matrix"]], "inverse() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.inverse"]], "iterate() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.iterate"]], "logger() (in module dipy.align.imwarp)": [[275, "dipy.align.imwarp.logger"]], "logger() (in module dipy.align.scalespace)": [[275, "dipy.align.scalespace.logger"]], "logger() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.logger"]], "low_rank_eigen() (in module dipy.align.cpd)": [[275, "dipy.align.cpd.low_rank_eigen"]], "lowrankqs() (in module dipy.align.cpd)": [[275, "dipy.align.cpd.lowrankQS"]], "maximization() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.maximization"]], "motion_correction() (in module dipy.align._public)": [[275, "dipy.align._public.motion_correction"]], "mult_aff() (in module dipy.align.imwarp)": [[275, "dipy.align.imwarp.mult_aff"]], "optimize() (dipy.align.imaffine.affineregistration method)": [[275, "dipy.align.imaffine.AffineRegistration.optimize"]], "optimize() (dipy.align.imwarp.diffeomorphicregistration method)": [[275, "dipy.align.imwarp.DiffeomorphicRegistration.optimize"]], "optimize() (dipy.align.imwarp.symmetricdiffeomorphicregistration method)": [[275, "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize"]], "optimize() (dipy.align.streamlinear.streamlinelinearregistration method)": [[275, "dipy.align.streamlinear.StreamlineLinearRegistration.optimize"]], "print_level() (dipy.align.scalespace.scalespace method)": [[275, "dipy.align.scalespace.ScaleSpace.print_level"]], "progressive_slr() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.progressive_slr"]], "read_mapping() (in module dipy.align._public)": [[275, "dipy.align._public.read_mapping"]], "register() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.register"]], "register_dwi_series() (in module dipy.align._public)": [[275, "dipy.align._public.register_dwi_series"]], "register_dwi_to_template() (in module dipy.align._public)": [[275, "dipy.align._public.register_dwi_to_template"]], "register_series() (in module dipy.align._public)": [[275, "dipy.align._public.register_series"]], "remove_clusters_by_size() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.remove_clusters_by_size"]], "resample() (in module dipy.align._public)": [[275, "dipy.align._public.resample"]], "reslice() (in module dipy.align.reslice)": [[275, "dipy.align.reslice.reslice"]], "rigid() (in module dipy.align._public)": [[275, "dipy.align._public.rigid"]], "rigid_isoscaling() (in module dipy.align._public)": [[275, "dipy.align._public.rigid_isoscaling"]], "rigid_scaling() (in module dipy.align._public)": [[275, "dipy.align._public.rigid_scaling"]], "set_affine() (dipy.align.imaffine.affinemap method)": [[275, "dipy.align.imaffine.AffineMap.set_affine"]], "set_level_iters() (dipy.align.imwarp.diffeomorphicregistration method)": [[275, "dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters"]], "set_levels_above() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.set_levels_above"]], "set_levels_below() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.set_levels_below"]], "set_moving_image() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.set_moving_image"]], "set_static_image() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.set_static_image"]], "setup() (dipy.align.imaffine.mutualinformationmetric method)": [[275, "dipy.align.imaffine.MutualInformationMetric.setup"]], "setup() (dipy.align.streamlinear.bundlemindistancematrixmetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup"]], "setup() (dipy.align.streamlinear.bundlemindistancemetric method)": [[275, "dipy.align.streamlinear.BundleMinDistanceMetric.setup"]], "setup() (dipy.align.streamlinear.jointbundlemindistancemetric method)": [[275, "dipy.align.streamlinear.JointBundleMinDistanceMetric.setup"]], "setup() (dipy.align.streamlinear.streamlinedistancemetric method)": [[275, "dipy.align.streamlinear.StreamlineDistanceMetric.setup"]], "shallow_copy() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.shallow_copy"]], "slr_with_qbx() (in module dipy.align.streamlinear)": [[275, "dipy.align.streamlinear.slr_with_qbx"]], "streamline_registration() (in module dipy.align._public)": [[275, "dipy.align._public.streamline_registration"]], "syn_registration() (in module dipy.align._public)": [[275, "dipy.align._public.syn_registration"]], "transform() (dipy.align.imaffine.affinemap method)": [[275, "dipy.align.imaffine.AffineMap.transform"]], "transform() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.transform"]], "transform() (dipy.align.streamlinear.jointstreamlineregistrationmap method)": [[275, "dipy.align.streamlinear.JointStreamlineRegistrationMap.transform"]], "transform() (dipy.align.streamlinear.streamlineregistrationmap method)": [[275, "dipy.align.streamlinear.StreamlineRegistrationMap.transform"]], "transform_centers_of_mass() (in module dipy.align.imaffine)": [[275, "dipy.align.imaffine.transform_centers_of_mass"]], "transform_geometric_centers() (in module dipy.align.imaffine)": [[275, "dipy.align.imaffine.transform_geometric_centers"]], "transform_inverse() (dipy.align.imaffine.affinemap method)": [[275, "dipy.align.imaffine.AffineMap.transform_inverse"]], "transform_inverse() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.transform_inverse"]], "transform_origins() (in module dipy.align.imaffine)": [[275, "dipy.align.imaffine.transform_origins"]], "transform_point_cloud() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.transform_point_cloud"]], "transform_points() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.transform_points"]], "transform_points_inverse() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.transform_points_inverse"]], "translation() (in module dipy.align._public)": [[275, "dipy.align._public.translation"]], "update() (dipy.align.imwarp.symmetricdiffeomorphicregistration method)": [[275, "dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update"]], "update_transform() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.update_transform"]], "update_variance() (dipy.align.cpd.deformableregistration method)": [[275, "dipy.align.cpd.DeformableRegistration.update_variance"]], "use_moving_image_dynamics() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.use_moving_image_dynamics"]], "use_moving_image_dynamics() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics"]], "use_static_image_dynamics() (dipy.align.metrics.emmetric method)": [[275, "dipy.align.metrics.EMMetric.use_static_image_dynamics"]], "use_static_image_dynamics() (dipy.align.metrics.similaritymetric method)": [[275, "dipy.align.metrics.SimilarityMetric.use_static_image_dynamics"]], "v_cycle_2d() (in module dipy.align.metrics)": [[275, "dipy.align.metrics.v_cycle_2d"]], "v_cycle_3d() (in module dipy.align.metrics)": [[275, "dipy.align.metrics.v_cycle_3d"]], "warp_endomorphism() (dipy.align.imwarp.diffeomorphicmap method)": [[275, "dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism"]], "write_mapping() (in module dipy.align._public)": [[275, "dipy.align._public.write_mapping"]], "dipy.boots": [[276, "module-dipy.boots"]], "gradienttable (class in dipy.core.gradients)": [[277, "dipy.core.gradients.GradientTable"]], "graph (class in dipy.core.graph)": [[277, "dipy.core.graph.Graph"]], "hemisphere (class in dipy.core.sphere)": [[277, "dipy.core.sphere.HemiSphere"]], "lecuyer() (in module dipy.core.rng)": [[277, "dipy.core.rng.LEcuyer"]], "nonnegativeleastsquares (class in dipy.core.optimize)": [[277, "dipy.core.optimize.NonNegativeLeastSquares"]], "onetimeproperty (class in dipy.core.onetime)": [[277, "dipy.core.onetime.OneTimeProperty"]], "optimizer (class in dipy.core.optimize)": [[277, "dipy.core.optimize.Optimizer"]], "positivedefiniteleastsquares (class in dipy.core.optimize)": [[277, "dipy.core.optimize.PositiveDefiniteLeastSquares"]], "profiler (class in dipy.core.profile)": [[277, "dipy.core.profile.Profiler"]], "resetmixin (class in dipy.core.onetime)": [[277, "dipy.core.onetime.ResetMixin"]], "sklearnlinearsolver (class in dipy.core.optimize)": [[277, "dipy.core.optimize.SKLearnLinearSolver"]], "sphere (class in dipy.core.sphere)": [[277, "dipy.core.sphere.Sphere"]], "timer (class in dipy.core.benchmarks.bench_sphere)": [[277, "dipy.core.benchmarks.bench_sphere.Timer"]], "wichmannhill1982() (in module dipy.core.rng)": [[277, "dipy.core.rng.WichmannHill1982"]], "wichmannhill2006() (in module dipy.core.rng)": [[277, "dipy.core.rng.WichmannHill2006"]], "_tuple2axes() (in module dipy.core.geometry)": [[277, "dipy.core.geometry._TUPLE2AXES"]], "__init__() (dipy.core.benchmarks.bench_sphere.timer method)": [[277, "dipy.core.benchmarks.bench_sphere.Timer.__init__"]], "__init__() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.__init__"]], "__init__() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.__init__"]], "__init__() (dipy.core.onetime.onetimeproperty method)": [[277, "dipy.core.onetime.OneTimeProperty.__init__"]], "__init__() (dipy.core.onetime.resetmixin method)": [[277, "dipy.core.onetime.ResetMixin.__init__"]], "__init__() (dipy.core.optimize.nonnegativeleastsquares method)": [[277, "dipy.core.optimize.NonNegativeLeastSquares.__init__"]], "__init__() (dipy.core.optimize.optimizer method)": [[277, "dipy.core.optimize.Optimizer.__init__"]], "__init__() (dipy.core.optimize.positivedefiniteleastsquares method)": [[277, "dipy.core.optimize.PositiveDefiniteLeastSquares.__init__"]], "__init__() (dipy.core.optimize.sklearnlinearsolver method)": [[277, "dipy.core.optimize.SKLearnLinearSolver.__init__"]], "__init__() (dipy.core.profile.profiler method)": [[277, "dipy.core.profile.Profiler.__init__"]], "__init__() (dipy.core.sphere.hemisphere method)": [[277, "dipy.core.sphere.HemiSphere.__init__"]], "__init__() (dipy.core.sphere.sphere method)": [[277, "dipy.core.sphere.Sphere.__init__"]], "add_edge() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.add_edge"]], "add_node() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.add_node"]], "afb3d() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.afb3D"]], "afb3d_a() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.afb3D_A"]], "all_paths() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.all_paths"]], "angular_similarity() (in module dipy.core.sphere_stats)": [[277, "dipy.core.sphere_stats.angular_similarity"]], "auto_attr() (in module dipy.core.onetime)": [[277, "dipy.core.onetime.auto_attr"]], "b0s_mask() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.b0s_mask"]], "bench_disperse_charges_alt() (in module dipy.core.benchmarks.bench_sphere)": [[277, "dipy.core.benchmarks.bench_sphere.bench_disperse_charges_alt"]], "btens_to_params() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.btens_to_params"]], "bvals() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.bvals"]], "bvecs() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.bvecs"]], "cart2sphere() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.cart2sphere"]], "cart_distance() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.cart_distance"]], "check_multi_b() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.check_multi_b"]], "children() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.children"]], "circumradius() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.circumradius"]], "compare_orientation_sets() (in module dipy.core.sphere_stats)": [[277, "dipy.core.sphere_stats.compare_orientation_sets"]], "compose_matrix() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.compose_matrix"]], "compose_transformations() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.compose_transformations"]], "create_unit_hemisphere() (in module dipy.core.subdivide_octahedron)": [[277, "dipy.core.subdivide_octahedron.create_unit_hemisphere"]], "create_unit_sphere() (in module dipy.core.subdivide_octahedron)": [[277, "dipy.core.subdivide_octahedron.create_unit_sphere"]], "cshift3d() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.cshift3D"]], "decompose_matrix() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.decompose_matrix"]], "del_node() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.del_node"]], "del_node_and_edges() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.del_node_and_edges"]], "dipy.core": [[277, "module-dipy.core"]], "dipy.core.benchmarks": [[277, "module-dipy.core.benchmarks"]], "dipy.core.benchmarks.bench_sphere": [[277, "module-dipy.core.benchmarks.bench_sphere"]], "dipy.core.geometry": [[277, "module-dipy.core.geometry"]], "dipy.core.gradients": [[277, "module-dipy.core.gradients"]], "dipy.core.graph": [[277, "module-dipy.core.graph"]], "dipy.core.histeq": [[277, "module-dipy.core.histeq"]], "dipy.core.ndindex": [[277, "module-dipy.core.ndindex"]], "dipy.core.onetime": [[277, "module-dipy.core.onetime"]], "dipy.core.optimize": [[277, "module-dipy.core.optimize"]], "dipy.core.profile": [[277, "module-dipy.core.profile"]], "dipy.core.rng": [[277, "module-dipy.core.rng"]], "dipy.core.sphere": [[277, "module-dipy.core.sphere"]], "dipy.core.sphere_stats": [[277, "module-dipy.core.sphere_stats"]], "dipy.core.subdivide_octahedron": [[277, "module-dipy.core.subdivide_octahedron"]], "dipy.core.wavelet": [[277, "module-dipy.core.wavelet"]], "disperse_charges() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.disperse_charges"]], "disperse_charges_alt() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.disperse_charges_alt"]], "dist_to_corner() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.dist_to_corner"]], "down() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.down"]], "down_short() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.down_short"]], "duration_in_seconds() (dipy.core.benchmarks.bench_sphere.timer method)": [[277, "dipy.core.benchmarks.bench_sphere.Timer.duration_in_seconds"]], "dwt3d() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.dwt3D"]], "edges() (dipy.core.sphere.sphere method)": [[277, "dipy.core.sphere.Sphere.edges"]], "eigenstats() (in module dipy.core.sphere_stats)": [[277, "dipy.core.sphere_stats.eigenstats"]], "euler_characteristic_check() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.euler_characteristic_check"]], "euler_matrix() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.euler_matrix"]], "evolution (dipy.core.optimize.optimizer property)": [[277, "dipy.core.optimize.Optimizer.evolution"]], "faces() (dipy.core.sphere.hemisphere method)": [[277, "dipy.core.sphere.HemiSphere.faces"]], "faces() (dipy.core.sphere.sphere method)": [[277, "dipy.core.sphere.Sphere.faces"]], "faces_from_sphere_vertices() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.faces_from_sphere_vertices"]], "find_closest() (dipy.core.sphere.hemisphere method)": [[277, "dipy.core.sphere.HemiSphere.find_closest"]], "find_closest() (dipy.core.sphere.sphere method)": [[277, "dipy.core.sphere.Sphere.find_closest"]], "fit() (dipy.core.optimize.nonnegativeleastsquares method)": [[277, "dipy.core.optimize.NonNegativeLeastSquares.fit"]], "fit() (dipy.core.optimize.sklearnlinearsolver method)": [[277, "dipy.core.optimize.SKLearnLinearSolver.fit"]], "fopt (dipy.core.optimize.optimizer property)": [[277, "dipy.core.optimize.Optimizer.fopt"]], "from_sphere() (dipy.core.sphere.hemisphere class method)": [[277, "dipy.core.sphere.HemiSphere.from_sphere"]], "func_minimize_adhoc() (in module dipy.core.benchmarks.bench_sphere)": [[277, "dipy.core.benchmarks.bench_sphere.func_minimize_adhoc"]], "func_minimize_scipy() (in module dipy.core.benchmarks.bench_sphere)": [[277, "dipy.core.benchmarks.bench_sphere.func_minimize_scipy"]], "generate_bvecs() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.generate_bvecs"]], "get_bval_indices() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.get_bval_indices"]], "gradient_strength() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.gradient_strength"]], "gradient_table() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.gradient_table"]], "gradient_table_from_bvals_bvecs() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.gradient_table_from_bvals_bvecs"]], "gradient_table_from_gradient_strength_bvecs() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.gradient_table_from_gradient_strength_bvecs"]], "gradient_table_from_qvals_bvecs() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.gradient_table_from_qvals_bvecs"]], "hemi_icosahedron() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.hemi_icosahedron"]], "histeq() (in module dipy.core.histeq)": [[277, "dipy.core.histeq.histeq"]], "icosahedron_faces() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.icosahedron_faces"]], "icosahedron_vertices() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.icosahedron_vertices"]], "idwt3d() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.idwt3D"]], "info (dipy.core.gradients.gradienttable property)": [[277, "dipy.core.gradients.GradientTable.info"]], "is_hemispherical() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.is_hemispherical"]], "lambert_equal_area_projection_cart() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.lambert_equal_area_projection_cart"]], "lambert_equal_area_projection_polar() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.lambert_equal_area_projection_polar"]], "logger() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.logger"]], "message (dipy.core.optimize.optimizer property)": [[277, "dipy.core.optimize.Optimizer.message"]], "mirror() (dipy.core.sphere.hemisphere method)": [[277, "dipy.core.sphere.HemiSphere.mirror"]], "ndindex() (in module dipy.core.ndindex)": [[277, "dipy.core.ndindex.ndindex"]], "nearest_pos_semi_def() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.nearest_pos_semi_def"]], "nfev (dipy.core.optimize.optimizer property)": [[277, "dipy.core.optimize.Optimizer.nfev"]], "nit (dipy.core.optimize.optimizer property)": [[277, "dipy.core.optimize.Optimizer.nit"]], "normalized_vector() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.normalized_vector"]], "octahedron_faces() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.octahedron_faces"]], "octahedron_vertices() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.octahedron_vertices"]], "orientation_from_string() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.orientation_from_string"]], "orientation_to_string() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.orientation_to_string"]], "ornt_mapping() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.ornt_mapping"]], "params_to_btens() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.params_to_btens"]], "parents() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.parents"]], "permutationinverse() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.permutationinverse"]], "perpendicular_directions() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.perpendicular_directions"]], "predict() (dipy.core.optimize.sklearnlinearsolver method)": [[277, "dipy.core.optimize.SKLearnLinearSolver.predict"]], "print_stats() (dipy.core.profile.profiler method)": [[277, "dipy.core.profile.Profiler.print_stats"]], "print_summary() (dipy.core.optimize.optimizer method)": [[277, "dipy.core.optimize.Optimizer.print_summary"]], "qvals() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.qvals"]], "random_uniform_on_sphere() (in module dipy.core.sphere_stats)": [[277, "dipy.core.sphere_stats.random_uniform_on_sphere"]], "reorient_bvecs() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.reorient_bvecs"]], "reorient_on_axis() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.reorient_on_axis"]], "reorient_vectors() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.reorient_vectors"]], "reset() (dipy.core.onetime.resetmixin method)": [[277, "dipy.core.onetime.ResetMixin.reset"]], "rodrigues_axis_rotation() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.rodrigues_axis_rotation"]], "round_bvals() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.round_bvals"]], "sfb3d() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.sfb3D"]], "sfb3d_a() (in module dipy.core.wavelet)": [[277, "dipy.core.wavelet.sfb3D_A"]], "shortest_path() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.shortest_path"]], "solve() (dipy.core.optimize.positivedefiniteleastsquares method)": [[277, "dipy.core.optimize.PositiveDefiniteLeastSquares.solve"]], "sparse_nnls() (in module dipy.core.optimize)": [[277, "dipy.core.optimize.sparse_nnls"]], "spdot() (in module dipy.core.optimize)": [[277, "dipy.core.optimize.spdot"]], "sph2latlon() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.sph2latlon"]], "sphere2cart() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.sphere2cart"]], "sphere_distance() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.sphere_distance"]], "subdivide() (dipy.core.sphere.hemisphere method)": [[277, "dipy.core.sphere.HemiSphere.subdivide"]], "subdivide() (dipy.core.sphere.sphere method)": [[277, "dipy.core.sphere.Sphere.subdivide"]], "tau() (dipy.core.gradients.gradienttable method)": [[277, "dipy.core.gradients.GradientTable.tau"]], "unique_bvals() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.unique_bvals"]], "unique_bvals_magnitude() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.unique_bvals_magnitude"]], "unique_bvals_tolerance() (in module dipy.core.gradients)": [[277, "dipy.core.gradients.unique_bvals_tolerance"]], "unique_edges() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.unique_edges"]], "unique_sets() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.unique_sets"]], "unit_icosahedron() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.unit_icosahedron"]], "unit_octahedron() (in module dipy.core.sphere)": [[277, "dipy.core.sphere.unit_octahedron"]], "up() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.up"]], "up_short() (dipy.core.graph.graph method)": [[277, "dipy.core.graph.Graph.up_short"]], "vec2vec_rotmat() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.vec2vec_rotmat"]], "vector_cosine() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.vector_cosine"]], "vector_norm() (in module dipy.core.geometry)": [[277, "dipy.core.geometry.vector_norm"]], "vertices() (dipy.core.sphere.sphere method)": [[277, "dipy.core.sphere.Sphere.vertices"]], "x (dipy.core.sphere.sphere property)": [[277, "dipy.core.sphere.Sphere.x"]], "xopt (dipy.core.optimize.optimizer property)": [[277, "dipy.core.optimize.Optimizer.xopt"]], "y (dipy.core.sphere.sphere property)": [[277, "dipy.core.sphere.Sphere.y"]], "z (dipy.core.sphere.sphere property)": [[277, "dipy.core.sphere.Sphere.z"]], "data_dir() (in module dipy.data)": [[278, "dipy.data.DATA_DIR"]], "dataerror (class in dipy.data)": [[278, "dipy.data.DataError"]], "__init__() (dipy.data.dataerror method)": [[278, "dipy.data.DataError.__init__"]], "check_md5() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.check_md5"]], "copyfileobj_withprogress() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.copyfileobj_withprogress"]], "default_sphere() (in module dipy.data)": [[278, "dipy.data.default_sphere"]], "dipy.data": [[278, "module-dipy.data"]], "dipy.data.fetcher": [[278, "module-dipy.data.fetcher"]], "dsi_deconv_voxels() (in module dipy.data)": [[278, "dipy.data.dsi_deconv_voxels"]], "dsi_voxels() (in module dipy.data)": [[278, "dipy.data.dsi_voxels"]], "extract_example_tracts() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.extract_example_tracts"]], "fetch_dib_217_lte_pte_ste() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_DiB_217_lte_pte_ste"]], "fetch_dib_70_lte_pte_ste() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_DiB_70_lte_pte_ste"]], "fetch_bundle_atlas_hcp842() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_bundle_atlas_hcp842"]], "fetch_bundle_fa_hcp() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_bundle_fa_hcp"]], "fetch_bundle_warp_dataset() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_bundle_warp_dataset"]], "fetch_bundles_2_subjects() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_bundles_2_subjects"]], "fetch_cenir_multib() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_cenir_multib"]], "fetch_cfin_multib() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_cfin_multib"]], "fetch_cti_rat1() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_cti_rat1"]], "fetch_data() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_data"]], "fetch_evac_test() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_evac_test"]], "fetch_evac_weights() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_evac_weights"]], "fetch_file_formats() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_file_formats"]], "fetch_fury_surface() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_fury_surface"]], "fetch_gold_standard_io() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_gold_standard_io"]], "fetch_hbn() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_hbn"]], "fetch_hcp() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_hcp"]], "fetch_isbi2013_2shell() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_isbi2013_2shell"]], "fetch_ivim() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_ivim"]], "fetch_mni_template() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_mni_template"]], "fetch_ptt_minimal_dataset() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_ptt_minimal_dataset"]], "fetch_qtdmri_test_retest_2subjects() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_qtdMRI_test_retest_2subjects"]], "fetch_qte_lte_pte() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_qte_lte_pte"]], "fetch_resdnn_weights() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_resdnn_weights"]], "fetch_scil_b0() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_scil_b0"]], "fetch_sherbrooke_3shell() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_sherbrooke_3shell"]], "fetch_stanford_hardi() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_stanford_hardi"]], "fetch_stanford_labels() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_stanford_labels"]], "fetch_stanford_pve_maps() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_stanford_pve_maps"]], "fetch_stanford_t1() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_stanford_t1"]], "fetch_stanford_tracks() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_stanford_tracks"]], "fetch_syn_data() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_syn_data"]], "fetch_synb0_test() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_synb0_test"]], "fetch_synb0_weights() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_synb0_weights"]], "fetch_taiwan_ntu_dsi() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_taiwan_ntu_dsi"]], "fetch_target_tractogram_hcp() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_target_tractogram_hcp"]], "fetch_tissue_data() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.fetch_tissue_data"]], "get_3shell_gtab() (in module dipy.data)": [[278, "dipy.data.get_3shell_gtab"]], "get_bundle_atlas_hcp842() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.get_bundle_atlas_hcp842"]], "get_cmap() (in module dipy.data)": [[278, "dipy.data.get_cmap"]], "get_file_formats() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.get_file_formats"]], "get_fnames() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.get_fnames"]], "get_gtab_taiwan_dsi() (in module dipy.data)": [[278, "dipy.data.get_gtab_taiwan_dsi"]], "get_isbi2013_2shell_gtab() (in module dipy.data)": [[278, "dipy.data.get_isbi2013_2shell_gtab"]], "get_sim_voxels() (in module dipy.data)": [[278, "dipy.data.get_sim_voxels"]], "get_skeleton() (in module dipy.data)": [[278, "dipy.data.get_skeleton"]], "get_sphere() (in module dipy.data)": [[278, "dipy.data.get_sphere"]], "get_target_tractogram_hcp() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.get_target_tractogram_hcp"]], "get_two_hcp842_bundles() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.get_two_hcp842_bundles"]], "load_sdp_constraints() (in module dipy.data)": [[278, "dipy.data.load_sdp_constraints"]], "loads_compat() (in module dipy.data)": [[278, "dipy.data.loads_compat"]], "matlab_life_results() (in module dipy.data)": [[278, "dipy.data.matlab_life_results"]], "mrtrix_spherical_functions() (in module dipy.data)": [[278, "dipy.data.mrtrix_spherical_functions"]], "read_dib_217_lte_pte_ste() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_DiB_217_lte_pte_ste"]], "read_dib_70_lte_pte_ste() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_DiB_70_lte_pte_ste"]], "read_bundles_2_subjects() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_bundles_2_subjects"]], "read_cenir_multib() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_cenir_multib"]], "read_cfin_dwi() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_cfin_dwi"]], "read_cfin_t1() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_cfin_t1"]], "read_five_af_bundles() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_five_af_bundles"]], "read_isbi2013_2shell() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_isbi2013_2shell"]], "read_ivim() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_ivim"]], "read_mni_template() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_mni_template"]], "read_qtdmri_test_retest_2subjects() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_qtdMRI_test_retest_2subjects"]], "read_qte_lte_pte() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_qte_lte_pte"]], "read_scil_b0() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_scil_b0"]], "read_sherbrooke_3shell() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_sherbrooke_3shell"]], "read_siemens_scil_b0() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_siemens_scil_b0"]], "read_stanford_hardi() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_stanford_hardi"]], "read_stanford_labels() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_stanford_labels"]], "read_stanford_pve_maps() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_stanford_pve_maps"]], "read_stanford_t1() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_stanford_t1"]], "read_syn_data() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_syn_data"]], "read_taiwan_ntu_dsi() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_taiwan_ntu_dsi"]], "read_tissue_data() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.read_tissue_data"]], "small_sphere() (in module dipy.data)": [[278, "dipy.data.small_sphere"]], "to_bids_description() (in module dipy.data.fetcher)": [[278, "dipy.data.fetcher.to_bids_description"]], "two_cingulum_bundles() (in module dipy.data)": [[278, "dipy.data.two_cingulum_bundles"]], "adaptive_soft_matching() (in module dipy.denoise.adaptive_soft_matching)": [[279, "dipy.denoise.adaptive_soft_matching.adaptive_soft_matching"]], "dipy.denoise": [[279, "module-dipy.denoise"]], "dipy.denoise.adaptive_soft_matching": [[279, "module-dipy.denoise.adaptive_soft_matching"]], "dipy.denoise.gibbs": [[279, "module-dipy.denoise.gibbs"]], "dipy.denoise.localpca": [[279, "module-dipy.denoise.localpca"]], "dipy.denoise.nlmeans": [[279, "module-dipy.denoise.nlmeans"]], "dipy.denoise.noise_estimate": [[279, "module-dipy.denoise.noise_estimate"]], "dipy.denoise.non_local_means": [[279, "module-dipy.denoise.non_local_means"]], "dipy.denoise.patch2self": [[279, "module-dipy.denoise.patch2self"]], "estimate_sigma() (in module dipy.denoise.noise_estimate)": [[279, "dipy.denoise.noise_estimate.estimate_sigma"]], "genpca() (in module dipy.denoise.localpca)": [[279, "dipy.denoise.localpca.genpca"]], "gibbs_removal() (in module dipy.denoise.gibbs)": [[279, "dipy.denoise.gibbs.gibbs_removal"]], "localpca() (in module dipy.denoise.localpca)": [[279, "dipy.denoise.localpca.localpca"]], "mppca() (in module dipy.denoise.localpca)": [[279, "dipy.denoise.localpca.mppca"]], "nlmeans() (in module dipy.denoise.nlmeans)": [[279, "dipy.denoise.nlmeans.nlmeans"]], "non_local_means() (in module dipy.denoise.non_local_means)": [[279, "dipy.denoise.non_local_means.non_local_means"]], "patch2self() (in module dipy.denoise.patch2self)": [[279, "dipy.denoise.patch2self.patch2self"]], "piesno() (in module dipy.denoise.noise_estimate)": [[279, "dipy.denoise.noise_estimate.piesno"]], "peaksandmetrics (class in dipy.direction.peaks)": [[280, "dipy.direction.peaks.PeaksAndMetrics"]], "__init__() (dipy.direction.peaks.peaksandmetrics method)": [[280, "dipy.direction.peaks.PeaksAndMetrics.__init__"]], "dipy.direction": [[280, "module-dipy.direction"]], "dipy.direction.peaks": [[280, "module-dipy.direction.peaks"]], "peak_directions() (in module dipy.direction.peaks)": [[280, "dipy.direction.peaks.peak_directions"]], "peak_directions_nl() (in module dipy.direction.peaks)": [[280, "dipy.direction.peaks.peak_directions_nl"]], "peaks_from_model() (in module dipy.direction.peaks)": [[280, "dipy.direction.peaks.peaks_from_model"]], "reshape_peaks_for_visualization() (in module dipy.direction.peaks)": [[280, "dipy.direction.peaks.reshape_peaks_for_visualization"]], "dpy (class in dipy.io.dpy)": [[281, "dipy.io.dpy.Dpy"]], "nifti (dipy.io.stateful_tractogram.origin attribute)": [[281, "dipy.io.stateful_tractogram.Origin.NIFTI"]], "origin (class in dipy.io.stateful_tractogram)": [[281, "dipy.io.stateful_tractogram.Origin"]], "rasmm (dipy.io.stateful_tractogram.space attribute)": [[281, "dipy.io.stateful_tractogram.Space.RASMM"]], "space (class in dipy.io.stateful_tractogram)": [[281, "dipy.io.stateful_tractogram.Space"]], "statefultractogram (class in dipy.io.stateful_tractogram)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram"]], "trackvis (dipy.io.stateful_tractogram.origin attribute)": [[281, "dipy.io.stateful_tractogram.Origin.TRACKVIS"]], "vox (dipy.io.stateful_tractogram.space attribute)": [[281, "dipy.io.stateful_tractogram.Space.VOX"]], "voxmm (dipy.io.stateful_tractogram.space attribute)": [[281, "dipy.io.stateful_tractogram.Space.VOXMM"]], "__init__() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.__init__"]], "__init__() (dipy.io.stateful_tractogram.origin method)": [[281, "dipy.io.stateful_tractogram.Origin.__init__"]], "__init__() (dipy.io.stateful_tractogram.space method)": [[281, "dipy.io.stateful_tractogram.Space.__init__"]], "__init__() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.__init__"]], "affine (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.affine"]], "are_compatible() (dipy.io.stateful_tractogram.statefultractogram static method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.are_compatible"]], "close() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.close"]], "compute_bounding_box() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.compute_bounding_box"]], "create_nifti_header() (in module dipy.io.utils)": [[281, "dipy.io.utils.create_nifti_header"]], "create_tractogram_header() (in module dipy.io.utils)": [[281, "dipy.io.utils.create_tractogram_header"]], "data_per_point (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.data_per_point"]], "data_per_streamline (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.data_per_streamline"]], "decfa() (in module dipy.io.utils)": [[281, "dipy.io.utils.decfa"]], "decfa_to_float() (in module dipy.io.utils)": [[281, "dipy.io.utils.decfa_to_float"]], "dimensions (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.dimensions"]], "dipy.io": [[281, "module-dipy.io"]], "dipy.io.bvectxt": [[281, "module-dipy.io.bvectxt"]], "dipy.io.dpy": [[281, "module-dipy.io.dpy"]], "dipy.io.gradients": [[281, "module-dipy.io.gradients"]], "dipy.io.image": [[281, "module-dipy.io.image"]], "dipy.io.peaks": [[281, "module-dipy.io.peaks"]], "dipy.io.pickles": [[281, "module-dipy.io.pickles"]], "dipy.io.stateful_tractogram": [[281, "module-dipy.io.stateful_tractogram"]], "dipy.io.streamline": [[281, "module-dipy.io.streamline"]], "dipy.io.utils": [[281, "module-dipy.io.utils"]], "dipy.io.vtk": [[281, "module-dipy.io.vtk"]], "dtype_dict (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.dtype_dict"]], "from_sft() (dipy.io.stateful_tractogram.statefultractogram static method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.from_sft"]], "get_data_per_point_keys() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_point_keys"]], "get_data_per_streamline_keys() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_streamline_keys"]], "get_reference_info() (in module dipy.io.utils)": [[281, "dipy.io.utils.get_reference_info"]], "get_streamlines_copy() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.get_streamlines_copy"]], "is_bbox_in_vox_valid() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.is_bbox_in_vox_valid"]], "is_header_compatible() (in module dipy.io.utils)": [[281, "dipy.io.utils.is_header_compatible"]], "is_reference_info_valid() (in module dipy.io.utils)": [[281, "dipy.io.utils.is_reference_info_valid"]], "load_dpy() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_dpy"]], "load_fib() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_fib"]], "load_generator() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_generator"]], "load_nifti() (in module dipy.io.image)": [[281, "dipy.io.image.load_nifti"]], "load_nifti_data() (in module dipy.io.image)": [[281, "dipy.io.image.load_nifti_data"]], "load_peaks() (in module dipy.io.peaks)": [[281, "dipy.io.peaks.load_peaks"]], "load_pickle() (in module dipy.io.pickles)": [[281, "dipy.io.pickles.load_pickle"]], "load_polydata() (in module dipy.io.vtk)": [[281, "dipy.io.vtk.load_polydata"]], "load_tck() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_tck"]], "load_tractogram() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_tractogram"]], "load_trk() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_trk"]], "load_vtk() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_vtk"]], "load_vtk_streamlines() (in module dipy.io.vtk)": [[281, "dipy.io.vtk.load_vtk_streamlines"]], "load_vtp() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.load_vtp"]], "logger() (in module dipy.io.stateful_tractogram)": [[281, "dipy.io.stateful_tractogram.logger"]], "make5d() (in module dipy.io.utils)": [[281, "dipy.io.utils.make5d"]], "nifti1_symmat() (in module dipy.io.utils)": [[281, "dipy.io.utils.nifti1_symmat"]], "orientation_from_string() (in module dipy.io.bvectxt)": [[281, "dipy.io.bvectxt.orientation_from_string"]], "orientation_to_string() (in module dipy.io.bvectxt)": [[281, "dipy.io.bvectxt.orientation_to_string"]], "origin (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.origin"]], "ornt_mapping() (in module dipy.io.bvectxt)": [[281, "dipy.io.bvectxt.ornt_mapping"]], "peaks_to_niftis() (in module dipy.io.peaks)": [[281, "dipy.io.peaks.peaks_to_niftis"]], "read_bvals_bvecs() (in module dipy.io.gradients)": [[281, "dipy.io.gradients.read_bvals_bvecs"]], "read_bvec_file() (in module dipy.io.bvectxt)": [[281, "dipy.io.bvectxt.read_bvec_file"]], "read_img_arr_or_path() (in module dipy.io.utils)": [[281, "dipy.io.utils.read_img_arr_or_path"]], "read_track() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.read_track"]], "read_tracks() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.read_tracks"]], "read_tracksi() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.read_tracksi"]], "remove_invalid_streamlines() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.remove_invalid_streamlines"]], "reorient_on_axis() (in module dipy.io.bvectxt)": [[281, "dipy.io.bvectxt.reorient_on_axis"]], "reorient_vectors() (in module dipy.io.bvectxt)": [[281, "dipy.io.bvectxt.reorient_vectors"]], "save_buan_profiles_hdf5() (in module dipy.io.utils)": [[281, "dipy.io.utils.save_buan_profiles_hdf5"]], "save_dpy() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_dpy"]], "save_fib() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_fib"]], "save_generator() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_generator"]], "save_nifti() (in module dipy.io.image)": [[281, "dipy.io.image.save_nifti"]], "save_peaks() (in module dipy.io.peaks)": [[281, "dipy.io.peaks.save_peaks"]], "save_pickle() (in module dipy.io.pickles)": [[281, "dipy.io.pickles.save_pickle"]], "save_polydata() (in module dipy.io.vtk)": [[281, "dipy.io.vtk.save_polydata"]], "save_qa_metric() (in module dipy.io.image)": [[281, "dipy.io.image.save_qa_metric"]], "save_tck() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_tck"]], "save_tractogram() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_tractogram"]], "save_trk() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_trk"]], "save_vtk() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_vtk"]], "save_vtk_streamlines() (in module dipy.io.vtk)": [[281, "dipy.io.vtk.save_vtk_streamlines"]], "save_vtp() (in module dipy.io.streamline)": [[281, "dipy.io.streamline.save_vtp"]], "set_sft_logger_level() (in module dipy.io.stateful_tractogram)": [[281, "dipy.io.stateful_tractogram.set_sft_logger_level"]], "space (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.space"]], "space_attributes (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.space_attributes"]], "streamlines (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.streamlines"]], "to_center() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_center"]], "to_corner() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_corner"]], "to_origin() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_origin"]], "to_rasmm() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_rasmm"]], "to_space() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_space"]], "to_vox() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_vox"]], "to_voxmm() (dipy.io.stateful_tractogram.statefultractogram method)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.to_voxmm"]], "version() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.version"]], "voxel_order (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.voxel_order"]], "voxel_sizes (dipy.io.stateful_tractogram.statefultractogram property)": [[281, "dipy.io.stateful_tractogram.StatefulTractogram.voxel_sizes"]], "write_track() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.write_track"]], "write_tracks() (dipy.io.dpy.dpy method)": [[281, "dipy.io.dpy.Dpy.write_tracks"]], "block (class in dipy.nn.evac)": [[282, "dipy.nn.evac.Block"]], "channelsum (class in dipy.nn.evac)": [[282, "dipy.nn.evac.ChannelSum"]], "cnn1ddenoiser (class in dipy.nn.cnn_1d_denoising)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser"]], "decoderblock (class in dipy.nn.synb0)": [[282, "dipy.nn.synb0.DecoderBlock"], [282, "id69"]], "evacplus (class in dipy.nn.evac)": [[282, "dipy.nn.evac.EVACPlus"]], "encoderblock (class in dipy.nn.synb0)": [[282, "dipy.nn.synb0.EncoderBlock"], [282, "id0"]], "historesdnn (class in dipy.nn.histo_resdnn)": [[282, "dipy.nn.histo_resdnn.HistoResDNN"]], "multiplelayerpercepton (class in dipy.nn.model)": [[282, "dipy.nn.model.MultipleLayerPercepton"]], "singlelayerperceptron (class in dipy.nn.model)": [[282, "dipy.nn.model.SingleLayerPerceptron"]], "synb0 (class in dipy.nn.synb0)": [[282, "dipy.nn.synb0.Synb0"]], "unet3d() (in module dipy.nn.synb0)": [[282, "dipy.nn.synb0.UNet3D"], [282, "id90"]], "__init__() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.__init__"]], "__init__() (dipy.nn.evac.block method)": [[282, "dipy.nn.evac.Block.__init__"]], "__init__() (dipy.nn.evac.channelsum method)": [[282, "dipy.nn.evac.ChannelSum.__init__"]], "__init__() (dipy.nn.evac.evacplus method)": [[282, "dipy.nn.evac.EVACPlus.__init__"]], "__init__() (dipy.nn.histo_resdnn.historesdnn method)": [[282, "dipy.nn.histo_resdnn.HistoResDNN.__init__"]], "__init__() (dipy.nn.model.multiplelayerpercepton method)": [[282, "dipy.nn.model.MultipleLayerPercepton.__init__"]], "__init__() (dipy.nn.model.singlelayerperceptron method)": [[282, "dipy.nn.model.SingleLayerPerceptron.__init__"]], "__init__() (dipy.nn.synb0.decoderblock method)": [[282, "dipy.nn.synb0.DecoderBlock.__init__"], [282, "id70"]], "__init__() (dipy.nn.synb0.encoderblock method)": [[282, "dipy.nn.synb0.EncoderBlock.__init__"], [282, "id62"]], "__init__() (dipy.nn.synb0.synb0 method)": [[282, "dipy.nn.synb0.Synb0.__init__"]], "call() (dipy.nn.evac.block method)": [[282, "dipy.nn.evac.Block.call"]], "call() (dipy.nn.evac.channelsum method)": [[282, "dipy.nn.evac.ChannelSum.call"]], "call() (dipy.nn.synb0.decoderblock method)": [[282, "dipy.nn.synb0.DecoderBlock.call"], [282, "id71"]], "call() (dipy.nn.synb0.encoderblock method)": [[282, "dipy.nn.synb0.EncoderBlock.call"], [282, "id63"]], "compile() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.compile"]], "dipy.nn": [[282, "module-dipy.nn"]], "dipy.nn.cnn_1d_denoising": [[282, "module-dipy.nn.cnn_1d_denoising"]], "dipy.nn.evac": [[282, "module-dipy.nn.evac"]], "dipy.nn.histo_resdnn": [[282, "module-dipy.nn.histo_resdnn"]], "dipy.nn.model": [[282, "module-dipy.nn.model"]], "dipy.nn.synb0": [[282, "module-dipy.nn.synb0"]], "dipy.nn.utils": [[282, "module-dipy.nn.utils"]], "evaluate() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.evaluate"]], "evaluate() (dipy.nn.model.multiplelayerpercepton method)": [[282, "dipy.nn.model.MultipleLayerPercepton.evaluate"]], "evaluate() (dipy.nn.model.singlelayerperceptron method)": [[282, "dipy.nn.model.SingleLayerPerceptron.evaluate"]], "fetch_default_weights() (dipy.nn.evac.evacplus method)": [[282, "dipy.nn.evac.EVACPlus.fetch_default_weights"]], "fetch_default_weights() (dipy.nn.histo_resdnn.historesdnn method)": [[282, "dipy.nn.histo_resdnn.HistoResDNN.fetch_default_weights"]], "fetch_default_weights() (dipy.nn.synb0.synb0 method)": [[282, "dipy.nn.synb0.Synb0.fetch_default_weights"]], "fit() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.fit"]], "fit() (dipy.nn.model.multiplelayerpercepton method)": [[282, "dipy.nn.model.MultipleLayerPercepton.fit"]], "fit() (dipy.nn.model.singlelayerperceptron method)": [[282, "dipy.nn.model.SingleLayerPerceptron.fit"]], "init_model() (in module dipy.nn.evac)": [[282, "dipy.nn.evac.init_model"]], "load_model_weights() (dipy.nn.evac.evacplus method)": [[282, "dipy.nn.evac.EVACPlus.load_model_weights"]], "load_model_weights() (dipy.nn.histo_resdnn.historesdnn method)": [[282, "dipy.nn.histo_resdnn.HistoResDNN.load_model_weights"]], "load_model_weights() (dipy.nn.synb0.synb0 method)": [[282, "dipy.nn.synb0.Synb0.load_model_weights"]], "load_weights() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.load_weights"]], "logger() (in module dipy.nn.evac)": [[282, "dipy.nn.evac.logger"]], "logger() (in module dipy.nn.histo_resdnn)": [[282, "dipy.nn.histo_resdnn.logger"]], "logger() (in module dipy.nn.synb0)": [[282, "dipy.nn.synb0.logger"]], "normalize() (in module dipy.nn.synb0)": [[282, "dipy.nn.synb0.normalize"]], "normalize() (in module dipy.nn.utils)": [[282, "dipy.nn.utils.normalize"]], "predict() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.predict"]], "predict() (dipy.nn.evac.evacplus method)": [[282, "dipy.nn.evac.EVACPlus.predict"]], "predict() (dipy.nn.histo_resdnn.historesdnn method)": [[282, "dipy.nn.histo_resdnn.HistoResDNN.predict"]], "predict() (dipy.nn.model.multiplelayerpercepton method)": [[282, "dipy.nn.model.MultipleLayerPercepton.predict"]], "predict() (dipy.nn.model.singlelayerperceptron method)": [[282, "dipy.nn.model.SingleLayerPerceptron.predict"]], "predict() (dipy.nn.synb0.synb0 method)": [[282, "dipy.nn.synb0.Synb0.predict"]], "prepare_img() (in module dipy.nn.evac)": [[282, "dipy.nn.evac.prepare_img"]], "recover_img() (in module dipy.nn.utils)": [[282, "dipy.nn.utils.recover_img"]], "save_weights() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.save_weights"]], "set_logger_level() (in module dipy.nn.utils)": [[282, "dipy.nn.utils.set_logger_level"]], "summary() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.summary"]], "summary() (dipy.nn.model.multiplelayerpercepton method)": [[282, "dipy.nn.model.MultipleLayerPercepton.summary"]], "summary() (dipy.nn.model.singlelayerperceptron method)": [[282, "dipy.nn.model.SingleLayerPerceptron.summary"]], "train_test_split() (dipy.nn.cnn_1d_denoising.cnn1ddenoiser method)": [[282, "dipy.nn.cnn_1d_denoising.Cnn1DDenoiser.train_test_split"]], "transform_img() (in module dipy.nn.utils)": [[282, "dipy.nn.utils.transform_img"]], "unnormalize() (in module dipy.nn.synb0)": [[282, "dipy.nn.synb0.unnormalize"]], "unnormalize() (in module dipy.nn.utils)": [[282, "dipy.nn.utils.unnormalize"]], "axsymshresponse (class in dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.AxSymShResponse"]], "cache (class in dipy.reconst.cache)": [[283, "dipy.reconst.cache.Cache"]], "callablearray (class in dipy.reconst.multi_voxel)": [[283, "dipy.reconst.multi_voxel.CallableArray"]], "constrainedsdtmodel (class in dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.ConstrainedSDTModel"]], "constrainedsphericaldeconvmodel (class in dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel"]], "csaodfmodel (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.CsaOdfModel"]], "d (dipy.reconst.ivim.ivimfit property)": [[283, "dipy.reconst.ivim.IvimFit.D"]], "d_star (dipy.reconst.ivim.ivimfit property)": [[283, "dipy.reconst.ivim.IvimFit.D_star"]], "diffusionkurtosisfit (class in dipy.reconst.dki)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit"]], "diffusionkurtosismodel (class in dipy.reconst.dki)": [[283, "dipy.reconst.dki.DiffusionKurtosisModel"]], "diffusionspectrumdeconvfit (class in dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.DiffusionSpectrumDeconvFit"]], "diffusionspectrumdeconvmodel (class in dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.DiffusionSpectrumDeconvModel"]], "diffusionspectrumfit (class in dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit"]], "diffusionspectrummodel (class in dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.DiffusionSpectrumModel"]], "exponentialisotropicfit (class in dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.ExponentialIsotropicFit"]], "exponentialisotropicmodel (class in dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.ExponentialIsotropicModel"]], "forecastfit (class in dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.ForecastFit"]], "forecastmodel (class in dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.ForecastModel"]], "freewatertensorfit (class in dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.FreeWaterTensorFit"]], "freewatertensormodel (class in dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.FreeWaterTensorModel"]], "gcv_cost_function() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.GCV_cost_function"]], "generalizedqsamplingfit (class in dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.GeneralizedQSamplingFit"]], "generalizedqsamplingmodel (class in dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.GeneralizedQSamplingModel"]], "h() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.H"]], "isotropicfit (class in dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.IsotropicFit"]], "isotropicmodel (class in dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.IsotropicModel"]], "ivimfit (class in dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.IvimFit"]], "ivimmodeltrr (class in dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.IvimModelTRR"]], "ivimmodelvp (class in dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.IvimModelVP"]], "kurtosismicrostructuralfit (class in dipy.reconst.dki_micro)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit"]], "kurtosismicrostructuremodel (class in dipy.reconst.dki_micro)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructureModel"]], "lr_deconv() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.LR_deconv"]], "msdeconvfit (class in dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.MSDeconvFit"]], "mapmrifit (class in dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.MapmriFit"]], "mapmrimodel (class in dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.MapmriModel"]], "meandiffusionkurtosisfit (class in dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit"]], "meandiffusionkurtosismodel (class in dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisModel"]], "multishelldeconvmodel (class in dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.MultiShellDeconvModel"]], "multishellresponse (class in dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.MultiShellResponse"]], "multivoxelfit (class in dipy.reconst.multi_voxel)": [[283, "dipy.reconst.multi_voxel.MultiVoxelFit"]], "odffit (class in dipy.reconst.odf)": [[283, "dipy.reconst.odf.OdfFit"]], "odfmodel (class in dipy.reconst.odf)": [[283, "dipy.reconst.odf.OdfModel"]], "opdtmodel (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.OpdtModel"]], "qballbasemodel (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.QballBaseModel"]], "qballmodel (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.QballModel"]], "qpfitter (class in dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.QpFitter"]], "qtdmrifit (class in dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.QtdmriFit"]], "qtdmrimodel (class in dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.QtdmriModel"]], "qtifit (class in dipy.reconst.qti)": [[283, "dipy.reconst.qti.QtiFit"]], "qtimodel (class in dipy.reconst.qti)": [[283, "dipy.reconst.qti.QtiModel"]], "reconstfit (class in dipy.reconst.base)": [[283, "dipy.reconst.base.ReconstFit"]], "reconstmodel (class in dipy.reconst.base)": [[283, "dipy.reconst.base.ReconstModel"]], "residualbootstrapwrapper (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.ResidualBootstrapWrapper"]], "rumbafit (class in dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.RumbaFit"]], "rumbasdmodel (class in dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.RumbaSDModel"]], "s0_hat (dipy.reconst.dti.tensorfit property)": [[283, "dipy.reconst.dti.TensorFit.S0_hat"]], "s0_hat (dipy.reconst.msdki.meandiffusionkurtosisfit property)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.S0_hat"]], "s0_hat() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.S0_hat"]], "s0_predicted (dipy.reconst.ivim.ivimfit property)": [[283, "dipy.reconst.ivim.IvimFit.S0_predicted"]], "shorefit (class in dipy.reconst.shore)": [[283, "dipy.reconst.shore.ShoreFit"]], "shoremodel (class in dipy.reconst.shore)": [[283, "dipy.reconst.shore.ShoreModel"]], "sparsefasciclefit (class in dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.SparseFascicleFit"]], "sparsefasciclemodel (class in dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.SparseFascicleModel"]], "sphharmfit (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.SphHarmFit"]], "sphharmmodel (class in dipy.reconst.shm)": [[283, "dipy.reconst.shm.SphHarmModel"]], "tensorfit (class in dipy.reconst.dti)": [[283, "dipy.reconst.dti.TensorFit"]], "tensormodel (class in dipy.reconst.dti)": [[283, "dipy.reconst.dti.TensorModel"]], "wcons() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.Wcons"]], "wrotate() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.Wrotate"]], "wrotate_element() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.Wrotate_element"]], "__init__() (dipy.reconst.base.reconstfit method)": [[283, "dipy.reconst.base.ReconstFit.__init__"]], "__init__() (dipy.reconst.base.reconstmodel method)": [[283, "dipy.reconst.base.ReconstModel.__init__"]], "__init__() (dipy.reconst.cache.cache method)": [[283, "dipy.reconst.cache.Cache.__init__"]], "__init__() (dipy.reconst.csdeconv.axsymshresponse method)": [[283, "dipy.reconst.csdeconv.AxSymShResponse.__init__"]], "__init__() (dipy.reconst.csdeconv.constrainedsdtmodel method)": [[283, "dipy.reconst.csdeconv.ConstrainedSDTModel.__init__"]], "__init__() (dipy.reconst.csdeconv.constrainedsphericaldeconvmodel method)": [[283, "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.__init__"]], "__init__() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.__init__"]], "__init__() (dipy.reconst.dki.diffusionkurtosismodel method)": [[283, "dipy.reconst.dki.DiffusionKurtosisModel.__init__"]], "__init__() (dipy.reconst.dki_micro.kurtosismicrostructuralfit method)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.__init__"]], "__init__() (dipy.reconst.dki_micro.kurtosismicrostructuremodel method)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructureModel.__init__"]], "__init__() (dipy.reconst.dsi.diffusionspectrumdeconvfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumDeconvFit.__init__"]], "__init__() (dipy.reconst.dsi.diffusionspectrumdeconvmodel method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumDeconvModel.__init__"]], "__init__() (dipy.reconst.dsi.diffusionspectrumfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit.__init__"]], "__init__() (dipy.reconst.dsi.diffusionspectrummodel method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumModel.__init__"]], "__init__() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.__init__"]], "__init__() (dipy.reconst.dti.tensormodel method)": [[283, "dipy.reconst.dti.TensorModel.__init__"]], "__init__() (dipy.reconst.forecast.forecastfit method)": [[283, "dipy.reconst.forecast.ForecastFit.__init__"]], "__init__() (dipy.reconst.forecast.forecastmodel method)": [[283, "dipy.reconst.forecast.ForecastModel.__init__"]], "__init__() (dipy.reconst.fwdti.freewatertensorfit method)": [[283, "dipy.reconst.fwdti.FreeWaterTensorFit.__init__"]], "__init__() (dipy.reconst.fwdti.freewatertensormodel method)": [[283, "dipy.reconst.fwdti.FreeWaterTensorModel.__init__"]], "__init__() (dipy.reconst.gqi.generalizedqsamplingfit method)": [[283, "dipy.reconst.gqi.GeneralizedQSamplingFit.__init__"]], "__init__() (dipy.reconst.gqi.generalizedqsamplingmodel method)": [[283, "dipy.reconst.gqi.GeneralizedQSamplingModel.__init__"]], "__init__() (dipy.reconst.ivim.ivimfit method)": [[283, "dipy.reconst.ivim.IvimFit.__init__"]], "__init__() (dipy.reconst.ivim.ivimmodeltrr method)": [[283, "dipy.reconst.ivim.IvimModelTRR.__init__"]], "__init__() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.__init__"]], "__init__() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.__init__"]], "__init__() (dipy.reconst.mapmri.mapmrimodel method)": [[283, "dipy.reconst.mapmri.MapmriModel.__init__"]], "__init__() (dipy.reconst.mcsd.msdeconvfit method)": [[283, "dipy.reconst.mcsd.MSDeconvFit.__init__"]], "__init__() (dipy.reconst.mcsd.multishelldeconvmodel method)": [[283, "dipy.reconst.mcsd.MultiShellDeconvModel.__init__"]], "__init__() (dipy.reconst.mcsd.multishellresponse method)": [[283, "dipy.reconst.mcsd.MultiShellResponse.__init__"]], "__init__() (dipy.reconst.mcsd.qpfitter method)": [[283, "dipy.reconst.mcsd.QpFitter.__init__"]], "__init__() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.__init__"]], "__init__() (dipy.reconst.msdki.meandiffusionkurtosismodel method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisModel.__init__"]], "__init__() (dipy.reconst.multi_voxel.callablearray method)": [[283, "dipy.reconst.multi_voxel.CallableArray.__init__"]], "__init__() (dipy.reconst.multi_voxel.multivoxelfit method)": [[283, "dipy.reconst.multi_voxel.MultiVoxelFit.__init__"]], "__init__() (dipy.reconst.odf.odffit method)": [[283, "dipy.reconst.odf.OdfFit.__init__"]], "__init__() (dipy.reconst.odf.odfmodel method)": [[283, "dipy.reconst.odf.OdfModel.__init__"]], "__init__() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.__init__"]], "__init__() (dipy.reconst.qtdmri.qtdmrimodel method)": [[283, "dipy.reconst.qtdmri.QtdmriModel.__init__"]], "__init__() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.__init__"]], "__init__() (dipy.reconst.qti.qtimodel method)": [[283, "dipy.reconst.qti.QtiModel.__init__"]], "__init__() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.__init__"]], "__init__() (dipy.reconst.rumba.rumbasdmodel method)": [[283, "dipy.reconst.rumba.RumbaSDModel.__init__"]], "__init__() (dipy.reconst.sfm.exponentialisotropicfit method)": [[283, "dipy.reconst.sfm.ExponentialIsotropicFit.__init__"]], "__init__() (dipy.reconst.sfm.exponentialisotropicmodel method)": [[283, "dipy.reconst.sfm.ExponentialIsotropicModel.__init__"]], "__init__() (dipy.reconst.sfm.isotropicfit method)": [[283, "dipy.reconst.sfm.IsotropicFit.__init__"]], "__init__() (dipy.reconst.sfm.isotropicmodel method)": [[283, "dipy.reconst.sfm.IsotropicModel.__init__"]], "__init__() (dipy.reconst.sfm.sparsefasciclefit method)": [[283, "dipy.reconst.sfm.SparseFascicleFit.__init__"]], "__init__() (dipy.reconst.sfm.sparsefasciclemodel method)": [[283, "dipy.reconst.sfm.SparseFascicleModel.__init__"]], "__init__() (dipy.reconst.shm.csaodfmodel method)": [[283, "dipy.reconst.shm.CsaOdfModel.__init__"]], "__init__() (dipy.reconst.shm.opdtmodel method)": [[283, "dipy.reconst.shm.OpdtModel.__init__"]], "__init__() (dipy.reconst.shm.qballbasemodel method)": [[283, "dipy.reconst.shm.QballBaseModel.__init__"]], "__init__() (dipy.reconst.shm.qballmodel method)": [[283, "dipy.reconst.shm.QballModel.__init__"]], "__init__() (dipy.reconst.shm.residualbootstrapwrapper method)": [[283, "dipy.reconst.shm.ResidualBootstrapWrapper.__init__"]], "__init__() (dipy.reconst.shm.sphharmfit method)": [[283, "dipy.reconst.shm.SphHarmFit.__init__"]], "__init__() (dipy.reconst.shm.sphharmmodel method)": [[283, "dipy.reconst.shm.SphHarmModel.__init__"]], "__init__() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.__init__"]], "__init__() (dipy.reconst.shore.shoremodel method)": [[283, "dipy.reconst.shore.ShoreModel.__init__"]], "_lt_cols() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti._lt_cols"]], "_lt_indices() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti._lt_indices"]], "_lt_rows() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti._lt_rows"]], "ad() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.ad"]], "adc() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.adc"]], "ak() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.ak"]], "akc() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.akc"]], "all_shm_coeff (dipy.reconst.mcsd.msdeconvfit property)": [[283, "dipy.reconst.mcsd.MSDeconvFit.all_shm_coeff"]], "angular_basis_eap_opt() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.angular_basis_EAP_opt"]], "angular_basis_opt() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.angular_basis_opt"]], "anisotropic_power() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.anisotropic_power"]], "apparent_diffusion_coef() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.apparent_diffusion_coef"]], "apparent_kurtosis_coef() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.apparent_kurtosis_coef"]], "auto_response() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.auto_response"]], "auto_response_msmt() (in module dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.auto_response_msmt"]], "auto_response_ssst() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.auto_response_ssst"]], "awf (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.awf"]], "awf_from_msk() (in module dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.awf_from_msk"]], "axial_diffusivity() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.axial_diffusivity"]], "axial_kurtosis() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.axial_kurtosis"]], "axonal_diffusivity (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.axonal_diffusivity"]], "axonal_water_fraction() (in module dipy.reconst.dki_micro)": [[283, "dipy.reconst.dki_micro.axonal_water_fraction"]], "b_mat() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.b_mat"]], "b_mat_isotropic() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.b_mat_isotropic"]], "basis() (dipy.reconst.csdeconv.axsymshresponse method)": [[283, "dipy.reconst.csdeconv.AxSymShResponse.basis"]], "bench_bounding_box() (in module dipy.reconst.benchmarks.bench_bounding_box)": [[283, "dipy.reconst.benchmarks.bench_bounding_box.bench_bounding_box"]], "bench_csdeconv() (in module dipy.reconst.benchmarks.bench_csd)": [[283, "dipy.reconst.benchmarks.bench_csd.bench_csdeconv"]], "bench_local_maxima() (in module dipy.reconst.benchmarks.bench_peaks)": [[283, "dipy.reconst.benchmarks.bench_peaks.bench_local_maxima"]], "bench_quick_squash() (in module dipy.reconst.benchmarks.bench_squash)": [[283, "dipy.reconst.benchmarks.bench_squash.bench_quick_squash"]], "bench_vec_val_vect() (in module dipy.reconst.benchmarks.bench_vec_val_sum)": [[283, "dipy.reconst.benchmarks.bench_vec_val_sum.bench_vec_val_vect"]], "binomialfloat() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.binomialfloat"]], "bootstrap_data_array() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.bootstrap_data_array"]], "bootstrap_data_voxel() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.bootstrap_data_voxel"]], "c_c() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.c_c"]], "c_m() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.c_m"]], "c_md() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.c_md"]], "c_mu() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.c_mu"]], "cache_clear() (dipy.reconst.cache.cache method)": [[283, "dipy.reconst.cache.Cache.cache_clear"]], "cache_get() (dipy.reconst.cache.cache method)": [[283, "dipy.reconst.cache.Cache.cache_get"]], "cache_set() (dipy.reconst.cache.cache method)": [[283, "dipy.reconst.cache.Cache.cache_set"]], "calculate_max_order() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.calculate_max_order"]], "carlson_rd() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.carlson_rd"]], "carlson_rf() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.carlson_rf"]], "cholesky_to_lower_triangular() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.cholesky_to_lower_triangular"]], "cls_fit_dki() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.cls_fit_dki"]], "coeff_of_determination() (in module dipy.reconst.cross_validation)": [[283, "dipy.reconst.cross_validation.coeff_of_determination"]], "color_fa() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.color_fa"]], "color_fa() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.color_fa"]], "combined_odf_iso() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.combined_odf_iso"]], "convert_sh_from_legacy() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.convert_sh_from_legacy"]], "convert_sh_to_full_basis() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.convert_sh_to_full_basis"]], "convert_sh_to_legacy() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.convert_sh_to_legacy"]], "create_qspace() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.create_qspace"]], "create_qtable() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.create_qtable"]], "create_rspace() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.create_rspace"]], "create_rspace() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.create_rspace"]], "create_rt_space_grid() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.create_rt_space_grid"]], "csdeconv() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.csdeconv"]], "cvx_fit() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.cvx_fit"]], "cvxpy_1x21_to_6x6() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.cvxpy_1x21_to_6x6"]], "cvxpy_1x6_to_3x3() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.cvxpy_1x6_to_3x3"]], "d_sq() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.d_sq"]], "decompose_tensor() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.decompose_tensor"]], "delta() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.delta"]], "design_matrix() (dipy.reconst.sfm.sparsefasciclemodel method)": [[283, "dipy.reconst.sfm.SparseFascicleModel.design_matrix"]], "design_matrix() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.design_matrix"]], "design_matrix() (in module dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.design_matrix"]], "design_matrix() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.design_matrix"]], "design_matrix_spatial() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.design_matrix_spatial"]], "determinant() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.determinant"]], "deviatoric() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.deviatoric"]], "diffusion_components() (in module dipy.reconst.dki_micro)": [[283, "dipy.reconst.dki_micro.diffusion_components"]], "dipy.reconst": [[283, "module-dipy.reconst"]], "dipy.reconst.base": [[283, "module-dipy.reconst.base"]], "dipy.reconst.benchmarks": [[283, "module-dipy.reconst.benchmarks"]], "dipy.reconst.benchmarks.bench_bounding_box": [[283, "module-dipy.reconst.benchmarks.bench_bounding_box"]], "dipy.reconst.benchmarks.bench_csd": [[283, "module-dipy.reconst.benchmarks.bench_csd"]], "dipy.reconst.benchmarks.bench_peaks": [[283, "module-dipy.reconst.benchmarks.bench_peaks"]], "dipy.reconst.benchmarks.bench_squash": [[283, "module-dipy.reconst.benchmarks.bench_squash"]], "dipy.reconst.benchmarks.bench_vec_val_sum": [[283, "module-dipy.reconst.benchmarks.bench_vec_val_sum"]], "dipy.reconst.cache": [[283, "module-dipy.reconst.cache"]], "dipy.reconst.cross_validation": [[283, "module-dipy.reconst.cross_validation"]], "dipy.reconst.csdeconv": [[283, "module-dipy.reconst.csdeconv"]], "dipy.reconst.dki": [[283, "module-dipy.reconst.dki"]], "dipy.reconst.dki_micro": [[283, "module-dipy.reconst.dki_micro"]], "dipy.reconst.dsi": [[283, "module-dipy.reconst.dsi"]], "dipy.reconst.dti": [[283, "module-dipy.reconst.dti"]], "dipy.reconst.forecast": [[283, "module-dipy.reconst.forecast"]], "dipy.reconst.fwdti": [[283, "module-dipy.reconst.fwdti"]], "dipy.reconst.gqi": [[283, "module-dipy.reconst.gqi"]], "dipy.reconst.ivim": [[283, "module-dipy.reconst.ivim"]], "dipy.reconst.mapmri": [[283, "module-dipy.reconst.mapmri"]], "dipy.reconst.mcsd": [[283, "module-dipy.reconst.mcsd"]], "dipy.reconst.msdki": [[283, "module-dipy.reconst.msdki"]], "dipy.reconst.multi_voxel": [[283, "module-dipy.reconst.multi_voxel"]], "dipy.reconst.odf": [[283, "module-dipy.reconst.odf"]], "dipy.reconst.qtdmri": [[283, "module-dipy.reconst.qtdmri"]], "dipy.reconst.qti": [[283, "module-dipy.reconst.qti"]], "dipy.reconst.rumba": [[283, "module-dipy.reconst.rumba"]], "dipy.reconst.sfm": [[283, "module-dipy.reconst.sfm"]], "dipy.reconst.shm": [[283, "module-dipy.reconst.shm"]], "dipy.reconst.shore": [[283, "module-dipy.reconst.shore"]], "dipy.reconst.utils": [[283, "module-dipy.reconst.utils"]], "directional_diffusion() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.directional_diffusion"]], "directional_diffusion_variance() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.directional_diffusion_variance"]], "directional_kurtosis() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.directional_kurtosis"]], "directions (dipy.reconst.dti.tensorfit property)": [[283, "dipy.reconst.dti.TensorFit.directions"]], "dki_design_matrix() (in module dipy.reconst.utils)": [[283, "dipy.reconst.utils.dki_design_matrix"]], "dki_prediction() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.dki_prediction"]], "dkimicro_prediction() (in module dipy.reconst.dki_micro)": [[283, "dipy.reconst.dki_micro.dkimicro_prediction"]], "dpar (dipy.reconst.forecast.forecastfit property)": [[283, "dipy.reconst.forecast.ForecastFit.dpar"]], "dperp (dipy.reconst.forecast.forecastfit property)": [[283, "dipy.reconst.forecast.ForecastFit.dperp"]], "dtd_covariance() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.dtd_covariance"]], "eig_from_lo_tri() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.eig_from_lo_tri"]], "elastic_crossvalidation() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.elastic_crossvalidation"]], "equatorial_maximum() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.equatorial_maximum"]], "equatorial_zone_vertices() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.equatorial_zone_vertices"]], "estimate_f_d_star() (dipy.reconst.ivim.ivimmodeltrr method)": [[283, "dipy.reconst.ivim.IvimModelTRR.estimate_f_D_star"]], "estimate_linear_fit() (dipy.reconst.ivim.ivimmodeltrr method)": [[283, "dipy.reconst.ivim.IvimModelTRR.estimate_linear_fit"]], "estimate_response() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.estimate_response"]], "evals (dipy.reconst.dti.tensorfit property)": [[283, "dipy.reconst.dti.TensorFit.evals"]], "evecs (dipy.reconst.dti.tensorfit property)": [[283, "dipy.reconst.dti.TensorFit.evecs"]], "f (dipy.reconst.fwdti.freewatertensorfit property)": [[283, "dipy.reconst.fwdti.FreeWaterTensorFit.f"]], "f_d_star_error() (in module dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.f_D_star_error"]], "f_d_star_prediction() (in module dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.f_D_star_prediction"]], "f_csf() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.f_csf"]], "f_gm() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.f_gm"]], "f_iso() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.f_iso"]], "f_wm() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.f_wm"]], "fa() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.fa"]], "fa() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.fa"]], "fa_trace_to_lambdas() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.fa_trace_to_lambdas"]], "find_signal_means() (in module dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.find_signal_means"]], "fit() (dipy.reconst.base.reconstmodel method)": [[283, "dipy.reconst.base.ReconstModel.fit"]], "fit() (dipy.reconst.csdeconv.constrainedsdtmodel method)": [[283, "dipy.reconst.csdeconv.ConstrainedSDTModel.fit"]], "fit() (dipy.reconst.csdeconv.constrainedsphericaldeconvmodel method)": [[283, "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.fit"]], "fit() (dipy.reconst.dki.diffusionkurtosismodel method)": [[283, "dipy.reconst.dki.DiffusionKurtosisModel.fit"]], "fit() (dipy.reconst.dki_micro.kurtosismicrostructuremodel method)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructureModel.fit"]], "fit() (dipy.reconst.dsi.diffusionspectrumdeconvmodel method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumDeconvModel.fit"]], "fit() (dipy.reconst.dsi.diffusionspectrummodel method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumModel.fit"]], "fit() (dipy.reconst.dti.tensormodel method)": [[283, "dipy.reconst.dti.TensorModel.fit"]], "fit() (dipy.reconst.forecast.forecastmodel method)": [[283, "dipy.reconst.forecast.ForecastModel.fit"]], "fit() (dipy.reconst.fwdti.freewatertensormodel method)": [[283, "dipy.reconst.fwdti.FreeWaterTensorModel.fit"]], "fit() (dipy.reconst.gqi.generalizedqsamplingmodel method)": [[283, "dipy.reconst.gqi.GeneralizedQSamplingModel.fit"]], "fit() (dipy.reconst.ivim.ivimmodeltrr method)": [[283, "dipy.reconst.ivim.IvimModelTRR.fit"]], "fit() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.fit"]], "fit() (dipy.reconst.mapmri.mapmrimodel method)": [[283, "dipy.reconst.mapmri.MapmriModel.fit"]], "fit() (dipy.reconst.mcsd.multishelldeconvmodel method)": [[283, "dipy.reconst.mcsd.MultiShellDeconvModel.fit"]], "fit() (dipy.reconst.msdki.meandiffusionkurtosismodel method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisModel.fit"]], "fit() (dipy.reconst.odf.odfmodel method)": [[283, "dipy.reconst.odf.OdfModel.fit"]], "fit() (dipy.reconst.qtdmri.qtdmrimodel method)": [[283, "dipy.reconst.qtdmri.QtdmriModel.fit"]], "fit() (dipy.reconst.qti.qtimodel method)": [[283, "dipy.reconst.qti.QtiModel.fit"]], "fit() (dipy.reconst.sfm.exponentialisotropicmodel method)": [[283, "dipy.reconst.sfm.ExponentialIsotropicModel.fit"]], "fit() (dipy.reconst.sfm.isotropicmodel method)": [[283, "dipy.reconst.sfm.IsotropicModel.fit"]], "fit() (dipy.reconst.sfm.sparsefasciclemodel method)": [[283, "dipy.reconst.sfm.SparseFascicleModel.fit"]], "fit() (dipy.reconst.shm.qballbasemodel method)": [[283, "dipy.reconst.shm.QballBaseModel.fit"]], "fit() (dipy.reconst.shore.shoremodel method)": [[283, "dipy.reconst.shore.ShoreModel.fit"]], "fitted_signal() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.fitted_signal"]], "fitted_signal() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.fitted_signal"]], "fitted_signal() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.fitted_signal"]], "forecast_error_func() (in module dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.forecast_error_func"]], "forecast_matrix() (in module dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.forecast_matrix"]], "forward_sdeconv_mat() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.forward_sdeconv_mat"]], "forward_sdt_deconv_mat() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.forward_sdt_deconv_mat"]], "fractional_anisotropy() (dipy.reconst.forecast.forecastfit method)": [[283, "dipy.reconst.forecast.ForecastFit.fractional_anisotropy"]], "fractional_anisotropy() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.fractional_anisotropy"]], "from_21x1_to_6x6() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.from_21x1_to_6x6"]], "from_3x3_to_6x1() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.from_3x3_to_6x1"]], "from_6x1_to_3x3() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.from_6x1_to_3x3"]], "from_6x6_to_21x1() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.from_6x6_to_21x1"]], "from_lower_triangular() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.from_lower_triangular"]], "fwdti_prediction() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.fwdti_prediction"]], "ga() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.ga"]], "gcv_cost_function() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.gcv_cost_function"]], "gen_psf() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.gen_PSF"]], "gen_dirac() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.gen_dirac"]], "generalized_crossvalidation() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.generalized_crossvalidation"]], "generalized_crossvalidation() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.generalized_crossvalidation"]], "generalized_crossvalidation_array() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.generalized_crossvalidation_array"]], "generate_kernel() (in module dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.generate_kernel"]], "geodesic_anisotropy() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.geodesic_anisotropy"]], "gfa() (dipy.reconst.shm.sphharmfit method)": [[283, "dipy.reconst.shm.SphHarmFit.gfa"]], "gfa() (in module dipy.reconst.odf)": [[283, "dipy.reconst.odf.gfa"]], "half_to_full_qspace() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.half_to_full_qspace"]], "hanning_filter() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.hanning_filter"]], "hat() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.hat"]], "hindered_ad (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_ad"]], "hindered_evals (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_evals"]], "hindered_rd (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.hindered_rd"]], "iso (dipy.reconst.mcsd.multishellresponse property)": [[283, "dipy.reconst.mcsd.MultiShellResponse.iso"]], "isotropic() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.isotropic"]], "isotropic_scale_factor() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.isotropic_scale_factor"]], "iter_fit_tensor() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.iter_fit_tensor"]], "ivim_mix_cost_one() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.ivim_mix_cost_one"]], "ivim_model_selector() (in module dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.ivim_model_selector"]], "ivim_prediction() (in module dipy.reconst.ivim)": [[283, "dipy.reconst.ivim.ivim_prediction"]], "k_bulk() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.k_bulk"]], "k_mu() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.k_mu"]], "k_shear() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.k_shear"]], "kfa (dipy.reconst.dki.diffusionkurtosisfit property)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.kfa"]], "kfold_xval() (in module dipy.reconst.cross_validation)": [[283, "dipy.reconst.cross_validation.kfold_xval"]], "kmax() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.kmax"]], "kt (dipy.reconst.dki.diffusionkurtosisfit property)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.kt"]], "kurtosis_fractional_anisotropy() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.kurtosis_fractional_anisotropy"]], "kurtosis_maximum() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.kurtosis_maximum"]], "l1_crossvalidation() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.l1_crossvalidation"]], "l_shore() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.l_shore"]], "lazy_index() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.lazy_index"]], "lb_forecast() (in module dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.lb_forecast"]], "lcr_matrix() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.lcr_matrix"]], "linearity() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.linearity"]], "linearity() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.linearity"]], "logger() (in module dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.logger"]], "lower_triangular() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.lower_triangular"]], "lower_triangular() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.lower_triangular"]], "lower_triangular_to_cholesky() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.lower_triangular_to_cholesky"]], "ls_fit_dki() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.ls_fit_dki"]], "map_laplace_s() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.map_laplace_s"]], "map_laplace_t() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.map_laplace_t"]], "map_laplace_u() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.map_laplace_u"]], "mapmri_r (dipy.reconst.mapmri.mapmrifit property)": [[283, "dipy.reconst.mapmri.MapmriFit.mapmri_R"]], "mapmri_stu_reg_matrices() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_STU_reg_matrices"]], "mapmri_coeff (dipy.reconst.mapmri.mapmrifit property)": [[283, "dipy.reconst.mapmri.MapmriFit.mapmri_coeff"]], "mapmri_index_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_index_matrix"]], "mapmri_isotropic_k_mu_dependent() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_K_mu_dependent"]], "mapmri_isotropic_k_mu_independent() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_K_mu_independent"]], "mapmri_isotropic_m_mu_dependent() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_M_mu_dependent"]], "mapmri_isotropic_m_mu_independent() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_M_mu_independent"]], "mapmri_isotropic_index_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_index_matrix"]], "mapmri_isotropic_laplacian_reg_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix"]], "mapmri_isotropic_laplacian_reg_matrix_from_index_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_laplacian_reg_matrix_from_index_matrix"]], "mapmri_isotropic_odf_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_odf_matrix"]], "mapmri_isotropic_odf_sh_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_odf_sh_matrix"]], "mapmri_isotropic_phi_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_phi_matrix"]], "mapmri_isotropic_psi_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_psi_matrix"]], "mapmri_isotropic_radial_pdf_basis() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_radial_pdf_basis"]], "mapmri_isotropic_radial_signal_basis() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_isotropic_radial_signal_basis"]], "mapmri_laplacian_reg_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_laplacian_reg_matrix"]], "mapmri_mu (dipy.reconst.mapmri.mapmrifit property)": [[283, "dipy.reconst.mapmri.MapmriFit.mapmri_mu"]], "mapmri_odf_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_odf_matrix"]], "mapmri_phi_1d() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_phi_1d"]], "mapmri_phi_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_phi_matrix"]], "mapmri_psi_1d() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_psi_1d"]], "mapmri_psi_matrix() (in module dipy.reconst.mapmri)": [[283, "dipy.reconst.mapmri.mapmri_psi_matrix"]], "mask_for_response_msmt() (in module dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.mask_for_response_msmt"]], "mask_for_response_ssst() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.mask_for_response_ssst"]], "max (dipy.reconst.shm.csaodfmodel attribute)": [[283, "dipy.reconst.shm.CsaOdfModel.max"]], "mbessel_ratio() (in module dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.mbessel_ratio"]], "md() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.md"]], "md() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.md"]], "mean_d_sq() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.mean_d_sq"]], "mean_diffusivity() (dipy.reconst.forecast.forecastfit method)": [[283, "dipy.reconst.forecast.ForecastFit.mean_diffusivity"]], "mean_diffusivity() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.mean_diffusivity"]], "mean_kurtosis() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.mean_kurtosis"]], "mean_kurtosis_tensor() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.mean_kurtosis_tensor"]], "mean_signal_bvalue() (in module dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.mean_signal_bvalue"]], "min (dipy.reconst.shm.csaodfmodel attribute)": [[283, "dipy.reconst.shm.CsaOdfModel.min"]], "minmax_normalize() (in module dipy.reconst.odf)": [[283, "dipy.reconst.odf.minmax_normalize"]], "mk() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.mk"]], "mk() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.mk"]], "mkt() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.mkt"]], "mode() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.mode"]], "mode() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.mode"]], "msd() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.msd"]], "msd() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.msd"]], "msd() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.msd"]], "msd() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.msd"]], "msd_discrete() (dipy.reconst.dsi.diffusionspectrumfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit.msd_discrete"]], "msdki_prediction() (in module dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.msdki_prediction"]], "msk() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.msk"]], "msk_from_awf() (in module dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.msk_from_awf"]], "multi_fit() (dipy.reconst.dki.diffusionkurtosismodel method)": [[283, "dipy.reconst.dki.DiffusionKurtosisModel.multi_fit"]], "multi_shell_fiber_response() (in module dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.multi_shell_fiber_response"]], "multi_tissue_basis() (in module dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.multi_tissue_basis"]], "multi_voxel_fit() (in module dipy.reconst.multi_voxel)": [[283, "dipy.reconst.multi_voxel.multi_voxel_fit"]], "n_shore() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.n_shore"]], "ng() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.ng"]], "ng_parallel() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.ng_parallel"]], "ng_perpendicular() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.ng_perpendicular"]], "nlls_cost() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.nlls_cost"]], "nlls_fit_tensor() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.nlls_fit_tensor"]], "nls_fit_tensor() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.nls_fit_tensor"]], "nls_iter() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.nls_iter"]], "norm() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.norm"]], "norm_of_laplacian_signal() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.norm_of_laplacian_signal"]], "norm_of_laplacian_signal() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.norm_of_laplacian_signal"]], "normalize_data() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.normalize_data"]], "normalize_qa() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.normalize_qa"]], "npa() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.npa"]], "num_grad() (in module dipy.reconst.benchmarks.bench_csd)": [[283, "dipy.reconst.benchmarks.bench_csd.num_grad"]], "odf() (dipy.reconst.dsi.diffusionspectrumfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit.odf"]], "odf() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.odf"]], "odf() (dipy.reconst.forecast.forecastfit method)": [[283, "dipy.reconst.forecast.ForecastFit.odf"]], "odf() (dipy.reconst.gqi.generalizedqsamplingfit method)": [[283, "dipy.reconst.gqi.GeneralizedQSamplingFit.odf"]], "odf() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.odf"]], "odf() (dipy.reconst.odf.odffit method)": [[283, "dipy.reconst.odf.OdfFit.odf"]], "odf() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.odf"]], "odf() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.odf"]], "odf() (dipy.reconst.sfm.sparsefasciclefit method)": [[283, "dipy.reconst.sfm.SparseFascicleFit.odf"]], "odf() (dipy.reconst.shm.sphharmfit method)": [[283, "dipy.reconst.shm.SphHarmFit.odf"]], "odf() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.odf"]], "odf_deconv() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.odf_deconv"]], "odf_sh() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.odf_sh"]], "odf_sh() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.odf_sh"]], "odf_sh() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.odf_sh"]], "odf_sh_to_sharp() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.odf_sh_to_sharp"]], "odf_sum() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.odf_sum"]], "old_squash() (in module dipy.reconst.benchmarks.bench_squash)": [[283, "dipy.reconst.benchmarks.bench_squash.old_squash"]], "ols_fit_tensor() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.ols_fit_tensor"]], "on_sphere() (dipy.reconst.csdeconv.axsymshresponse method)": [[283, "dipy.reconst.csdeconv.AxSymShResponse.on_sphere"]], "order_from_ncoef() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.order_from_ncoef"]], "params_to_dki_params() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.params_to_dki_params"]], "part1_reg_matrix_tau() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part1_reg_matrix_tau"]], "part23_iso_reg_matrix_q() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part23_iso_reg_matrix_q"]], "part23_reg_matrix_q() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part23_reg_matrix_q"]], "part23_reg_matrix_tau() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part23_reg_matrix_tau"]], "part4_iso_reg_matrix_q() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part4_iso_reg_matrix_q"]], "part4_reg_matrix_q() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part4_reg_matrix_q"]], "part4_reg_matrix_tau() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.part4_reg_matrix_tau"]], "patch_maximum() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.patch_maximum"]], "patch_sum() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.patch_sum"]], "patch_vertices() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.patch_vertices"]], "pdf() (dipy.reconst.dsi.diffusionspectrumdeconvfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumDeconvFit.pdf"]], "pdf() (dipy.reconst.dsi.diffusionspectrumfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit.pdf"]], "pdf() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.pdf"]], "pdf() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.pdf"]], "pdf() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.pdf"]], "pdf_grid() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.pdf_grid"]], "pdf_interp_coords() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.pdf_interp_coords"]], "pdf_odf() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.pdf_odf"]], "perfusion_fraction (dipy.reconst.ivim.ivimfit property)": [[283, "dipy.reconst.ivim.IvimFit.perfusion_fraction"]], "phi() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.phi"]], "planarity() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.planarity"]], "planarity() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.planarity"]], "polar_zone_vertices() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.polar_zone_vertices"]], "predict() (dipy.reconst.csdeconv.constrainedsphericaldeconvmodel method)": [[283, "dipy.reconst.csdeconv.ConstrainedSphericalDeconvModel.predict"]], "predict() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.predict"]], "predict() (dipy.reconst.dki.diffusionkurtosismodel method)": [[283, "dipy.reconst.dki.DiffusionKurtosisModel.predict"]], "predict() (dipy.reconst.dki_micro.kurtosismicrostructuralfit method)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.predict"]], "predict() (dipy.reconst.dki_micro.kurtosismicrostructuremodel method)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructureModel.predict"]], "predict() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.predict"]], "predict() (dipy.reconst.dti.tensormodel method)": [[283, "dipy.reconst.dti.TensorModel.predict"]], "predict() (dipy.reconst.forecast.forecastfit method)": [[283, "dipy.reconst.forecast.ForecastFit.predict"]], "predict() (dipy.reconst.fwdti.freewatertensorfit method)": [[283, "dipy.reconst.fwdti.FreeWaterTensorFit.predict"]], "predict() (dipy.reconst.fwdti.freewatertensormodel method)": [[283, "dipy.reconst.fwdti.FreeWaterTensorModel.predict"]], "predict() (dipy.reconst.ivim.ivimfit method)": [[283, "dipy.reconst.ivim.IvimFit.predict"]], "predict() (dipy.reconst.ivim.ivimmodeltrr method)": [[283, "dipy.reconst.ivim.IvimModelTRR.predict"]], "predict() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.predict"]], "predict() (dipy.reconst.mcsd.multishelldeconvmodel method)": [[283, "dipy.reconst.mcsd.MultiShellDeconvModel.predict"]], "predict() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.predict"]], "predict() (dipy.reconst.msdki.meandiffusionkurtosismodel method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisModel.predict"]], "predict() (dipy.reconst.multi_voxel.multivoxelfit method)": [[283, "dipy.reconst.multi_voxel.MultiVoxelFit.predict"]], "predict() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.predict"]], "predict() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.predict"]], "predict() (dipy.reconst.qti.qtimodel method)": [[283, "dipy.reconst.qti.QtiModel.predict"]], "predict() (dipy.reconst.rumba.rumbafit method)": [[283, "dipy.reconst.rumba.RumbaFit.predict"]], "predict() (dipy.reconst.sfm.exponentialisotropicfit method)": [[283, "dipy.reconst.sfm.ExponentialIsotropicFit.predict"]], "predict() (dipy.reconst.sfm.isotropicfit method)": [[283, "dipy.reconst.sfm.IsotropicFit.predict"]], "predict() (dipy.reconst.sfm.sparsefasciclefit method)": [[283, "dipy.reconst.sfm.SparseFascicleFit.predict"]], "predict() (dipy.reconst.shm.sphharmfit method)": [[283, "dipy.reconst.shm.SphHarmFit.predict"]], "project_hemisph_bvecs() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.project_hemisph_bvecs"]], "psi_l() (in module dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.psi_l"]], "qiv() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.qiv"]], "qiv() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.qiv"]], "qtdmri_anisotropic_scaling() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_anisotropic_scaling"]], "qtdmri_eap_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_eap_matrix"]], "qtdmri_eap_matrix_() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_eap_matrix_"]], "qtdmri_index_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_index_matrix"]], "qtdmri_isotropic_eap_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix"]], "qtdmri_isotropic_eap_matrix_() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_eap_matrix_"]], "qtdmri_isotropic_index_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_index_matrix"]], "qtdmri_isotropic_laplacian_reg_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_laplacian_reg_matrix"]], "qtdmri_isotropic_scaling() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_scaling"]], "qtdmri_isotropic_signal_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix"]], "qtdmri_isotropic_signal_matrix_() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_signal_matrix_"]], "qtdmri_isotropic_to_mapmri_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_isotropic_to_mapmri_matrix"]], "qtdmri_laplacian_reg_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_laplacian_reg_matrix"]], "qtdmri_mapmri_isotropic_normalization() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_mapmri_isotropic_normalization"]], "qtdmri_mapmri_normalization() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_mapmri_normalization"]], "qtdmri_number_of_coefficients() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_number_of_coefficients"]], "qtdmri_signal_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_signal_matrix"]], "qtdmri_signal_matrix_() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_signal_matrix_"]], "qtdmri_temporal_normalization() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_temporal_normalization"]], "qtdmri_to_mapmri_coef() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.qtdmri_to_mapmri_coef"]], "qtdmri_to_mapmri_matrix() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.qtdmri_to_mapmri_matrix"]], "qti_signal() (in module dipy.reconst.qti)": [[283, "dipy.reconst.qti.qti_signal"]], "quadratic_form (dipy.reconst.dti.tensorfit property)": [[283, "dipy.reconst.dti.TensorFit.quadratic_form"]], "quantize_evecs() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.quantize_evecs"]], "radial_basis_eap_opt() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.radial_basis_EAP_opt"]], "radial_basis_opt() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.radial_basis_opt"]], "radial_diffusivity() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.radial_diffusivity"]], "radial_kurtosis() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.radial_kurtosis"]], "rd() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.rd"]], "real_sh_descoteaux() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sh_descoteaux"]], "real_sh_descoteaux_from_index() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sh_descoteaux_from_index"]], "real_sh_tournier() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sh_tournier"]], "real_sh_tournier_from_index() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sh_tournier_from_index"]], "real_sph_harm() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sph_harm"]], "real_sym_sh_basis() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sym_sh_basis"]], "real_sym_sh_mrtrix() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.real_sym_sh_mrtrix"]], "recursive_response() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.recursive_response"]], "response_from_mask() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.response_from_mask"]], "response_from_mask_msmt() (in module dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.response_from_mask_msmt"]], "response_from_mask_ssst() (in module dipy.reconst.csdeconv)": [[283, "dipy.reconst.csdeconv.response_from_mask_ssst"]], "restore_fit_tensor() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.restore_fit_tensor"]], "restricted_evals (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.restricted_evals"]], "rho_matrix() (in module dipy.reconst.forecast)": [[283, "dipy.reconst.forecast.rho_matrix"]], "rk() (dipy.reconst.dki.diffusionkurtosisfit method)": [[283, "dipy.reconst.dki.DiffusionKurtosisFit.rk"]], "rtap() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.rtap"]], "rtap() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.rtap"]], "rtop() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.rtop"]], "rtop() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.rtop"]], "rtop_pdf() (dipy.reconst.dsi.diffusionspectrumfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit.rtop_pdf"]], "rtop_pdf() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.rtop_pdf"]], "rtop_signal() (dipy.reconst.dsi.diffusionspectrumfit method)": [[283, "dipy.reconst.dsi.DiffusionSpectrumFit.rtop_signal"]], "rtop_signal() (dipy.reconst.shore.shorefit method)": [[283, "dipy.reconst.shore.ShoreFit.rtop_signal"]], "rtpp() (dipy.reconst.mapmri.mapmrifit method)": [[283, "dipy.reconst.mapmri.MapmriFit.rtpp"]], "rtpp() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.rtpp"]], "rumba_deconv() (in module dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.rumba_deconv"]], "rumba_deconv_global() (in module dipy.reconst.rumba)": [[283, "dipy.reconst.rumba.rumba_deconv_global"]], "sampling_matrix() (dipy.reconst.shm.sphharmmodel method)": [[283, "dipy.reconst.shm.SphHarmModel.sampling_matrix"]], "sf_to_sh() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.sf_to_sh"]], "sfm_design_matrix() (in module dipy.reconst.sfm)": [[283, "dipy.reconst.sfm.sfm_design_matrix"]], "sh_coeff (dipy.reconst.forecast.forecastfit property)": [[283, "dipy.reconst.forecast.ForecastFit.sh_coeff"]], "sh_to_rh() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.sh_to_rh"]], "sh_to_sf() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.sh_to_sf"]], "sh_to_sf_matrix() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.sh_to_sf_matrix"]], "shape (dipy.reconst.dti.tensorfit property)": [[283, "dipy.reconst.dti.TensorFit.shape"]], "shape (dipy.reconst.ivim.ivimfit property)": [[283, "dipy.reconst.ivim.IvimFit.shape"]], "shape (dipy.reconst.multi_voxel.multivoxelfit property)": [[283, "dipy.reconst.multi_voxel.MultiVoxelFit.shape"]], "shape (dipy.reconst.shm.sphharmfit property)": [[283, "dipy.reconst.shm.SphHarmFit.shape"]], "shm_coeff (dipy.reconst.mcsd.msdeconvfit property)": [[283, "dipy.reconst.mcsd.MSDeconvFit.shm_coeff"]], "shm_coeff (dipy.reconst.shm.sphharmfit property)": [[283, "dipy.reconst.shm.SphHarmFit.shm_coeff"]], "shore_coeff (dipy.reconst.shore.shorefit property)": [[283, "dipy.reconst.shore.ShoreFit.shore_coeff"]], "shore_indices() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.shore_indices"]], "shore_matrix() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.shore_matrix"]], "shore_matrix_odf() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.shore_matrix_odf"]], "shore_matrix_pdf() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.shore_matrix_pdf"]], "shore_order() (in module dipy.reconst.shore)": [[283, "dipy.reconst.shore.shore_order"]], "smooth_pinv() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.smooth_pinv"]], "smt2di() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2di"]], "smt2f() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2f"]], "smt2ufa() (dipy.reconst.msdki.meandiffusionkurtosisfit method)": [[283, "dipy.reconst.msdki.MeanDiffusionKurtosisFit.smt2uFA"]], "solve_qp() (in module dipy.reconst.mcsd)": [[283, "dipy.reconst.mcsd.solve_qp"]], "sparsity_abs() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.sparsity_abs"]], "sparsity_density() (dipy.reconst.qtdmri.qtdmrifit method)": [[283, "dipy.reconst.qtdmri.QtdmriFit.sparsity_density"]], "sph_harm_ind_list() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.sph_harm_ind_list"]], "spherical_harmonics() (in module dipy.reconst.shm)": [[283, "dipy.reconst.shm.spherical_harmonics"]], "sphericity() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.sphericity"]], "sphericity() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.sphericity"]], "split_dki_param() (in module dipy.reconst.dki)": [[283, "dipy.reconst.dki.split_dki_param"]], "squared_radial_component() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.squared_radial_component"]], "stoc_search_cost() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.stoc_search_cost"]], "temporal_basis() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.temporal_basis"]], "tensor_prediction() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.tensor_prediction"]], "threshold_propagator() (in module dipy.reconst.dsi)": [[283, "dipy.reconst.dsi.threshold_propagator"]], "tortuosity (dipy.reconst.dki_micro.kurtosismicrostructuralfit property)": [[283, "dipy.reconst.dki_micro.KurtosisMicrostructuralFit.tortuosity"]], "tortuosity() (in module dipy.reconst.dki_micro)": [[283, "dipy.reconst.dki_micro.tortuosity"]], "trace() (dipy.reconst.dti.tensorfit method)": [[283, "dipy.reconst.dti.TensorFit.trace"]], "trace() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.trace"]], "triple_odf_maxima() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.triple_odf_maxima"]], "ufa() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.ufa"]], "upper_hemi_map() (in module dipy.reconst.gqi)": [[283, "dipy.reconst.gqi.upper_hemi_map"]], "v_iso() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.v_iso"]], "v_md() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.v_md"]], "v_shear() (dipy.reconst.qti.qtifit method)": [[283, "dipy.reconst.qti.QtiFit.v_shear"]], "visualise_gradient_table_g_delta_rainbow() (in module dipy.reconst.qtdmri)": [[283, "dipy.reconst.qtdmri.visualise_gradient_table_G_Delta_rainbow"]], "volume_fractions (dipy.reconst.mcsd.msdeconvfit property)": [[283, "dipy.reconst.mcsd.MSDeconvFit.volume_fractions"]], "wls_fit_msdki() (in module dipy.reconst.msdki)": [[283, "dipy.reconst.msdki.wls_fit_msdki"]], "wls_fit_tensor() (in module dipy.reconst.dti)": [[283, "dipy.reconst.dti.wls_fit_tensor"]], "wls_fit_tensor() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.wls_fit_tensor"]], "wls_iter() (in module dipy.reconst.fwdti)": [[283, "dipy.reconst.fwdti.wls_iter"]], "x_and_f_to_x_f() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.x_and_f_to_x_f"]], "x_f_to_x_and_f() (dipy.reconst.ivim.ivimmodelvp method)": [[283, "dipy.reconst.ivim.IvimModelVP.x_f_to_x_and_f"]], "cluster (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.Cluster"]], "clustercentroid (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.ClusterCentroid"]], "clustermap (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.ClusterMap"]], "clustermapcentroid (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.ClusterMapCentroid"]], "clustering (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.Clustering"]], "faststreamlinesearch (class in dipy.segment.fss)": [[284, "dipy.segment.fss.FastStreamlineSearch"]], "identity (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.Identity"]], "mdfpy (class in dipy.segment.benchmarks.bench_quickbundles)": [[284, "dipy.segment.benchmarks.bench_quickbundles.MDFpy"]], "quickbundles (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.QuickBundles"]], "quickbundlesx (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.QuickBundlesX"]], "recobundles (class in dipy.segment.bundles)": [[284, "dipy.segment.bundles.RecoBundles"]], "tissueclassifierhmrf (class in dipy.segment.tissue)": [[284, "dipy.segment.tissue.TissueClassifierHMRF"]], "treecluster (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.TreeCluster"]], "treeclustermap (class in dipy.segment.clustering)": [[284, "dipy.segment.clustering.TreeClusterMap"]], "__init__() (dipy.segment.benchmarks.bench_quickbundles.mdfpy method)": [[284, "dipy.segment.benchmarks.bench_quickbundles.MDFpy.__init__"]], "__init__() (dipy.segment.bundles.recobundles method)": [[284, "dipy.segment.bundles.RecoBundles.__init__"]], "__init__() (dipy.segment.clustering.cluster method)": [[284, "dipy.segment.clustering.Cluster.__init__"]], "__init__() (dipy.segment.clustering.clustercentroid method)": [[284, "dipy.segment.clustering.ClusterCentroid.__init__"]], "__init__() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.__init__"]], "__init__() (dipy.segment.clustering.clustermapcentroid method)": [[284, "dipy.segment.clustering.ClusterMapCentroid.__init__"]], "__init__() (dipy.segment.clustering.clustering method)": [[284, "dipy.segment.clustering.Clustering.__init__"]], "__init__() (dipy.segment.clustering.identity method)": [[284, "dipy.segment.clustering.Identity.__init__"]], "__init__() (dipy.segment.clustering.quickbundles method)": [[284, "dipy.segment.clustering.QuickBundles.__init__"]], "__init__() (dipy.segment.clustering.quickbundlesx method)": [[284, "dipy.segment.clustering.QuickBundlesX.__init__"]], "__init__() (dipy.segment.clustering.treecluster method)": [[284, "dipy.segment.clustering.TreeCluster.__init__"]], "__init__() (dipy.segment.clustering.treeclustermap method)": [[284, "dipy.segment.clustering.TreeClusterMap.__init__"]], "__init__() (dipy.segment.fss.faststreamlinesearch method)": [[284, "dipy.segment.fss.FastStreamlineSearch.__init__"]], "__init__() (dipy.segment.tissue.tissueclassifierhmrf method)": [[284, "dipy.segment.tissue.TissueClassifierHMRF.__init__"]], "add() (dipy.segment.clustering.treecluster method)": [[284, "dipy.segment.clustering.TreeCluster.add"]], "add_cluster() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.add_cluster"]], "applymask() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.applymask"]], "are_compatible() (dipy.segment.benchmarks.bench_quickbundles.mdfpy method)": [[284, "dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible"]], "assign() (dipy.segment.clustering.cluster method)": [[284, "dipy.segment.clustering.Cluster.assign"]], "assign() (dipy.segment.clustering.clustercentroid method)": [[284, "dipy.segment.clustering.ClusterCentroid.assign"]], "ba_analysis() (in module dipy.segment.bundles)": [[284, "dipy.segment.bundles.ba_analysis"]], "bench_quickbundles() (in module dipy.segment.benchmarks.bench_quickbundles)": [[284, "dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles"]], "bounding_box() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.bounding_box"]], "bundle_adjacency() (in module dipy.segment.bundles)": [[284, "dipy.segment.bundles.bundle_adjacency"]], "bundle_shape_similarity() (in module dipy.segment.bundles)": [[284, "dipy.segment.bundles.bundle_shape_similarity"]], "centroids (dipy.segment.clustering.clustermapcentroid property)": [[284, "dipy.segment.clustering.ClusterMapCentroid.centroids"]], "check_range() (in module dipy.segment.bundles)": [[284, "dipy.segment.bundles.check_range"]], "classify() (dipy.segment.tissue.tissueclassifierhmrf method)": [[284, "dipy.segment.tissue.TissueClassifierHMRF.classify"]], "clean_cc_mask() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.clean_cc_mask"]], "clear() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.clear"]], "cluster() (dipy.segment.clustering.clustering method)": [[284, "dipy.segment.clustering.Clustering.cluster"]], "cluster() (dipy.segment.clustering.quickbundles method)": [[284, "dipy.segment.clustering.QuickBundles.cluster"]], "cluster() (dipy.segment.clustering.quickbundlesx method)": [[284, "dipy.segment.clustering.QuickBundlesX.cluster"]], "cluster_bundle() (in module dipy.segment.bundles)": [[284, "dipy.segment.bundles.cluster_bundle"]], "clusters (dipy.segment.clustering.clustermap property)": [[284, "dipy.segment.clustering.ClusterMap.clusters"]], "clusters_sizes() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.clusters_sizes"]], "crop() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.crop"]], "dipy.segment": [[284, "module-dipy.segment"]], "dipy.segment.benchmarks": [[284, "module-dipy.segment.benchmarks"]], "dipy.segment.benchmarks.bench_quickbundles": [[284, "module-dipy.segment.benchmarks.bench_quickbundles"]], "dipy.segment.bundles": [[284, "module-dipy.segment.bundles"]], "dipy.segment.clustering": [[284, "module-dipy.segment.clustering"]], "dipy.segment.fss": [[284, "module-dipy.segment.fss"]], "dipy.segment.mask": [[284, "module-dipy.segment.mask"]], "dipy.segment.metric": [[284, "module-dipy.segment.metric"]], "dipy.segment.threshold": [[284, "module-dipy.segment.threshold"]], "dipy.segment.tissue": [[284, "module-dipy.segment.tissue"]], "dist() (dipy.segment.benchmarks.bench_quickbundles.mdfpy method)": [[284, "dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist"]], "evaluate_results() (dipy.segment.bundles.recobundles method)": [[284, "dipy.segment.bundles.RecoBundles.evaluate_results"]], "get_clusters() (dipy.segment.clustering.treeclustermap method)": [[284, "dipy.segment.clustering.TreeClusterMap.get_clusters"]], "get_large_clusters() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.get_large_clusters"]], "get_small_clusters() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.get_small_clusters"]], "is_leaf (dipy.segment.clustering.treecluster property)": [[284, "dipy.segment.clustering.TreeCluster.is_leaf"]], "iter_preorder() (dipy.segment.clustering.treeclustermap method)": [[284, "dipy.segment.clustering.TreeClusterMap.iter_preorder"]], "logger() (in module dipy.segment.bundles)": [[284, "dipy.segment.bundles.logger"]], "logger() (in module dipy.segment.clustering)": [[284, "dipy.segment.clustering.logger"]], "mdf() (in module dipy.segment.metric)": [[284, "dipy.segment.metric.mdf"]], "mean_euclidean_distance() (in module dipy.segment.metric)": [[284, "dipy.segment.metric.mean_euclidean_distance"]], "mean_manhattan_distance() (in module dipy.segment.metric)": [[284, "dipy.segment.metric.mean_manhattan_distance"]], "median_otsu() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.median_otsu"]], "multi_median() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.multi_median"]], "nearest_from_matrix_col() (in module dipy.segment.fss)": [[284, "dipy.segment.fss.nearest_from_matrix_col"]], "nearest_from_matrix_row() (in module dipy.segment.fss)": [[284, "dipy.segment.fss.nearest_from_matrix_row"]], "otsu() (in module dipy.segment.threshold)": [[284, "dipy.segment.threshold.otsu"]], "qbx_and_merge() (in module dipy.segment.clustering)": [[284, "dipy.segment.clustering.qbx_and_merge"]], "radius_search() (dipy.segment.fss.faststreamlinesearch method)": [[284, "dipy.segment.fss.FastStreamlineSearch.radius_search"]], "recognize() (dipy.segment.bundles.recobundles method)": [[284, "dipy.segment.bundles.RecoBundles.recognize"]], "refdata (dipy.segment.clustering.clustermap property)": [[284, "dipy.segment.clustering.ClusterMap.refdata"]], "refdata (dipy.segment.clustering.treeclustermap property)": [[284, "dipy.segment.clustering.TreeClusterMap.refdata"]], "refine() (dipy.segment.bundles.recobundles method)": [[284, "dipy.segment.bundles.RecoBundles.refine"]], "remove_cluster() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.remove_cluster"]], "return_indices() (dipy.segment.clustering.treecluster method)": [[284, "dipy.segment.clustering.TreeCluster.return_indices"]], "segment_from_cfa() (in module dipy.segment.mask)": [[284, "dipy.segment.mask.segment_from_cfa"]], "size() (dipy.segment.clustering.clustermap method)": [[284, "dipy.segment.clustering.ClusterMap.size"]], "traverse_postorder() (dipy.segment.clustering.treeclustermap method)": [[284, "dipy.segment.clustering.TreeClusterMap.traverse_postorder"]], "update() (dipy.segment.clustering.clustercentroid method)": [[284, "dipy.segment.clustering.ClusterCentroid.update"]], "upper_bound_by_percent() (in module dipy.segment.threshold)": [[284, "dipy.segment.threshold.upper_bound_by_percent"]], "upper_bound_by_rate() (in module dipy.segment.threshold)": [[284, "dipy.segment.threshold.upper_bound_by_rate"]], "add_noise() (in module dipy.sims.phantom)": [[285, "dipy.sims.phantom.add_noise"]], "add_noise() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.add_noise"]], "all_tensor_evecs() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.all_tensor_evecs"]], "callaghan_perpendicular() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.callaghan_perpendicular"]], "cylinders_and_ball_soderman() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.cylinders_and_ball_soderman"]], "diff2eigenvectors() (in module dipy.sims.phantom)": [[285, "dipy.sims.phantom.diff2eigenvectors"]], "diffusion_evals() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.diffusion_evals"]], "dipy.sims": [[285, "module-dipy.sims"]], "dipy.sims.phantom": [[285, "module-dipy.sims.phantom"]], "dipy.sims.voxel": [[285, "module-dipy.sims.voxel"]], "dki_signal() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.dki_signal"]], "gaussian_parallel() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.gaussian_parallel"]], "kurtosis_element() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.kurtosis_element"]], "multi_tensor() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.multi_tensor"]], "multi_tensor_dki() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.multi_tensor_dki"]], "multi_tensor_msd() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.multi_tensor_msd"]], "multi_tensor_odf() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.multi_tensor_odf"]], "multi_tensor_pdf() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.multi_tensor_pdf"]], "multi_tensor_rtop() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.multi_tensor_rtop"]], "orbital_phantom() (in module dipy.sims.phantom)": [[285, "dipy.sims.phantom.orbital_phantom"]], "single_tensor() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.single_tensor"]], "single_tensor_msd() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.single_tensor_msd"]], "single_tensor_odf() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.single_tensor_odf"]], "single_tensor_pdf() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.single_tensor_pdf"]], "single_tensor_rtop() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.single_tensor_rtop"]], "sticks_and_ball() (in module dipy.sims.voxel)": [[285, "dipy.sims.voxel.sticks_and_ball"]], "afq_profile() (in module dipy.stats.analysis)": [[286, "dipy.stats.analysis.afq_profile"]], "anatomical_measures() (in module dipy.stats.analysis)": [[286, "dipy.stats.analysis.anatomical_measures"]], "assignment_map() (in module dipy.stats.analysis)": [[286, "dipy.stats.analysis.assignment_map"]], "dipy.stats": [[286, "module-dipy.stats"]], "dipy.stats.analysis": [[286, "module-dipy.stats.analysis"]], "gaussian_weights() (in module dipy.stats.analysis)": [[286, "dipy.stats.analysis.gaussian_weights"]], "peak_values() (in module dipy.stats.analysis)": [[286, "dipy.stats.analysis.peak_values"]], "fiberfit (class in dipy.tracking.life)": [[287, "dipy.tracking.life.FiberFit"]], "fibermodel (class in dipy.tracking.life)": [[287, "dipy.tracking.life.FiberModel"]], "lifesignalmaker (class in dipy.tracking.life)": [[287, "dipy.tracking.life.LifeSignalMaker"]], "localtracking (class in dipy.tracking.local_tracking)": [[287, "dipy.tracking.local_tracking.LocalTracking"]], "particlefilteringtracking (class in dipy.tracking.local_tracking)": [[287, "dipy.tracking.local_tracking.ParticleFilteringTracking"]], "__init__() (dipy.tracking.life.fiberfit method)": [[287, "dipy.tracking.life.FiberFit.__init__"]], "__init__() (dipy.tracking.life.fibermodel method)": [[287, "dipy.tracking.life.FiberModel.__init__"]], "__init__() (dipy.tracking.life.lifesignalmaker method)": [[287, "dipy.tracking.life.LifeSignalMaker.__init__"]], "__init__() (dipy.tracking.local_tracking.localtracking method)": [[287, "dipy.tracking.local_tracking.LocalTracking.__init__"]], "__init__() (dipy.tracking.local_tracking.particlefilteringtracking method)": [[287, "dipy.tracking.local_tracking.ParticleFilteringTracking.__init__"]], "arbitrarypoint() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.arbitrarypoint"]], "bench_compress_streamlines() (in module dipy.tracking.benchmarks.bench_streamline)": [[287, "dipy.tracking.benchmarks.bench_streamline.bench_compress_streamlines"]], "bench_length() (in module dipy.tracking.benchmarks.bench_streamline)": [[287, "dipy.tracking.benchmarks.bench_streamline.bench_length"]], "bench_set_number_of_points() (in module dipy.tracking.benchmarks.bench_streamline)": [[287, "dipy.tracking.benchmarks.bench_streamline.bench_set_number_of_points"]], "bytes() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.bytes"]], "calc_signal() (dipy.tracking.life.lifesignalmaker method)": [[287, "dipy.tracking.life.LifeSignalMaker.calc_signal"]], "center_of_mass() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.center_of_mass"]], "center_streamlines() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.center_streamlines"]], "cluster_confidence() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.cluster_confidence"]], "connectivity_matrix() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.connectivity_matrix"]], "deform_streamlines() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.deform_streamlines"]], "density_map() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.density_map"]], "detect_corresponding_tracks() (in module dipy.tracking.learning)": [[287, "dipy.tracking.learning.detect_corresponding_tracks"]], "detect_corresponding_tracks_plus() (in module dipy.tracking.learning)": [[287, "dipy.tracking.learning.detect_corresponding_tracks_plus"]], "dipy.tracking": [[287, "module-dipy.tracking"]], "dipy.tracking._utils": [[287, "module-dipy.tracking._utils"]], "dipy.tracking.benchmarks": [[287, "module-dipy.tracking.benchmarks"]], "dipy.tracking.benchmarks.bench_streamline": [[287, "module-dipy.tracking.benchmarks.bench_streamline"]], "dipy.tracking.learning": [[287, "module-dipy.tracking.learning"]], "dipy.tracking.life": [[287, "module-dipy.tracking.life"]], "dipy.tracking.local_tracking": [[287, "module-dipy.tracking.local_tracking"]], "dipy.tracking.mesh": [[287, "module-dipy.tracking.mesh"]], "dipy.tracking.metrics": [[287, "module-dipy.tracking.metrics"]], "dipy.tracking.streamline": [[287, "module-dipy.tracking.streamline"]], "dipy.tracking.utils": [[287, "module-dipy.tracking.utils"]], "downsample() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.downsample"]], "endpoint() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.endpoint"]], "fit() (dipy.tracking.life.fibermodel method)": [[287, "dipy.tracking.life.FiberModel.fit"]], "frenet_serret() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.frenet_serret"]], "generate_combinations() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.generate_combinations"]], "generate_streamlines() (in module dipy.tracking.benchmarks.bench_streamline)": [[287, "dipy.tracking.benchmarks.bench_streamline.generate_streamlines"]], "grad_tensor() (in module dipy.tracking.life)": [[287, "dipy.tracking.life.grad_tensor"]], "gradient() (in module dipy.tracking.life)": [[287, "dipy.tracking.life.gradient"]], "inside_sphere() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.inside_sphere"]], "inside_sphere_points() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.inside_sphere_points"]], "intersect_sphere() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.intersect_sphere"]], "length() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.length"]], "length() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.length"]], "longest_track_bundle() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.longest_track_bundle"]], "magn() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.magn"]], "max_angle_from_curvature() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.max_angle_from_curvature"]], "mean_curvature() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.mean_curvature"]], "mean_orientation() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.mean_orientation"]], "midpoint() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.midpoint"]], "midpoint2point() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.midpoint2point"]], "min_radius_curvature_from_angle() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.min_radius_curvature_from_angle"]], "nbytes() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.nbytes"]], "ndbincount() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.ndbincount"]], "near_roi() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.near_roi"]], "orient_by_rois() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.orient_by_rois"]], "orient_by_streamline() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.orient_by_streamline"]], "path_length() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.path_length"]], "predict() (dipy.tracking.life.fiberfit method)": [[287, "dipy.tracking.life.FiberFit.predict"]], "principal_components() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.principal_components"]], "random_coordinates_from_surface() (in module dipy.tracking.mesh)": [[287, "dipy.tracking.mesh.random_coordinates_from_surface"]], "random_seeds_from_mask() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.random_seeds_from_mask"]], "reduce_labels() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.reduce_labels"]], "reduce_rois() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.reduce_rois"]], "relist_streamlines() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.relist_streamlines"]], "seeds_from_mask() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.seeds_from_mask"]], "seeds_from_surface_coordinates() (in module dipy.tracking.mesh)": [[287, "dipy.tracking.mesh.seeds_from_surface_coordinates"]], "select_by_rois() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.select_by_rois"]], "select_random_set_of_streamlines() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.select_random_set_of_streamlines"]], "setup() (dipy.tracking.life.fibermodel method)": [[287, "dipy.tracking.life.FiberModel.setup"]], "setup() (in module dipy.tracking.benchmarks.bench_streamline)": [[287, "dipy.tracking.benchmarks.bench_streamline.setup"]], "spline() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.spline"]], "startpoint() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.startpoint"]], "streamline_gradients() (in module dipy.tracking.life)": [[287, "dipy.tracking.life.streamline_gradients"]], "streamline_near_roi() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.streamline_near_roi"]], "streamline_signal() (dipy.tracking.life.lifesignalmaker method)": [[287, "dipy.tracking.life.LifeSignalMaker.streamline_signal"]], "streamline_signal() (in module dipy.tracking.life)": [[287, "dipy.tracking.life.streamline_signal"]], "streamline_tensors() (in module dipy.tracking.life)": [[287, "dipy.tracking.life.streamline_tensors"]], "subsegment() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.subsegment"]], "target() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.target"]], "target_line_based() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.target_line_based"]], "transform_streamlines() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.transform_streamlines"]], "transform_tracking_output() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.transform_tracking_output"]], "triangles_area() (in module dipy.tracking.mesh)": [[287, "dipy.tracking.mesh.triangles_area"]], "unique_rows() (in module dipy.tracking.utils)": [[287, "dipy.tracking.utils.unique_rows"]], "unlist_streamlines() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.unlist_streamlines"]], "values_from_volume() (in module dipy.tracking.streamline)": [[287, "dipy.tracking.streamline.values_from_volume"]], "vertices_to_triangles_values() (in module dipy.tracking.mesh)": [[287, "dipy.tracking.mesh.vertices_to_triangles_values"]], "voxel2streamline() (in module dipy.tracking.life)": [[287, "dipy.tracking.life.voxel2streamline"]], "winding() (in module dipy.tracking.metrics)": [[287, "dipy.tracking.metrics.winding"]], "clusterstab (class in dipy.viz.horizon.tab.cluster)": [[288, "dipy.viz.horizon.tab.cluster.ClustersTab"]], "clustersvisualizer (class in dipy.viz.horizon.visualizer.cluster)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer"]], "globalhorizon (class in dipy.viz.gmem)": [[288, "dipy.viz.gmem.GlobalHorizon"]], "horizon (class in dipy.viz.horizon.app)": [[288, "dipy.viz.horizon.app.Horizon"]], "horizontab (class in dipy.viz.horizon.tab.base)": [[288, "dipy.viz.horizon.tab.base.HorizonTab"]], "peakstab (class in dipy.viz.horizon.tab.peak)": [[288, "dipy.viz.horizon.tab.peak.PeaksTab"]], "roistab (class in dipy.viz.horizon.tab.roi)": [[288, "dipy.viz.horizon.tab.roi.ROIsTab"]], "slicestab (class in dipy.viz.horizon.tab.slice)": [[288, "dipy.viz.horizon.tab.slice.SlicesTab"]], "slicesvisualizer (class in dipy.viz.horizon.visualizer.slice)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer"]], "tabmanager (class in dipy.viz.horizon.tab.base)": [[288, "dipy.viz.horizon.tab.base.TabManager"]], "__init__() (dipy.viz.gmem.globalhorizon method)": [[288, "dipy.viz.gmem.GlobalHorizon.__init__"]], "__init__() (dipy.viz.horizon.app.horizon method)": [[288, "dipy.viz.horizon.app.Horizon.__init__"]], "__init__() (dipy.viz.horizon.tab.base.horizontab method)": [[288, "dipy.viz.horizon.tab.base.HorizonTab.__init__"]], "__init__() (dipy.viz.horizon.tab.base.tabmanager method)": [[288, "dipy.viz.horizon.tab.base.TabManager.__init__"]], "__init__() (dipy.viz.horizon.tab.cluster.clusterstab method)": [[288, "dipy.viz.horizon.tab.cluster.ClustersTab.__init__"]], "__init__() (dipy.viz.horizon.tab.peak.peakstab method)": [[288, "dipy.viz.horizon.tab.peak.PeaksTab.__init__"]], "__init__() (dipy.viz.horizon.tab.roi.roistab method)": [[288, "dipy.viz.horizon.tab.roi.ROIsTab.__init__"]], "__init__() (dipy.viz.horizon.tab.slice.slicestab method)": [[288, "dipy.viz.horizon.tab.slice.SlicesTab.__init__"]], "__init__() (dipy.viz.horizon.visualizer.cluster.clustersvisualizer method)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.__init__"]], "__init__() (dipy.viz.horizon.visualizer.slice.slicesvisualizer method)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.__init__"]], "add_cluster_actors() (dipy.viz.horizon.visualizer.cluster.clustersvisualizer method)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.add_cluster_actors"]], "build() (dipy.viz.horizon.tab.base.horizontab method)": [[288, "dipy.viz.horizon.tab.base.HorizonTab.build"]], "build() (dipy.viz.horizon.tab.cluster.clusterstab method)": [[288, "dipy.viz.horizon.tab.cluster.ClustersTab.build"]], "build() (dipy.viz.horizon.tab.peak.peakstab method)": [[288, "dipy.viz.horizon.tab.peak.PeaksTab.build"]], "build() (dipy.viz.horizon.tab.roi.roistab method)": [[288, "dipy.viz.horizon.tab.roi.ROIsTab.build"]], "build() (dipy.viz.horizon.tab.slice.slicestab method)": [[288, "dipy.viz.horizon.tab.slice.SlicesTab.build"]], "build_label() (in module dipy.viz.horizon.tab.base)": [[288, "dipy.viz.horizon.tab.base.build_label"]], "build_label() (in module dipy.viz.panel)": [[288, "dipy.viz.panel.build_label"]], "build_scene() (dipy.viz.horizon.app.horizon method)": [[288, "dipy.viz.horizon.app.Horizon.build_scene"]], "build_show() (dipy.viz.horizon.app.horizon method)": [[288, "dipy.viz.horizon.app.Horizon.build_show"]], "bundle_shape_profile() (in module dipy.viz.plotting)": [[288, "dipy.viz.plotting.bundle_shape_profile"]], "centroid_actors (dipy.viz.horizon.visualizer.cluster.clustersvisualizer property)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.centroid_actors"]], "change_volume() (dipy.viz.horizon.visualizer.slice.slicesvisualizer method)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.change_volume"]], "cluster_actors (dipy.viz.horizon.visualizer.cluster.clustersvisualizer property)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.cluster_actors"]], "color_double_slider() (in module dipy.viz.horizon.tab.base)": [[288, "dipy.viz.horizon.tab.base.color_double_slider"]], "color_single_slider() (in module dipy.viz.horizon.tab.base)": [[288, "dipy.viz.horizon.tab.base.color_single_slider"]], "compare_maps() (in module dipy.viz.plotting)": [[288, "dipy.viz.plotting.compare_maps"]], "compare_qti_maps() (in module dipy.viz.plotting)": [[288, "dipy.viz.plotting.compare_qti_maps"]], "data_shape (dipy.viz.horizon.visualizer.slice.slicesvisualizer property)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.data_shape"]], "dipy.viz": [[288, "module-dipy.viz"]], "dipy.viz.gmem": [[288, "module-dipy.viz.gmem"]], "dipy.viz.horizon": [[288, "module-dipy.viz.horizon"]], "dipy.viz.horizon.app": [[288, "module-dipy.viz.horizon.app"]], "dipy.viz.horizon.tab": [[288, "module-dipy.viz.horizon.tab"]], "dipy.viz.horizon.tab.base": [[288, "module-dipy.viz.horizon.tab.base"]], "dipy.viz.horizon.tab.cluster": [[288, "module-dipy.viz.horizon.tab.cluster"]], "dipy.viz.horizon.tab.peak": [[288, "module-dipy.viz.horizon.tab.peak"]], "dipy.viz.horizon.tab.roi": [[288, "module-dipy.viz.horizon.tab.roi"]], "dipy.viz.horizon.tab.slice": [[288, "module-dipy.viz.horizon.tab.slice"]], "dipy.viz.horizon.visualizer": [[288, "module-dipy.viz.horizon.visualizer"]], "dipy.viz.horizon.visualizer.cluster": [[288, "module-dipy.viz.horizon.visualizer.cluster"]], "dipy.viz.horizon.visualizer.slice": [[288, "module-dipy.viz.horizon.visualizer.slice"]], "dipy.viz.panel": [[288, "module-dipy.viz.panel"]], "dipy.viz.plotting": [[288, "module-dipy.viz.plotting"]], "dipy.viz.projections": [[288, "module-dipy.viz.projections"]], "dipy.viz.regtools": [[288, "module-dipy.viz.regtools"]], "dipy.viz.streamline": [[288, "module-dipy.viz.streamline"]], "draw_lattice_2d() (in module dipy.viz.regtools)": [[288, "dipy.viz.regtools.draw_lattice_2d"]], "horizon() (in module dipy.viz.horizon.app)": [[288, "dipy.viz.horizon.app.horizon"]], "intensities_range (dipy.viz.horizon.visualizer.slice.slicesvisualizer property)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.intensities_range"]], "lengths (dipy.viz.horizon.visualizer.cluster.clustersvisualizer property)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.lengths"]], "name (dipy.viz.horizon.tab.base.horizontab property)": [[288, "dipy.viz.horizon.tab.base.HorizonTab.name"]], "name (dipy.viz.horizon.tab.cluster.clusterstab property)": [[288, "dipy.viz.horizon.tab.cluster.ClustersTab.name"]], "name (dipy.viz.horizon.tab.peak.peakstab property)": [[288, "dipy.viz.horizon.tab.peak.PeaksTab.name"]], "name (dipy.viz.horizon.tab.roi.roistab property)": [[288, "dipy.viz.horizon.tab.roi.ROIsTab.name"]], "name (dipy.viz.horizon.tab.slice.slicestab property)": [[288, "dipy.viz.horizon.tab.slice.SlicesTab.name"]], "overlay_images() (in module dipy.viz.regtools)": [[288, "dipy.viz.regtools.overlay_images"]], "overlay_slices() (in module dipy.viz.regtools)": [[288, "dipy.viz.regtools.overlay_slices"]], "plot_2d_diffeomorphic_map() (in module dipy.viz.regtools)": [[288, "dipy.viz.regtools.plot_2d_diffeomorphic_map"]], "plot_slices() (in module dipy.viz.regtools)": [[288, "dipy.viz.regtools.plot_slices"]], "recluster_tractograms() (dipy.viz.horizon.visualizer.cluster.clustersvisualizer method)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.recluster_tractograms"]], "register_picker_callback() (dipy.viz.horizon.visualizer.slice.slicesvisualizer method)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.register_picker_callback"]], "reposition() (dipy.viz.horizon.tab.base.tabmanager method)": [[288, "dipy.viz.horizon.tab.base.TabManager.reposition"]], "selected_slices (dipy.viz.horizon.visualizer.slice.slicesvisualizer property)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.selected_slices"]], "show_bundles() (in module dipy.viz.streamline)": [[288, "dipy.viz.streamline.show_bundles"]], "simple_plot() (in module dipy.viz.regtools)": [[288, "dipy.viz.regtools.simple_plot"]], "sizes (dipy.viz.horizon.visualizer.cluster.clustersvisualizer property)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.sizes"]], "slice_actors (dipy.viz.horizon.visualizer.slice.slicesvisualizer property)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.slice_actors"]], "slicer_panel() (in module dipy.viz.panel)": [[288, "dipy.viz.panel.slicer_panel"]], "sph_project() (in module dipy.viz.projections)": [[288, "dipy.viz.projections.sph_project"]], "tab_ui (dipy.viz.horizon.tab.base.tabmanager property)": [[288, "dipy.viz.horizon.tab.base.TabManager.tab_ui"]], "tractogram_clusters (dipy.viz.horizon.visualizer.cluster.clustersvisualizer property)": [[288, "dipy.viz.horizon.visualizer.cluster.ClustersVisualizer.tractogram_clusters"]], "viz_displacement_mag() (in module dipy.viz.streamline)": [[288, "dipy.viz.streamline.viz_displacement_mag"]], "viz_two_bundles() (in module dipy.viz.streamline)": [[288, "dipy.viz.streamline.viz_two_bundles"]], "viz_vector_field() (in module dipy.viz.streamline)": [[288, "dipy.viz.streamline.viz_vector_field"]], "volume_max (dipy.viz.horizon.visualizer.slice.slicesvisualizer property)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.volume_max"]], "volume_min (dipy.viz.horizon.visualizer.slice.slicesvisualizer property)": [[288, "dipy.viz.horizon.visualizer.slice.SlicesVisualizer.volume_min"]], "applytransformflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.ApplyTransformFlow"]], "bundleanalysistractometryflow (class in dipy.workflows.stats)": [[289, "dipy.workflows.stats.BundleAnalysisTractometryFlow"]], "bundleshapeanalysis (class in dipy.workflows.stats)": [[289, "dipy.workflows.stats.BundleShapeAnalysis"]], "bundlewarpflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.BundleWarpFlow"]], "combinedworkflow (class in dipy.workflows.combined_workflow)": [[289, "dipy.workflows.combined_workflow.CombinedWorkflow"]], "evacplusflow (class in dipy.workflows.nn)": [[289, "dipy.workflows.nn.EVACPlusFlow"]], "fetchflow (class in dipy.workflows.io)": [[289, "dipy.workflows.io.FetchFlow"]], "gibbsringingflow (class in dipy.workflows.denoise)": [[289, "dipy.workflows.denoise.GibbsRingingFlow"]], "horizonflow (class in dipy.workflows.viz)": [[289, "dipy.workflows.viz.HorizonFlow"]], "ioiterator (class in dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.IOIterator"]], "imageregistrationflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.ImageRegistrationFlow"]], "introspectiveargumentparser (class in dipy.workflows.base)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser"]], "ioinfoflow (class in dipy.workflows.io)": [[289, "dipy.workflows.io.IoInfoFlow"]], "lpcaflow (class in dipy.workflows.denoise)": [[289, "dipy.workflows.denoise.LPCAFlow"]], "labelsbundlesflow (class in dipy.workflows.segment)": [[289, "dipy.workflows.segment.LabelsBundlesFlow"]], "linearmixedmodelsflow (class in dipy.workflows.stats)": [[289, "dipy.workflows.stats.LinearMixedModelsFlow"]], "localfibertrackingpamflow (class in dipy.workflows.tracking)": [[289, "dipy.workflows.tracking.LocalFiberTrackingPAMFlow"]], "mppcaflow (class in dipy.workflows.denoise)": [[289, "dipy.workflows.denoise.MPPCAFlow"]], "maskflow (class in dipy.workflows.mask)": [[289, "dipy.workflows.mask.MaskFlow"]], "medianotsuflow (class in dipy.workflows.segment)": [[289, "dipy.workflows.segment.MedianOtsuFlow"]], "motioncorrectionflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.MotionCorrectionFlow"]], "nlmeansflow (class in dipy.workflows.denoise)": [[289, "dipy.workflows.denoise.NLMeansFlow"]], "numpydocstring (class in dipy.workflows.docstring_parser)": [[289, "dipy.workflows.docstring_parser.NumpyDocString"]], "pftrackingpamflow (class in dipy.workflows.tracking)": [[289, "dipy.workflows.tracking.PFTrackingPAMFlow"]], "patch2selfflow (class in dipy.workflows.denoise)": [[289, "dipy.workflows.denoise.Patch2SelfFlow"]], "reader (class in dipy.workflows.docstring_parser)": [[289, "dipy.workflows.docstring_parser.Reader"]], "recobundlesflow (class in dipy.workflows.segment)": [[289, "dipy.workflows.segment.RecoBundlesFlow"]], "reconstcsaflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstCSAFlow"]], "reconstcsdflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstCSDFlow"]], "reconstdkiflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstDkiFlow"]], "reconstdtiflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstDtiFlow"]], "reconstivimflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstIvimFlow"]], "reconstmapmriflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstMAPMRIFlow"]], "reconstrumbaflow (class in dipy.workflows.reconst)": [[289, "dipy.workflows.reconst.ReconstRUMBAFlow"]], "resliceflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.ResliceFlow"]], "snrinccflow (class in dipy.workflows.stats)": [[289, "dipy.workflows.stats.SNRinCCFlow"]], "slrwithqbxflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.SlrWithQbxFlow"]], "splitflow (class in dipy.workflows.io)": [[289, "dipy.workflows.io.SplitFlow"]], "synregistrationflow (class in dipy.workflows.align)": [[289, "dipy.workflows.align.SynRegistrationFlow"]], "workflow (class in dipy.workflows.workflow)": [[289, "dipy.workflows.workflow.Workflow"]], "__init__() (dipy.workflows.align.applytransformflow method)": [[289, "dipy.workflows.align.ApplyTransformFlow.__init__"]], "__init__() (dipy.workflows.align.bundlewarpflow method)": [[289, "dipy.workflows.align.BundleWarpFlow.__init__"]], "__init__() (dipy.workflows.align.imageregistrationflow method)": [[289, "dipy.workflows.align.ImageRegistrationFlow.__init__"]], "__init__() (dipy.workflows.align.motioncorrectionflow method)": [[289, "dipy.workflows.align.MotionCorrectionFlow.__init__"]], "__init__() (dipy.workflows.align.resliceflow method)": [[289, "dipy.workflows.align.ResliceFlow.__init__"]], "__init__() (dipy.workflows.align.slrwithqbxflow method)": [[289, "dipy.workflows.align.SlrWithQbxFlow.__init__"]], "__init__() (dipy.workflows.align.synregistrationflow method)": [[289, "dipy.workflows.align.SynRegistrationFlow.__init__"]], "__init__() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.__init__"]], "__init__() (dipy.workflows.combined_workflow.combinedworkflow method)": [[289, "dipy.workflows.combined_workflow.CombinedWorkflow.__init__"]], "__init__() (dipy.workflows.denoise.gibbsringingflow method)": [[289, "dipy.workflows.denoise.GibbsRingingFlow.__init__"]], "__init__() (dipy.workflows.denoise.lpcaflow method)": [[289, "dipy.workflows.denoise.LPCAFlow.__init__"]], "__init__() (dipy.workflows.denoise.mppcaflow method)": [[289, "dipy.workflows.denoise.MPPCAFlow.__init__"]], "__init__() (dipy.workflows.denoise.nlmeansflow method)": [[289, "dipy.workflows.denoise.NLMeansFlow.__init__"]], "__init__() (dipy.workflows.denoise.patch2selfflow method)": [[289, "dipy.workflows.denoise.Patch2SelfFlow.__init__"]], "__init__() (dipy.workflows.docstring_parser.numpydocstring method)": [[289, "dipy.workflows.docstring_parser.NumpyDocString.__init__"]], "__init__() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.__init__"]], "__init__() (dipy.workflows.io.fetchflow method)": [[289, "dipy.workflows.io.FetchFlow.__init__"]], "__init__() (dipy.workflows.io.ioinfoflow method)": [[289, "dipy.workflows.io.IoInfoFlow.__init__"]], "__init__() (dipy.workflows.io.splitflow method)": [[289, "dipy.workflows.io.SplitFlow.__init__"]], "__init__() (dipy.workflows.mask.maskflow method)": [[289, "dipy.workflows.mask.MaskFlow.__init__"]], "__init__() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.__init__"]], "__init__() (dipy.workflows.nn.evacplusflow method)": [[289, "dipy.workflows.nn.EVACPlusFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstcsaflow method)": [[289, "dipy.workflows.reconst.ReconstCSAFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstcsdflow method)": [[289, "dipy.workflows.reconst.ReconstCSDFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstdkiflow method)": [[289, "dipy.workflows.reconst.ReconstDkiFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstdtiflow method)": [[289, "dipy.workflows.reconst.ReconstDtiFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstivimflow method)": [[289, "dipy.workflows.reconst.ReconstIvimFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstmapmriflow method)": [[289, "dipy.workflows.reconst.ReconstMAPMRIFlow.__init__"]], "__init__() (dipy.workflows.reconst.reconstrumbaflow method)": [[289, "dipy.workflows.reconst.ReconstRUMBAFlow.__init__"]], "__init__() (dipy.workflows.segment.labelsbundlesflow method)": [[289, "dipy.workflows.segment.LabelsBundlesFlow.__init__"]], "__init__() (dipy.workflows.segment.medianotsuflow method)": [[289, "dipy.workflows.segment.MedianOtsuFlow.__init__"]], "__init__() (dipy.workflows.segment.recobundlesflow method)": [[289, "dipy.workflows.segment.RecoBundlesFlow.__init__"]], "__init__() (dipy.workflows.stats.bundleanalysistractometryflow method)": [[289, "dipy.workflows.stats.BundleAnalysisTractometryFlow.__init__"]], "__init__() (dipy.workflows.stats.bundleshapeanalysis method)": [[289, "dipy.workflows.stats.BundleShapeAnalysis.__init__"]], "__init__() (dipy.workflows.stats.linearmixedmodelsflow method)": [[289, "dipy.workflows.stats.LinearMixedModelsFlow.__init__"]], "__init__() (dipy.workflows.stats.snrinccflow method)": [[289, "dipy.workflows.stats.SNRinCCFlow.__init__"]], "__init__() (dipy.workflows.tracking.localfibertrackingpamflow method)": [[289, "dipy.workflows.tracking.LocalFiberTrackingPAMFlow.__init__"]], "__init__() (dipy.workflows.tracking.pftrackingpamflow method)": [[289, "dipy.workflows.tracking.PFTrackingPAMFlow.__init__"]], "__init__() (dipy.workflows.viz.horizonflow method)": [[289, "dipy.workflows.viz.HorizonFlow.__init__"]], "__init__() (dipy.workflows.workflow.workflow method)": [[289, "dipy.workflows.workflow.Workflow.__init__"]], "add_description() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.add_description"]], "add_epilogue() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue"]], "add_sub_flow_args() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args"]], "add_workflow() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.add_workflow"]], "basename_without_extension() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.basename_without_extension"]], "buan_bundle_profiles() (in module dipy.workflows.stats)": [[289, "dipy.workflows.stats.buan_bundle_profiles"]], "check_dimensions() (in module dipy.workflows.align)": [[289, "dipy.workflows.align.check_dimensions"]], "common_start() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.common_start"]], "concatenate_inputs() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.concatenate_inputs"]], "connect_output_paths() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.connect_output_paths"]], "create_directories() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.create_directories"]], "create_outputs() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.create_outputs"]], "dedent_lines() (in module dipy.workflows.docstring_parser)": [[289, "dipy.workflows.docstring_parser.dedent_lines"]], "dipy.workflows": [[289, "module-dipy.workflows"]], "dipy.workflows.align": [[289, "module-dipy.workflows.align"]], "dipy.workflows.base": [[289, "module-dipy.workflows.base"]], "dipy.workflows.combined_workflow": [[289, "module-dipy.workflows.combined_workflow"]], "dipy.workflows.denoise": [[289, "module-dipy.workflows.denoise"]], "dipy.workflows.docstring_parser": [[289, "module-dipy.workflows.docstring_parser"]], "dipy.workflows.flow_runner": [[289, "module-dipy.workflows.flow_runner"]], "dipy.workflows.io": [[289, "module-dipy.workflows.io"]], "dipy.workflows.mask": [[289, "module-dipy.workflows.mask"]], "dipy.workflows.multi_io": [[289, "module-dipy.workflows.multi_io"]], "dipy.workflows.nn": [[289, "module-dipy.workflows.nn"]], "dipy.workflows.reconst": [[289, "module-dipy.workflows.reconst"]], "dipy.workflows.segment": [[289, "module-dipy.workflows.segment"]], "dipy.workflows.stats": [[289, "module-dipy.workflows.stats"]], "dipy.workflows.tracking": [[289, "module-dipy.workflows.tracking"]], "dipy.workflows.viz": [[289, "module-dipy.workflows.viz"]], "dipy.workflows.workflow": [[289, "module-dipy.workflows.workflow"]], "eof() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.eof"]], "file_existence_check() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.file_existence_check"]], "get_args_default() (in module dipy.workflows.base)": [[289, "dipy.workflows.base.get_args_default"]], "get_fetcher_datanames() (dipy.workflows.io.fetchflow static method)": [[289, "dipy.workflows.io.FetchFlow.get_fetcher_datanames"]], "get_fitted_ivim() (dipy.workflows.reconst.reconstivimflow method)": [[289, "dipy.workflows.reconst.ReconstIvimFlow.get_fitted_ivim"]], "get_fitted_tensor() (dipy.workflows.reconst.reconstdkiflow method)": [[289, "dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor"]], "get_fitted_tensor() (dipy.workflows.reconst.reconstdtiflow method)": [[289, "dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor"]], "get_flow_args() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args"]], "get_io_iterator() (dipy.workflows.workflow.workflow method)": [[289, "dipy.workflows.workflow.Workflow.get_io_iterator"]], "get_level() (in module dipy.workflows.flow_runner)": [[289, "dipy.workflows.flow_runner.get_level"]], "get_metric_name() (dipy.workflows.stats.linearmixedmodelsflow method)": [[289, "dipy.workflows.stats.LinearMixedModelsFlow.get_metric_name"]], "get_optionals() (dipy.workflows.combined_workflow.combinedworkflow method)": [[289, "dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals"]], "get_short_name() (dipy.workflows.align.bundlewarpflow class method)": [[289, "dipy.workflows.align.BundleWarpFlow.get_short_name"]], "get_short_name() (dipy.workflows.align.resliceflow class method)": [[289, "dipy.workflows.align.ResliceFlow.get_short_name"]], "get_short_name() (dipy.workflows.align.slrwithqbxflow class method)": [[289, "dipy.workflows.align.SlrWithQbxFlow.get_short_name"]], "get_short_name() (dipy.workflows.denoise.gibbsringingflow class method)": [[289, "dipy.workflows.denoise.GibbsRingingFlow.get_short_name"]], "get_short_name() (dipy.workflows.denoise.lpcaflow class method)": [[289, "dipy.workflows.denoise.LPCAFlow.get_short_name"]], "get_short_name() (dipy.workflows.denoise.mppcaflow class method)": [[289, "dipy.workflows.denoise.MPPCAFlow.get_short_name"]], "get_short_name() (dipy.workflows.denoise.nlmeansflow class method)": [[289, "dipy.workflows.denoise.NLMeansFlow.get_short_name"]], "get_short_name() (dipy.workflows.denoise.patch2selfflow class method)": [[289, "dipy.workflows.denoise.Patch2SelfFlow.get_short_name"]], "get_short_name() (dipy.workflows.io.fetchflow class method)": [[289, "dipy.workflows.io.FetchFlow.get_short_name"]], "get_short_name() (dipy.workflows.io.ioinfoflow class method)": [[289, "dipy.workflows.io.IoInfoFlow.get_short_name"]], "get_short_name() (dipy.workflows.io.splitflow class method)": [[289, "dipy.workflows.io.SplitFlow.get_short_name"]], "get_short_name() (dipy.workflows.mask.maskflow class method)": [[289, "dipy.workflows.mask.MaskFlow.get_short_name"]], "get_short_name() (dipy.workflows.nn.evacplusflow class method)": [[289, "dipy.workflows.nn.EVACPlusFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstcsaflow class method)": [[289, "dipy.workflows.reconst.ReconstCSAFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstcsdflow class method)": [[289, "dipy.workflows.reconst.ReconstCSDFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstdkiflow class method)": [[289, "dipy.workflows.reconst.ReconstDkiFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstdtiflow class method)": [[289, "dipy.workflows.reconst.ReconstDtiFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstivimflow class method)": [[289, "dipy.workflows.reconst.ReconstIvimFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstmapmriflow class method)": [[289, "dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name"]], "get_short_name() (dipy.workflows.reconst.reconstrumbaflow class method)": [[289, "dipy.workflows.reconst.ReconstRUMBAFlow.get_short_name"]], "get_short_name() (dipy.workflows.segment.labelsbundlesflow class method)": [[289, "dipy.workflows.segment.LabelsBundlesFlow.get_short_name"]], "get_short_name() (dipy.workflows.segment.medianotsuflow class method)": [[289, "dipy.workflows.segment.MedianOtsuFlow.get_short_name"]], "get_short_name() (dipy.workflows.segment.recobundlesflow class method)": [[289, "dipy.workflows.segment.RecoBundlesFlow.get_short_name"]], "get_short_name() (dipy.workflows.stats.bundleanalysistractometryflow class method)": [[289, "dipy.workflows.stats.BundleAnalysisTractometryFlow.get_short_name"]], "get_short_name() (dipy.workflows.stats.bundleshapeanalysis class method)": [[289, "dipy.workflows.stats.BundleShapeAnalysis.get_short_name"]], "get_short_name() (dipy.workflows.stats.linearmixedmodelsflow class method)": [[289, "dipy.workflows.stats.LinearMixedModelsFlow.get_short_name"]], "get_short_name() (dipy.workflows.stats.snrinccflow class method)": [[289, "dipy.workflows.stats.SNRinCCFlow.get_short_name"]], "get_short_name() (dipy.workflows.tracking.localfibertrackingpamflow class method)": [[289, "dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name"]], "get_short_name() (dipy.workflows.tracking.pftrackingpamflow class method)": [[289, "dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name"]], "get_short_name() (dipy.workflows.viz.horizonflow class method)": [[289, "dipy.workflows.viz.HorizonFlow.get_short_name"]], "get_short_name() (dipy.workflows.workflow.workflow class method)": [[289, "dipy.workflows.workflow.Workflow.get_short_name"]], "get_sub_runs() (dipy.workflows.combined_workflow.combinedworkflow method)": [[289, "dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs"]], "get_sub_runs() (dipy.workflows.workflow.workflow method)": [[289, "dipy.workflows.workflow.Workflow.get_sub_runs"]], "io_iterator() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.io_iterator"]], "io_iterator_() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.io_iterator_"]], "is_empty() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.is_empty"]], "load_module() (dipy.workflows.io.fetchflow static method)": [[289, "dipy.workflows.io.FetchFlow.load_module"]], "manage_output_overwrite() (dipy.workflows.workflow.workflow method)": [[289, "dipy.workflows.workflow.Workflow.manage_output_overwrite"]], "none_or_dtype() (in module dipy.workflows.base)": [[289, "dipy.workflows.base.none_or_dtype"]], "optional_parameters (dipy.workflows.base.introspectiveargumentparser property)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters"]], "output_parameters (dipy.workflows.base.introspectiveargumentparser property)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.output_parameters"]], "peek() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.peek"]], "positional_parameters (dipy.workflows.base.introspectiveargumentparser property)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters"]], "read() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.read"]], "read_to_condition() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.read_to_condition"]], "read_to_next_empty_line() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.read_to_next_empty_line"]], "read_to_next_unindented_line() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line"]], "reset() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.reset"]], "run() (dipy.workflows.align.applytransformflow method)": [[289, "dipy.workflows.align.ApplyTransformFlow.run"]], "run() (dipy.workflows.align.bundlewarpflow method)": [[289, "dipy.workflows.align.BundleWarpFlow.run"]], "run() (dipy.workflows.align.imageregistrationflow method)": [[289, "dipy.workflows.align.ImageRegistrationFlow.run"]], "run() (dipy.workflows.align.motioncorrectionflow method)": [[289, "dipy.workflows.align.MotionCorrectionFlow.run"]], "run() (dipy.workflows.align.resliceflow method)": [[289, "dipy.workflows.align.ResliceFlow.run"]], "run() (dipy.workflows.align.slrwithqbxflow method)": [[289, "dipy.workflows.align.SlrWithQbxFlow.run"]], "run() (dipy.workflows.align.synregistrationflow method)": [[289, "dipy.workflows.align.SynRegistrationFlow.run"]], "run() (dipy.workflows.denoise.gibbsringingflow method)": [[289, "dipy.workflows.denoise.GibbsRingingFlow.run"]], "run() (dipy.workflows.denoise.lpcaflow method)": [[289, "dipy.workflows.denoise.LPCAFlow.run"]], "run() (dipy.workflows.denoise.mppcaflow method)": [[289, "dipy.workflows.denoise.MPPCAFlow.run"]], "run() (dipy.workflows.denoise.nlmeansflow method)": [[289, "dipy.workflows.denoise.NLMeansFlow.run"]], "run() (dipy.workflows.denoise.patch2selfflow method)": [[289, "dipy.workflows.denoise.Patch2SelfFlow.run"]], "run() (dipy.workflows.io.fetchflow method)": [[289, "dipy.workflows.io.FetchFlow.run"]], "run() (dipy.workflows.io.ioinfoflow method)": [[289, "dipy.workflows.io.IoInfoFlow.run"]], "run() (dipy.workflows.io.splitflow method)": [[289, "dipy.workflows.io.SplitFlow.run"]], "run() (dipy.workflows.mask.maskflow method)": [[289, "dipy.workflows.mask.MaskFlow.run"]], "run() (dipy.workflows.nn.evacplusflow method)": [[289, "dipy.workflows.nn.EVACPlusFlow.run"]], "run() (dipy.workflows.reconst.reconstcsaflow method)": [[289, "dipy.workflows.reconst.ReconstCSAFlow.run"]], "run() (dipy.workflows.reconst.reconstcsdflow method)": [[289, "dipy.workflows.reconst.ReconstCSDFlow.run"]], "run() (dipy.workflows.reconst.reconstdkiflow method)": [[289, "dipy.workflows.reconst.ReconstDkiFlow.run"]], "run() (dipy.workflows.reconst.reconstdtiflow method)": [[289, "dipy.workflows.reconst.ReconstDtiFlow.run"]], "run() (dipy.workflows.reconst.reconstivimflow method)": [[289, "dipy.workflows.reconst.ReconstIvimFlow.run"]], "run() (dipy.workflows.reconst.reconstmapmriflow method)": [[289, "dipy.workflows.reconst.ReconstMAPMRIFlow.run"]], "run() (dipy.workflows.reconst.reconstrumbaflow method)": [[289, "dipy.workflows.reconst.ReconstRUMBAFlow.run"]], "run() (dipy.workflows.segment.labelsbundlesflow method)": [[289, "dipy.workflows.segment.LabelsBundlesFlow.run"]], "run() (dipy.workflows.segment.medianotsuflow method)": [[289, "dipy.workflows.segment.MedianOtsuFlow.run"]], "run() (dipy.workflows.segment.recobundlesflow method)": [[289, "dipy.workflows.segment.RecoBundlesFlow.run"]], "run() (dipy.workflows.stats.bundleanalysistractometryflow method)": [[289, "dipy.workflows.stats.BundleAnalysisTractometryFlow.run"]], "run() (dipy.workflows.stats.bundleshapeanalysis method)": [[289, "dipy.workflows.stats.BundleShapeAnalysis.run"]], "run() (dipy.workflows.stats.linearmixedmodelsflow method)": [[289, "dipy.workflows.stats.LinearMixedModelsFlow.run"]], "run() (dipy.workflows.stats.snrinccflow method)": [[289, "dipy.workflows.stats.SNRinCCFlow.run"]], "run() (dipy.workflows.tracking.localfibertrackingpamflow method)": [[289, "dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run"]], "run() (dipy.workflows.tracking.pftrackingpamflow method)": [[289, "dipy.workflows.tracking.PFTrackingPAMFlow.run"]], "run() (dipy.workflows.viz.horizonflow method)": [[289, "dipy.workflows.viz.HorizonFlow.run"]], "run() (dipy.workflows.workflow.workflow method)": [[289, "dipy.workflows.workflow.Workflow.run"]], "run_flow() (in module dipy.workflows.flow_runner)": [[289, "dipy.workflows.flow_runner.run_flow"]], "run_sub_flow() (dipy.workflows.combined_workflow.combinedworkflow method)": [[289, "dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow"]], "save_lmm_plot() (dipy.workflows.stats.linearmixedmodelsflow method)": [[289, "dipy.workflows.stats.LinearMixedModelsFlow.save_lmm_plot"]], "seek_next_non_empty_line() (dipy.workflows.docstring_parser.reader method)": [[289, "dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line"]], "set_inputs() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.set_inputs"]], "set_out_dir() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.set_out_dir"]], "set_out_fnames() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.set_out_fnames"]], "set_output_keys() (dipy.workflows.multi_io.ioiterator method)": [[289, "dipy.workflows.multi_io.IOIterator.set_output_keys"]], "set_sub_flows_optionals() (dipy.workflows.combined_workflow.combinedworkflow method)": [[289, "dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals"]], "show_argument() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.show_argument"]], "slash_to_under() (in module dipy.workflows.multi_io)": [[289, "dipy.workflows.multi_io.slash_to_under"]], "update_argument() (dipy.workflows.base.introspectiveargumentparser method)": [[289, "dipy.workflows.base.IntrospectiveArgumentParser.update_argument"]]}})